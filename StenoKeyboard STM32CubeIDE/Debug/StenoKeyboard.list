
StenoKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000831c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080084b4  080084b4  000094b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008688  08008688  0000a160  2**0
                  CONTENTS
  4 .ARM          00000008  08008688  08008688  00009688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008690  08008690  0000a160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008690  08008690  00009690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008694  08008694  00009694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  08008698  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ad8  20000160  080087f8  0000a160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c38  080087f8  0000ac38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120a2  00000000  00000000  0000a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003007  00000000  00000000  0001c232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001f240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbf  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cbe  00000000  00000000  00020fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014897  00000000  00000000  00039c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902d1  00000000  00000000  0004e514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de7e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004934  00000000  00000000  000de828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000e315c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000160 	.word	0x20000160
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800849c 	.word	0x0800849c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000164 	.word	0x20000164
 80001d4:	0800849c 	.word	0x0800849c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <Scan_KeyMatrix.3>:
  char result[22] = {};
  int activeTimeLimit = TIME_LIMIT;
  int activeTimer = 0;


  uint8_t Scan_KeyMatrix(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	f8c7 c004 	str.w	ip, [r7, #4]
        uint8_t key = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	73fb      	strb	r3, [r7, #15]

  		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2110      	movs	r1, #16
 80004fe:	48cf      	ldr	r0, [pc, #828]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000500:	f002 f8f6 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2120      	movs	r1, #32
 8000508:	48cc      	ldr	r0, [pc, #816]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800050a:	f002 f8f1 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2140      	movs	r1, #64	@ 0x40
 8000512:	48ca      	ldr	r0, [pc, #808]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000514:	f002 f8ec 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2180      	movs	r1, #128	@ 0x80
 800051c:	48c7      	ldr	r0, [pc, #796]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800051e:	f002 f8e7 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	48c6      	ldr	r0, [pc, #792]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000528:	f002 f8e2 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	48c3      	ldr	r0, [pc, #780]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000532:	f002 f8dd 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2104      	movs	r1, #4
 800053a:	48c1      	ldr	r0, [pc, #772]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800053c:	f002 f8d8 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000546:	48be      	ldr	r0, [pc, #760]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000548:	f002 f8d2 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000552:	48bb      	ldr	r0, [pc, #748]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000554:	f002 f8cc 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055e:	48b8      	ldr	r0, [pc, #736]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000560:	f002 f8c6 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800056a:	48b5      	ldr	r0, [pc, #724]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800056c:	f002 f8c0 	bl	80026f0 <HAL_GPIO_WritePin>


        if (HAL_GPIO_ReadPin(Row1_GPIO_Port, Row1_Pin) == 1) {
 8000570:	2101      	movs	r1, #1
 8000572:	48b2      	ldr	r0, [pc, #712]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000574:	f002 f8a4 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b01      	cmp	r3, #1
 800057c:	d101      	bne.n	8000582 <Scan_KeyMatrix.3+0x96>
            key = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000582:	2102      	movs	r1, #2
 8000584:	48ad      	ldr	r0, [pc, #692]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000586:	f002 f89b 	bl	80026c0 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d101      	bne.n	8000594 <Scan_KeyMatrix.3+0xa8>
            key = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000594:	2104      	movs	r1, #4
 8000596:	48a9      	ldr	r0, [pc, #676]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000598:	f002 f892 	bl	80026c0 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d101      	bne.n	80005a6 <Scan_KeyMatrix.3+0xba>
			key = 24;
 80005a2:	2318      	movs	r3, #24
 80005a4:	73fb      	strb	r3, [r7, #15]
        }

  		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2110      	movs	r1, #16
 80005aa:	48a4      	ldr	r0, [pc, #656]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005ac:	f002 f8a0 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2120      	movs	r1, #32
 80005b4:	48a1      	ldr	r0, [pc, #644]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005b6:	f002 f89b 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	489f      	ldr	r0, [pc, #636]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005c0:	f002 f896 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2180      	movs	r1, #128	@ 0x80
 80005c8:	489c      	ldr	r0, [pc, #624]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005ca:	f002 f891 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	489b      	ldr	r0, [pc, #620]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005d4:	f002 f88c 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	4898      	ldr	r0, [pc, #608]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005de:	f002 f887 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2104      	movs	r1, #4
 80005e6:	4896      	ldr	r0, [pc, #600]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005e8:	f002 f882 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f2:	4893      	ldr	r0, [pc, #588]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005f4:	f002 f87c 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fe:	4890      	ldr	r0, [pc, #576]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000600:	f002 f876 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060a:	488d      	ldr	r0, [pc, #564]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800060c:	f002 f870 	bl	80026f0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000616:	488a      	ldr	r0, [pc, #552]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000618:	f002 f86a 	bl	80026f0 <HAL_GPIO_WritePin>


        if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 800061c:	2102      	movs	r1, #2
 800061e:	4887      	ldr	r0, [pc, #540]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000620:	f002 f84e 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d101      	bne.n	800062e <Scan_KeyMatrix.3+0x142>
            key = 3;
 800062a:	2303      	movs	r3, #3
 800062c:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 800062e:	2104      	movs	r1, #4
 8000630:	4882      	ldr	r0, [pc, #520]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000632:	f002 f845 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d101      	bne.n	8000640 <Scan_KeyMatrix.3+0x154>
			key = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	73fb      	strb	r3, [r7, #15]
        }

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	487d      	ldr	r0, [pc, #500]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000646:	f002 f853 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	487b      	ldr	r0, [pc, #492]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000650:	f002 f84e 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	2140      	movs	r1, #64	@ 0x40
 8000658:	4878      	ldr	r0, [pc, #480]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800065a:	f002 f849 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	4876      	ldr	r0, [pc, #472]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000664:	f002 f844 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2101      	movs	r1, #1
 800066c:	4874      	ldr	r0, [pc, #464]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800066e:	f002 f83f 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2102      	movs	r1, #2
 8000676:	4872      	ldr	r0, [pc, #456]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000678:	f002 f83a 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	486f      	ldr	r0, [pc, #444]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000682:	f002 f835 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068c:	486c      	ldr	r0, [pc, #432]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800068e:	f002 f82f 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000698:	4869      	ldr	r0, [pc, #420]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800069a:	f002 f829 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a4:	4866      	ldr	r0, [pc, #408]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80006a6:	f002 f823 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b0:	4863      	ldr	r0, [pc, #396]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80006b2:	f002 f81d 	bl	80026f0 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80006b6:	2102      	movs	r1, #2
 80006b8:	4860      	ldr	r0, [pc, #384]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006ba:	f002 f801 	bl	80026c0 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d101      	bne.n	80006c8 <Scan_KeyMatrix.3+0x1dc>
			key = 5;
 80006c4:	2305      	movs	r3, #5
 80006c6:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80006c8:	2104      	movs	r1, #4
 80006ca:	485c      	ldr	r0, [pc, #368]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006cc:	f001 fff8 	bl	80026c0 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d101      	bne.n	80006da <Scan_KeyMatrix.3+0x1ee>
			key = 6;
 80006d6:	2306      	movs	r3, #6
 80006d8:	73fb      	strb	r3, [r7, #15]
		}
		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	4857      	ldr	r0, [pc, #348]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006e0:	f002 f806 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	4854      	ldr	r0, [pc, #336]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006ea:	f002 f801 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	@ 0x40
 80006f2:	4852      	ldr	r0, [pc, #328]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006f4:	f001 fffc 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	484f      	ldr	r0, [pc, #316]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006fe:	f001 fff7 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2101      	movs	r1, #1
 8000706:	484e      	ldr	r0, [pc, #312]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000708:	f001 fff2 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	484b      	ldr	r0, [pc, #300]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000712:	f001 ffed 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2104      	movs	r1, #4
 800071a:	4849      	ldr	r0, [pc, #292]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800071c:	f001 ffe8 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000726:	4846      	ldr	r0, [pc, #280]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000728:	f001 ffe2 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000732:	4843      	ldr	r0, [pc, #268]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000734:	f001 ffdc 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073e:	4840      	ldr	r0, [pc, #256]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000740:	f001 ffd6 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800074a:	483d      	ldr	r0, [pc, #244]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800074c:	f001 ffd0 	bl	80026f0 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000750:	2102      	movs	r1, #2
 8000752:	483a      	ldr	r0, [pc, #232]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000754:	f001 ffb4 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d101      	bne.n	8000762 <Scan_KeyMatrix.3+0x276>
			key = 7;
 800075e:	2307      	movs	r3, #7
 8000760:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000762:	2104      	movs	r1, #4
 8000764:	4835      	ldr	r0, [pc, #212]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000766:	f001 ffab 	bl	80026c0 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d101      	bne.n	8000774 <Scan_KeyMatrix.3+0x288>
			key = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 8000774:	2108      	movs	r1, #8
 8000776:	4831      	ldr	r0, [pc, #196]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000778:	f001 ffa2 	bl	80026c0 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d101      	bne.n	8000786 <Scan_KeyMatrix.3+0x29a>
			key = 9;
 8000782:	2309      	movs	r3, #9
 8000784:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	482c      	ldr	r0, [pc, #176]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800078c:	f001 ffb0 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2120      	movs	r1, #32
 8000794:	4829      	ldr	r0, [pc, #164]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000796:	f001 ffab 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	@ 0x40
 800079e:	4827      	ldr	r0, [pc, #156]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80007a0:	f001 ffa6 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2180      	movs	r1, #128	@ 0x80
 80007a8:	4824      	ldr	r0, [pc, #144]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80007aa:	f001 ffa1 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2101      	movs	r1, #1
 80007b2:	4823      	ldr	r0, [pc, #140]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007b4:	f001 ff9c 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2102      	movs	r1, #2
 80007bc:	4820      	ldr	r0, [pc, #128]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007be:	f001 ff97 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2104      	movs	r1, #4
 80007c6:	481e      	ldr	r0, [pc, #120]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007c8:	f001 ff92 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007d2:	481b      	ldr	r0, [pc, #108]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007d4:	f001 ff8c 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007de:	4818      	ldr	r0, [pc, #96]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007e0:	f001 ff86 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ea:	4815      	ldr	r0, [pc, #84]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007ec:	f001 ff80 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007f6:	4812      	ldr	r0, [pc, #72]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007f8:	f001 ff7a 	bl	80026f0 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80007fc:	2104      	movs	r1, #4
 80007fe:	480f      	ldr	r0, [pc, #60]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000800:	f001 ff5e 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d101      	bne.n	800080e <Scan_KeyMatrix.3+0x322>
			key = 11;
 800080a:	230b      	movs	r3, #11
 800080c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 800080e:	2108      	movs	r1, #8
 8000810:	480a      	ldr	r0, [pc, #40]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000812:	f001 ff55 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	d101      	bne.n	8000820 <Scan_KeyMatrix.3+0x334>
			key = 10;
 800081c:	230a      	movs	r3, #10
 800081e:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2110      	movs	r1, #16
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000826:	f001 ff63 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2120      	movs	r1, #32
 800082e:	4803      	ldr	r0, [pc, #12]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000830:	f001 ff5e 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2140      	movs	r1, #64	@ 0x40
 8000838:	e004      	b.n	8000844 <Scan_KeyMatrix.3+0x358>
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020400 	.word	0x40020400
 8000844:	48cf      	ldr	r0, [pc, #828]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000846:	f001 ff53 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	48cd      	ldr	r0, [pc, #820]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000850:	f001 ff4e 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	48cb      	ldr	r0, [pc, #812]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800085a:	f001 ff49 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	48c9      	ldr	r0, [pc, #804]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000864:	f001 ff44 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	48c6      	ldr	r0, [pc, #792]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800086e:	f001 ff3f 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000878:	48c3      	ldr	r0, [pc, #780]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800087a:	f001 ff39 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000884:	48c0      	ldr	r0, [pc, #768]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000886:	f001 ff33 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000890:	48bd      	ldr	r0, [pc, #756]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000892:	f001 ff2d 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800089c:	48ba      	ldr	r0, [pc, #744]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800089e:	f001 ff27 	bl	80026f0 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80008a2:	2104      	movs	r1, #4
 80008a4:	48b7      	ldr	r0, [pc, #732]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008a6:	f001 ff0b 	bl	80026c0 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d101      	bne.n	80008b4 <Scan_KeyMatrix.3+0x3c8>
			key = 11;
 80008b0:	230b      	movs	r3, #11
 80008b2:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 80008b4:	2108      	movs	r1, #8
 80008b6:	48b3      	ldr	r0, [pc, #716]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008b8:	f001 ff02 	bl	80026c0 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d101      	bne.n	80008c6 <Scan_KeyMatrix.3+0x3da>
			key = 12;
 80008c2:	230c      	movs	r3, #12
 80008c4:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2110      	movs	r1, #16
 80008ca:	48ae      	ldr	r0, [pc, #696]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008cc:	f001 ff10 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2120      	movs	r1, #32
 80008d4:	48ab      	ldr	r0, [pc, #684]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008d6:	f001 ff0b 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	48a9      	ldr	r0, [pc, #676]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008e0:	f001 ff06 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	@ 0x80
 80008e8:	48a6      	ldr	r0, [pc, #664]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008ea:	f001 ff01 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2101      	movs	r1, #1
 80008f2:	48a5      	ldr	r0, [pc, #660]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80008f4:	f001 fefc 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2102      	movs	r1, #2
 80008fc:	48a2      	ldr	r0, [pc, #648]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80008fe:	f001 fef7 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	2104      	movs	r1, #4
 8000906:	48a0      	ldr	r0, [pc, #640]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000908:	f001 fef2 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000912:	489d      	ldr	r0, [pc, #628]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000914:	f001 feec 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	489a      	ldr	r0, [pc, #616]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000920:	f001 fee6 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092a:	4897      	ldr	r0, [pc, #604]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800092c:	f001 fee0 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000936:	4894      	ldr	r0, [pc, #592]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000938:	f001 feda 	bl	80026f0 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 800093c:	2102      	movs	r1, #2
 800093e:	4891      	ldr	r0, [pc, #580]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000940:	f001 febe 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <Scan_KeyMatrix.3+0x462>
			key = 14;
 800094a:	230e      	movs	r3, #14
 800094c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 800094e:	2104      	movs	r1, #4
 8000950:	488c      	ldr	r0, [pc, #560]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000952:	f001 feb5 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <Scan_KeyMatrix.3+0x474>
			key = 15;
 800095c:	230f      	movs	r3, #15
 800095e:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 8000960:	2108      	movs	r1, #8
 8000962:	4888      	ldr	r0, [pc, #544]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000964:	f001 feac 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d101      	bne.n	8000972 <Scan_KeyMatrix.3+0x486>
			key = 13;
 800096e:	230d      	movs	r3, #13
 8000970:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2110      	movs	r1, #16
 8000976:	4883      	ldr	r0, [pc, #524]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000978:	f001 feba 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2120      	movs	r1, #32
 8000980:	4880      	ldr	r0, [pc, #512]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000982:	f001 feb5 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	@ 0x40
 800098a:	487e      	ldr	r0, [pc, #504]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 800098c:	f001 feb0 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	487b      	ldr	r0, [pc, #492]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000996:	f001 feab 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2101      	movs	r1, #1
 800099e:	487a      	ldr	r0, [pc, #488]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009a0:	f001 fea6 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2102      	movs	r1, #2
 80009a8:	4877      	ldr	r0, [pc, #476]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009aa:	f001 fea1 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2104      	movs	r1, #4
 80009b2:	4875      	ldr	r0, [pc, #468]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009b4:	f001 fe9c 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009be:	4872      	ldr	r0, [pc, #456]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009c0:	f001 fe96 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ca:	486f      	ldr	r0, [pc, #444]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009cc:	f001 fe90 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d6:	486c      	ldr	r0, [pc, #432]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009d8:	f001 fe8a 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e2:	4869      	ldr	r0, [pc, #420]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009e4:	f001 fe84 	bl	80026f0 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80009e8:	2102      	movs	r1, #2
 80009ea:	4866      	ldr	r0, [pc, #408]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80009ec:	f001 fe68 	bl	80026c0 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d101      	bne.n	80009fa <Scan_KeyMatrix.3+0x50e>
			key = 16;
 80009f6:	2310      	movs	r3, #16
 80009f8:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80009fa:	2104      	movs	r1, #4
 80009fc:	4861      	ldr	r0, [pc, #388]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80009fe:	f001 fe5f 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d101      	bne.n	8000a0c <Scan_KeyMatrix.3+0x520>
			key = 17;
 8000a08:	2311      	movs	r3, #17
 8000a0a:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2110      	movs	r1, #16
 8000a10:	485c      	ldr	r0, [pc, #368]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a12:	f001 fe6d 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	485a      	ldr	r0, [pc, #360]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a1c:	f001 fe68 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2140      	movs	r1, #64	@ 0x40
 8000a24:	4857      	ldr	r0, [pc, #348]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a26:	f001 fe63 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	4855      	ldr	r0, [pc, #340]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a30:	f001 fe5e 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	4853      	ldr	r0, [pc, #332]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a3a:	f001 fe59 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2102      	movs	r1, #2
 8000a42:	4851      	ldr	r0, [pc, #324]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a44:	f001 fe54 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	484e      	ldr	r0, [pc, #312]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a4e:	f001 fe4f 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a58:	484b      	ldr	r0, [pc, #300]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a5a:	f001 fe49 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 1);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a64:	4848      	ldr	r0, [pc, #288]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a66:	f001 fe43 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a70:	4845      	ldr	r0, [pc, #276]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a72:	f001 fe3d 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a7c:	4842      	ldr	r0, [pc, #264]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a7e:	f001 fe37 	bl	80026f0 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000a82:	2102      	movs	r1, #2
 8000a84:	483f      	ldr	r0, [pc, #252]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a86:	f001 fe1b 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <Scan_KeyMatrix.3+0x5a8>
			key = 18;
 8000a90:	2312      	movs	r3, #18
 8000a92:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000a94:	2104      	movs	r1, #4
 8000a96:	483b      	ldr	r0, [pc, #236]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a98:	f001 fe12 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d101      	bne.n	8000aa6 <Scan_KeyMatrix.3+0x5ba>
			key = 19;
 8000aa2:	2313      	movs	r3, #19
 8000aa4:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	4836      	ldr	r0, [pc, #216]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000aac:	f001 fe20 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4833      	ldr	r0, [pc, #204]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000ab6:	f001 fe1b 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2140      	movs	r1, #64	@ 0x40
 8000abe:	4831      	ldr	r0, [pc, #196]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000ac0:	f001 fe16 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	@ 0x80
 8000ac8:	482e      	ldr	r0, [pc, #184]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000aca:	f001 fe11 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	482d      	ldr	r0, [pc, #180]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ad4:	f001 fe0c 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	482a      	ldr	r0, [pc, #168]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ade:	f001 fe07 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4828      	ldr	r0, [pc, #160]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ae8:	f001 fe02 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af2:	4825      	ldr	r0, [pc, #148]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000af4:	f001 fdfc 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000afe:	4822      	ldr	r0, [pc, #136]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b00:	f001 fdf6 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b0a:	481f      	ldr	r0, [pc, #124]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b0c:	f001 fdf0 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b16:	481c      	ldr	r0, [pc, #112]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b18:	f001 fdea 	bl	80026f0 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b20:	f001 fdce 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <Scan_KeyMatrix.3+0x642>
			key = 20;
 8000b2a:	2314      	movs	r3, #20
 8000b2c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000b2e:	2104      	movs	r1, #4
 8000b30:	4814      	ldr	r0, [pc, #80]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b32:	f001 fdc5 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d101      	bne.n	8000b40 <Scan_KeyMatrix.3+0x654>
			key = 21;
 8000b3c:	2315      	movs	r3, #21
 8000b3e:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2110      	movs	r1, #16
 8000b44:	480f      	ldr	r0, [pc, #60]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b46:	f001 fdd3 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b50:	f001 fdce 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2140      	movs	r1, #64	@ 0x40
 8000b58:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b5a:	f001 fdc9 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b64:	f001 fdc4 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b6e:	f001 fdbf 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2102      	movs	r1, #2
 8000b76:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b78:	f001 fdba 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2104      	movs	r1, #4
 8000b80:	e004      	b.n	8000b8c <Scan_KeyMatrix.3+0x6a0>
 8000b82:	bf00      	nop
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	481d      	ldr	r0, [pc, #116]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000b8e:	f001 fdaf 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b98:	481a      	ldr	r0, [pc, #104]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000b9a:	f001 fda9 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba4:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000ba6:	f001 fda3 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb0:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000bb2:	f001 fd9d 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 1);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bbc:	4811      	ldr	r0, [pc, #68]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000bbe:	f001 fd97 	bl	80026f0 <HAL_GPIO_WritePin>



        if (HAL_GPIO_ReadPin(Row1_GPIO_Port, Row1_Pin) == 1) {
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4810      	ldr	r0, [pc, #64]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bc6:	f001 fd7b 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d101      	bne.n	8000bd4 <Scan_KeyMatrix.3+0x6e8>
            key = 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
        }
		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bd8:	f001 fd72 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d101      	bne.n	8000be6 <Scan_KeyMatrix.3+0x6fa>
			key = 22;
 8000be2:	2316      	movs	r3, #22
 8000be4:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000be6:	2104      	movs	r1, #4
 8000be8:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bea:	f001 fd69 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d101      	bne.n	8000bf8 <Scan_KeyMatrix.3+0x70c>
			key = 23;
 8000bf4:	2317      	movs	r3, #23
 8000bf6:	73fb      	strb	r3, [r7, #15]
		}

        return key;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
    }
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40020000 	.word	0x40020000

08000c0c <main>:
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ac      	sub	sp, #176	@ 0xb0
 8000c10:	af00      	add	r7, sp, #0
int main(void)
 8000c12:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000c16:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_Init();
 8000c18:	f001 fa26 	bl	8002068 <HAL_Init>
  SystemClock_Config();
 8000c1c:	f000 ffdc 	bl	8001bd8 <SystemClock_Config>
  MX_GPIO_Init();
 8000c20:	f001 f866 	bl	8001cf0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c24:	f006 ff0a 	bl	8007a3c <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 8000c28:	f001 f83e 	bl	8001ca8 <MX_TIM10_Init>
  int counter1 = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int counter2 = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  int counter3 = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int counter4 = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int counter5 = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int counter6 = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  int counter7 = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int counter8 = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  int counter9 = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int counter10 = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int counter11 = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int counter12 = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int counter13 = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  int counter14 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  int counter15 = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
  int counter16 = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	677b      	str	r3, [r7, #116]	@ 0x74
  int counter17 = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	673b      	str	r3, [r7, #112]	@ 0x70
  int counter18 = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int counter19 = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  int counter20 = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	667b      	str	r3, [r7, #100]	@ 0x64
  int counter21 = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	663b      	str	r3, [r7, #96]	@ 0x60
  int counter22 = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int counter23 = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int counter24 = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	657b      	str	r3, [r7, #84]	@ 0x54
  int lastPress = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  int timeout = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
  int previousChar = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  char charbuffer[22] = {};
 8000cb0:	4bd8      	ldr	r3, [pc, #864]	@ (8001014 <main+0x408>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000cb8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	751a      	strb	r2, [r3, #20]
  int bufferItemsNumber = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  char result[22] = {};
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	821a      	strh	r2, [r3, #16]
  int activeTimeLimit = TIME_LIMIT;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
  int activeTimer = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	653b      	str	r3, [r7, #80]	@ 0x50
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint8_t pressed_key;
    hashInit();
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	469c      	mov	ip, r3
 8000cee:	f000 fdc1 	bl	8001874 <hashInit.0>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  // Initialize GPIOs for keyboard matrix
    pressed_key = Scan_KeyMatrix();
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	469c      	mov	ip, r3
 8000cf6:	f7ff fbf9 	bl	80004ec <Scan_KeyMatrix.3>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  	if(pressed_key != 0 && activeTimer == 0){
 8000d00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d007      	beq.n	8000d18 <main+0x10c>
 8000d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d104      	bne.n	8000d18 <main+0x10c>
  		HAL_TIM_Base_Start_IT(&htim10);
 8000d0e:	48c2      	ldr	r0, [pc, #776]	@ (8001018 <main+0x40c>)
 8000d10:	f003 fbc2 	bl	8004498 <HAL_TIM_Base_Start_IT>
  		activeTimer = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	653b      	str	r3, [r7, #80]	@ 0x50
  	}
  	if(elapsedTime >= activeTimeLimit){
 8000d18:	4bc0      	ldr	r3, [pc, #768]	@ (800101c <main+0x410>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d314      	bcc.n	8000d4c <main+0x140>
  		HAL_TIM_Base_Stop_IT(&htim10);
 8000d22:	48bd      	ldr	r0, [pc, #756]	@ (8001018 <main+0x40c>)
 8000d24:	f003 fc1a 	bl	800455c <HAL_TIM_Base_Stop_IT>
  		activeTimer = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	653b      	str	r3, [r7, #80]	@ 0x50
  		elapsedTime = 0;
 8000d2c:	4bbb      	ldr	r3, [pc, #748]	@ (800101c <main+0x410>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]

  		Set_Character(' ');
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	469c      	mov	ip, r3
 8000d36:	2020      	movs	r0, #32
 8000d38:	f000 faf2 	bl	8001320 <Set_Character.4>
		Send_Gate(1, ' ');
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	469c      	mov	ip, r3
 8000d40:	2120      	movs	r1, #32
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 ff08 	bl	8001b58 <Send_Gate.5>
		lastPress = 1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
  	}
  	switch (pressed_key) {
 8000d4c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d50:	3b01      	subs	r3, #1
 8000d52:	2b17      	cmp	r3, #23
 8000d54:	f200 8273 	bhi.w	800123e <main+0x632>
 8000d58:	a201      	add	r2, pc, #4	@ (adr r2, 8000d60 <main+0x154>)
 8000d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5e:	bf00      	nop
 8000d60:	08000dc1 	.word	0x08000dc1
 8000d64:	08000dc1 	.word	0x08000dc1
 8000d68:	08000df7 	.word	0x08000df7
 8000d6c:	08000e2d 	.word	0x08000e2d
 8000d70:	08000e63 	.word	0x08000e63
 8000d74:	08000e99 	.word	0x08000e99
 8000d78:	08000ecf 	.word	0x08000ecf
 8000d7c:	08000f05 	.word	0x08000f05
 8000d80:	08000f3b 	.word	0x08000f3b
 8000d84:	08000f71 	.word	0x08000f71
 8000d88:	08000fa7 	.word	0x08000fa7
 8000d8c:	08000fdd 	.word	0x08000fdd
 8000d90:	08001021 	.word	0x08001021
 8000d94:	08001057 	.word	0x08001057
 8000d98:	08001085 	.word	0x08001085
 8000d9c:	080010b3 	.word	0x080010b3
 8000da0:	080010e1 	.word	0x080010e1
 8000da4:	0800110f 	.word	0x0800110f
 8000da8:	0800113d 	.word	0x0800113d
 8000dac:	0800116b 	.word	0x0800116b
 8000db0:	08001199 	.word	0x08001199
 8000db4:	080011c5 	.word	0x080011c5
 8000db8:	080011f1 	.word	0x080011f1
 8000dbc:	0800121d 	.word	0x0800121d


  	    	*/

  	    case 2:
		  counter2 += 1;
 8000dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  if (counter2 >= 3) {
 8000dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	f340 8237 	ble.w	8001242 <main+0x636>
			Set_Character('S');
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	2053      	movs	r0, #83	@ 0x53
 8000dda:	f000 faa1 	bl	8001320 <Set_Character.4>
			Send_Gate(2, 'S');
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	469c      	mov	ip, r3
 8000de2:	2153      	movs	r1, #83	@ 0x53
 8000de4:	2002      	movs	r0, #2
 8000de6:	f000 feb7 	bl	8001b58 <Send_Gate.5>
			lastPress = 2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	60bb      	str	r3, [r7, #8]
			  counter2 = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  }
  	        break;
 8000df4:	e225      	b.n	8001242 <main+0x636>
  	    case 3:
  		  counter3 += 1;
 8000df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  		  if (counter3 >= 3) {
 8000e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	f340 821e 	ble.w	8001246 <main+0x63a>
  			Set_Character('T');
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	469c      	mov	ip, r3
 8000e0e:	2054      	movs	r0, #84	@ 0x54
 8000e10:	f000 fa86 	bl	8001320 <Set_Character.4>
  			Send_Gate(3, 'T');
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	469c      	mov	ip, r3
 8000e18:	2154      	movs	r1, #84	@ 0x54
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f000 fe9c 	bl	8001b58 <Send_Gate.5>
  			lastPress = 3;
 8000e20:	2303      	movs	r3, #3
 8000e22:	60bb      	str	r3, [r7, #8]
  			  counter3 = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  		  }
  	        break;
 8000e2a:	e20c      	b.n	8001246 <main+0x63a>
  	    case 4:
		  counter4 += 1;
 8000e2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e30:	3301      	adds	r3, #1
 8000e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  if (counter4 >= 3) {
 8000e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	f340 8205 	ble.w	800124a <main+0x63e>
			  Set_Character('K');
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	469c      	mov	ip, r3
 8000e44:	204b      	movs	r0, #75	@ 0x4b
 8000e46:	f000 fa6b 	bl	8001320 <Set_Character.4>
			Send_Gate(4, 'K');
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	469c      	mov	ip, r3
 8000e4e:	214b      	movs	r1, #75	@ 0x4b
 8000e50:	2004      	movs	r0, #4
 8000e52:	f000 fe81 	bl	8001b58 <Send_Gate.5>
			lastPress = 4;
 8000e56:	2304      	movs	r3, #4
 8000e58:	60bb      	str	r3, [r7, #8]
			  counter4 = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  }
  	        break;
 8000e60:	e1f3      	b.n	800124a <main+0x63e>
  	    case 5:
		  counter5 += 1;
 8000e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e66:	3301      	adds	r3, #1
 8000e68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		  if (counter5 >= 3) {
 8000e6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	f340 81ec 	ble.w	800124e <main+0x642>
			  Set_Character('P');
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	469c      	mov	ip, r3
 8000e7a:	2050      	movs	r0, #80	@ 0x50
 8000e7c:	f000 fa50 	bl	8001320 <Set_Character.4>
			Send_Gate(5, 'P');
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	469c      	mov	ip, r3
 8000e84:	2150      	movs	r1, #80	@ 0x50
 8000e86:	2005      	movs	r0, #5
 8000e88:	f000 fe66 	bl	8001b58 <Send_Gate.5>
			lastPress = 5;
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	60bb      	str	r3, [r7, #8]
			  counter5 = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    		  }
  	        break;
 8000e96:	e1da      	b.n	800124e <main+0x642>
  	    case 6:
		  counter6 += 1;
 8000e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		if (counter6 >= 3) {
 8000ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	f340 81d3 	ble.w	8001252 <main+0x646>
			  Set_Character('W');
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	469c      	mov	ip, r3
 8000eb0:	2057      	movs	r0, #87	@ 0x57
 8000eb2:	f000 fa35 	bl	8001320 <Set_Character.4>
			Send_Gate(6, 'W');
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	469c      	mov	ip, r3
 8000eba:	2157      	movs	r1, #87	@ 0x57
 8000ebc:	2006      	movs	r0, #6
 8000ebe:	f000 fe4b 	bl	8001b58 <Send_Gate.5>
			lastPress = 6;
 8000ec2:	2306      	movs	r3, #6
 8000ec4:	60bb      	str	r3, [r7, #8]
			  counter6 = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    		  }
  	        break;
 8000ecc:	e1c1      	b.n	8001252 <main+0x646>
  	    case 7:
		  counter7 += 1;
 8000ece:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  if (counter7 >= 3) {
 8000ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	f340 81ba 	ble.w	8001256 <main+0x64a>
			  Set_Character('H');
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	2048      	movs	r0, #72	@ 0x48
 8000ee8:	f000 fa1a 	bl	8001320 <Set_Character.4>
			Send_Gate(7, 'H');
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	469c      	mov	ip, r3
 8000ef0:	2148      	movs	r1, #72	@ 0x48
 8000ef2:	2007      	movs	r0, #7
 8000ef4:	f000 fe30 	bl	8001b58 <Send_Gate.5>
			lastPress = 7;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	60bb      	str	r3, [r7, #8]
			  counter7 = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    		  }
  	        break;
 8000f02:	e1a8      	b.n	8001256 <main+0x64a>
  	    case 8:
		  counter8 += 1;
 8000f04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		  if (counter8 >= 3) {
 8000f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	f340 81a1 	ble.w	800125a <main+0x64e>
			  Set_Character('R');
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	2052      	movs	r0, #82	@ 0x52
 8000f1e:	f000 f9ff 	bl	8001320 <Set_Character.4>
			Send_Gate(8, 'R');
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	469c      	mov	ip, r3
 8000f26:	2152      	movs	r1, #82	@ 0x52
 8000f28:	2008      	movs	r0, #8
 8000f2a:	f000 fe15 	bl	8001b58 <Send_Gate.5>
			lastPress = 8;
 8000f2e:	2308      	movs	r3, #8
 8000f30:	60bb      	str	r3, [r7, #8]
			  counter8 = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    		  }
  	        break;
 8000f38:	e18f      	b.n	800125a <main+0x64e>
  	    case 9:
		  counter9 += 1;
 8000f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  if (counter9 >= 3) {
 8000f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	f340 8188 	ble.w	800125e <main+0x652>
			  Set_Character('A');
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	469c      	mov	ip, r3
 8000f52:	2041      	movs	r0, #65	@ 0x41
 8000f54:	f000 f9e4 	bl	8001320 <Set_Character.4>
			Send_Gate(9, 'A');
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	2141      	movs	r1, #65	@ 0x41
 8000f5e:	2009      	movs	r0, #9
 8000f60:	f000 fdfa 	bl	8001b58 <Send_Gate.5>
			lastPress = 9;
 8000f64:	2309      	movs	r3, #9
 8000f66:	60bb      	str	r3, [r7, #8]
			  counter9 = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    		  }
  	        break;
 8000f6e:	e176      	b.n	800125e <main+0x652>
  	    case 10:
		  counter10 += 1;
 8000f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f74:	3301      	adds	r3, #1
 8000f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  if (counter10 >= 3) {
 8000f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	f340 816f 	ble.w	8001262 <main+0x656>
			  Set_Character('O');
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	469c      	mov	ip, r3
 8000f88:	204f      	movs	r0, #79	@ 0x4f
 8000f8a:	f000 f9c9 	bl	8001320 <Set_Character.4>
			Send_Gate(10, 'O');
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	469c      	mov	ip, r3
 8000f92:	214f      	movs	r1, #79	@ 0x4f
 8000f94:	200a      	movs	r0, #10
 8000f96:	f000 fddf 	bl	8001b58 <Send_Gate.5>
			lastPress = 10;
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	60bb      	str	r3, [r7, #8]
			  counter10 = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    		  }
  	        break;
 8000fa4:	e15d      	b.n	8001262 <main+0x656>
  	    case 11:
		  counter11 += 1;
 8000fa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		  if (counter11 >= 3) {
 8000fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	f340 8156 	ble.w	8001266 <main+0x65a>
			  Set_Character('*');
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	202a      	movs	r0, #42	@ 0x2a
 8000fc0:	f000 f9ae 	bl	8001320 <Set_Character.4>
			Send_Gate(11, '*');
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	212a      	movs	r1, #42	@ 0x2a
 8000fca:	200b      	movs	r0, #11
 8000fcc:	f000 fdc4 	bl	8001b58 <Send_Gate.5>
			lastPress = 11;
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	60bb      	str	r3, [r7, #8]
			  counter11 = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    		  }
  	        break;
 8000fda:	e144      	b.n	8001266 <main+0x65a>
  	    case 12:
		  counter12 += 1;
 8000fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  if (counter12 >= 3) {
 8000fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	f340 813d 	ble.w	800126a <main+0x65e>
			  Set_Character('E');
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	469c      	mov	ip, r3
 8000ff4:	2045      	movs	r0, #69	@ 0x45
 8000ff6:	f000 f993 	bl	8001320 <Set_Character.4>
			Send_Gate(12, 'E');
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	2145      	movs	r1, #69	@ 0x45
 8001000:	200c      	movs	r0, #12
 8001002:	f000 fda9 	bl	8001b58 <Send_Gate.5>
			lastPress = 12;
 8001006:	230c      	movs	r3, #12
 8001008:	60bb      	str	r3, [r7, #8]
			  counter12 = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    		  }
  	        break;
 8001010:	e12b      	b.n	800126a <main+0x65e>
 8001012:	bf00      	nop
 8001014:	080084b4 	.word	0x080084b4
 8001018:	2000017c 	.word	0x2000017c
 800101c:	2000210c 	.word	0x2000210c
  	    case 13:
		  counter13 += 1;
 8001020:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001024:	3301      	adds	r3, #1
 8001026:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  if (counter13 >= 3) {
 800102a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800102e:	2b02      	cmp	r3, #2
 8001030:	f340 811d 	ble.w	800126e <main+0x662>
			  Set_Character('U');
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	469c      	mov	ip, r3
 8001038:	2055      	movs	r0, #85	@ 0x55
 800103a:	f000 f971 	bl	8001320 <Set_Character.4>
			Send_Gate(13, 'U');
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	469c      	mov	ip, r3
 8001042:	2155      	movs	r1, #85	@ 0x55
 8001044:	200d      	movs	r0, #13
 8001046:	f000 fd87 	bl	8001b58 <Send_Gate.5>
			lastPress = 13;
 800104a:	230d      	movs	r3, #13
 800104c:	60bb      	str	r3, [r7, #8]
			  counter13 = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  }
  	        break;
 8001054:	e10b      	b.n	800126e <main+0x662>
  	    case 14:
		  counter14 += 1;
 8001056:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001058:	3301      	adds	r3, #1
 800105a:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  if (counter14 >= 3) {
 800105c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800105e:	2b02      	cmp	r3, #2
 8001060:	f340 8107 	ble.w	8001272 <main+0x666>
			  Set_Character('F');
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	469c      	mov	ip, r3
 8001068:	2046      	movs	r0, #70	@ 0x46
 800106a:	f000 f959 	bl	8001320 <Set_Character.4>
			Send_Gate(14, 'F');
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	469c      	mov	ip, r3
 8001072:	2146      	movs	r1, #70	@ 0x46
 8001074:	200e      	movs	r0, #14
 8001076:	f000 fd6f 	bl	8001b58 <Send_Gate.5>
			lastPress = 14;
 800107a:	230e      	movs	r3, #14
 800107c:	60bb      	str	r3, [r7, #8]
			  counter14 = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  }
  	        break;
 8001082:	e0f6      	b.n	8001272 <main+0x666>
  	    case 15:
		  counter15 += 1;
 8001084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001086:	3301      	adds	r3, #1
 8001088:	67bb      	str	r3, [r7, #120]	@ 0x78
		  if (counter15 >= 3) {
 800108a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800108c:	2b02      	cmp	r3, #2
 800108e:	f340 80f2 	ble.w	8001276 <main+0x66a>
			  Set_Character('R');
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	469c      	mov	ip, r3
 8001096:	2052      	movs	r0, #82	@ 0x52
 8001098:	f000 f942 	bl	8001320 <Set_Character.4>
			Send_Gate(15, 'R');
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	469c      	mov	ip, r3
 80010a0:	2152      	movs	r1, #82	@ 0x52
 80010a2:	200f      	movs	r0, #15
 80010a4:	f000 fd58 	bl	8001b58 <Send_Gate.5>
			lastPress = 15;
 80010a8:	230f      	movs	r3, #15
 80010aa:	60bb      	str	r3, [r7, #8]
			  counter15 = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	67bb      	str	r3, [r7, #120]	@ 0x78
		  }
  	        break;
 80010b0:	e0e1      	b.n	8001276 <main+0x66a>
  	    case 16:
		  counter16 += 1;
 80010b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010b4:	3301      	adds	r3, #1
 80010b6:	677b      	str	r3, [r7, #116]	@ 0x74
		  if (counter16 >= 3) {
 80010b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	f340 80dd 	ble.w	800127a <main+0x66e>
			  Set_Character('P');
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	469c      	mov	ip, r3
 80010c4:	2050      	movs	r0, #80	@ 0x50
 80010c6:	f000 f92b 	bl	8001320 <Set_Character.4>
			Send_Gate(16, 'P');
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	469c      	mov	ip, r3
 80010ce:	2150      	movs	r1, #80	@ 0x50
 80010d0:	2010      	movs	r0, #16
 80010d2:	f000 fd41 	bl	8001b58 <Send_Gate.5>
			lastPress = 16;
 80010d6:	2310      	movs	r3, #16
 80010d8:	60bb      	str	r3, [r7, #8]
			  counter16 = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	677b      	str	r3, [r7, #116]	@ 0x74
		  }
  	        break;
 80010de:	e0cc      	b.n	800127a <main+0x66e>
  	    case 17:
		  counter17 += 1;
 80010e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010e2:	3301      	adds	r3, #1
 80010e4:	673b      	str	r3, [r7, #112]	@ 0x70
		  if (counter17 >= 3) {
 80010e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	f340 80c8 	ble.w	800127e <main+0x672>
			  Set_Character('B');
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	469c      	mov	ip, r3
 80010f2:	2042      	movs	r0, #66	@ 0x42
 80010f4:	f000 f914 	bl	8001320 <Set_Character.4>
			Send_Gate(17, 'B');
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	469c      	mov	ip, r3
 80010fc:	2142      	movs	r1, #66	@ 0x42
 80010fe:	2011      	movs	r0, #17
 8001100:	f000 fd2a 	bl	8001b58 <Send_Gate.5>
			lastPress = 17;
 8001104:	2311      	movs	r3, #17
 8001106:	60bb      	str	r3, [r7, #8]
			  counter17 = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	673b      	str	r3, [r7, #112]	@ 0x70
		  }
  	        break;
 800110c:	e0b7      	b.n	800127e <main+0x672>
  	    case 18:
		  counter18 += 1;
 800110e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001110:	3301      	adds	r3, #1
 8001112:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  if (counter18 >= 3) {
 8001114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001116:	2b02      	cmp	r3, #2
 8001118:	f340 80b3 	ble.w	8001282 <main+0x676>
			  Set_Character('L');
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	469c      	mov	ip, r3
 8001120:	204c      	movs	r0, #76	@ 0x4c
 8001122:	f000 f8fd 	bl	8001320 <Set_Character.4>
			Send_Gate(18, 'L');
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	469c      	mov	ip, r3
 800112a:	214c      	movs	r1, #76	@ 0x4c
 800112c:	2012      	movs	r0, #18
 800112e:	f000 fd13 	bl	8001b58 <Send_Gate.5>
			lastPress = 18;
 8001132:	2312      	movs	r3, #18
 8001134:	60bb      	str	r3, [r7, #8]
			  counter18 = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  }
  	        break;
 800113a:	e0a2      	b.n	8001282 <main+0x676>
  	    case 19:
		  counter19 += 1;
 800113c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800113e:	3301      	adds	r3, #1
 8001140:	66bb      	str	r3, [r7, #104]	@ 0x68
		  if (counter19 >= 3) {
 8001142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001144:	2b02      	cmp	r3, #2
 8001146:	f340 809e 	ble.w	8001286 <main+0x67a>
			  Set_Character('G');
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	469c      	mov	ip, r3
 800114e:	2047      	movs	r0, #71	@ 0x47
 8001150:	f000 f8e6 	bl	8001320 <Set_Character.4>
			Send_Gate(19, 'G');
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	469c      	mov	ip, r3
 8001158:	2147      	movs	r1, #71	@ 0x47
 800115a:	2013      	movs	r0, #19
 800115c:	f000 fcfc 	bl	8001b58 <Send_Gate.5>
			lastPress = 19;
 8001160:	2313      	movs	r3, #19
 8001162:	60bb      	str	r3, [r7, #8]
			  counter19 = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	66bb      	str	r3, [r7, #104]	@ 0x68
		  }
  	        break;
 8001168:	e08d      	b.n	8001286 <main+0x67a>
  	    case 20:
		  counter20 += 1;
 800116a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800116c:	3301      	adds	r3, #1
 800116e:	667b      	str	r3, [r7, #100]	@ 0x64
		  if (counter20 >= 3) {
 8001170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001172:	2b02      	cmp	r3, #2
 8001174:	f340 8089 	ble.w	800128a <main+0x67e>
			  Set_Character('T');
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	469c      	mov	ip, r3
 800117c:	2054      	movs	r0, #84	@ 0x54
 800117e:	f000 f8cf 	bl	8001320 <Set_Character.4>
			Send_Gate(20, 'T');
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	469c      	mov	ip, r3
 8001186:	2154      	movs	r1, #84	@ 0x54
 8001188:	2014      	movs	r0, #20
 800118a:	f000 fce5 	bl	8001b58 <Send_Gate.5>
			lastPress = 20;
 800118e:	2314      	movs	r3, #20
 8001190:	60bb      	str	r3, [r7, #8]
			  counter20 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	667b      	str	r3, [r7, #100]	@ 0x64
		  }
  	        break;
 8001196:	e078      	b.n	800128a <main+0x67e>
  	    case 21:
		  counter21 += 1;
 8001198:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800119a:	3301      	adds	r3, #1
 800119c:	663b      	str	r3, [r7, #96]	@ 0x60
		  if (counter21 >= 3) {
 800119e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	dd74      	ble.n	800128e <main+0x682>
			  Set_Character('S');
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	469c      	mov	ip, r3
 80011a8:	2053      	movs	r0, #83	@ 0x53
 80011aa:	f000 f8b9 	bl	8001320 <Set_Character.4>
			Send_Gate(21, 'S');
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	469c      	mov	ip, r3
 80011b2:	2153      	movs	r1, #83	@ 0x53
 80011b4:	2015      	movs	r0, #21
 80011b6:	f000 fccf 	bl	8001b58 <Send_Gate.5>
			lastPress = 21;
 80011ba:	2315      	movs	r3, #21
 80011bc:	60bb      	str	r3, [r7, #8]
			  counter21 = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	663b      	str	r3, [r7, #96]	@ 0x60
		  }
  	        break;
 80011c2:	e064      	b.n	800128e <main+0x682>
  	    case 22:
		  counter22 += 1;
 80011c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011c6:	3301      	adds	r3, #1
 80011c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  if (counter22 >= 3) {
 80011ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	dd60      	ble.n	8001292 <main+0x686>
			  Set_Character('D');
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	469c      	mov	ip, r3
 80011d4:	2044      	movs	r0, #68	@ 0x44
 80011d6:	f000 f8a3 	bl	8001320 <Set_Character.4>
			Send_Gate(22, 'D');
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	469c      	mov	ip, r3
 80011de:	2144      	movs	r1, #68	@ 0x44
 80011e0:	2016      	movs	r0, #22
 80011e2:	f000 fcb9 	bl	8001b58 <Send_Gate.5>
			lastPress = 22;
 80011e6:	2316      	movs	r3, #22
 80011e8:	60bb      	str	r3, [r7, #8]
			  counter22 = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  }
  	        break;
 80011ee:	e050      	b.n	8001292 <main+0x686>
  	    case 23:
		  counter23 += 1;
 80011f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011f2:	3301      	adds	r3, #1
 80011f4:	65bb      	str	r3, [r7, #88]	@ 0x58
		  if (counter23 >= 3) {
 80011f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	dd4c      	ble.n	8001296 <main+0x68a>
			  Set_Character('Z');
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	469c      	mov	ip, r3
 8001200:	205a      	movs	r0, #90	@ 0x5a
 8001202:	f000 f88d 	bl	8001320 <Set_Character.4>
			Send_Gate(23, 'Z');
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	469c      	mov	ip, r3
 800120a:	215a      	movs	r1, #90	@ 0x5a
 800120c:	2017      	movs	r0, #23
 800120e:	f000 fca3 	bl	8001b58 <Send_Gate.5>
			lastPress = 23;
 8001212:	2317      	movs	r3, #23
 8001214:	60bb      	str	r3, [r7, #8]
			  counter23 = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	65bb      	str	r3, [r7, #88]	@ 0x58
		  }
  	        break;
 800121a:	e03c      	b.n	8001296 <main+0x68a>
  	    case 24:
		  counter24 += 1;
 800121c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800121e:	3301      	adds	r3, #1
 8001220:	657b      	str	r3, [r7, #84]	@ 0x54
		  if (counter24 >= 3) {
 8001222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001224:	2b02      	cmp	r3, #2
 8001226:	dd38      	ble.n	800129a <main+0x68e>
			Send_Gate(24, '/');
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	469c      	mov	ip, r3
 800122c:	212f      	movs	r1, #47	@ 0x2f
 800122e:	2018      	movs	r0, #24
 8001230:	f000 fc92 	bl	8001b58 <Send_Gate.5>
			lastPress = 24;
 8001234:	2318      	movs	r3, #24
 8001236:	60bb      	str	r3, [r7, #8]
			  counter24 = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	657b      	str	r3, [r7, #84]	@ 0x54
		  }
				break;
 800123c:	e02d      	b.n	800129a <main+0x68e>
  	    default:
  	        break;
 800123e:	bf00      	nop
 8001240:	e557      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001242:	bf00      	nop
 8001244:	e555      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001246:	bf00      	nop
 8001248:	e553      	b.n	8000cf2 <main+0xe6>
  	        break;
 800124a:	bf00      	nop
 800124c:	e551      	b.n	8000cf2 <main+0xe6>
  	        break;
 800124e:	bf00      	nop
 8001250:	e54f      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001252:	bf00      	nop
 8001254:	e54d      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001256:	bf00      	nop
 8001258:	e54b      	b.n	8000cf2 <main+0xe6>
  	        break;
 800125a:	bf00      	nop
 800125c:	e549      	b.n	8000cf2 <main+0xe6>
  	        break;
 800125e:	bf00      	nop
 8001260:	e547      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001262:	bf00      	nop
 8001264:	e545      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001266:	bf00      	nop
 8001268:	e543      	b.n	8000cf2 <main+0xe6>
  	        break;
 800126a:	bf00      	nop
 800126c:	e541      	b.n	8000cf2 <main+0xe6>
  	        break;
 800126e:	bf00      	nop
 8001270:	e53f      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001272:	bf00      	nop
 8001274:	e53d      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001276:	bf00      	nop
 8001278:	e53b      	b.n	8000cf2 <main+0xe6>
  	        break;
 800127a:	bf00      	nop
 800127c:	e539      	b.n	8000cf2 <main+0xe6>
  	        break;
 800127e:	bf00      	nop
 8001280:	e537      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001282:	bf00      	nop
 8001284:	e535      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001286:	bf00      	nop
 8001288:	e533      	b.n	8000cf2 <main+0xe6>
  	        break;
 800128a:	bf00      	nop
 800128c:	e531      	b.n	8000cf2 <main+0xe6>
  	        break;
 800128e:	bf00      	nop
 8001290:	e52f      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001292:	bf00      	nop
 8001294:	e52d      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001296:	bf00      	nop
 8001298:	e52b      	b.n	8000cf2 <main+0xe6>
				break;
 800129a:	bf00      	nop
    pressed_key = Scan_KeyMatrix();
 800129c:	e529      	b.n	8000cf2 <main+0xe6>
 800129e:	bf00      	nop

080012a0 <Clear_Buffer.10>:
  void Clear_Buffer(){
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4662      	mov	r2, ip
 80012a8:	f8c7 c004 	str.w	ip, [r7, #4]
  	  for (int i = 0; i < 22; i++) {
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e007      	b.n	80012c2 <Clear_Buffer.10+0x22>
  	  		          charbuffer[i] = '\0';
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	3326      	adds	r3, #38	@ 0x26
 80012b8:	2100      	movs	r1, #0
 80012ba:	7019      	strb	r1, [r3, #0]
  	  for (int i = 0; i < 22; i++) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3301      	adds	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b15      	cmp	r3, #21
 80012c6:	ddf4      	ble.n	80012b2 <Clear_Buffer.10+0x12>
    }
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <Send_Character.9>:
  void Send_Character(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	f8c7 c004 	str.w	ip, [r7, #4]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80012e2:	2208      	movs	r2, #8
 80012e4:	490c      	ldr	r1, [pc, #48]	@ (8001318 <Send_Character.9+0x40>)
 80012e6:	480d      	ldr	r0, [pc, #52]	@ (800131c <Send_Character.9+0x44>)
 80012e8:	f005 f81e 	bl	8006328 <USBD_HID_SendReport>
	  HAL_Delay(20);
 80012ec:	2014      	movs	r0, #20
 80012ee:	f000 ff2d 	bl	800214c <HAL_Delay>
	  keyBoardHIDsub.MODIFIER=0x00;
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <Send_Character.9+0x40>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
	  keyBoardHIDsub.KEYCODE2=0x00;
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <Send_Character.9+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80012fe:	2208      	movs	r2, #8
 8001300:	4905      	ldr	r1, [pc, #20]	@ (8001318 <Send_Character.9+0x40>)
 8001302:	4806      	ldr	r0, [pc, #24]	@ (800131c <Send_Character.9+0x44>)
 8001304:	f005 f810 	bl	8006328 <USBD_HID_SendReport>
	  HAL_Delay(20);
 8001308:	2014      	movs	r0, #20
 800130a:	f000 ff1f 	bl	800214c <HAL_Delay>
	  }
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001c4 	.word	0x200001c4
 800131c:	2000211c 	.word	0x2000211c

08001320 <Set_Character.4>:
  void Set_Character(char i){
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	f8c7 c000 	str.w	ip, [r7]
	  switch(i){
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	3b20      	subs	r3, #32
 8001332:	2b5a      	cmp	r3, #90	@ 0x5a
 8001334:	f200 8211 	bhi.w	800175a <Set_Character.4+0x43a>
 8001338:	a201      	add	r2, pc, #4	@ (adr r2, 8001340 <Set_Character.4+0x20>)
 800133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	0800173f 	.word	0x0800173f
 8001344:	080016a5 	.word	0x080016a5
 8001348:	0800175b 	.word	0x0800175b
 800134c:	080016c1 	.word	0x080016c1
 8001350:	080016cf 	.word	0x080016cf
 8001354:	080016dd 	.word	0x080016dd
 8001358:	080016f9 	.word	0x080016f9
 800135c:	0800174d 	.word	0x0800174d
 8001360:	08001715 	.word	0x08001715
 8001364:	08001723 	.word	0x08001723
 8001368:	08001707 	.word	0x08001707
 800136c:	08001731 	.word	0x08001731
 8001370:	0800175b 	.word	0x0800175b
 8001374:	0800175b 	.word	0x0800175b
 8001378:	0800175b 	.word	0x0800175b
 800137c:	0800175b 	.word	0x0800175b
 8001380:	08001697 	.word	0x08001697
 8001384:	08001619 	.word	0x08001619
 8001388:	08001627 	.word	0x08001627
 800138c:	08001635 	.word	0x08001635
 8001390:	08001643 	.word	0x08001643
 8001394:	08001651 	.word	0x08001651
 8001398:	0800165f 	.word	0x0800165f
 800139c:	0800166d 	.word	0x0800166d
 80013a0:	0800167b 	.word	0x0800167b
 80013a4:	08001689 	.word	0x08001689
 80013a8:	0800175b 	.word	0x0800175b
 80013ac:	0800175b 	.word	0x0800175b
 80013b0:	0800175b 	.word	0x0800175b
 80013b4:	0800175b 	.word	0x0800175b
 80013b8:	0800175b 	.word	0x0800175b
 80013bc:	0800175b 	.word	0x0800175b
 80013c0:	080016b3 	.word	0x080016b3
 80013c4:	0800175b 	.word	0x0800175b
 80013c8:	0800175b 	.word	0x0800175b
 80013cc:	0800175b 	.word	0x0800175b
 80013d0:	0800175b 	.word	0x0800175b
 80013d4:	0800175b 	.word	0x0800175b
 80013d8:	0800175b 	.word	0x0800175b
 80013dc:	0800175b 	.word	0x0800175b
 80013e0:	0800175b 	.word	0x0800175b
 80013e4:	0800175b 	.word	0x0800175b
 80013e8:	0800175b 	.word	0x0800175b
 80013ec:	0800175b 	.word	0x0800175b
 80013f0:	0800175b 	.word	0x0800175b
 80013f4:	0800175b 	.word	0x0800175b
 80013f8:	0800175b 	.word	0x0800175b
 80013fc:	0800175b 	.word	0x0800175b
 8001400:	0800175b 	.word	0x0800175b
 8001404:	0800175b 	.word	0x0800175b
 8001408:	0800175b 	.word	0x0800175b
 800140c:	0800175b 	.word	0x0800175b
 8001410:	0800175b 	.word	0x0800175b
 8001414:	0800175b 	.word	0x0800175b
 8001418:	0800175b 	.word	0x0800175b
 800141c:	0800175b 	.word	0x0800175b
 8001420:	0800175b 	.word	0x0800175b
 8001424:	0800175b 	.word	0x0800175b
 8001428:	0800175b 	.word	0x0800175b
 800142c:	0800175b 	.word	0x0800175b
 8001430:	0800175b 	.word	0x0800175b
 8001434:	0800175b 	.word	0x0800175b
 8001438:	080016eb 	.word	0x080016eb
 800143c:	0800175b 	.word	0x0800175b
 8001440:	0800175b 	.word	0x0800175b
 8001444:	080014ad 	.word	0x080014ad
 8001448:	080014bb 	.word	0x080014bb
 800144c:	080014c9 	.word	0x080014c9
 8001450:	080014d7 	.word	0x080014d7
 8001454:	080014e5 	.word	0x080014e5
 8001458:	080014f3 	.word	0x080014f3
 800145c:	08001501 	.word	0x08001501
 8001460:	0800150f 	.word	0x0800150f
 8001464:	0800151d 	.word	0x0800151d
 8001468:	0800152b 	.word	0x0800152b
 800146c:	08001539 	.word	0x08001539
 8001470:	08001547 	.word	0x08001547
 8001474:	08001555 	.word	0x08001555
 8001478:	08001563 	.word	0x08001563
 800147c:	08001571 	.word	0x08001571
 8001480:	0800157f 	.word	0x0800157f
 8001484:	0800158d 	.word	0x0800158d
 8001488:	0800159b 	.word	0x0800159b
 800148c:	080015a9 	.word	0x080015a9
 8001490:	080015b7 	.word	0x080015b7
 8001494:	080015c5 	.word	0x080015c5
 8001498:	080015d3 	.word	0x080015d3
 800149c:	080015e1 	.word	0x080015e1
 80014a0:	080015ef 	.word	0x080015ef
 80014a4:	080015fd 	.word	0x080015fd
 80014a8:	0800160b 	.word	0x0800160b
					keyBoardHIDsub.MODIFIER=0x00;
 80014ac:	4bb1      	ldr	r3, [pc, #708]	@ (8001774 <Set_Character.4+0x454>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	  			    keyBoardHIDsub.KEYCODE2=KEY_A;
 80014b2:	4bb0      	ldr	r3, [pc, #704]	@ (8001774 <Set_Character.4+0x454>)
 80014b4:	2204      	movs	r2, #4
 80014b6:	70da      	strb	r2, [r3, #3]
	  			    break;
 80014b8:	e156      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x00;
 80014ba:	4bae      	ldr	r3, [pc, #696]	@ (8001774 <Set_Character.4+0x454>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
	  	  		  	keyBoardHIDsub.KEYCODE2=KEY_B;
 80014c0:	4bac      	ldr	r3, [pc, #688]	@ (8001774 <Set_Character.4+0x454>)
 80014c2:	2205      	movs	r2, #5
 80014c4:	70da      	strb	r2, [r3, #3]
	  	  		  	break;
 80014c6:	e14f      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80014c8:	4baa      	ldr	r3, [pc, #680]	@ (8001774 <Set_Character.4+0x454>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_C;
 80014ce:	4ba9      	ldr	r3, [pc, #676]	@ (8001774 <Set_Character.4+0x454>)
 80014d0:	2206      	movs	r2, #6
 80014d2:	70da      	strb	r2, [r3, #3]
	    			break;
 80014d4:	e148      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80014d6:	4ba7      	ldr	r3, [pc, #668]	@ (8001774 <Set_Character.4+0x454>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_D;
 80014dc:	4ba5      	ldr	r3, [pc, #660]	@ (8001774 <Set_Character.4+0x454>)
 80014de:	2207      	movs	r2, #7
 80014e0:	70da      	strb	r2, [r3, #3]
	  			break;
 80014e2:	e141      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80014e4:	4ba3      	ldr	r3, [pc, #652]	@ (8001774 <Set_Character.4+0x454>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_E;
 80014ea:	4ba2      	ldr	r3, [pc, #648]	@ (8001774 <Set_Character.4+0x454>)
 80014ec:	2208      	movs	r2, #8
 80014ee:	70da      	strb	r2, [r3, #3]
	  			break;
 80014f0:	e13a      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80014f2:	4ba0      	ldr	r3, [pc, #640]	@ (8001774 <Set_Character.4+0x454>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_F;
 80014f8:	4b9e      	ldr	r3, [pc, #632]	@ (8001774 <Set_Character.4+0x454>)
 80014fa:	2209      	movs	r2, #9
 80014fc:	70da      	strb	r2, [r3, #3]
	  			break;
 80014fe:	e133      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001500:	4b9c      	ldr	r3, [pc, #624]	@ (8001774 <Set_Character.4+0x454>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_G;
 8001506:	4b9b      	ldr	r3, [pc, #620]	@ (8001774 <Set_Character.4+0x454>)
 8001508:	220a      	movs	r2, #10
 800150a:	70da      	strb	r2, [r3, #3]
	  			break;
 800150c:	e12c      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 800150e:	4b99      	ldr	r3, [pc, #612]	@ (8001774 <Set_Character.4+0x454>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_H;
 8001514:	4b97      	ldr	r3, [pc, #604]	@ (8001774 <Set_Character.4+0x454>)
 8001516:	220b      	movs	r2, #11
 8001518:	70da      	strb	r2, [r3, #3]
	  			break;
 800151a:	e125      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 800151c:	4b95      	ldr	r3, [pc, #596]	@ (8001774 <Set_Character.4+0x454>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_I;
 8001522:	4b94      	ldr	r3, [pc, #592]	@ (8001774 <Set_Character.4+0x454>)
 8001524:	220c      	movs	r2, #12
 8001526:	70da      	strb	r2, [r3, #3]
	  			break;
 8001528:	e11e      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 800152a:	4b92      	ldr	r3, [pc, #584]	@ (8001774 <Set_Character.4+0x454>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_J;
 8001530:	4b90      	ldr	r3, [pc, #576]	@ (8001774 <Set_Character.4+0x454>)
 8001532:	220d      	movs	r2, #13
 8001534:	70da      	strb	r2, [r3, #3]
					break;
 8001536:	e117      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001538:	4b8e      	ldr	r3, [pc, #568]	@ (8001774 <Set_Character.4+0x454>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_K;
 800153e:	4b8d      	ldr	r3, [pc, #564]	@ (8001774 <Set_Character.4+0x454>)
 8001540:	220e      	movs	r2, #14
 8001542:	70da      	strb	r2, [r3, #3]
	  			break;
 8001544:	e110      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001546:	4b8b      	ldr	r3, [pc, #556]	@ (8001774 <Set_Character.4+0x454>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_L;
 800154c:	4b89      	ldr	r3, [pc, #548]	@ (8001774 <Set_Character.4+0x454>)
 800154e:	220f      	movs	r2, #15
 8001550:	70da      	strb	r2, [r3, #3]
	  			break;
 8001552:	e109      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001554:	4b87      	ldr	r3, [pc, #540]	@ (8001774 <Set_Character.4+0x454>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_M;
 800155a:	4b86      	ldr	r3, [pc, #536]	@ (8001774 <Set_Character.4+0x454>)
 800155c:	2210      	movs	r2, #16
 800155e:	70da      	strb	r2, [r3, #3]
	  			break;
 8001560:	e102      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001562:	4b84      	ldr	r3, [pc, #528]	@ (8001774 <Set_Character.4+0x454>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_N;
 8001568:	4b82      	ldr	r3, [pc, #520]	@ (8001774 <Set_Character.4+0x454>)
 800156a:	2211      	movs	r2, #17
 800156c:	70da      	strb	r2, [r3, #3]
	  			break;
 800156e:	e0fb      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001570:	4b80      	ldr	r3, [pc, #512]	@ (8001774 <Set_Character.4+0x454>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_O;
 8001576:	4b7f      	ldr	r3, [pc, #508]	@ (8001774 <Set_Character.4+0x454>)
 8001578:	2212      	movs	r2, #18
 800157a:	70da      	strb	r2, [r3, #3]
	  			break;
 800157c:	e0f4      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 800157e:	4b7d      	ldr	r3, [pc, #500]	@ (8001774 <Set_Character.4+0x454>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_P;
 8001584:	4b7b      	ldr	r3, [pc, #492]	@ (8001774 <Set_Character.4+0x454>)
 8001586:	2213      	movs	r2, #19
 8001588:	70da      	strb	r2, [r3, #3]
	  			break;
 800158a:	e0ed      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 800158c:	4b79      	ldr	r3, [pc, #484]	@ (8001774 <Set_Character.4+0x454>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_Q;
 8001592:	4b78      	ldr	r3, [pc, #480]	@ (8001774 <Set_Character.4+0x454>)
 8001594:	2214      	movs	r2, #20
 8001596:	70da      	strb	r2, [r3, #3]
	  			break;
 8001598:	e0e6      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 800159a:	4b76      	ldr	r3, [pc, #472]	@ (8001774 <Set_Character.4+0x454>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_R;
 80015a0:	4b74      	ldr	r3, [pc, #464]	@ (8001774 <Set_Character.4+0x454>)
 80015a2:	2215      	movs	r2, #21
 80015a4:	70da      	strb	r2, [r3, #3]
	  			break;
 80015a6:	e0df      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80015a8:	4b72      	ldr	r3, [pc, #456]	@ (8001774 <Set_Character.4+0x454>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_S;
 80015ae:	4b71      	ldr	r3, [pc, #452]	@ (8001774 <Set_Character.4+0x454>)
 80015b0:	2216      	movs	r2, #22
 80015b2:	70da      	strb	r2, [r3, #3]
	  			break;
 80015b4:	e0d8      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80015b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001774 <Set_Character.4+0x454>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_T;
 80015bc:	4b6d      	ldr	r3, [pc, #436]	@ (8001774 <Set_Character.4+0x454>)
 80015be:	2217      	movs	r2, #23
 80015c0:	70da      	strb	r2, [r3, #3]
	  			break;
 80015c2:	e0d1      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80015c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001774 <Set_Character.4+0x454>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_U;
 80015ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001774 <Set_Character.4+0x454>)
 80015cc:	2218      	movs	r2, #24
 80015ce:	70da      	strb	r2, [r3, #3]
	  			break;
 80015d0:	e0ca      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80015d2:	4b68      	ldr	r3, [pc, #416]	@ (8001774 <Set_Character.4+0x454>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_V;
 80015d8:	4b66      	ldr	r3, [pc, #408]	@ (8001774 <Set_Character.4+0x454>)
 80015da:	2219      	movs	r2, #25
 80015dc:	70da      	strb	r2, [r3, #3]
	  			break;
 80015de:	e0c3      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80015e0:	4b64      	ldr	r3, [pc, #400]	@ (8001774 <Set_Character.4+0x454>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_W;
 80015e6:	4b63      	ldr	r3, [pc, #396]	@ (8001774 <Set_Character.4+0x454>)
 80015e8:	221a      	movs	r2, #26
 80015ea:	70da      	strb	r2, [r3, #3]
				break;
 80015ec:	e0bc      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80015ee:	4b61      	ldr	r3, [pc, #388]	@ (8001774 <Set_Character.4+0x454>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_X;
 80015f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001774 <Set_Character.4+0x454>)
 80015f6:	221b      	movs	r2, #27
 80015f8:	70da      	strb	r2, [r3, #3]
				break;
 80015fa:	e0b5      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 80015fc:	4b5d      	ldr	r3, [pc, #372]	@ (8001774 <Set_Character.4+0x454>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_Y;
 8001602:	4b5c      	ldr	r3, [pc, #368]	@ (8001774 <Set_Character.4+0x454>)
 8001604:	221c      	movs	r2, #28
 8001606:	70da      	strb	r2, [r3, #3]
				break;
 8001608:	e0ae      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 800160a:	4b5a      	ldr	r3, [pc, #360]	@ (8001774 <Set_Character.4+0x454>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_Z;
 8001610:	4b58      	ldr	r3, [pc, #352]	@ (8001774 <Set_Character.4+0x454>)
 8001612:	221d      	movs	r2, #29
 8001614:	70da      	strb	r2, [r3, #3]
				break;
 8001616:	e0a7      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001618:	4b56      	ldr	r3, [pc, #344]	@ (8001774 <Set_Character.4+0x454>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_1;
 800161e:	4b55      	ldr	r3, [pc, #340]	@ (8001774 <Set_Character.4+0x454>)
 8001620:	221e      	movs	r2, #30
 8001622:	70da      	strb	r2, [r3, #3]
				break;
 8001624:	e0a0      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001626:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <Set_Character.4+0x454>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_2;
 800162c:	4b51      	ldr	r3, [pc, #324]	@ (8001774 <Set_Character.4+0x454>)
 800162e:	221f      	movs	r2, #31
 8001630:	70da      	strb	r2, [r3, #3]
				break;
 8001632:	e099      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001634:	4b4f      	ldr	r3, [pc, #316]	@ (8001774 <Set_Character.4+0x454>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_3;
 800163a:	4b4e      	ldr	r3, [pc, #312]	@ (8001774 <Set_Character.4+0x454>)
 800163c:	2220      	movs	r2, #32
 800163e:	70da      	strb	r2, [r3, #3]
				break;
 8001640:	e092      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001642:	4b4c      	ldr	r3, [pc, #304]	@ (8001774 <Set_Character.4+0x454>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_4;
 8001648:	4b4a      	ldr	r3, [pc, #296]	@ (8001774 <Set_Character.4+0x454>)
 800164a:	2221      	movs	r2, #33	@ 0x21
 800164c:	70da      	strb	r2, [r3, #3]
				break;
 800164e:	e08b      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001650:	4b48      	ldr	r3, [pc, #288]	@ (8001774 <Set_Character.4+0x454>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_5;
 8001656:	4b47      	ldr	r3, [pc, #284]	@ (8001774 <Set_Character.4+0x454>)
 8001658:	2222      	movs	r2, #34	@ 0x22
 800165a:	70da      	strb	r2, [r3, #3]
				break;
 800165c:	e084      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 800165e:	4b45      	ldr	r3, [pc, #276]	@ (8001774 <Set_Character.4+0x454>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_6;
 8001664:	4b43      	ldr	r3, [pc, #268]	@ (8001774 <Set_Character.4+0x454>)
 8001666:	2223      	movs	r2, #35	@ 0x23
 8001668:	70da      	strb	r2, [r3, #3]
				break;
 800166a:	e07d      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 800166c:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <Set_Character.4+0x454>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_7;
 8001672:	4b40      	ldr	r3, [pc, #256]	@ (8001774 <Set_Character.4+0x454>)
 8001674:	2224      	movs	r2, #36	@ 0x24
 8001676:	70da      	strb	r2, [r3, #3]
				break;
 8001678:	e076      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 800167a:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <Set_Character.4+0x454>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_8;
 8001680:	4b3c      	ldr	r3, [pc, #240]	@ (8001774 <Set_Character.4+0x454>)
 8001682:	2225      	movs	r2, #37	@ 0x25
 8001684:	70da      	strb	r2, [r3, #3]
				break;
 8001686:	e06f      	b.n	8001768 <Set_Character.4+0x448>
				keyBoardHIDsub.MODIFIER=0x00;
 8001688:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <Set_Character.4+0x454>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_9;
 800168e:	4b39      	ldr	r3, [pc, #228]	@ (8001774 <Set_Character.4+0x454>)
 8001690:	2226      	movs	r2, #38	@ 0x26
 8001692:	70da      	strb	r2, [r3, #3]
				break;
 8001694:	e068      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x00;
 8001696:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <Set_Character.4+0x454>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_0;
 800169c:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <Set_Character.4+0x454>)
 800169e:	2227      	movs	r2, #39	@ 0x27
 80016a0:	70da      	strb	r2, [r3, #3]
				break;
 80016a2:	e061      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x02;
 80016a4:	4b33      	ldr	r3, [pc, #204]	@ (8001774 <Set_Character.4+0x454>)
 80016a6:	2202      	movs	r2, #2
 80016a8:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_1;
 80016aa:	4b32      	ldr	r3, [pc, #200]	@ (8001774 <Set_Character.4+0x454>)
 80016ac:	221e      	movs	r2, #30
 80016ae:	70da      	strb	r2, [r3, #3]
				break;
 80016b0:	e05a      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x02;
 80016b2:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <Set_Character.4+0x454>)
 80016b4:	2202      	movs	r2, #2
 80016b6:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_2;
 80016b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <Set_Character.4+0x454>)
 80016ba:	221f      	movs	r2, #31
 80016bc:	70da      	strb	r2, [r3, #3]
				break;
 80016be:	e053      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x00;
 80016c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001774 <Set_Character.4+0x454>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_BACKSPACE;
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <Set_Character.4+0x454>)
 80016c8:	222a      	movs	r2, #42	@ 0x2a
 80016ca:	70da      	strb	r2, [r3, #3]
				break;
 80016cc:	e04c      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x02;
 80016ce:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <Set_Character.4+0x454>)
 80016d0:	2202      	movs	r2, #2
 80016d2:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_4;
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <Set_Character.4+0x454>)
 80016d6:	2221      	movs	r2, #33	@ 0x21
 80016d8:	70da      	strb	r2, [r3, #3]
				break;
 80016da:	e045      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x02;
 80016dc:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <Set_Character.4+0x454>)
 80016de:	2202      	movs	r2, #2
 80016e0:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_5;
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <Set_Character.4+0x454>)
 80016e4:	2222      	movs	r2, #34	@ 0x22
 80016e6:	70da      	strb	r2, [r3, #3]
				break;
 80016e8:	e03e      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x02;
 80016ea:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <Set_Character.4+0x454>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_6;
 80016f0:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <Set_Character.4+0x454>)
 80016f2:	2223      	movs	r2, #35	@ 0x23
 80016f4:	70da      	strb	r2, [r3, #3]
				break;
 80016f6:	e037      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x02;
 80016f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <Set_Character.4+0x454>)
 80016fa:	2202      	movs	r2, #2
 80016fc:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_7;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <Set_Character.4+0x454>)
 8001700:	2224      	movs	r2, #36	@ 0x24
 8001702:	70da      	strb	r2, [r3, #3]
				break;
 8001704:	e030      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x02;
 8001706:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <Set_Character.4+0x454>)
 8001708:	2202      	movs	r2, #2
 800170a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_8;
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <Set_Character.4+0x454>)
 800170e:	2225      	movs	r2, #37	@ 0x25
 8001710:	70da      	strb	r2, [r3, #3]
				break;
 8001712:	e029      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x02;
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <Set_Character.4+0x454>)
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_9;
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <Set_Character.4+0x454>)
 800171c:	2226      	movs	r2, #38	@ 0x26
 800171e:	70da      	strb	r2, [r3, #3]
				break;
 8001720:	e022      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x02;
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <Set_Character.4+0x454>)
 8001724:	2202      	movs	r2, #2
 8001726:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_0;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <Set_Character.4+0x454>)
 800172a:	2227      	movs	r2, #39	@ 0x27
 800172c:	70da      	strb	r2, [r3, #3]
				break;
 800172e:	e01b      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x02;
 8001730:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <Set_Character.4+0x454>)
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_SPACE;
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <Set_Character.4+0x454>)
 8001738:	222c      	movs	r2, #44	@ 0x2c
 800173a:	70da      	strb	r2, [r3, #3]
				break;
 800173c:	e014      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x00;
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <Set_Character.4+0x454>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_SPACE;
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <Set_Character.4+0x454>)
 8001746:	222c      	movs	r2, #44	@ 0x2c
 8001748:	70da      	strb	r2, [r3, #3]
				break;
 800174a:	e00d      	b.n	8001768 <Set_Character.4+0x448>
								keyBoardHIDsub.MODIFIER=0x00;
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <Set_Character.4+0x454>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
								keyBoardHIDsub.KEYCODE2=KEY_APOSTROPHE;
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <Set_Character.4+0x454>)
 8001754:	2234      	movs	r2, #52	@ 0x34
 8001756:	70da      	strb	r2, [r3, #3]
							break;
 8001758:	e006      	b.n	8001768 <Set_Character.4+0x448>
					keyBoardHIDsub.MODIFIER=0x00;
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <Set_Character.4+0x454>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=0x00;
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <Set_Character.4+0x454>)
 8001762:	2200      	movs	r2, #0
 8001764:	70da      	strb	r2, [r3, #3]
				break;
 8001766:	bf00      	nop
  }
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	200001c4 	.word	0x200001c4

08001778 <hashFunction.2>:
  unsigned int hashFunction(const char *key) {
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	f8c7 c000 	str.w	ip, [r7]
      unsigned int hash = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
      while (*key) {
 8001788:	e007      	b.n	800179a <hashFunction.2+0x22>
          hash = (hash << 5) + *key++;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	1c59      	adds	r1, r3, #1
 8001792:	6079      	str	r1, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
      while (*key) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f3      	bne.n	800178a <hashFunction.2+0x12>
      return hash % TABLE_SIZE;
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <hashFunction.2+0x4c>)
 80017a6:	fba3 1302 	umull	r1, r3, r3, r2
 80017aa:	09db      	lsrs	r3, r3, #7
 80017ac:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	1ad3      	subs	r3, r2, r3
  }
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	10624dd3 	.word	0x10624dd3

080017c8 <insert.1>:
  void insert(const char *key, const char *value) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	4663      	mov	r3, ip
 80017d4:	f8c7 c004 	str.w	ip, [r7, #4]
      unsigned int index = hashFunction(key);
 80017d8:	469c      	mov	ip, r3
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff ffcc 	bl	8001778 <hashFunction.2>
 80017e0:	6178      	str	r0, [r7, #20]
      HashEntry *entry = (HashEntry *)malloc(sizeof(HashEntry));
 80017e2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80017e6:	f006 fd57 	bl	8008298 <malloc>
 80017ea:	4603      	mov	r3, r0
 80017ec:	613b      	str	r3, [r7, #16]
      strcpy(entry->key, key);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f006 fe4a 	bl	800848c <strcpy>
      strcpy(entry->value, value);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	4618      	mov	r0, r3
 8001802:	f006 fe43 	bl	800848c <strcpy>
      hashTable[index] = entry;
 8001806:	4904      	ldr	r1, [pc, #16]	@ (8001818 <insert.1+0x50>)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200001cc 	.word	0x200001cc

0800181c <search.8>:
  const char *search(const char *key) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	4663      	mov	r3, ip
 8001826:	f8c7 c000 	str.w	ip, [r7]
      unsigned int index = hashFunction(key);
 800182a:	469c      	mov	ip, r3
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffa3 	bl	8001778 <hashFunction.2>
 8001832:	60f8      	str	r0, [r7, #12]
      if (hashTable[index] != NULL && strcmp(hashTable[index]->key, key) == 0) {
 8001834:	4a0e      	ldr	r2, [pc, #56]	@ (8001870 <search.8+0x54>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d011      	beq.n	8001864 <search.8+0x48>
 8001840:	4a0b      	ldr	r2, [pc, #44]	@ (8001870 <search.8+0x54>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fcc4 	bl	80001d8 <strcmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <search.8+0x48>
          return hashTable[index]->value;
 8001856:	4a06      	ldr	r2, [pc, #24]	@ (8001870 <search.8+0x54>)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001862:	e000      	b.n	8001866 <search.8+0x4a>
      return NULL;
 8001864:	2300      	movs	r3, #0
  }
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001cc 	.word	0x200001cc

08001874 <hashInit.0>:
  void hashInit(){
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	4664      	mov	r4, ip
 800187c:	f8c7 c004 	str.w	ip, [r7, #4]
	    for (int i = 0; i < TABLE_SIZE; i++) {
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e007      	b.n	8001896 <hashInit.0+0x22>
	        hashTable[i] = NULL;
 8001886:	4a44      	ldr	r2, [pc, #272]	@ (8001998 <hashInit.0+0x124>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2100      	movs	r1, #0
 800188c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    for (int i = 0; i < TABLE_SIZE; i++) {
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3301      	adds	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800189c:	dbf3      	blt.n	8001886 <hashInit.0+0x12>
	    insert("S", "is");
 800189e:	46a4      	mov	ip, r4
 80018a0:	493e      	ldr	r1, [pc, #248]	@ (800199c <hashInit.0+0x128>)
 80018a2:	483f      	ldr	r0, [pc, #252]	@ (80019a0 <hashInit.0+0x12c>)
 80018a4:	f7ff ff90 	bl	80017c8 <insert.1>
	    insert("ST", "is it");
 80018a8:	46a4      	mov	ip, r4
 80018aa:	493e      	ldr	r1, [pc, #248]	@ (80019a4 <hashInit.0+0x130>)
 80018ac:	483e      	ldr	r0, [pc, #248]	@ (80019a8 <hashInit.0+0x134>)
 80018ae:	f7ff ff8b 	bl	80017c8 <insert.1>
	    insert("STK", "and");
 80018b2:	46a4      	mov	ip, r4
 80018b4:	493d      	ldr	r1, [pc, #244]	@ (80019ac <hashInit.0+0x138>)
 80018b6:	483e      	ldr	r0, [pc, #248]	@ (80019b0 <hashInit.0+0x13c>)
 80018b8:	f7ff ff86 	bl	80017c8 <insert.1>
	    insert("SAOU", "sue");
 80018bc:	46a4      	mov	ip, r4
 80018be:	493d      	ldr	r1, [pc, #244]	@ (80019b4 <hashInit.0+0x140>)
 80018c0:	483d      	ldr	r0, [pc, #244]	@ (80019b8 <hashInit.0+0x144>)
 80018c2:	f7ff ff81 	bl	80017c8 <insert.1>
	    insert("SAOPB", "soon");
 80018c6:	46a4      	mov	ip, r4
 80018c8:	493c      	ldr	r1, [pc, #240]	@ (80019bc <hashInit.0+0x148>)
 80018ca:	483d      	ldr	r0, [pc, #244]	@ (80019c0 <hashInit.0+0x14c>)
 80018cc:	f7ff ff7c 	bl	80017c8 <insert.1>
	    insert("P", "about");
 80018d0:	46a4      	mov	ip, r4
 80018d2:	493c      	ldr	r1, [pc, #240]	@ (80019c4 <hashInit.0+0x150>)
 80018d4:	483c      	ldr	r0, [pc, #240]	@ (80019c8 <hashInit.0+0x154>)
 80018d6:	f7ff ff77 	bl	80017c8 <insert.1>
	    insert("KOD", "cod");
 80018da:	46a4      	mov	ip, r4
 80018dc:	493b      	ldr	r1, [pc, #236]	@ (80019cc <hashInit.0+0x158>)
 80018de:	483c      	ldr	r0, [pc, #240]	@ (80019d0 <hashInit.0+0x15c>)
 80018e0:	f7ff ff72 	bl	80017c8 <insert.1>
	    insert("TAO*E", "ty");
 80018e4:	46a4      	mov	ip, r4
 80018e6:	493b      	ldr	r1, [pc, #236]	@ (80019d4 <hashInit.0+0x160>)
 80018e8:	483b      	ldr	r0, [pc, #236]	@ (80019d8 <hashInit.0+0x164>)
 80018ea:	f7ff ff6d 	bl	80017c8 <insert.1>
	    insert("STRA/TA", "strata");
 80018ee:	46a4      	mov	ip, r4
 80018f0:	493a      	ldr	r1, [pc, #232]	@ (80019dc <hashInit.0+0x168>)
 80018f2:	483b      	ldr	r0, [pc, #236]	@ (80019e0 <hashInit.0+0x16c>)
 80018f4:	f7ff ff68 	bl	80017c8 <insert.1>
	    insert("STA/TAOU/KWOE", "status quo");
 80018f8:	46a4      	mov	ip, r4
 80018fa:	493a      	ldr	r1, [pc, #232]	@ (80019e4 <hashInit.0+0x170>)
 80018fc:	483a      	ldr	r0, [pc, #232]	@ (80019e8 <hashInit.0+0x174>)
 80018fe:	f7ff ff63 	bl	80017c8 <insert.1>
	    insert("STA/TAOU", "statue");
 8001902:	46a4      	mov	ip, r4
 8001904:	4939      	ldr	r1, [pc, #228]	@ (80019ec <hashInit.0+0x178>)
 8001906:	483a      	ldr	r0, [pc, #232]	@ (80019f0 <hashInit.0+0x17c>)
 8001908:	f7ff ff5e 	bl	80017c8 <insert.1>
	    insert("STAT/WET", "statuette");
 800190c:	46a4      	mov	ip, r4
 800190e:	4939      	ldr	r1, [pc, #228]	@ (80019f4 <hashInit.0+0x180>)
 8001910:	4839      	ldr	r0, [pc, #228]	@ (80019f8 <hashInit.0+0x184>)
 8001912:	f7ff ff59 	bl	80017c8 <insert.1>
		insert("TKO*FG", "doing");
 8001916:	46a4      	mov	ip, r4
 8001918:	4938      	ldr	r1, [pc, #224]	@ (80019fc <hashInit.0+0x188>)
 800191a:	4839      	ldr	r0, [pc, #228]	@ (8001a00 <hashInit.0+0x18c>)
 800191c:	f7ff ff54 	bl	80017c8 <insert.1>
		insert("TKO", "do");
 8001920:	46a4      	mov	ip, r4
 8001922:	4938      	ldr	r1, [pc, #224]	@ (8001a04 <hashInit.0+0x190>)
 8001924:	4838      	ldr	r0, [pc, #224]	@ (8001a08 <hashInit.0+0x194>)
 8001926:	f7ff ff4f 	bl	80017c8 <insert.1>
		insert("TKAUS", "cause");
 800192a:	46a4      	mov	ip, r4
 800192c:	4937      	ldr	r1, [pc, #220]	@ (8001a0c <hashInit.0+0x198>)
 800192e:	4838      	ldr	r0, [pc, #224]	@ (8001a10 <hashInit.0+0x19c>)
 8001930:	f7ff ff4a 	bl	80017c8 <insert.1>
		insert("TKAET", "data");
 8001934:	46a4      	mov	ip, r4
 8001936:	4937      	ldr	r1, [pc, #220]	@ (8001a14 <hashInit.0+0x1a0>)
 8001938:	4837      	ldr	r0, [pc, #220]	@ (8001a18 <hashInit.0+0x1a4>)
 800193a:	f7ff ff45 	bl	80017c8 <insert.1>
		insert("TKAEUPBT", "didn't"),
 800193e:	46a4      	mov	ip, r4
 8001940:	4936      	ldr	r1, [pc, #216]	@ (8001a1c <hashInit.0+0x1a8>)
 8001942:	4837      	ldr	r0, [pc, #220]	@ (8001a20 <hashInit.0+0x1ac>)
 8001944:	f7ff ff40 	bl	80017c8 <insert.1>
		insert("TKAEU", "day");
 8001948:	46a4      	mov	ip, r4
 800194a:	4936      	ldr	r1, [pc, #216]	@ (8001a24 <hashInit.0+0x1b0>)
 800194c:	4836      	ldr	r0, [pc, #216]	@ (8001a28 <hashInit.0+0x1b4>)
 800194e:	f7ff ff3b 	bl	80017c8 <insert.1>
		insert("TKAOS", "does");
 8001952:	46a4      	mov	ip, r4
 8001954:	4935      	ldr	r1, [pc, #212]	@ (8001a2c <hashInit.0+0x1b8>)
 8001956:	4836      	ldr	r0, [pc, #216]	@ (8001a30 <hashInit.0+0x1bc>)
 8001958:	f7ff ff36 	bl	80017c8 <insert.1>
		insert("TKAOUT", "duty");
 800195c:	46a4      	mov	ip, r4
 800195e:	4935      	ldr	r1, [pc, #212]	@ (8001a34 <hashInit.0+0x1c0>)
 8001960:	4835      	ldr	r0, [pc, #212]	@ (8001a38 <hashInit.0+0x1c4>)
 8001962:	f7ff ff31 	bl	80017c8 <insert.1>
		insert("TKAOU", "due");
 8001966:	46a4      	mov	ip, r4
 8001968:	4934      	ldr	r1, [pc, #208]	@ (8001a3c <hashInit.0+0x1c8>)
 800196a:	4835      	ldr	r0, [pc, #212]	@ (8001a40 <hashInit.0+0x1cc>)
 800196c:	f7ff ff2c 	bl	80017c8 <insert.1>
		insert("TKAOE/TPAULT", "default");
 8001970:	46a4      	mov	ip, r4
 8001972:	4934      	ldr	r1, [pc, #208]	@ (8001a44 <hashInit.0+0x1d0>)
 8001974:	4834      	ldr	r0, [pc, #208]	@ (8001a48 <hashInit.0+0x1d4>)
 8001976:	f7ff ff27 	bl	80017c8 <insert.1>
		insert("LT", "#ing");
 800197a:	46a4      	mov	ip, r4
 800197c:	4933      	ldr	r1, [pc, #204]	@ (8001a4c <hashInit.0+0x1d8>)
 800197e:	4834      	ldr	r0, [pc, #208]	@ (8001a50 <hashInit.0+0x1dc>)
 8001980:	f7ff ff22 	bl	80017c8 <insert.1>
		insert("LG", "#n't");
 8001984:	46a4      	mov	ip, r4
 8001986:	4933      	ldr	r1, [pc, #204]	@ (8001a54 <hashInit.0+0x1e0>)
 8001988:	4833      	ldr	r0, [pc, #204]	@ (8001a58 <hashInit.0+0x1e4>)
 800198a:	f7ff ff1d 	bl	80017c8 <insert.1>
  }
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	bf00      	nop
 8001998:	200001cc 	.word	0x200001cc
 800199c:	080084cc 	.word	0x080084cc
 80019a0:	080084d0 	.word	0x080084d0
 80019a4:	080084d4 	.word	0x080084d4
 80019a8:	080084dc 	.word	0x080084dc
 80019ac:	080084e0 	.word	0x080084e0
 80019b0:	080084e4 	.word	0x080084e4
 80019b4:	080084e8 	.word	0x080084e8
 80019b8:	080084ec 	.word	0x080084ec
 80019bc:	080084f4 	.word	0x080084f4
 80019c0:	080084fc 	.word	0x080084fc
 80019c4:	08008504 	.word	0x08008504
 80019c8:	0800850c 	.word	0x0800850c
 80019cc:	08008510 	.word	0x08008510
 80019d0:	08008514 	.word	0x08008514
 80019d4:	08008518 	.word	0x08008518
 80019d8:	0800851c 	.word	0x0800851c
 80019dc:	08008524 	.word	0x08008524
 80019e0:	0800852c 	.word	0x0800852c
 80019e4:	08008534 	.word	0x08008534
 80019e8:	08008540 	.word	0x08008540
 80019ec:	08008550 	.word	0x08008550
 80019f0:	08008558 	.word	0x08008558
 80019f4:	08008564 	.word	0x08008564
 80019f8:	08008570 	.word	0x08008570
 80019fc:	0800857c 	.word	0x0800857c
 8001a00:	08008584 	.word	0x08008584
 8001a04:	0800858c 	.word	0x0800858c
 8001a08:	08008590 	.word	0x08008590
 8001a0c:	08008594 	.word	0x08008594
 8001a10:	0800859c 	.word	0x0800859c
 8001a14:	080085a4 	.word	0x080085a4
 8001a18:	080085ac 	.word	0x080085ac
 8001a1c:	080085b4 	.word	0x080085b4
 8001a20:	080085bc 	.word	0x080085bc
 8001a24:	080085c8 	.word	0x080085c8
 8001a28:	080085cc 	.word	0x080085cc
 8001a2c:	080085d4 	.word	0x080085d4
 8001a30:	080085dc 	.word	0x080085dc
 8001a34:	080085e4 	.word	0x080085e4
 8001a38:	080085ec 	.word	0x080085ec
 8001a3c:	080085f4 	.word	0x080085f4
 8001a40:	080085f8 	.word	0x080085f8
 8001a44:	08008600 	.word	0x08008600
 8001a48:	08008608 	.word	0x08008608
 8001a4c:	08008618 	.word	0x08008618
 8001a50:	08008620 	.word	0x08008620
 8001a54:	08008624 	.word	0x08008624
 8001a58:	0800862c 	.word	0x0800862c

08001a5c <sendBuffer.7>:
  void sendBuffer(){
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4664      	mov	r4, ip
 8001a64:	f8c7 c004 	str.w	ip, [r7, #4]
	  for(int n = 0; n < bufferItemsNumber; n++){
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e00f      	b.n	8001a8e <sendBuffer.7+0x32>
			strcpy(result, (search(charbuffer)));
 8001a6e:	f104 0510 	add.w	r5, r4, #16
 8001a72:	f104 0326 	add.w	r3, r4, #38	@ 0x26
 8001a76:	46a4      	mov	ip, r4
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fecf 	bl	800181c <search.8>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4628      	mov	r0, r5
 8001a84:	f006 fd02 	bl	800848c <strcpy>
	  for(int n = 0; n < bufferItemsNumber; n++){
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68e3      	ldr	r3, [r4, #12]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dbeb      	blt.n	8001a6e <sendBuffer.7+0x12>
		  for(int n = 0; n < strlen(result); n++){
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	e00d      	b.n	8001ab8 <sendBuffer.7+0x5c>
		  Set_Character(result[n]);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4423      	add	r3, r4
 8001aa0:	3310      	adds	r3, #16
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	46a4      	mov	ip, r4
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fc3a 	bl	8001320 <Set_Character.4>
		  Send_Character();
 8001aac:	46a4      	mov	ip, r4
 8001aae:	f7ff fc13 	bl	80012d8 <Send_Character.9>
		  for(int n = 0; n < strlen(result); n++){
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	f104 0310 	add.w	r3, r4, #16
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fb95 	bl	80001ec <strlen>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d8e8      	bhi.n	8001a9c <sendBuffer.7+0x40>
		  Set_Character(' ');
 8001aca:	46a4      	mov	ip, r4
 8001acc:	2020      	movs	r0, #32
 8001ace:	f7ff fc27 	bl	8001320 <Set_Character.4>
		  Send_Character();
 8001ad2:	46a4      	mov	ip, r4
 8001ad4:	f7ff fc00 	bl	80012d8 <Send_Character.9>
		  bufferItemsNumber = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60e3      	str	r3, [r4, #12]
		  Clear_Buffer();
 8001adc:	46a4      	mov	ip, r4
 8001ade:	f7ff fbdf 	bl	80012a0 <Clear_Buffer.10>
  }
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bdb0      	pop	{r4, r5, r7, pc}

08001aea <translation.6>:
  void translation(int n, char c){
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	460b      	mov	r3, r1
 8001af4:	72fb      	strb	r3, [r7, #11]
 8001af6:	4663      	mov	r3, ip
 8001af8:	f8c7 c004 	str.w	ip, [r7, #4]
  	  if(n == 1){
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	2a01      	cmp	r2, #1
 8001b00:	d103      	bne.n	8001b0a <translation.6+0x20>
  		  sendBuffer();
 8001b02:	469c      	mov	ip, r3
 8001b04:	f7ff ffaa 	bl	8001a5c <sendBuffer.7>
    }
 8001b08:	e007      	b.n	8001b1a <translation.6+0x30>
  		  charbuffer[bufferItemsNumber] = c;
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	441a      	add	r2, r3
 8001b0e:	7af9      	ldrb	r1, [r7, #11]
 8001b10:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
  		  bufferItemsNumber += 1;
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	3201      	adds	r2, #1
 8001b18:	60da      	str	r2, [r3, #12]
    }
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <CounterRestart.11>:
  void CounterRestart(){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_TIM_Base_Stop_IT(&htim10);
 8001b2e:	4808      	ldr	r0, [pc, #32]	@ (8001b50 <CounterRestart.11+0x2c>)
 8001b30:	f002 fd14 	bl	800455c <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(&htim10, 0);
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <CounterRestart.11+0x2c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24
	  elapsedTime = 0;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <CounterRestart.11+0x30>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT(&htim10);
 8001b42:	4803      	ldr	r0, [pc, #12]	@ (8001b50 <CounterRestart.11+0x2c>)
 8001b44:	f002 fca8 	bl	8004498 <HAL_TIM_Base_Start_IT>
  }
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	2000017c 	.word	0x2000017c
 8001b54:	2000210c 	.word	0x2000210c

08001b58 <Send_Gate.5>:
  void Send_Gate(int n, char c) {
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	460b      	mov	r3, r1
 8001b62:	72fb      	strb	r3, [r7, #11]
 8001b64:	4664      	mov	r4, ip
 8001b66:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(previousChar == 0 && n == 24){
 8001b6a:	68a3      	ldr	r3, [r4, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <Send_Gate.5+0x1e>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b18      	cmp	r3, #24
 8001b74:	d02b      	beq.n	8001bce <Send_Gate.5+0x76>
  	  if(previousChar < n || n == 1 || n == 24){
 8001b76:	68a2      	ldr	r2, [r4, #8]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	db05      	blt.n	8001b8a <Send_Gate.5+0x32>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d002      	beq.n	8001b8a <Send_Gate.5+0x32>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b18      	cmp	r3, #24
 8001b88:	d122      	bne.n	8001bd0 <Send_Gate.5+0x78>
  		  if(n != lastPress){
 8001b8a:	6863      	ldr	r3, [r4, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d002      	beq.n	8001b98 <Send_Gate.5+0x40>
  			  timeout = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	e002      	b.n	8001b9e <Send_Gate.5+0x46>
  			  timeout +=1;
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	6023      	str	r3, [r4, #0]
  		  if(timeout >= 1200 || timeout == 0){
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001ba4:	da02      	bge.n	8001bac <Send_Gate.5+0x54>
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d108      	bne.n	8001bbe <Send_Gate.5+0x66>
  			  translation(n, c);
 8001bac:	7afb      	ldrb	r3, [r7, #11]
 8001bae:	46a4      	mov	ip, r4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7ff ff99 	bl	8001aea <translation.6>
  			  CounterRestart();
 8001bb8:	46a4      	mov	ip, r4
 8001bba:	f7ff ffb3 	bl	8001b24 <CounterRestart.11>
  		  previousChar = n;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	60a3      	str	r3, [r4, #8]
  		  if(n == 24){
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b18      	cmp	r3, #24
 8001bc6:	d103      	bne.n	8001bd0 <Send_Gate.5+0x78>
			  previousChar = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60a3      	str	r3, [r4, #8]
 8001bcc:	e000      	b.n	8001bd0 <Send_Gate.5+0x78>
		  return;
 8001bce:	bf00      	nop
    }
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}
	...

08001bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b094      	sub	sp, #80	@ 0x50
 8001bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	2230      	movs	r2, #48	@ 0x30
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f006 fc0c 	bl	8008404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	4b27      	ldr	r3, [pc, #156]	@ (8001ca0 <SystemClock_Config+0xc8>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	4a26      	ldr	r2, [pc, #152]	@ (8001ca0 <SystemClock_Config+0xc8>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <SystemClock_Config+0xc8>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <SystemClock_Config+0xcc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a20      	ldr	r2, [pc, #128]	@ (8001ca4 <SystemClock_Config+0xcc>)
 8001c22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <SystemClock_Config+0xcc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c34:	2301      	movs	r3, #1
 8001c36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c48:	2319      	movs	r3, #25
 8001c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c4c:	23c0      	movs	r3, #192	@ 0xc0
 8001c4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c54:	2304      	movs	r3, #4
 8001c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 ff9b 	bl	8003b98 <HAL_RCC_OscConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c68:	f000 f8f2 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c70:	2302      	movs	r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	2103      	movs	r1, #3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 f9fd 	bl	8004088 <HAL_RCC_ClockConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c94:	f000 f8dc 	bl	8001e50 <Error_Handler>
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3750      	adds	r7, #80	@ 0x50
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000

08001ca8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <MX_TIM10_Init+0x40>)
 8001cae:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <MX_TIM10_Init+0x44>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000 - 1;
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <MX_TIM10_Init+0x40>)
 8001cb4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001cb8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <MX_TIM10_Init+0x40>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000 - 1;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <MX_TIM10_Init+0x40>)
 8001cc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cc6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <MX_TIM10_Init+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <MX_TIM10_Init+0x40>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	@ (8001ce8 <MX_TIM10_Init+0x40>)
 8001cd6:	f002 fb8f 	bl	80043f8 <HAL_TIM_Base_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001ce0:	f000 f8b6 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000017c 	.word	0x2000017c
 8001cec:	40014400 	.word	0x40014400

08001cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b41      	ldr	r3, [pc, #260]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a40      	ldr	r2, [pc, #256]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b3e      	ldr	r3, [pc, #248]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b3a      	ldr	r3, [pc, #232]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4a39      	ldr	r2, [pc, #228]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4b37      	ldr	r3, [pc, #220]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b33      	ldr	r3, [pc, #204]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4a32      	ldr	r2, [pc, #200]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4b30      	ldr	r3, [pc, #192]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4a2b      	ldr	r2, [pc, #172]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4b29      	ldr	r3, [pc, #164]	@ (8001e10 <MX_GPIO_Init+0x120>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d7c:	4825      	ldr	r0, [pc, #148]	@ (8001e14 <MX_GPIO_Init+0x124>)
 8001d7e:	f000 fcb7 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	21f0      	movs	r1, #240	@ 0xf0
 8001d86:	4824      	ldr	r0, [pc, #144]	@ (8001e18 <MX_GPIO_Init+0x128>)
 8001d88:	f000 fcb2 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Column5_Pin|Column6_Pin|Column7_Pin|Column8_Pin
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f247 4107 	movw	r1, #29703	@ 0x7407
 8001d92:	4822      	ldr	r0, [pc, #136]	@ (8001e1c <MX_GPIO_Init+0x12c>)
 8001d94:	f000 fcac 	bl	80026f0 <HAL_GPIO_WritePin>
                          |Column11_Pin|Column10_Pin|Column9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4818      	ldr	r0, [pc, #96]	@ (8001e14 <MX_GPIO_Init+0x124>)
 8001db2:	f000 fb01 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row1_Pin Row2_Pin Row3_Pin Row4_Pin */
  GPIO_InitStruct.Pin = Row1_Pin|Row2_Pin|Row3_Pin|Row4_Pin;
 8001db6:	230f      	movs	r3, #15
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4813      	ldr	r0, [pc, #76]	@ (8001e18 <MX_GPIO_Init+0x128>)
 8001dca:	f000 faf5 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Column1_Pin Column2_Pin Column3_Pin Column4_Pin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 8001dce:	23f0      	movs	r3, #240	@ 0xf0
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <MX_GPIO_Init+0x128>)
 8001de6:	f000 fae7 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Column5_Pin Column6_Pin Column7_Pin Column8_Pin
                           Column11_Pin Column10_Pin Column9_Pin */
  GPIO_InitStruct.Pin = Column5_Pin|Column6_Pin|Column7_Pin|Column8_Pin
 8001dea:	f247 4307 	movw	r3, #29703	@ 0x7407
 8001dee:	617b      	str	r3, [r7, #20]
                          |Column11_Pin|Column10_Pin|Column9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	4806      	ldr	r0, [pc, #24]	@ (8001e1c <MX_GPIO_Init+0x12c>)
 8001e04:	f000 fad8 	bl	80023b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e08:	bf00      	nop
 8001e0a:	3728      	adds	r7, #40	@ 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400

08001e20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    		if(htim == &htim10){
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a07      	ldr	r2, [pc, #28]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d104      	bne.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0x1a>
    			elapsedTime++;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001e38:	6013      	str	r3, [r2, #0]
    		}
    	}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	2000017c 	.word	0x2000017c
 8001e4c:	2000210c 	.word	0x2000210c

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e54:	b672      	cpsid	i
}
 8001e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <Error_Handler+0x8>

08001e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_MspInit+0x4c>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea8 <HAL_MspInit+0x4c>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_MspInit+0x4c>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_MspInit+0x4c>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <HAL_MspInit+0x4c>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_MspInit+0x4c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800

08001eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <HAL_TIM_Base_MspInit+0x48>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d115      	bne.n	8001eea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	2019      	movs	r0, #25
 8001ee0:	f000 fa33 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ee4:	2019      	movs	r0, #25
 8001ee6:	f000 fa4c 	bl	8002382 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40014400 	.word	0x40014400
 8001ef8:	40023800 	.word	0x40023800

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <NMI_Handler+0x4>

08001f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <MemManage_Handler+0x4>

08001f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f52:	f000 f8db 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f60:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f62:	f002 fb2a 	bl	80045ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000017c 	.word	0x2000017c

08001f70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <OTG_FS_IRQHandler+0x10>)
 8001f76:	f000 fd18 	bl	80029aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200025f8 	.word	0x200025f8

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	@ (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f006 fa3e 	bl	8008434 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20020000 	.word	0x20020000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	20002110 	.word	0x20002110
 8001fec:	20002c38 	.word	0x20002c38

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800204c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002018:	f7ff ffea 	bl	8001ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800201c:	480c      	ldr	r0, [pc, #48]	@ (8002050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201e:	490d      	ldr	r1, [pc, #52]	@ (8002054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002020:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002034:	4c0a      	ldr	r4, [pc, #40]	@ (8002060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002042:	f006 f9fd 	bl	8008440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7fe fde1 	bl	8000c0c <main>
  bx  lr    
 800204a:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 800204c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002058:	08008698 	.word	0x08008698
  ldr r2, =_sbss
 800205c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8002060:	20002c38 	.word	0x20002c38

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <HAL_Init+0x40>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <HAL_Init+0x40>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <HAL_Init+0x40>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f94f 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	200f      	movs	r0, #15
 8002098:	f000 f808 	bl	80020ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7ff fede 	bl	8001e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00

080020ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <HAL_InitTick+0x54>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_InitTick+0x58>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f967 	bl	800239e <HAL_SYSTICK_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00e      	b.n	80020f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d80a      	bhi.n	80020f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f000 f92f 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ec:	4a06      	ldr	r2, [pc, #24]	@ (8002108 <HAL_InitTick+0x5c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000000 	.word	0x20000000
 8002104:	20000008 	.word	0x20000008
 8002108:	20000004 	.word	0x20000004

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000008 	.word	0x20000008
 8002130:	20002114 	.word	0x20002114

08002134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b03      	ldr	r3, [pc, #12]	@ (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20002114 	.word	0x20002114

0800214c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff ffee 	bl	8002134 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d005      	beq.n	8002172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_Delay+0x44>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002172:	bf00      	nop
 8002174:	f7ff ffde 	bl	8002134 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f7      	bhi.n	8002174 <HAL_Delay+0x28>
  {
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000008 	.word	0x20000008

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	@ (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	@ (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	@ (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff3e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff31 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e159      	b.n	8002688 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f040 8148 	bne.w	8002682 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d005      	beq.n	800240a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002406:	2b02      	cmp	r3, #2
 8002408:	d130      	bne.n	800246c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0201 	and.w	r2, r3, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d017      	beq.n	80024a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d123      	bne.n	80024fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a2 	beq.w	8002682 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b57      	ldr	r3, [pc, #348]	@ (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	4a56      	ldr	r2, [pc, #344]	@ (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800254c:	6453      	str	r3, [r2, #68]	@ 0x44
 800254e:	4b54      	ldr	r3, [pc, #336]	@ (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255a:	4a52      	ldr	r2, [pc, #328]	@ (80026a4 <HAL_GPIO_Init+0x2ec>)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a49      	ldr	r2, [pc, #292]	@ (80026a8 <HAL_GPIO_Init+0x2f0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d019      	beq.n	80025ba <HAL_GPIO_Init+0x202>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a48      	ldr	r2, [pc, #288]	@ (80026ac <HAL_GPIO_Init+0x2f4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0x1fe>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a47      	ldr	r2, [pc, #284]	@ (80026b0 <HAL_GPIO_Init+0x2f8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00d      	beq.n	80025b2 <HAL_GPIO_Init+0x1fa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a46      	ldr	r2, [pc, #280]	@ (80026b4 <HAL_GPIO_Init+0x2fc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_GPIO_Init+0x1f6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a45      	ldr	r2, [pc, #276]	@ (80026b8 <HAL_GPIO_Init+0x300>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_GPIO_Init+0x1f2>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e008      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025aa:	2307      	movs	r3, #7
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	@ (80026a4 <HAL_GPIO_Init+0x2ec>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4b38      	ldr	r3, [pc, #224]	@ (80026bc <HAL_GPIO_Init+0x304>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fe:	4a2f      	ldr	r2, [pc, #188]	@ (80026bc <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002604:	4b2d      	ldr	r3, [pc, #180]	@ (80026bc <HAL_GPIO_Init+0x304>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002628:	4a24      	ldr	r2, [pc, #144]	@ (80026bc <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262e:	4b23      	ldr	r3, [pc, #140]	@ (80026bc <HAL_GPIO_Init+0x304>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002652:	4a1a      	ldr	r2, [pc, #104]	@ (80026bc <HAL_GPIO_Init+0x304>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002658:	4b18      	ldr	r3, [pc, #96]	@ (80026bc <HAL_GPIO_Init+0x304>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800267c:	4a0f      	ldr	r2, [pc, #60]	@ (80026bc <HAL_GPIO_Init+0x304>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f aea2 	bls.w	80023d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40013c00 	.word	0x40013c00

080026c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e001      	b.n	80026e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800270c:	e003      	b.n	8002716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	041a      	lsls	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af02      	add	r7, sp, #8
 8002728:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e101      	b.n	8002938 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f005 faaa 	bl	8007ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2203      	movs	r2, #3
 8002758:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002762:	d102      	bne.n	800276a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f002 f9f3 	bl	8004b5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7c1a      	ldrb	r2, [r3, #16]
 800277c:	f88d 2000 	strb.w	r2, [sp]
 8002780:	3304      	adds	r3, #4
 8002782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002784:	f002 f8d2 	bl	800492c <USB_CoreInit>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0ce      	b.n	8002938 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 f9eb 	bl	8004b7c <USB_SetCurrentMode>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0bf      	b.n	8002938 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e04a      	b.n	8002854 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	3315      	adds	r3, #21
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3314      	adds	r3, #20
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	b298      	uxth	r0, r3
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	332e      	adds	r3, #46	@ 0x2e
 80027fa:	4602      	mov	r2, r0
 80027fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3318      	adds	r3, #24
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	331c      	adds	r3, #28
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3320      	adds	r3, #32
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3324      	adds	r3, #36	@ 0x24
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	3301      	adds	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	791b      	ldrb	r3, [r3, #4]
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	429a      	cmp	r2, r3
 800285c:	d3af      	bcc.n	80027be <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	e044      	b.n	80028ee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	3301      	adds	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	791b      	ldrb	r3, [r3, #4]
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d3b5      	bcc.n	8002864 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7c1a      	ldrb	r2, [r3, #16]
 8002900:	f88d 2000 	strb.w	r2, [sp]
 8002904:	3304      	adds	r3, #4
 8002906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002908:	f002 f984 	bl	8004c14 <USB_DevInit>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e00c      	b.n	8002938 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f003 f9ce 	bl	8005cd2 <USB_DevDisconnect>

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_PCD_Start+0x1c>
 8002958:	2302      	movs	r3, #2
 800295a:	e022      	b.n	80029a2 <HAL_PCD_Start+0x62>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f002 f8d5 	bl	8004b38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f003 f97c 	bl	8005c90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029aa:	b590      	push	{r4, r7, lr}
 80029ac:	b08d      	sub	sp, #52	@ 0x34
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fa3a 	bl	8005e3a <USB_GetMode>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f040 848c 	bne.w	80032e6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 f99e 	bl	8005d14 <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8482 	beq.w	80032e4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 f98b 	bl	8005d14 <USB_ReadInterrupts>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d107      	bne.n	8002a18 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f002 0202 	and.w	r2, r2, #2
 8002a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f003 f979 	bl	8005d14 <USB_ReadInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d161      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0210 	bic.w	r2, r2, #16
 8002a3a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	3304      	adds	r3, #4
 8002a5a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	0c5b      	lsrs	r3, r3, #17
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d124      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d035      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	6a38      	ldr	r0, [r7, #32]
 8002a88:	f002 ffb0 	bl	80059ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a98:	441a      	add	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aaa:	441a      	add	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	615a      	str	r2, [r3, #20]
 8002ab0:	e016      	b.n	8002ae0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	0c5b      	lsrs	r3, r3, #17
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d110      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6a38      	ldr	r0, [r7, #32]
 8002aca:	f002 ff8f 	bl	80059ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ada:	441a      	add	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0210 	orr.w	r2, r2, #16
 8002aee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 f90d 	bl	8005d14 <USB_ReadInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b04:	f040 80a7 	bne.w	8002c56 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f003 f912 	bl	8005d3a <USB_ReadDevAllOutEpInterrupt>
 8002b16:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b18:	e099      	b.n	8002c4e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 808e 	beq.w	8002c42 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 f936 	bl	8005da2 <USB_ReadDevOutEPInterrupt>
 8002b36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2301      	movs	r3, #1
 8002b52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fe8c 	bl	8003874 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b72:	461a      	mov	r2, r3
 8002b74:	2308      	movs	r3, #8
 8002b76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 ff62 	bl	8003a44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b96:	461a      	mov	r2, r3
 8002b98:	2310      	movs	r3, #16
 8002b9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d030      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bae:	2b80      	cmp	r3, #128	@ 0x80
 8002bb0:	d109      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bc4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	78db      	ldrb	r3, [r3, #3]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d108      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2200      	movs	r2, #0
 8002be8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f005 f955 	bl	8007ea0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c02:	461a      	mov	r2, r3
 8002c04:	2302      	movs	r3, #2
 8002c06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2320      	movs	r3, #32
 8002c22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	3301      	adds	r3, #1
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f af62 	bne.w	8002b1a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 f85a 	bl	8005d14 <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c6a:	f040 80db 	bne.w	8002e24 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 f87b 	bl	8005d6e <USB_ReadDevAllInEpInterrupt>
 8002c78:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002c7e:	e0cd      	b.n	8002e1c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80c2 	beq.w	8002e10 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 f8a1 	bl	8005dde <USB_ReadDevInEPInterrupt>
 8002c9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d057      	beq.n	8002d58 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	2201      	movs	r2, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69f9      	ldr	r1, [r7, #28]
 8002cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002cc8:	4013      	ands	r3, r2
 8002cca:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2301      	movs	r3, #1
 8002cdc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	799b      	ldrb	r3, [r3, #6]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d132      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3320      	adds	r3, #32
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4403      	add	r3, r0
 8002d06:	331c      	adds	r3, #28
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4419      	add	r1, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4403      	add	r3, r0
 8002d1a:	3320      	adds	r3, #32
 8002d1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d113      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x3a2>
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3324      	adds	r3, #36	@ 0x24
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d108      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d44:	461a      	mov	r2, r3
 8002d46:	2101      	movs	r1, #1
 8002d48:	f003 f8a8 	bl	8005e9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f005 f829 	bl	8007daa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2308      	movs	r3, #8
 8002d72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002da6:	461a      	mov	r2, r3
 8002da8:	2340      	movs	r3, #64	@ 0x40
 8002daa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d023      	beq.n	8002dfe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002db6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002db8:	6a38      	ldr	r0, [r7, #32]
 8002dba:	f002 f88f 	bl	8004edc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	3310      	adds	r3, #16
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	78db      	ldrb	r3, [r3, #3]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d108      	bne.n	8002dec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	4619      	mov	r1, r3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f005 f86c 	bl	8007ec4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fca5 	bl	800375a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	3301      	adds	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e18:	085b      	lsrs	r3, r3, #1
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f47f af2e 	bne.w	8002c80 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 ff73 	bl	8005d14 <USB_ReadInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e38:	d122      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d108      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e60:	2100      	movs	r1, #0
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fe8c 	bl	8003b80 <HAL_PCDEx_LPM_Callback>
 8002e68:	e002      	b.n	8002e70 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f005 f80a 	bl	8007e84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f002 ff45 	bl	8005d14 <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e94:	d112      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f004 ffc6 	bl	8007e38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002eba:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 ff27 	bl	8005d14 <USB_ReadInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed0:	f040 80b7 	bne.w	8003042 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2110      	movs	r1, #16
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 fff4 	bl	8004edc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef8:	e046      	b.n	8002f88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f06:	461a      	mov	r2, r3
 8002f08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f1e:	0151      	lsls	r1, r2, #5
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	440a      	add	r2, r1
 8002f24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f52:	0151      	lsls	r1, r2, #5
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	440a      	add	r2, r1
 8002f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f72:	0151      	lsls	r1, r2, #5
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	440a      	add	r2, r1
 8002f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002f80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f84:	3301      	adds	r3, #1
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	791b      	ldrb	r3, [r3, #4]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d3b2      	bcc.n	8002efa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fa2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002fa6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7bdb      	ldrb	r3, [r3, #15]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d016      	beq.n	8002fde <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fc0:	f043 030b 	orr.w	r3, r3, #11
 8002fc4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fd6:	f043 030b 	orr.w	r3, r3, #11
 8002fda:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fdc:	e015      	b.n	800300a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ff0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ff4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003004:	f043 030b 	orr.w	r3, r3, #11
 8003008:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003018:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800301c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800302c:	461a      	mov	r2, r3
 800302e:	f002 ff35 	bl	8005e9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f002 fe64 	bl	8005d14 <USB_ReadInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003056:	d123      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f002 fefa 	bl	8005e56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f001 ffb1 	bl	8004fce <USB_GetDevSpeed>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681c      	ldr	r4, [r3, #0]
 8003078:	f001 f9b2 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 800307c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003082:	461a      	mov	r2, r3
 8003084:	4620      	mov	r0, r4
 8003086:	f001 fcb5 	bl	80049f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f004 feb5 	bl	8007dfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800309e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 fe35 	bl	8005d14 <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d10a      	bne.n	80030ca <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f004 fe92 	bl	8007dde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f002 0208 	and.w	r2, r2, #8
 80030c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 fe20 	bl	8005d14 <USB_ReadInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030da:	2b80      	cmp	r3, #128	@ 0x80
 80030dc:	d123      	bne.n	8003126 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ea:	2301      	movs	r3, #1
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ee:	e014      	b.n	800311a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	b2db      	uxtb	r3, r3
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 faf2 	bl	80036f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	3301      	adds	r3, #1
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	791b      	ldrb	r3, [r3, #4]
 800311e:	461a      	mov	r2, r3
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	4293      	cmp	r3, r2
 8003124:	d3e4      	bcc.n	80030f0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f002 fdf2 	bl	8005d14 <USB_ReadInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800313a:	d13c      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003140:	e02b      	b.n	800319a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3318      	adds	r3, #24
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d115      	bne.n	8003194 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003168:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800316a:	2b00      	cmp	r3, #0
 800316c:	da12      	bge.n	8003194 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3317      	adds	r3, #23
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800318a:	b2db      	uxtb	r3, r3
 800318c:	4619      	mov	r1, r3
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fab2 	bl	80036f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	3301      	adds	r3, #1
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	791b      	ldrb	r3, [r3, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d3cd      	bcc.n	8003142 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80031b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fdaa 	bl	8005d14 <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031ca:	d156      	bne.n	800327a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031cc:	2301      	movs	r3, #1
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d0:	e045      	b.n	800325e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d12e      	bne.n	8003258 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	da2b      	bge.n	8003258 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800320c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003210:	429a      	cmp	r2, r3
 8003212:	d121      	bne.n	8003258 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003250:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003254:	6053      	str	r3, [r2, #4]
            break;
 8003256:	e008      	b.n	800326a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	3301      	adds	r3, #1
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	791b      	ldrb	r3, [r3, #4]
 8003262:	461a      	mov	r2, r3
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	4293      	cmp	r3, r2
 8003268:	d3b3      	bcc.n	80031d2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f002 fd48 	bl	8005d14 <USB_ReadInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328e:	d10a      	bne.n	80032a6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f004 fe29 	bl	8007ee8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f002 fd32 	bl	8005d14 <USB_ReadInterrupts>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d115      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f004 fe19 	bl	8007f04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	e000      	b.n	80032e6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80032e4:	bf00      	nop
    }
  }
}
 80032e6:	3734      	adds	r7, #52	@ 0x34
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd90      	pop	{r4, r7, pc}

080032ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_PCD_SetAddress+0x1a>
 8003302:	2302      	movs	r3, #2
 8003304:	e012      	b.n	800332c <HAL_PCD_SetAddress+0x40>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f002 fc91 	bl	8005c44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	461a      	mov	r2, r3
 8003342:	4603      	mov	r3, r0
 8003344:	70fb      	strb	r3, [r7, #3]
 8003346:	460b      	mov	r3, r1
 8003348:	803b      	strh	r3, [r7, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003356:	2b00      	cmp	r3, #0
 8003358:	da0f      	bge.n	800337a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	f003 020f 	and.w	r2, r3, #15
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	3310      	adds	r3, #16
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	3304      	adds	r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	705a      	strb	r2, [r3, #1]
 8003378:	e00f      	b.n	800339a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	f003 020f 	and.w	r2, r3, #15
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80033a6:	883b      	ldrh	r3, [r7, #0]
 80033a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	78ba      	ldrb	r2, [r7, #2]
 80033b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033c8:	78bb      	ldrb	r3, [r7, #2]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d102      	bne.n	80033d4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_PCD_EP_Open+0xae>
 80033de:	2302      	movs	r3, #2
 80033e0:	e00e      	b.n	8003400 <HAL_PCD_EP_Open+0xcc>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68f9      	ldr	r1, [r7, #12]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 fe11 	bl	8005018 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80033fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003418:	2b00      	cmp	r3, #0
 800341a:	da0f      	bge.n	800343c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 020f 	and.w	r2, r3, #15
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	3310      	adds	r3, #16
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
 8003430:	3304      	adds	r3, #4
 8003432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	705a      	strb	r2, [r3, #1]
 800343a:	e00f      	b.n	800345c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 020f 	and.w	r2, r3, #15
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	3304      	adds	r3, #4
 8003454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_PCD_EP_Close+0x6e>
 8003472:	2302      	movs	r3, #2
 8003474:	e00e      	b.n	8003494 <HAL_PCD_EP_Close+0x8c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68f9      	ldr	r1, [r7, #12]
 8003484:	4618      	mov	r0, r3
 8003486:	f001 fe4f 	bl	8005128 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	460b      	mov	r3, r1
 80034aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ac:	7afb      	ldrb	r3, [r7, #11]
 80034ae:	f003 020f 	and.w	r2, r3, #15
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4413      	add	r3, r2
 80034c2:	3304      	adds	r3, #4
 80034c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2200      	movs	r2, #0
 80034dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034de:	7afb      	ldrb	r3, [r7, #11]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	799b      	ldrb	r3, [r3, #6]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	799b      	ldrb	r3, [r3, #6]
 8003500:	461a      	mov	r2, r3
 8003502:	6979      	ldr	r1, [r7, #20]
 8003504:	f001 feec 	bl	80052e0 <USB_EPStartXfer>

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b086      	sub	sp, #24
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	460b      	mov	r3, r1
 8003520:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003522:	7afb      	ldrb	r3, [r7, #11]
 8003524:	f003 020f 	and.w	r2, r3, #15
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	3310      	adds	r3, #16
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4413      	add	r3, r2
 8003536:	3304      	adds	r3, #4
 8003538:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2201      	movs	r2, #1
 8003550:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003552:	7afb      	ldrb	r3, [r7, #11]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	b2da      	uxtb	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	799b      	ldrb	r3, [r3, #6]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d102      	bne.n	800356c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	799b      	ldrb	r3, [r3, #6]
 8003574:	461a      	mov	r2, r3
 8003576:	6979      	ldr	r1, [r7, #20]
 8003578:	f001 feb2 	bl	80052e0 <USB_EPStartXfer>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	7912      	ldrb	r2, [r2, #4]
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e04f      	b.n	8003644 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da0f      	bge.n	80035cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 020f 	and.w	r2, r3, #15
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	3310      	adds	r3, #16
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	705a      	strb	r2, [r3, #1]
 80035ca:	e00d      	b.n	80035e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	3304      	adds	r3, #4
 80035e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_PCD_EP_SetStall+0x82>
 8003604:	2302      	movs	r3, #2
 8003606:	e01d      	b.n	8003644 <HAL_PCD_EP_SetStall+0xbe>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	4618      	mov	r0, r3
 8003618:	f002 fa40 	bl	8005a9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7999      	ldrb	r1, [r3, #6]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003634:	461a      	mov	r2, r3
 8003636:	f002 fc31 	bl	8005e9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	7912      	ldrb	r2, [r2, #4]
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e042      	b.n	80036f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800366a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800366e:	2b00      	cmp	r3, #0
 8003670:	da0f      	bge.n	8003692 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3310      	adds	r3, #16
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	3304      	adds	r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	705a      	strb	r2, [r3, #1]
 8003690:	e00f      	b.n	80036b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	3304      	adds	r3, #4
 80036aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_PCD_EP_ClrStall+0x86>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e00e      	b.n	80036f0 <HAL_PCD_EP_ClrStall+0xa4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f002 fa49 	bl	8005b78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003708:	2b00      	cmp	r3, #0
 800370a:	da0c      	bge.n	8003726 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	3310      	adds	r3, #16
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e00c      	b.n	8003740 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	f003 020f 	and.w	r2, r3, #15
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	4618      	mov	r0, r3
 8003748:	f002 f868 	bl	800581c <USB_EPStopXfer>
 800374c:	4603      	mov	r3, r0
 800374e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003750:	7afb      	ldrb	r3, [r7, #11]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b08a      	sub	sp, #40	@ 0x28
 800375e:	af02      	add	r7, sp, #8
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	3310      	adds	r3, #16
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	429a      	cmp	r2, r3
 800378c:	d901      	bls.n	8003792 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e06b      	b.n	800386a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d902      	bls.n	80037ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3303      	adds	r3, #3
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037b6:	e02a      	b.n	800380e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d902      	bls.n	80037d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	3303      	adds	r3, #3
 80037d8:	089b      	lsrs	r3, r3, #2
 80037da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68d9      	ldr	r1, [r3, #12]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	4603      	mov	r3, r0
 80037f0:	6978      	ldr	r0, [r7, #20]
 80037f2:	f002 f8bd 	bl	8005970 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	441a      	add	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	441a      	add	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	429a      	cmp	r2, r3
 8003822:	d809      	bhi.n	8003838 <PCD_WriteEmptyTxFifo+0xde>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800382c:	429a      	cmp	r2, r3
 800382e:	d203      	bcs.n	8003838 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1bf      	bne.n	80037b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	d811      	bhi.n	8003868 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	2201      	movs	r2, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	43db      	mvns	r3, r3
 800385e:	6939      	ldr	r1, [r7, #16]
 8003860:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003864:	4013      	ands	r3, r2
 8003866:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	333c      	adds	r3, #60	@ 0x3c
 800388c:	3304      	adds	r3, #4
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	799b      	ldrb	r3, [r3, #6]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d17b      	bne.n	80039a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4a61      	ldr	r2, [pc, #388]	@ (8003a3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	f240 80b9 	bls.w	8003a30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80b3 	beq.w	8003a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d6:	461a      	mov	r2, r3
 80038d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038dc:	6093      	str	r3, [r2, #8]
 80038de:	e0a7      	b.n	8003a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f6:	461a      	mov	r2, r3
 80038f8:	2320      	movs	r3, #32
 80038fa:	6093      	str	r3, [r2, #8]
 80038fc:	e098      	b.n	8003a30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 8093 	bne.w	8003a30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d90f      	bls.n	8003932 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003928:	461a      	mov	r2, r3
 800392a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800392e:	6093      	str	r3, [r2, #8]
 8003930:	e07e      	b.n	8003a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	3304      	adds	r3, #4
 8003946:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1a      	ldr	r2, [r3, #32]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	0159      	lsls	r1, r3, #5
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	440b      	add	r3, r1
 8003954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d114      	bne.n	8003994 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800397c:	461a      	mov	r2, r3
 800397e:	2101      	movs	r1, #1
 8003980:	f002 fa8c 	bl	8005e9c <USB_EP0_OutStart>
 8003984:	e006      	b.n	8003994 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	441a      	add	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	4619      	mov	r1, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f004 f9ea 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
 80039a0:	e046      	b.n	8003a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	4a26      	ldr	r2, [pc, #152]	@ (8003a40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d124      	bne.n	80039f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039c6:	6093      	str	r3, [r2, #8]
 80039c8:	e032      	b.n	8003a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e0:	461a      	mov	r2, r3
 80039e2:	2320      	movs	r3, #32
 80039e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4619      	mov	r1, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f004 f9c1 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
 80039f2:	e01d      	b.n	8003a30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d114      	bne.n	8003a24 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d108      	bne.n	8003a24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f002 fa3c 	bl	8005e9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f004 f9a2 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	4f54300a 	.word	0x4f54300a
 8003a40:	4f54310a 	.word	0x4f54310a

08003a44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	333c      	adds	r3, #60	@ 0x3c
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a15      	ldr	r2, [pc, #84]	@ (8003acc <PCD_EP_OutSetupPacket_int+0x88>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d90e      	bls.n	8003a98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f004 f959 	bl	8007d50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <PCD_EP_OutSetupPacket_int+0x88>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d90c      	bls.n	8003ac0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	799b      	ldrb	r3, [r3, #6]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d108      	bne.n	8003ac0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2101      	movs	r1, #1
 8003abc:	f002 f9ee 	bl	8005e9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	4f54300a 	.word	0x4f54300a

08003ad0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
 8003adc:	4613      	mov	r3, r2
 8003ade:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d107      	bne.n	8003afe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003aee:	883b      	ldrh	r3, [r7, #0]
 8003af0:	0419      	lsls	r1, r3, #16
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003afc:	e028      	b.n	8003b50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4413      	add	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e00d      	b.n	8003b2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	3340      	adds	r3, #64	@ 0x40
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	4413      	add	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	7bfa      	ldrb	r2, [r7, #15]
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d3ec      	bcc.n	8003b12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b38:	883b      	ldrh	r3, [r7, #0]
 8003b3a:	0418      	lsls	r0, r3, #16
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	4302      	orrs	r2, r0
 8003b48:	3340      	adds	r3, #64	@ 0x40
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	887a      	ldrh	r2, [r7, #2]
 8003b70:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e267      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d075      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bb6:	4b88      	ldr	r3, [pc, #544]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d00c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc2:	4b85      	ldr	r3, [pc, #532]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d112      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bce:	4b82      	ldr	r3, [pc, #520]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bda:	d10b      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05b      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x108>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d157      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e242      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bfc:	d106      	bne.n	8003c0c <HAL_RCC_OscConfig+0x74>
 8003bfe:	4b76      	ldr	r3, [pc, #472]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a75      	ldr	r2, [pc, #468]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x98>
 8003c16:	4b70      	ldr	r3, [pc, #448]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6f      	ldr	r2, [pc, #444]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b6d      	ldr	r3, [pc, #436]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6c      	ldr	r2, [pc, #432]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0xb0>
 8003c30:	4b69      	ldr	r3, [pc, #420]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a68      	ldr	r2, [pc, #416]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b66      	ldr	r3, [pc, #408]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a65      	ldr	r2, [pc, #404]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fa70 	bl	8002134 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fe fa6c 	bl	8002134 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	@ 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e207      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0xc0>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fe fa5c 	bl	8002134 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe fa58 	bl	8002134 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1f3      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	4b51      	ldr	r3, [pc, #324]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0xe8>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d063      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cae:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d11c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc6:	4b44      	ldr	r3, [pc, #272]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d116      	bne.n	8003d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	4b41      	ldr	r3, [pc, #260]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x152>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e1c7      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cea:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4937      	ldr	r1, [pc, #220]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	e03a      	b.n	8003d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d020      	beq.n	8003d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d08:	4b34      	ldr	r3, [pc, #208]	@ (8003ddc <HAL_RCC_OscConfig+0x244>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fe fa11 	bl	8002134 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d16:	f7fe fa0d 	bl	8002134 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e1a8      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	4b28      	ldr	r3, [pc, #160]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4925      	ldr	r1, [pc, #148]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4a:	4b24      	ldr	r3, [pc, #144]	@ (8003ddc <HAL_RCC_OscConfig+0x244>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe f9f0 	bl	8002134 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fe f9ec 	bl	8002134 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e187      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d036      	beq.n	8003df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d016      	beq.n	8003db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8a:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <HAL_RCC_OscConfig+0x248>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe f9d0 	bl	8002134 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fe f9cc 	bl	8002134 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e167      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003daa:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x200>
 8003db6:	e01b      	b.n	8003df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db8:	4b09      	ldr	r3, [pc, #36]	@ (8003de0 <HAL_RCC_OscConfig+0x248>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbe:	f7fe f9b9 	bl	8002134 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	e00e      	b.n	8003de4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc6:	f7fe f9b5 	bl	8002134 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d907      	bls.n	8003de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e150      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	42470000 	.word	0x42470000
 8003de0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	4b88      	ldr	r3, [pc, #544]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ea      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8097 	beq.w	8003f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b81      	ldr	r3, [pc, #516]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	4b7d      	ldr	r3, [pc, #500]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	4a7c      	ldr	r2, [pc, #496]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	4b77      	ldr	r3, [pc, #476]	@ (800400c <HAL_RCC_OscConfig+0x474>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d118      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3a:	4b74      	ldr	r3, [pc, #464]	@ (800400c <HAL_RCC_OscConfig+0x474>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a73      	ldr	r2, [pc, #460]	@ (800400c <HAL_RCC_OscConfig+0x474>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e46:	f7fe f975 	bl	8002134 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4e:	f7fe f971 	bl	8002134 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e10c      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e60:	4b6a      	ldr	r3, [pc, #424]	@ (800400c <HAL_RCC_OscConfig+0x474>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x2ea>
 8003e74:	4b64      	ldr	r3, [pc, #400]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e78:	4a63      	ldr	r2, [pc, #396]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e80:	e01c      	b.n	8003ebc <HAL_RCC_OscConfig+0x324>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x30c>
 8003e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8e:	4a5e      	ldr	r2, [pc, #376]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e96:	4b5c      	ldr	r3, [pc, #368]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9a:	4a5b      	ldr	r2, [pc, #364]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0x324>
 8003ea4:	4b58      	ldr	r3, [pc, #352]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	4a57      	ldr	r2, [pc, #348]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb0:	4b55      	ldr	r3, [pc, #340]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb4:	4a54      	ldr	r2, [pc, #336]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	f023 0304 	bic.w	r3, r3, #4
 8003eba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d015      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fe f936 	bl	8002134 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7fe f932 	bl	8002134 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0cb      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee2:	4b49      	ldr	r3, [pc, #292]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ee      	beq.n	8003ecc <HAL_RCC_OscConfig+0x334>
 8003eee:	e014      	b.n	8003f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7fe f920 	bl	8002134 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7fe f91c 	bl	8002134 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0b5      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1ee      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f20:	4b39      	ldr	r3, [pc, #228]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	4a38      	ldr	r2, [pc, #224]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80a1 	beq.w	8004078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f36:	4b34      	ldr	r3, [pc, #208]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d05c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d141      	bne.n	8003fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4a:	4b31      	ldr	r3, [pc, #196]	@ (8004010 <HAL_RCC_OscConfig+0x478>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7fe f8f0 	bl	8002134 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fe f8ec 	bl	8002134 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e087      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	4b27      	ldr	r3, [pc, #156]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	019b      	lsls	r3, r3, #6
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	041b      	lsls	r3, r3, #16
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f98:	061b      	lsls	r3, r3, #24
 8003f9a:	491b      	ldr	r1, [pc, #108]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <HAL_RCC_OscConfig+0x478>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fe f8c5 	bl	8002134 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fae:	f7fe f8c1 	bl	8002134 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e05c      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc0:	4b11      	ldr	r3, [pc, #68]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x416>
 8003fcc:	e054      	b.n	8004078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fce:	4b10      	ldr	r3, [pc, #64]	@ (8004010 <HAL_RCC_OscConfig+0x478>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fe f8ae 	bl	8002134 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fe f8aa 	bl	8002134 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e045      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x444>
 8003ffa:	e03d      	b.n	8004078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d107      	bne.n	8004014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e038      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
 8004008:	40023800 	.word	0x40023800
 800400c:	40007000 	.word	0x40007000
 8004010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004014:	4b1b      	ldr	r3, [pc, #108]	@ (8004084 <HAL_RCC_OscConfig+0x4ec>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d028      	beq.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d121      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d11a      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004044:	4013      	ands	r3, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800404a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800404c:	4293      	cmp	r3, r2
 800404e:	d111      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	3b01      	subs	r3, #1
 800405e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d107      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800

08004088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0cc      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800409c:	4b68      	ldr	r3, [pc, #416]	@ (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d90c      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b65      	ldr	r3, [pc, #404]	@ (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b63      	ldr	r3, [pc, #396]	@ (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0b8      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040dc:	4b59      	ldr	r3, [pc, #356]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a58      	ldr	r2, [pc, #352]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f4:	4b53      	ldr	r3, [pc, #332]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a52      	ldr	r2, [pc, #328]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004100:	4b50      	ldr	r3, [pc, #320]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	494d      	ldr	r1, [pc, #308]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d044      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	4b47      	ldr	r3, [pc, #284]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d119      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e07f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d003      	beq.n	8004146 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004142:	2b03      	cmp	r3, #3
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004146:	4b3f      	ldr	r3, [pc, #252]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e06f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004156:	4b3b      	ldr	r3, [pc, #236]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e067      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004166:	4b37      	ldr	r3, [pc, #220]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4934      	ldr	r1, [pc, #208]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004178:	f7fd ffdc 	bl	8002134 <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	e00a      	b.n	8004196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004180:	f7fd ffd8 	bl	8002134 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e04f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	4b2b      	ldr	r3, [pc, #172]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 020c 	and.w	r2, r3, #12
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d1eb      	bne.n	8004180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041a8:	4b25      	ldr	r3, [pc, #148]	@ (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d20c      	bcs.n	80041d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b22      	ldr	r3, [pc, #136]	@ (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b20      	ldr	r3, [pc, #128]	@ (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e032      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041dc:	4b19      	ldr	r3, [pc, #100]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4916      	ldr	r1, [pc, #88]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041fa:	4b12      	ldr	r3, [pc, #72]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	490e      	ldr	r1, [pc, #56]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800420e:	f000 f821 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004212:	4602      	mov	r2, r0
 8004214:	4b0b      	ldr	r3, [pc, #44]	@ (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	490a      	ldr	r1, [pc, #40]	@ (8004248 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	5ccb      	ldrb	r3, [r1, r3]
 8004222:	fa22 f303 	lsr.w	r3, r2, r3
 8004226:	4a09      	ldr	r2, [pc, #36]	@ (800424c <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800422a:	4b09      	ldr	r3, [pc, #36]	@ (8004250 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7fd ff3c 	bl	80020ac <HAL_InitTick>

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023c00 	.word	0x40023c00
 8004244:	40023800 	.word	0x40023800
 8004248:	08008678 	.word	0x08008678
 800424c:	20000000 	.word	0x20000000
 8004250:	20000004 	.word	0x20000004

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004258:	b090      	sub	sp, #64	@ 0x40
 800425a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426c:	4b59      	ldr	r3, [pc, #356]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d00d      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x40>
 8004278:	2b08      	cmp	r3, #8
 800427a:	f200 80a1 	bhi.w	80043c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x34>
 8004282:	2b04      	cmp	r3, #4
 8004284:	d003      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x3a>
 8004286:	e09b      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004288:	4b53      	ldr	r3, [pc, #332]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800428a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800428c:	e09b      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428e:	4b53      	ldr	r3, [pc, #332]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x188>)
 8004290:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004292:	e098      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004294:	4b4f      	ldr	r3, [pc, #316]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800429c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429e:	4b4d      	ldr	r3, [pc, #308]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d028      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042aa:	4b4a      	ldr	r3, [pc, #296]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	2200      	movs	r2, #0
 80042b2:	623b      	str	r3, [r7, #32]
 80042b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042bc:	2100      	movs	r1, #0
 80042be:	4b47      	ldr	r3, [pc, #284]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x188>)
 80042c0:	fb03 f201 	mul.w	r2, r3, r1
 80042c4:	2300      	movs	r3, #0
 80042c6:	fb00 f303 	mul.w	r3, r0, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	4a43      	ldr	r2, [pc, #268]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x188>)
 80042ce:	fba0 1202 	umull	r1, r2, r0, r2
 80042d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d4:	460a      	mov	r2, r1
 80042d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80042d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042da:	4413      	add	r3, r2
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e0:	2200      	movs	r2, #0
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	61fa      	str	r2, [r7, #28]
 80042e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80042ee:	f7fb ff85 	bl	80001fc <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4613      	mov	r3, r2
 80042f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042fa:	e053      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fc:	4b35      	ldr	r3, [pc, #212]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	099b      	lsrs	r3, r3, #6
 8004302:	2200      	movs	r2, #0
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	617a      	str	r2, [r7, #20]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800430e:	f04f 0b00 	mov.w	fp, #0
 8004312:	4652      	mov	r2, sl
 8004314:	465b      	mov	r3, fp
 8004316:	f04f 0000 	mov.w	r0, #0
 800431a:	f04f 0100 	mov.w	r1, #0
 800431e:	0159      	lsls	r1, r3, #5
 8004320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004324:	0150      	lsls	r0, r2, #5
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	ebb2 080a 	subs.w	r8, r2, sl
 800432e:	eb63 090b 	sbc.w	r9, r3, fp
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800433e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004342:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004346:	ebb2 0408 	subs.w	r4, r2, r8
 800434a:	eb63 0509 	sbc.w	r5, r3, r9
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	00eb      	lsls	r3, r5, #3
 8004358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800435c:	00e2      	lsls	r2, r4, #3
 800435e:	4614      	mov	r4, r2
 8004360:	461d      	mov	r5, r3
 8004362:	eb14 030a 	adds.w	r3, r4, sl
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	eb45 030b 	adc.w	r3, r5, fp
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800437a:	4629      	mov	r1, r5
 800437c:	028b      	lsls	r3, r1, #10
 800437e:	4621      	mov	r1, r4
 8004380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004384:	4621      	mov	r1, r4
 8004386:	028a      	lsls	r2, r1, #10
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800438e:	2200      	movs	r2, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	60fa      	str	r2, [r7, #12]
 8004394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004398:	f7fb ff30 	bl	80001fc <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4613      	mov	r3, r2
 80043a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	0c1b      	lsrs	r3, r3, #16
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	3301      	adds	r3, #1
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80043b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043be:	e002      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c0:	4b05      	ldr	r3, [pc, #20]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80043c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3740      	adds	r7, #64	@ 0x40
 80043cc:	46bd      	mov	sp, r7
 80043ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800
 80043d8:	00f42400 	.word	0x00f42400
 80043dc:	017d7840 	.word	0x017d7840

080043e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e4:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000000 	.word	0x20000000

080043f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e041      	b.n	800448e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fd fd44 	bl	8001eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f000 f9d8 	bl	80047ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d001      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e044      	b.n	800453a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004548 <HAL_TIM_Base_Start_IT+0xb0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x6c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044da:	d013      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x6c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1a      	ldr	r2, [pc, #104]	@ (800454c <HAL_TIM_Base_Start_IT+0xb4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x6c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a19      	ldr	r2, [pc, #100]	@ (8004550 <HAL_TIM_Base_Start_IT+0xb8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x6c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a17      	ldr	r2, [pc, #92]	@ (8004554 <HAL_TIM_Base_Start_IT+0xbc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x6c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a16      	ldr	r2, [pc, #88]	@ (8004558 <HAL_TIM_Base_Start_IT+0xc0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d111      	bne.n	8004528 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d010      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	e007      	b.n	8004538 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40014000 	.word	0x40014000

0800455c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a1a      	ldr	r2, [r3, #32]
 800457a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10f      	bne.n	80045a4 <HAL_TIM_Base_Stop_IT+0x48>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6a1a      	ldr	r2, [r3, #32]
 800458a:	f240 4344 	movw	r3, #1092	@ 0x444
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d107      	bne.n	80045a4 <HAL_TIM_Base_Stop_IT+0x48>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01b      	beq.n	800461e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0202 	mvn.w	r2, #2
 80045ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f8d2 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 800460a:	e005      	b.n	8004618 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f8c4 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8d5 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01b      	beq.n	800466a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f06f 0204 	mvn.w	r2, #4
 800463a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f8ac 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 8004656:	e005      	b.n	8004664 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f89e 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8af 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01b      	beq.n	80046b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0208 	mvn.w	r2, #8
 8004686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2204      	movs	r2, #4
 800468c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f886 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 80046a2:	e005      	b.n	80046b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f878 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f889 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01b      	beq.n	8004702 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f06f 0210 	mvn.w	r2, #16
 80046d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2208      	movs	r2, #8
 80046d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f860 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 80046ee:	e005      	b.n	80046fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f852 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f863 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00c      	beq.n	8004726 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0201 	mvn.w	r2, #1
 800471e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7fd fb7d 	bl	8001e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00c      	beq.n	800474a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8e7 	bl	8004918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f834 	bl	80047d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00c      	beq.n	8004792 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d007      	beq.n	8004792 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f06f 0220 	mvn.w	r2, #32
 800478a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f8b9 	bl	8004904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3a      	ldr	r2, [pc, #232]	@ (80048e8 <TIM_Base_SetConfig+0xfc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00f      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480a:	d00b      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a37      	ldr	r2, [pc, #220]	@ (80048ec <TIM_Base_SetConfig+0x100>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a36      	ldr	r2, [pc, #216]	@ (80048f0 <TIM_Base_SetConfig+0x104>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a35      	ldr	r2, [pc, #212]	@ (80048f4 <TIM_Base_SetConfig+0x108>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d108      	bne.n	8004836 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2b      	ldr	r2, [pc, #172]	@ (80048e8 <TIM_Base_SetConfig+0xfc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a28      	ldr	r2, [pc, #160]	@ (80048ec <TIM_Base_SetConfig+0x100>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a27      	ldr	r2, [pc, #156]	@ (80048f0 <TIM_Base_SetConfig+0x104>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a26      	ldr	r2, [pc, #152]	@ (80048f4 <TIM_Base_SetConfig+0x108>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a25      	ldr	r2, [pc, #148]	@ (80048f8 <TIM_Base_SetConfig+0x10c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a24      	ldr	r2, [pc, #144]	@ (80048fc <TIM_Base_SetConfig+0x110>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a23      	ldr	r2, [pc, #140]	@ (8004900 <TIM_Base_SetConfig+0x114>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a0e      	ldr	r2, [pc, #56]	@ (80048e8 <TIM_Base_SetConfig+0xfc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d103      	bne.n	80048bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f023 0201 	bic.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]
  }
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800492c:	b084      	sub	sp, #16
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	f107 001c 	add.w	r0, r7, #28
 800493a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800493e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004942:	2b01      	cmp	r3, #1
 8004944:	d123      	bne.n	800498e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800495a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800496e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004972:	2b01      	cmp	r3, #1
 8004974:	d105      	bne.n	8004982 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f001 fae8 	bl	8005f58 <USB_CoreReset>
 8004988:	4603      	mov	r3, r0
 800498a:	73fb      	strb	r3, [r7, #15]
 800498c:	e01b      	b.n	80049c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f001 fadc 	bl	8005f58 <USB_CoreReset>
 80049a0:	4603      	mov	r3, r0
 80049a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80049b8:	e005      	b.n	80049c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049c6:	7fbb      	ldrb	r3, [r7, #30]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d10b      	bne.n	80049e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f043 0206 	orr.w	r2, r3, #6
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049f0:	b004      	add	sp, #16
 80049f2:	4770      	bx	lr

080049f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d165      	bne.n	8004ad4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4a41      	ldr	r2, [pc, #260]	@ (8004b10 <USB_SetTurnaroundTime+0x11c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d906      	bls.n	8004a1e <USB_SetTurnaroundTime+0x2a>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4a40      	ldr	r2, [pc, #256]	@ (8004b14 <USB_SetTurnaroundTime+0x120>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d202      	bcs.n	8004a1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a18:	230f      	movs	r3, #15
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e062      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4a3c      	ldr	r2, [pc, #240]	@ (8004b14 <USB_SetTurnaroundTime+0x120>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d306      	bcc.n	8004a34 <USB_SetTurnaroundTime+0x40>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4a3b      	ldr	r2, [pc, #236]	@ (8004b18 <USB_SetTurnaroundTime+0x124>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d202      	bcs.n	8004a34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a2e:	230e      	movs	r3, #14
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	e057      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4a38      	ldr	r2, [pc, #224]	@ (8004b18 <USB_SetTurnaroundTime+0x124>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d306      	bcc.n	8004a4a <USB_SetTurnaroundTime+0x56>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4a37      	ldr	r2, [pc, #220]	@ (8004b1c <USB_SetTurnaroundTime+0x128>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d202      	bcs.n	8004a4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a44:	230d      	movs	r3, #13
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	e04c      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4a33      	ldr	r2, [pc, #204]	@ (8004b1c <USB_SetTurnaroundTime+0x128>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d306      	bcc.n	8004a60 <USB_SetTurnaroundTime+0x6c>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4a32      	ldr	r2, [pc, #200]	@ (8004b20 <USB_SetTurnaroundTime+0x12c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d802      	bhi.n	8004a60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a5a:	230c      	movs	r3, #12
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	e041      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4a2f      	ldr	r2, [pc, #188]	@ (8004b20 <USB_SetTurnaroundTime+0x12c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d906      	bls.n	8004a76 <USB_SetTurnaroundTime+0x82>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b24 <USB_SetTurnaroundTime+0x130>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d802      	bhi.n	8004a76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a70:	230b      	movs	r3, #11
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e036      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4a2a      	ldr	r2, [pc, #168]	@ (8004b24 <USB_SetTurnaroundTime+0x130>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d906      	bls.n	8004a8c <USB_SetTurnaroundTime+0x98>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4a29      	ldr	r2, [pc, #164]	@ (8004b28 <USB_SetTurnaroundTime+0x134>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d802      	bhi.n	8004a8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a86:	230a      	movs	r3, #10
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e02b      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4a26      	ldr	r2, [pc, #152]	@ (8004b28 <USB_SetTurnaroundTime+0x134>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d906      	bls.n	8004aa2 <USB_SetTurnaroundTime+0xae>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4a25      	ldr	r2, [pc, #148]	@ (8004b2c <USB_SetTurnaroundTime+0x138>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d202      	bcs.n	8004aa2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a9c:	2309      	movs	r3, #9
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e020      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4a21      	ldr	r2, [pc, #132]	@ (8004b2c <USB_SetTurnaroundTime+0x138>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d306      	bcc.n	8004ab8 <USB_SetTurnaroundTime+0xc4>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4a20      	ldr	r2, [pc, #128]	@ (8004b30 <USB_SetTurnaroundTime+0x13c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d802      	bhi.n	8004ab8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e015      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4a1d      	ldr	r2, [pc, #116]	@ (8004b30 <USB_SetTurnaroundTime+0x13c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d906      	bls.n	8004ace <USB_SetTurnaroundTime+0xda>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b34 <USB_SetTurnaroundTime+0x140>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d202      	bcs.n	8004ace <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ac8:	2307      	movs	r3, #7
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e00a      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ace:	2306      	movs	r3, #6
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	e007      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ada:	2309      	movs	r3, #9
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	e001      	b.n	8004ae4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ae0:	2309      	movs	r3, #9
 8004ae2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	029b      	lsls	r3, r3, #10
 8004af8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	00d8acbf 	.word	0x00d8acbf
 8004b14:	00e4e1c0 	.word	0x00e4e1c0
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	01067380 	.word	0x01067380
 8004b20:	011a499f 	.word	0x011a499f
 8004b24:	01312cff 	.word	0x01312cff
 8004b28:	014ca43f 	.word	0x014ca43f
 8004b2c:	016e3600 	.word	0x016e3600
 8004b30:	01a6ab1f 	.word	0x01a6ab1f
 8004b34:	01e84800 	.word	0x01e84800

08004b38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f043 0201 	orr.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f023 0201 	bic.w	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d115      	bne.n	8004bca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004baa:	200a      	movs	r0, #10
 8004bac:	f7fd face 	bl	800214c <HAL_Delay>
      ms += 10U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	330a      	adds	r3, #10
 8004bb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f001 f93f 	bl	8005e3a <USB_GetMode>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d01e      	beq.n	8004c00 <USB_SetCurrentMode+0x84>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bc6:	d9f0      	bls.n	8004baa <USB_SetCurrentMode+0x2e>
 8004bc8:	e01a      	b.n	8004c00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d115      	bne.n	8004bfc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004bdc:	200a      	movs	r0, #10
 8004bde:	f7fd fab5 	bl	800214c <HAL_Delay>
      ms += 10U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	330a      	adds	r3, #10
 8004be6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f001 f926 	bl	8005e3a <USB_GetMode>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <USB_SetCurrentMode+0x84>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bf8:	d9f0      	bls.n	8004bdc <USB_SetCurrentMode+0x60>
 8004bfa:	e001      	b.n	8004c00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e005      	b.n	8004c0c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c04:	d101      	bne.n	8004c0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c14:	b084      	sub	sp, #16
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	e009      	b.n	8004c48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	3340      	adds	r3, #64	@ 0x40
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	3301      	adds	r3, #1
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b0e      	cmp	r3, #14
 8004c4c:	d9f2      	bls.n	8004c34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d11c      	bne.n	8004c90 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c86:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c8e:	e00b      	b.n	8004ca8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cb4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10d      	bne.n	8004cd8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f968 	bl	8004f9c <USB_SetDevSpeed>
 8004ccc:	e008      	b.n	8004ce0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cce:	2101      	movs	r1, #1
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f963 	bl	8004f9c <USB_SetDevSpeed>
 8004cd6:	e003      	b.n	8004ce0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cd8:	2103      	movs	r1, #3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f95e 	bl	8004f9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ce0:	2110      	movs	r1, #16
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8fa 	bl	8004edc <USB_FlushTxFifo>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f924 	bl	8004f40 <USB_FlushRxFifo>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d14:	461a      	mov	r2, r3
 8004d16:	2300      	movs	r3, #0
 8004d18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d20:	461a      	mov	r2, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e043      	b.n	8004db4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d42:	d118      	bne.n	8004d76 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d56:	461a      	mov	r2, r3
 8004d58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e013      	b.n	8004d88 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	e008      	b.n	8004d88 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d82:	461a      	mov	r2, r3
 8004d84:	2300      	movs	r3, #0
 8004d86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d94:	461a      	mov	r2, r3
 8004d96:	2300      	movs	r3, #0
 8004d98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da6:	461a      	mov	r2, r3
 8004da8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004dac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	3301      	adds	r3, #1
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004db8:	461a      	mov	r2, r3
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d3b5      	bcc.n	8004d2c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e043      	b.n	8004e4e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ddc:	d118      	bne.n	8004e10 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df0:	461a      	mov	r2, r3
 8004df2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	e013      	b.n	8004e22 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e06:	461a      	mov	r2, r3
 8004e08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e008      	b.n	8004e22 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2300      	movs	r3, #0
 8004e20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2300      	movs	r3, #0
 8004e32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e40:	461a      	mov	r2, r3
 8004e42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e52:	461a      	mov	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d3b5      	bcc.n	8004dc6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f043 0210 	orr.w	r2, r3, #16
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	4b10      	ldr	r3, [pc, #64]	@ (8004ed8 <USB_DevInit+0x2c4>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f043 0208 	orr.w	r2, r3, #8
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ec0:	f043 0304 	orr.w	r3, r3, #4
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ed4:	b004      	add	sp, #16
 8004ed6:	4770      	bx	lr
 8004ed8:	803c3800 	.word	0x803c3800

08004edc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3301      	adds	r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ef6:	d901      	bls.n	8004efc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e01b      	b.n	8004f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	daf2      	bge.n	8004eea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	019b      	lsls	r3, r3, #6
 8004f0c:	f043 0220 	orr.w	r2, r3, #32
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3301      	adds	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f20:	d901      	bls.n	8004f26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e006      	b.n	8004f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d0f0      	beq.n	8004f14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f58:	d901      	bls.n	8004f5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e018      	b.n	8004f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	daf2      	bge.n	8004f4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f7c:	d901      	bls.n	8004f82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e006      	b.n	8004f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d0f0      	beq.n	8004f70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b087      	sub	sp, #28
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0306 	and.w	r3, r3, #6
 8004fe6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d102      	bne.n	8004ff4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]
 8004ff2:	e00a      	b.n	800500a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d002      	beq.n	8005000 <USB_GetDevSpeed+0x32>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b06      	cmp	r3, #6
 8004ffe:	d102      	bne.n	8005006 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005000:	2302      	movs	r3, #2
 8005002:	75fb      	strb	r3, [r7, #23]
 8005004:	e001      	b.n	800500a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005006:	230f      	movs	r3, #15
 8005008:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800500a:	7dfb      	ldrb	r3, [r7, #23]
}
 800500c:	4618      	mov	r0, r3
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d13a      	bne.n	80050aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	b29b      	uxth	r3, r3
 800504c:	68f9      	ldr	r1, [r7, #12]
 800504e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005052:	4313      	orrs	r3, r2
 8005054:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d155      	bne.n	8005118 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	791b      	ldrb	r3, [r3, #4]
 8005086:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005088:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	059b      	lsls	r3, r3, #22
 800508e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005090:	4313      	orrs	r3, r2
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	e036      	b.n	8005118 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b0:	69da      	ldr	r2, [r3, #28]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	2101      	movs	r1, #1
 80050bc:	fa01 f303 	lsl.w	r3, r1, r3
 80050c0:	041b      	lsls	r3, r3, #16
 80050c2:	68f9      	ldr	r1, [r7, #12]
 80050c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d11a      	bne.n	8005118 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	791b      	ldrb	r3, [r3, #4]
 80050fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050fe:	430b      	orrs	r3, r1
 8005100:	4313      	orrs	r3, r2
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800510e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005116:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d161      	bne.n	8005208 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005156:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800515a:	d11f      	bne.n	800519c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005176:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800517a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005196:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800519a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	2101      	movs	r1, #1
 80051ae:	fa01 f303 	lsl.w	r3, r1, r3
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	68f9      	ldr	r1, [r7, #12]
 80051b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051bc:	4013      	ands	r3, r2
 80051be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	43db      	mvns	r3, r3
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051e0:	4013      	ands	r3, r2
 80051e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	0159      	lsls	r1, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	440b      	add	r3, r1
 80051fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fe:	4619      	mov	r1, r3
 8005200:	4b35      	ldr	r3, [pc, #212]	@ (80052d8 <USB_DeactivateEndpoint+0x1b0>)
 8005202:	4013      	ands	r3, r2
 8005204:	600b      	str	r3, [r1, #0]
 8005206:	e060      	b.n	80052ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800521a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800521e:	d11f      	bne.n	8005260 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800523a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800523e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800525a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800525e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	2101      	movs	r1, #1
 8005272:	fa01 f303 	lsl.w	r3, r1, r3
 8005276:	041b      	lsls	r3, r3, #16
 8005278:	43db      	mvns	r3, r3
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005280:	4013      	ands	r3, r2
 8005282:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	2101      	movs	r1, #1
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	041b      	lsls	r3, r3, #16
 800529c:	43db      	mvns	r3, r3
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052a4:	4013      	ands	r3, r2
 80052a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	0159      	lsls	r1, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	440b      	add	r3, r1
 80052be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c2:	4619      	mov	r1, r3
 80052c4:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <USB_DeactivateEndpoint+0x1b4>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	ec337800 	.word	0xec337800
 80052dc:	eff37800 	.word	0xeff37800

080052e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	@ 0x28
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	f040 817f 	bne.w	8005600 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d132      	bne.n	8005370 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005324:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005328:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800532c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005348:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800534c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005368:	0cdb      	lsrs	r3, r3, #19
 800536a:	04db      	lsls	r3, r3, #19
 800536c:	6113      	str	r3, [r2, #16]
 800536e:	e097      	b.n	80054a0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800538a:	0cdb      	lsrs	r3, r3, #19
 800538c:	04db      	lsls	r3, r3, #19
 800538e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80053ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80053b2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d11a      	bne.n	80053f0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d903      	bls.n	80053ce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053ec:	6113      	str	r3, [r2, #16]
 80053ee:	e044      	b.n	800547a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691a      	ldr	r2, [r3, #16]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4413      	add	r3, r2
 80053fa:	1e5a      	subs	r2, r3, #1
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	8afb      	ldrh	r3, [r7, #22]
 8005416:	04d9      	lsls	r1, r3, #19
 8005418:	4ba4      	ldr	r3, [pc, #656]	@ (80056ac <USB_EPStartXfer+0x3cc>)
 800541a:	400b      	ands	r3, r1
 800541c:	69b9      	ldr	r1, [r7, #24]
 800541e:	0148      	lsls	r0, r1, #5
 8005420:	69f9      	ldr	r1, [r7, #28]
 8005422:	4401      	add	r1, r0
 8005424:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005428:	4313      	orrs	r3, r2
 800542a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	791b      	ldrb	r3, [r3, #4]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d122      	bne.n	800547a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800544e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005452:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	8afb      	ldrh	r3, [r7, #22]
 8005464:	075b      	lsls	r3, r3, #29
 8005466:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800546a:	69b9      	ldr	r1, [r7, #24]
 800546c:	0148      	lsls	r0, r1, #5
 800546e:	69f9      	ldr	r1, [r7, #28]
 8005470:	4401      	add	r1, r0
 8005472:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005476:	4313      	orrs	r3, r2
 8005478:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005490:	69b9      	ldr	r1, [r7, #24]
 8005492:	0148      	lsls	r0, r1, #5
 8005494:	69f9      	ldr	r1, [r7, #28]
 8005496:	4401      	add	r1, r0
 8005498:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800549c:	4313      	orrs	r3, r2
 800549e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d14b      	bne.n	800553e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ba:	461a      	mov	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	791b      	ldrb	r3, [r3, #4]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d128      	bne.n	800551c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d110      	bne.n	80054fc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e00f      	b.n	800551c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800551a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	440a      	add	r2, r1
 8005532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005536:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	e166      	b.n	800580c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005558:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800555c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	791b      	ldrb	r3, [r3, #4]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d015      	beq.n	8005592 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 814e 	beq.w	800580c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f303 	lsl.w	r3, r1, r3
 8005586:	69f9      	ldr	r1, [r7, #28]
 8005588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800558c:	4313      	orrs	r3, r2
 800558e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005590:	e13c      	b.n	800580c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d110      	bne.n	80055c4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	e00f      	b.n	80055e4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	68d9      	ldr	r1, [r3, #12]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	b298      	uxth	r0, r3
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	4603      	mov	r3, r0
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f9b9 	bl	8005970 <USB_WritePacket>
 80055fe:	e105      	b.n	800580c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800561a:	0cdb      	lsrs	r3, r3, #19
 800561c:	04db      	lsls	r3, r3, #19
 800561e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800563a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800563e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005642:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d132      	bne.n	80056b0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005678:	69b9      	ldr	r1, [r7, #24]
 800567a:	0148      	lsls	r0, r1, #5
 800567c:	69f9      	ldr	r1, [r7, #28]
 800567e:	4401      	add	r1, r0
 8005680:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005684:	4313      	orrs	r3, r2
 8005686:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056a6:	6113      	str	r3, [r2, #16]
 80056a8:	e062      	b.n	8005770 <USB_EPStartXfer+0x490>
 80056aa:	bf00      	nop
 80056ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d123      	bne.n	8005700 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ce:	69b9      	ldr	r1, [r7, #24]
 80056d0:	0148      	lsls	r0, r1, #5
 80056d2:	69f9      	ldr	r1, [r7, #28]
 80056d4:	4401      	add	r1, r0
 80056d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80056da:	4313      	orrs	r3, r2
 80056dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056fc:	6113      	str	r3, [r2, #16]
 80056fe:	e037      	b.n	8005770 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4413      	add	r3, r2
 800570a:	1e5a      	subs	r2, r3, #1
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	fbb2 f3f3 	udiv	r3, r2, r3
 8005714:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	8afa      	ldrh	r2, [r7, #22]
 800571c:	fb03 f202 	mul.w	r2, r3, r2
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	8afb      	ldrh	r3, [r7, #22]
 8005734:	04d9      	lsls	r1, r3, #19
 8005736:	4b38      	ldr	r3, [pc, #224]	@ (8005818 <USB_EPStartXfer+0x538>)
 8005738:	400b      	ands	r3, r1
 800573a:	69b9      	ldr	r1, [r7, #24]
 800573c:	0148      	lsls	r0, r1, #5
 800573e:	69f9      	ldr	r1, [r7, #28]
 8005740:	4401      	add	r1, r0
 8005742:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005746:	4313      	orrs	r3, r2
 8005748:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005760:	69b9      	ldr	r1, [r7, #24]
 8005762:	0148      	lsls	r0, r1, #5
 8005764:	69f9      	ldr	r1, [r7, #28]
 8005766:	4401      	add	r1, r0
 8005768:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800576c:	4313      	orrs	r3, r2
 800576e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d10d      	bne.n	8005792 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	68d9      	ldr	r1, [r3, #12]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578e:	460a      	mov	r2, r1
 8005790:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d128      	bne.n	80057ec <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d110      	bne.n	80057cc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e00f      	b.n	80057ec <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005806:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800580a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	1ff80000 	.word	0x1ff80000

0800581c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d14a      	bne.n	80058d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800584e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005852:	f040 8086 	bne.w	8005962 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	7812      	ldrb	r2, [r2, #0]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005874:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005878:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	7812      	ldrb	r2, [r2, #0]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005898:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800589c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3301      	adds	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d902      	bls.n	80058b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
          break;
 80058b2:	e056      	b.n	8005962 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058cc:	d0e7      	beq.n	800589e <USB_EPStopXfer+0x82>
 80058ce:	e048      	b.n	8005962 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058e8:	d13b      	bne.n	8005962 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	0151      	lsls	r1, r2, #5
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	440a      	add	r2, r1
 8005904:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005908:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800590c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	7812      	ldrb	r2, [r2, #0]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800592c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005930:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800593e:	4293      	cmp	r3, r2
 8005940:	d902      	bls.n	8005948 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
          break;
 8005946:	e00c      	b.n	8005962 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800595c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005960:	d0e7      	beq.n	8005932 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005962:	7dfb      	ldrb	r3, [r7, #23]
}
 8005964:	4618      	mov	r0, r3
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	@ 0x24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	4611      	mov	r1, r2
 800597c:	461a      	mov	r2, r3
 800597e:	460b      	mov	r3, r1
 8005980:	71fb      	strb	r3, [r7, #7]
 8005982:	4613      	mov	r3, r2
 8005984:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800598e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d123      	bne.n	80059de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005996:	88bb      	ldrh	r3, [r7, #4]
 8005998:	3303      	adds	r3, #3
 800599a:	089b      	lsrs	r3, r3, #2
 800599c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800599e:	2300      	movs	r3, #0
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	e018      	b.n	80059d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	031a      	lsls	r2, r3, #12
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059b0:	461a      	mov	r2, r3
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3301      	adds	r3, #1
 80059c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3301      	adds	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	3301      	adds	r3, #1
 80059ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	3301      	adds	r3, #1
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d3e2      	bcc.n	80059a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3724      	adds	r7, #36	@ 0x24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b08b      	sub	sp, #44	@ 0x2c
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	089b      	lsrs	r3, r3, #2
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a12:	2300      	movs	r3, #0
 8005a14:	623b      	str	r3, [r7, #32]
 8005a16:	e014      	b.n	8005a42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a22:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	3301      	adds	r3, #1
 8005a28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a32:	3301      	adds	r3, #1
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	3301      	adds	r3, #1
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	623b      	str	r3, [r7, #32]
 8005a42:	6a3a      	ldr	r2, [r7, #32]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d3e6      	bcc.n	8005a18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a4a:	8bfb      	ldrh	r3, [r7, #30]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01e      	beq.n	8005a8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f107 0310 	add.w	r3, r7, #16
 8005a60:	6812      	ldr	r2, [r2, #0]
 8005a62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	701a      	strb	r2, [r3, #0]
      i++;
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	3301      	adds	r3, #1
 8005a80:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a82:	8bfb      	ldrh	r3, [r7, #30]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a88:	8bfb      	ldrh	r3, [r7, #30]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1ea      	bne.n	8005a64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	372c      	adds	r7, #44	@ 0x2c
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d12c      	bne.n	8005b12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	db12      	blt.n	8005af0 <USB_EPSetStall+0x54>
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00f      	beq.n	8005af0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005aee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e02b      	b.n	8005b6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	db12      	blt.n	8005b4a <USB_EPSetStall+0xae>
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00f      	beq.n	8005b4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d128      	bne.n	8005be6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	791b      	ldrb	r3, [r3, #4]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d003      	beq.n	8005bc4 <USB_EPClearStall+0x4c>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	791b      	ldrb	r3, [r3, #4]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d138      	bne.n	8005c36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	0151      	lsls	r1, r2, #5
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	440a      	add	r2, r1
 8005bda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	e027      	b.n	8005c36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	791b      	ldrb	r3, [r3, #4]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d003      	beq.n	8005c16 <USB_EPClearStall+0x9e>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	791b      	ldrb	r3, [r3, #4]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d10f      	bne.n	8005c36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c62:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005c66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005c78:	68f9      	ldr	r1, [r7, #12]
 8005c7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cbe:	f023 0302 	bic.w	r3, r3, #2
 8005cc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005cec:	f023 0303 	bic.w	r3, r3, #3
 8005cf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d00:	f043 0302 	orr.w	r3, r3, #2
 8005d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	0c1b      	lsrs	r3, r3, #16
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	b29b      	uxth	r3, r3
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b087      	sub	sp, #28
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0e:	01db      	lsls	r3, r3, #7
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f003 0301 	and.w	r3, r3, #1
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b085      	sub	sp, #20
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e74:	f023 0307 	bic.w	r3, r3, #7
 8005e78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	333c      	adds	r3, #60	@ 0x3c
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4a26      	ldr	r2, [pc, #152]	@ (8005f54 <USB_EP0_OutStart+0xb8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d90a      	bls.n	8005ed6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ed0:	d101      	bne.n	8005ed6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e037      	b.n	8005f46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005edc:	461a      	mov	r2, r3
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ef0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f04:	f043 0318 	orr.w	r3, r3, #24
 8005f08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f18:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005f1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f1e:	7afb      	ldrb	r3, [r7, #11]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d10f      	bne.n	8005f44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f3e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005f42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	4f54300a 	.word	0x4f54300a

08005f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f70:	d901      	bls.n	8005f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e01b      	b.n	8005fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	daf2      	bge.n	8005f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f9a:	d901      	bls.n	8005fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e006      	b.n	8005fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d0f0      	beq.n	8005f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005fc8:	2010      	movs	r0, #16
 8005fca:	f002 f921 	bl	8008210 <USBD_static_malloc>
 8005fce:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	32b0      	adds	r2, #176	@ 0xb0
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e048      	b.n	800607c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	32b0      	adds	r2, #176	@ 0xb0
 8005ff4:	68f9      	ldr	r1, [r7, #12]
 8005ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	32b0      	adds	r2, #176	@ 0xb0
 8006004:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	7c1b      	ldrb	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006016:	4b1b      	ldr	r3, [pc, #108]	@ (8006084 <USBD_HID_Init+0xc8>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f003 020f 	and.w	r2, r3, #15
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	3326      	adds	r3, #38	@ 0x26
 800602c:	2207      	movs	r2, #7
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	e00c      	b.n	800604c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006032:	4b14      	ldr	r3, [pc, #80]	@ (8006084 <USBD_HID_Init+0xc8>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	f003 020f 	and.w	r2, r3, #15
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	3326      	adds	r3, #38	@ 0x26
 8006048:	220a      	movs	r2, #10
 800604a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800604c:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <USBD_HID_Init+0xc8>)
 800604e:	7819      	ldrb	r1, [r3, #0]
 8006050:	2304      	movs	r3, #4
 8006052:	2203      	movs	r2, #3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 ffca 	bl	8007fee <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800605a:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <USBD_HID_Init+0xc8>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	f003 020f 	and.w	r2, r3, #15
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	3324      	adds	r3, #36	@ 0x24
 8006070:	2201      	movs	r2, #1
 8006072:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	200000bf 	.word	0x200000bf

08006088 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006094:	4b1f      	ldr	r3, [pc, #124]	@ (8006114 <USBD_HID_DeInit+0x8c>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 ffcd 	bl	800803a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80060a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006114 <USBD_HID_DeInit+0x8c>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	f003 020f 	and.w	r2, r3, #15
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	3324      	adds	r3, #36	@ 0x24
 80060b6:	2200      	movs	r2, #0
 80060b8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80060ba:	4b16      	ldr	r3, [pc, #88]	@ (8006114 <USBD_HID_DeInit+0x8c>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	f003 020f 	and.w	r2, r3, #15
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	3326      	adds	r3, #38	@ 0x26
 80060d0:	2200      	movs	r2, #0
 80060d2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	32b0      	adds	r2, #176	@ 0xb0
 80060de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d011      	beq.n	800610a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	32b0      	adds	r2, #176	@ 0xb0
 80060f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f002 f899 	bl	800822c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	32b0      	adds	r2, #176	@ 0xb0
 8006104:	2100      	movs	r1, #0
 8006106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	200000bf 	.word	0x200000bf

08006118 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	32b0      	adds	r2, #176	@ 0xb0
 800612c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006130:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006140:	2303      	movs	r3, #3
 8006142:	e0e8      	b.n	8006316 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800614c:	2b00      	cmp	r3, #0
 800614e:	d046      	beq.n	80061de <USBD_HID_Setup+0xc6>
 8006150:	2b20      	cmp	r3, #32
 8006152:	f040 80d8 	bne.w	8006306 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	3b02      	subs	r3, #2
 800615c:	2b09      	cmp	r3, #9
 800615e:	d836      	bhi.n	80061ce <USBD_HID_Setup+0xb6>
 8006160:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <USBD_HID_Setup+0x50>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	080061bf 	.word	0x080061bf
 800616c:	0800619f 	.word	0x0800619f
 8006170:	080061cf 	.word	0x080061cf
 8006174:	080061cf 	.word	0x080061cf
 8006178:	080061cf 	.word	0x080061cf
 800617c:	080061cf 	.word	0x080061cf
 8006180:	080061cf 	.word	0x080061cf
 8006184:	080061cf 	.word	0x080061cf
 8006188:	080061ad 	.word	0x080061ad
 800618c:	08006191 	.word	0x08006191
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	885b      	ldrh	r3, [r3, #2]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	601a      	str	r2, [r3, #0]
          break;
 800619c:	e01e      	b.n	80061dc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 fbe5 	bl	8007974 <USBD_CtlSendData>
          break;
 80061aa:	e017      	b.n	80061dc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	885b      	ldrh	r3, [r3, #2]
 80061b0:	0a1b      	lsrs	r3, r3, #8
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	605a      	str	r2, [r3, #4]
          break;
 80061bc:	e00e      	b.n	80061dc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3304      	adds	r3, #4
 80061c2:	2201      	movs	r2, #1
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fbd4 	bl	8007974 <USBD_CtlSendData>
          break;
 80061cc:	e006      	b.n	80061dc <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f001 fb52 	bl	800787a <USBD_CtlError>
          ret = USBD_FAIL;
 80061d6:	2303      	movs	r3, #3
 80061d8:	75fb      	strb	r3, [r7, #23]
          break;
 80061da:	bf00      	nop
      }
      break;
 80061dc:	e09a      	b.n	8006314 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	2b0b      	cmp	r3, #11
 80061e4:	f200 8086 	bhi.w	80062f4 <USBD_HID_Setup+0x1dc>
 80061e8:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <USBD_HID_Setup+0xd8>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006221 	.word	0x08006221
 80061f4:	08006303 	.word	0x08006303
 80061f8:	080062f5 	.word	0x080062f5
 80061fc:	080062f5 	.word	0x080062f5
 8006200:	080062f5 	.word	0x080062f5
 8006204:	080062f5 	.word	0x080062f5
 8006208:	0800624b 	.word	0x0800624b
 800620c:	080062f5 	.word	0x080062f5
 8006210:	080062f5 	.word	0x080062f5
 8006214:	080062f5 	.word	0x080062f5
 8006218:	080062a3 	.word	0x080062a3
 800621c:	080062cd 	.word	0x080062cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b03      	cmp	r3, #3
 800622a:	d107      	bne.n	800623c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800622c:	f107 030a 	add.w	r3, r7, #10
 8006230:	2202      	movs	r2, #2
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 fb9d 	bl	8007974 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800623a:	e063      	b.n	8006304 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fb1b 	bl	800787a <USBD_CtlError>
            ret = USBD_FAIL;
 8006244:	2303      	movs	r3, #3
 8006246:	75fb      	strb	r3, [r7, #23]
          break;
 8006248:	e05c      	b.n	8006304 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	885b      	ldrh	r3, [r3, #2]
 800624e:	0a1b      	lsrs	r3, r3, #8
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b22      	cmp	r3, #34	@ 0x22
 8006254:	d108      	bne.n	8006268 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	88db      	ldrh	r3, [r3, #6]
 800625a:	2b3f      	cmp	r3, #63	@ 0x3f
 800625c:	bf28      	it	cs
 800625e:	233f      	movcs	r3, #63	@ 0x3f
 8006260:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006262:	4b2f      	ldr	r3, [pc, #188]	@ (8006320 <USBD_HID_Setup+0x208>)
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	e015      	b.n	8006294 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	885b      	ldrh	r3, [r3, #2]
 800626c:	0a1b      	lsrs	r3, r3, #8
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b21      	cmp	r3, #33	@ 0x21
 8006272:	d108      	bne.n	8006286 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006274:	4b2b      	ldr	r3, [pc, #172]	@ (8006324 <USBD_HID_Setup+0x20c>)
 8006276:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	88db      	ldrh	r3, [r3, #6]
 800627c:	2b09      	cmp	r3, #9
 800627e:	bf28      	it	cs
 8006280:	2309      	movcs	r3, #9
 8006282:	82bb      	strh	r3, [r7, #20]
 8006284:	e006      	b.n	8006294 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 faf6 	bl	800787a <USBD_CtlError>
            ret = USBD_FAIL;
 800628e:	2303      	movs	r3, #3
 8006290:	75fb      	strb	r3, [r7, #23]
            break;
 8006292:	e037      	b.n	8006304 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006294:	8abb      	ldrh	r3, [r7, #20]
 8006296:	461a      	mov	r2, r3
 8006298:	6939      	ldr	r1, [r7, #16]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fb6a 	bl	8007974 <USBD_CtlSendData>
          break;
 80062a0:	e030      	b.n	8006304 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d107      	bne.n	80062be <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3308      	adds	r3, #8
 80062b2:	2201      	movs	r2, #1
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 fb5c 	bl	8007974 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062bc:	e022      	b.n	8006304 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 fada 	bl	800787a <USBD_CtlError>
            ret = USBD_FAIL;
 80062c6:	2303      	movs	r3, #3
 80062c8:	75fb      	strb	r3, [r7, #23]
          break;
 80062ca:	e01b      	b.n	8006304 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d106      	bne.n	80062e6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	885b      	ldrh	r3, [r3, #2]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062e4:	e00e      	b.n	8006304 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 fac6 	bl	800787a <USBD_CtlError>
            ret = USBD_FAIL;
 80062ee:	2303      	movs	r3, #3
 80062f0:	75fb      	strb	r3, [r7, #23]
          break;
 80062f2:	e007      	b.n	8006304 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fabf 	bl	800787a <USBD_CtlError>
          ret = USBD_FAIL;
 80062fc:	2303      	movs	r3, #3
 80062fe:	75fb      	strb	r3, [r7, #23]
          break;
 8006300:	e000      	b.n	8006304 <USBD_HID_Setup+0x1ec>
          break;
 8006302:	bf00      	nop
      }
      break;
 8006304:	e006      	b.n	8006314 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 fab6 	bl	800787a <USBD_CtlError>
      ret = USBD_FAIL;
 800630e:	2303      	movs	r3, #3
 8006310:	75fb      	strb	r3, [r7, #23]
      break;
 8006312:	bf00      	nop
  }

  return (uint8_t)ret;
 8006314:	7dfb      	ldrb	r3, [r7, #23]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000080 	.word	0x20000080
 8006324:	20000068 	.word	0x20000068

08006328 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	32b0      	adds	r2, #176	@ 0xb0
 8006340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006344:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800634c:	2303      	movs	r3, #3
 800634e:	e014      	b.n	800637a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b03      	cmp	r3, #3
 800635a:	d10d      	bne.n	8006378 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	7b1b      	ldrb	r3, [r3, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2201      	movs	r2, #1
 8006368:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800636a:	4b06      	ldr	r3, [pc, #24]	@ (8006384 <USBD_HID_SendReport+0x5c>)
 800636c:	7819      	ldrb	r1, [r3, #0]
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f001 ff09 	bl	800818a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	200000bf 	.word	0x200000bf

08006388 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006390:	2181      	movs	r1, #129	@ 0x81
 8006392:	4809      	ldr	r0, [pc, #36]	@ (80063b8 <USBD_HID_GetFSCfgDesc+0x30>)
 8006394:	f000 fc3b 	bl	8006c0e <USBD_GetEpDesc>
 8006398:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	220a      	movs	r2, #10
 80063a4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2222      	movs	r2, #34	@ 0x22
 80063aa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80063ac:	4b02      	ldr	r3, [pc, #8]	@ (80063b8 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000044 	.word	0x20000044

080063bc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80063c4:	2181      	movs	r1, #129	@ 0x81
 80063c6:	4809      	ldr	r0, [pc, #36]	@ (80063ec <USBD_HID_GetHSCfgDesc+0x30>)
 80063c8:	f000 fc21 	bl	8006c0e <USBD_GetEpDesc>
 80063cc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2207      	movs	r2, #7
 80063d8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2222      	movs	r2, #34	@ 0x22
 80063de:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80063e0:	4b02      	ldr	r3, [pc, #8]	@ (80063ec <USBD_HID_GetHSCfgDesc+0x30>)
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000044 	.word	0x20000044

080063f0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80063f8:	2181      	movs	r1, #129	@ 0x81
 80063fa:	4809      	ldr	r0, [pc, #36]	@ (8006420 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80063fc:	f000 fc07 	bl	8006c0e <USBD_GetEpDesc>
 8006400:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	220a      	movs	r2, #10
 800640c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2222      	movs	r2, #34	@ 0x22
 8006412:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006414:	4b02      	ldr	r3, [pc, #8]	@ (8006420 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000044 	.word	0x20000044

08006424 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	32b0      	adds	r2, #176	@ 0xb0
 800643a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643e:	2200      	movs	r2, #0
 8006440:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	220a      	movs	r2, #10
 800645c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800645e:	4b03      	ldr	r3, [pc, #12]	@ (800646c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	20000074 	.word	0x20000074

08006470 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006484:	2303      	movs	r3, #3
 8006486:	e01f      	b.n	80064c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	79fa      	ldrb	r2, [r7, #7]
 80064ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f001 fd2f 	bl	8007f20 <USBD_LL_Init>
 80064c2:	4603      	mov	r3, r0
 80064c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e025      	b.n	8006534 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	32ae      	adds	r2, #174	@ 0xae
 80064fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00f      	beq.n	8006524 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	32ae      	adds	r2, #174	@ 0xae
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	f107 020e 	add.w	r2, r7, #14
 8006518:	4610      	mov	r0, r2
 800651a:	4798      	blx	r3
 800651c:	4602      	mov	r2, r0
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fd37 	bl	8007fb8 <USBD_LL_Start>
 800654a:	4603      	mov	r3, r0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800655c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006580:	2b00      	cmp	r3, #0
 8006582:	d009      	beq.n	8006598 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	78fa      	ldrb	r2, [r7, #3]
 800658e:	4611      	mov	r1, r2
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	78fa      	ldrb	r2, [r7, #3]
 80065bc:	4611      	mov	r1, r2
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80065c8:	2303      	movs	r3, #3
 80065ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 f90c 	bl	8007806 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80065fc:	461a      	mov	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800660a:	f003 031f 	and.w	r3, r3, #31
 800660e:	2b02      	cmp	r3, #2
 8006610:	d01a      	beq.n	8006648 <USBD_LL_SetupStage+0x72>
 8006612:	2b02      	cmp	r3, #2
 8006614:	d822      	bhi.n	800665c <USBD_LL_SetupStage+0x86>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <USBD_LL_SetupStage+0x4a>
 800661a:	2b01      	cmp	r3, #1
 800661c:	d00a      	beq.n	8006634 <USBD_LL_SetupStage+0x5e>
 800661e:	e01d      	b.n	800665c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fb63 	bl	8006cf4 <USBD_StdDevReq>
 800662e:	4603      	mov	r3, r0
 8006630:	73fb      	strb	r3, [r7, #15]
      break;
 8006632:	e020      	b.n	8006676 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fbcb 	bl	8006dd8 <USBD_StdItfReq>
 8006642:	4603      	mov	r3, r0
 8006644:	73fb      	strb	r3, [r7, #15]
      break;
 8006646:	e016      	b.n	8006676 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fc2d 	bl	8006eb0 <USBD_StdEPReq>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
      break;
 800665a:	e00c      	b.n	8006676 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006662:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006666:	b2db      	uxtb	r3, r3
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 fd04 	bl	8008078 <USBD_LL_StallEP>
 8006670:	4603      	mov	r3, r0
 8006672:	73fb      	strb	r3, [r7, #15]
      break;
 8006674:	bf00      	nop
  }

  return ret;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	460b      	mov	r3, r1
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006692:	7afb      	ldrb	r3, [r7, #11]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d16e      	bne.n	8006776 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800669e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	f040 8098 	bne.w	80067dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d913      	bls.n	80066e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	1ad2      	subs	r2, r2, r3
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	4293      	cmp	r3, r2
 80066d0:	bf28      	it	cs
 80066d2:	4613      	movcs	r3, r2
 80066d4:	461a      	mov	r2, r3
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f001 f977 	bl	80079cc <USBD_CtlContinueRx>
 80066de:	e07d      	b.n	80067dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d014      	beq.n	8006718 <USBD_LL_DataOutStage+0x98>
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d81d      	bhi.n	800672e <USBD_LL_DataOutStage+0xae>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <USBD_LL_DataOutStage+0x7c>
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d003      	beq.n	8006702 <USBD_LL_DataOutStage+0x82>
 80066fa:	e018      	b.n	800672e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006700:	e018      	b.n	8006734 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006708:	b2db      	uxtb	r3, r3
 800670a:	4619      	mov	r1, r3
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fa64 	bl	8006bda <USBD_CoreFindIF>
 8006712:	4603      	mov	r3, r0
 8006714:	75bb      	strb	r3, [r7, #22]
            break;
 8006716:	e00d      	b.n	8006734 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800671e:	b2db      	uxtb	r3, r3
 8006720:	4619      	mov	r1, r3
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 fa66 	bl	8006bf4 <USBD_CoreFindEP>
 8006728:	4603      	mov	r3, r0
 800672a:	75bb      	strb	r3, [r7, #22]
            break;
 800672c:	e002      	b.n	8006734 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	75bb      	strb	r3, [r7, #22]
            break;
 8006732:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006734:	7dbb      	ldrb	r3, [r7, #22]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d119      	bne.n	800676e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b03      	cmp	r3, #3
 8006744:	d113      	bne.n	800676e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006746:	7dba      	ldrb	r2, [r7, #22]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	32ae      	adds	r2, #174	@ 0xae
 800674c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006756:	7dba      	ldrb	r2, [r7, #22]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800675e:	7dba      	ldrb	r2, [r7, #22]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	32ae      	adds	r2, #174	@ 0xae
 8006764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f001 f93d 	bl	80079ee <USBD_CtlSendStatus>
 8006774:	e032      	b.n	80067dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006776:	7afb      	ldrb	r3, [r7, #11]
 8006778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800677c:	b2db      	uxtb	r3, r3
 800677e:	4619      	mov	r1, r3
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 fa37 	bl	8006bf4 <USBD_CoreFindEP>
 8006786:	4603      	mov	r3, r0
 8006788:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800678a:	7dbb      	ldrb	r3, [r7, #22]
 800678c:	2bff      	cmp	r3, #255	@ 0xff
 800678e:	d025      	beq.n	80067dc <USBD_LL_DataOutStage+0x15c>
 8006790:	7dbb      	ldrb	r3, [r7, #22]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d122      	bne.n	80067dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d117      	bne.n	80067d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80067a2:	7dba      	ldrb	r2, [r7, #22]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	32ae      	adds	r2, #174	@ 0xae
 80067a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00f      	beq.n	80067d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80067b2:	7dba      	ldrb	r2, [r7, #22]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80067ba:	7dba      	ldrb	r2, [r7, #22]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	32ae      	adds	r2, #174	@ 0xae
 80067c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	7afa      	ldrb	r2, [r7, #11]
 80067c8:	4611      	mov	r1, r2
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	4798      	blx	r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	e000      	b.n	80067de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b086      	sub	sp, #24
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	460b      	mov	r3, r1
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80067f4:	7afb      	ldrb	r3, [r7, #11]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d16f      	bne.n	80068da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3314      	adds	r3, #20
 80067fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006806:	2b02      	cmp	r3, #2
 8006808:	d15a      	bne.n	80068c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	429a      	cmp	r2, r3
 8006814:	d914      	bls.n	8006840 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	461a      	mov	r2, r3
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f001 f8bc 	bl	80079aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006832:	2300      	movs	r3, #0
 8006834:	2200      	movs	r2, #0
 8006836:	2100      	movs	r1, #0
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f001 fcc7 	bl	80081cc <USBD_LL_PrepareReceive>
 800683e:	e03f      	b.n	80068c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	429a      	cmp	r2, r3
 800684a:	d11c      	bne.n	8006886 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006854:	429a      	cmp	r2, r3
 8006856:	d316      	bcc.n	8006886 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006862:	429a      	cmp	r2, r3
 8006864:	d20f      	bcs.n	8006886 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006866:	2200      	movs	r2, #0
 8006868:	2100      	movs	r1, #0
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f001 f89d 	bl	80079aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006878:	2300      	movs	r3, #0
 800687a:	2200      	movs	r2, #0
 800687c:	2100      	movs	r1, #0
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f001 fca4 	bl	80081cc <USBD_LL_PrepareReceive>
 8006884:	e01c      	b.n	80068c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b03      	cmp	r3, #3
 8006890:	d10f      	bne.n	80068b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068b2:	2180      	movs	r1, #128	@ 0x80
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f001 fbdf 	bl	8008078 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f001 f8aa 	bl	8007a14 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d03a      	beq.n	8006940 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff fe42 	bl	8006554 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80068d8:	e032      	b.n	8006940 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80068da:	7afb      	ldrb	r3, [r7, #11]
 80068dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	4619      	mov	r1, r3
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f985 	bl	8006bf4 <USBD_CoreFindEP>
 80068ea:	4603      	mov	r3, r0
 80068ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	2bff      	cmp	r3, #255	@ 0xff
 80068f2:	d025      	beq.n	8006940 <USBD_LL_DataInStage+0x15a>
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d122      	bne.n	8006940 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b03      	cmp	r3, #3
 8006904:	d11c      	bne.n	8006940 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006906:	7dfa      	ldrb	r2, [r7, #23]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	32ae      	adds	r2, #174	@ 0xae
 800690c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d014      	beq.n	8006940 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006916:	7dfa      	ldrb	r2, [r7, #23]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800691e:	7dfa      	ldrb	r2, [r7, #23]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	32ae      	adds	r2, #174	@ 0xae
 8006924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	7afa      	ldrb	r2, [r7, #11]
 800692c:	4611      	mov	r1, r2
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	4798      	blx	r3
 8006932:	4603      	mov	r3, r0
 8006934:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006936:	7dbb      	ldrb	r3, [r7, #22]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800693c:	7dbb      	ldrb	r3, [r7, #22]
 800693e:	e000      	b.n	8006942 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d014      	beq.n	80069b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6852      	ldr	r2, [r2, #4]
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	4611      	mov	r1, r2
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80069ac:	2303      	movs	r3, #3
 80069ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069b0:	2340      	movs	r3, #64	@ 0x40
 80069b2:	2200      	movs	r2, #0
 80069b4:	2100      	movs	r1, #0
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fb19 	bl	8007fee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2240      	movs	r2, #64	@ 0x40
 80069c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069cc:	2340      	movs	r3, #64	@ 0x40
 80069ce:	2200      	movs	r2, #0
 80069d0:	2180      	movs	r1, #128	@ 0x80
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fb0b 	bl	8007fee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2240      	movs	r2, #64	@ 0x40
 80069e2:	621a      	str	r2, [r3, #32]

  return ret;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	78fa      	ldrb	r2, [r7, #3]
 80069fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d006      	beq.n	8006a30 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2204      	movs	r2, #4
 8006a34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d106      	bne.n	8006a68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d110      	bne.n	8006aac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	32ae      	adds	r2, #174	@ 0xae
 8006acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e01c      	b.n	8006b12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d115      	bne.n	8006b10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	32ae      	adds	r2, #174	@ 0xae
 8006aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	32ae      	adds	r2, #174	@ 0xae
 8006b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	78fa      	ldrb	r2, [r7, #3]
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	32ae      	adds	r2, #174	@ 0xae
 8006b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e01c      	b.n	8006b76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d115      	bne.n	8006b74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	32ae      	adds	r2, #174	@ 0xae
 8006b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	32ae      	adds	r2, #174	@ 0xae
 8006b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6c:	78fa      	ldrb	r2, [r7, #3]
 8006b6e:	4611      	mov	r1, r2
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00e      	beq.n	8006bd0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6852      	ldr	r2, [r2, #4]
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	460b      	mov	r3, r1
 8006be4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006be6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	885b      	ldrh	r3, [r3, #2]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	7812      	ldrb	r2, [r2, #0]
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d91f      	bls.n	8006c74 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006c3a:	e013      	b.n	8006c64 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006c3c:	f107 030a 	add.w	r3, r7, #10
 8006c40:	4619      	mov	r1, r3
 8006c42:	6978      	ldr	r0, [r7, #20]
 8006c44:	f000 f81b 	bl	8006c7e <USBD_GetNextDesc>
 8006c48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	2b05      	cmp	r3, #5
 8006c50:	d108      	bne.n	8006c64 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	789b      	ldrb	r3, [r3, #2]
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d008      	beq.n	8006c72 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	885b      	ldrh	r3, [r3, #2]
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	897b      	ldrh	r3, [r7, #10]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d8e5      	bhi.n	8006c3c <USBD_GetEpDesc+0x2e>
 8006c70:	e000      	b.n	8006c74 <USBD_GetEpDesc+0x66>
          break;
 8006c72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006c74:	693b      	ldr	r3, [r7, #16]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b085      	sub	sp, #20
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	7812      	ldrb	r2, [r2, #0]
 8006c94:	4413      	add	r3, r2
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b087      	sub	sp, #28
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006cd4:	8a3b      	ldrh	r3, [r7, #16]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	b21a      	sxth	r2, r3
 8006cda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	b21b      	sxth	r3, r3
 8006ce2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ce4:	89fb      	ldrh	r3, [r7, #14]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d0a:	2b40      	cmp	r3, #64	@ 0x40
 8006d0c:	d005      	beq.n	8006d1a <USBD_StdDevReq+0x26>
 8006d0e:	2b40      	cmp	r3, #64	@ 0x40
 8006d10:	d857      	bhi.n	8006dc2 <USBD_StdDevReq+0xce>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00f      	beq.n	8006d36 <USBD_StdDevReq+0x42>
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d153      	bne.n	8006dc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	32ae      	adds	r2, #174	@ 0xae
 8006d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
      break;
 8006d34:	e04a      	b.n	8006dcc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b09      	cmp	r3, #9
 8006d3c:	d83b      	bhi.n	8006db6 <USBD_StdDevReq+0xc2>
 8006d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <USBD_StdDevReq+0x50>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d99 	.word	0x08006d99
 8006d48:	08006dad 	.word	0x08006dad
 8006d4c:	08006db7 	.word	0x08006db7
 8006d50:	08006da3 	.word	0x08006da3
 8006d54:	08006db7 	.word	0x08006db7
 8006d58:	08006d77 	.word	0x08006d77
 8006d5c:	08006d6d 	.word	0x08006d6d
 8006d60:	08006db7 	.word	0x08006db7
 8006d64:	08006d8f 	.word	0x08006d8f
 8006d68:	08006d81 	.word	0x08006d81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fa3c 	bl	80071ec <USBD_GetDescriptor>
          break;
 8006d74:	e024      	b.n	8006dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fba1 	bl	80074c0 <USBD_SetAddress>
          break;
 8006d7e:	e01f      	b.n	8006dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fbe0 	bl	8007548 <USBD_SetConfig>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
          break;
 8006d8c:	e018      	b.n	8006dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fc83 	bl	800769c <USBD_GetConfig>
          break;
 8006d96:	e013      	b.n	8006dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fcb4 	bl	8007708 <USBD_GetStatus>
          break;
 8006da0:	e00e      	b.n	8006dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fce3 	bl	8007770 <USBD_SetFeature>
          break;
 8006daa:	e009      	b.n	8006dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fd07 	bl	80077c2 <USBD_ClrFeature>
          break;
 8006db4:	e004      	b.n	8006dc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fd5e 	bl	800787a <USBD_CtlError>
          break;
 8006dbe:	bf00      	nop
      }
      break;
 8006dc0:	e004      	b.n	8006dcc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fd58 	bl	800787a <USBD_CtlError>
      break;
 8006dca:	bf00      	nop
  }

  return ret;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop

08006dd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dee:	2b40      	cmp	r3, #64	@ 0x40
 8006df0:	d005      	beq.n	8006dfe <USBD_StdItfReq+0x26>
 8006df2:	2b40      	cmp	r3, #64	@ 0x40
 8006df4:	d852      	bhi.n	8006e9c <USBD_StdItfReq+0xc4>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <USBD_StdItfReq+0x26>
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d14e      	bne.n	8006e9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d840      	bhi.n	8006e8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	889b      	ldrh	r3, [r3, #4]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d836      	bhi.n	8006e84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	889b      	ldrh	r3, [r3, #4]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff fedb 	bl	8006bda <USBD_CoreFindIF>
 8006e24:	4603      	mov	r3, r0
 8006e26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	2bff      	cmp	r3, #255	@ 0xff
 8006e2c:	d01d      	beq.n	8006e6a <USBD_StdItfReq+0x92>
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11a      	bne.n	8006e6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006e34:	7bba      	ldrb	r2, [r7, #14]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	32ae      	adds	r2, #174	@ 0xae
 8006e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00f      	beq.n	8006e64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006e44:	7bba      	ldrb	r2, [r7, #14]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e4c:	7bba      	ldrb	r2, [r7, #14]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	32ae      	adds	r2, #174	@ 0xae
 8006e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006e62:	e004      	b.n	8006e6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006e64:	2303      	movs	r3, #3
 8006e66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006e68:	e001      	b.n	8006e6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	88db      	ldrh	r3, [r3, #6]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d110      	bne.n	8006e98 <USBD_StdItfReq+0xc0>
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10d      	bne.n	8006e98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fdb6 	bl	80079ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e82:	e009      	b.n	8006e98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fcf7 	bl	800787a <USBD_CtlError>
          break;
 8006e8c:	e004      	b.n	8006e98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fcf2 	bl	800787a <USBD_CtlError>
          break;
 8006e96:	e000      	b.n	8006e9a <USBD_StdItfReq+0xc2>
          break;
 8006e98:	bf00      	nop
      }
      break;
 8006e9a:	e004      	b.n	8006ea6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fceb 	bl	800787a <USBD_CtlError>
      break;
 8006ea4:	bf00      	nop
  }

  return ret;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	889b      	ldrh	r3, [r3, #4]
 8006ec2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ecc:	2b40      	cmp	r3, #64	@ 0x40
 8006ece:	d007      	beq.n	8006ee0 <USBD_StdEPReq+0x30>
 8006ed0:	2b40      	cmp	r3, #64	@ 0x40
 8006ed2:	f200 817f 	bhi.w	80071d4 <USBD_StdEPReq+0x324>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d02a      	beq.n	8006f30 <USBD_StdEPReq+0x80>
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	f040 817a 	bne.w	80071d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff fe85 	bl	8006bf4 <USBD_CoreFindEP>
 8006eea:	4603      	mov	r3, r0
 8006eec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006eee:	7b7b      	ldrb	r3, [r7, #13]
 8006ef0:	2bff      	cmp	r3, #255	@ 0xff
 8006ef2:	f000 8174 	beq.w	80071de <USBD_StdEPReq+0x32e>
 8006ef6:	7b7b      	ldrb	r3, [r7, #13]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f040 8170 	bne.w	80071de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006efe:	7b7a      	ldrb	r2, [r7, #13]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006f06:	7b7a      	ldrb	r2, [r7, #13]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	32ae      	adds	r2, #174	@ 0xae
 8006f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 8163 	beq.w	80071de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006f18:	7b7a      	ldrb	r2, [r7, #13]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32ae      	adds	r2, #174	@ 0xae
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f2e:	e156      	b.n	80071de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	d008      	beq.n	8006f4a <USBD_StdEPReq+0x9a>
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	f300 8145 	bgt.w	80071c8 <USBD_StdEPReq+0x318>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 809b 	beq.w	800707a <USBD_StdEPReq+0x1ca>
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d03c      	beq.n	8006fc2 <USBD_StdEPReq+0x112>
 8006f48:	e13e      	b.n	80071c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d002      	beq.n	8006f5c <USBD_StdEPReq+0xac>
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d016      	beq.n	8006f88 <USBD_StdEPReq+0xd8>
 8006f5a:	e02c      	b.n	8006fb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00d      	beq.n	8006f7e <USBD_StdEPReq+0xce>
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	2b80      	cmp	r3, #128	@ 0x80
 8006f66:	d00a      	beq.n	8006f7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 f883 	bl	8008078 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f72:	2180      	movs	r1, #128	@ 0x80
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 f87f 	bl	8008078 <USBD_LL_StallEP>
 8006f7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f7c:	e020      	b.n	8006fc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fc7a 	bl	800787a <USBD_CtlError>
              break;
 8006f86:	e01b      	b.n	8006fc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	885b      	ldrh	r3, [r3, #2]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10e      	bne.n	8006fae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <USBD_StdEPReq+0xfe>
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	2b80      	cmp	r3, #128	@ 0x80
 8006f9a:	d008      	beq.n	8006fae <USBD_StdEPReq+0xfe>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	88db      	ldrh	r3, [r3, #6]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 f865 	bl	8008078 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fd1d 	bl	80079ee <USBD_CtlSendStatus>

              break;
 8006fb4:	e004      	b.n	8006fc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fc5e 	bl	800787a <USBD_CtlError>
              break;
 8006fbe:	bf00      	nop
          }
          break;
 8006fc0:	e107      	b.n	80071d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d002      	beq.n	8006fd4 <USBD_StdEPReq+0x124>
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d016      	beq.n	8007000 <USBD_StdEPReq+0x150>
 8006fd2:	e04b      	b.n	800706c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00d      	beq.n	8006ff6 <USBD_StdEPReq+0x146>
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b80      	cmp	r3, #128	@ 0x80
 8006fde:	d00a      	beq.n	8006ff6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 f847 	bl	8008078 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fea:	2180      	movs	r1, #128	@ 0x80
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 f843 	bl	8008078 <USBD_LL_StallEP>
 8006ff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ff4:	e040      	b.n	8007078 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fc3e 	bl	800787a <USBD_CtlError>
              break;
 8006ffe:	e03b      	b.n	8007078 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	885b      	ldrh	r3, [r3, #2]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d136      	bne.n	8007076 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800700e:	2b00      	cmp	r3, #0
 8007010:	d004      	beq.n	800701c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f84d 	bl	80080b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fce6 	bl	80079ee <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fde4 	bl	8006bf4 <USBD_CoreFindEP>
 800702c:	4603      	mov	r3, r0
 800702e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007030:	7b7b      	ldrb	r3, [r7, #13]
 8007032:	2bff      	cmp	r3, #255	@ 0xff
 8007034:	d01f      	beq.n	8007076 <USBD_StdEPReq+0x1c6>
 8007036:	7b7b      	ldrb	r3, [r7, #13]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d11c      	bne.n	8007076 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800703c:	7b7a      	ldrb	r2, [r7, #13]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007044:	7b7a      	ldrb	r2, [r7, #13]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	32ae      	adds	r2, #174	@ 0xae
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d010      	beq.n	8007076 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007054:	7b7a      	ldrb	r2, [r7, #13]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	32ae      	adds	r2, #174	@ 0xae
 800705a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800706a:	e004      	b.n	8007076 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fc03 	bl	800787a <USBD_CtlError>
              break;
 8007074:	e000      	b.n	8007078 <USBD_StdEPReq+0x1c8>
              break;
 8007076:	bf00      	nop
          }
          break;
 8007078:	e0ab      	b.n	80071d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d002      	beq.n	800708c <USBD_StdEPReq+0x1dc>
 8007086:	2b03      	cmp	r3, #3
 8007088:	d032      	beq.n	80070f0 <USBD_StdEPReq+0x240>
 800708a:	e097      	b.n	80071bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <USBD_StdEPReq+0x1f2>
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b80      	cmp	r3, #128	@ 0x80
 8007096:	d004      	beq.n	80070a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fbed 	bl	800787a <USBD_CtlError>
                break;
 80070a0:	e091      	b.n	80071c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	da0b      	bge.n	80070c2 <USBD_StdEPReq+0x212>
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	3310      	adds	r3, #16
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	3304      	adds	r3, #4
 80070c0:	e00b      	b.n	80070da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	4413      	add	r3, r2
 80070d8:	3304      	adds	r3, #4
 80070da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2202      	movs	r2, #2
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fc43 	bl	8007974 <USBD_CtlSendData>
              break;
 80070ee:	e06a      	b.n	80071c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	da11      	bge.n	800711c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	f003 020f 	and.w	r2, r3, #15
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	3324      	adds	r3, #36	@ 0x24
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d117      	bne.n	8007142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fbb0 	bl	800787a <USBD_CtlError>
                  break;
 800711a:	e054      	b.n	80071c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	f003 020f 	and.w	r2, r3, #15
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4613      	mov	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d104      	bne.n	8007142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fb9d 	bl	800787a <USBD_CtlError>
                  break;
 8007140:	e041      	b.n	80071c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	da0b      	bge.n	8007162 <USBD_StdEPReq+0x2b2>
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007150:	4613      	mov	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	3310      	adds	r3, #16
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	4413      	add	r3, r2
 800715e:	3304      	adds	r3, #4
 8007160:	e00b      	b.n	800717a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4413      	add	r3, r2
 8007178:	3304      	adds	r3, #4
 800717a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <USBD_StdEPReq+0x2d8>
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b80      	cmp	r3, #128	@ 0x80
 8007186:	d103      	bne.n	8007190 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	e00e      	b.n	80071ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 ffad 	bl	80080f4 <USBD_LL_IsStallEP>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	e002      	b.n	80071ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2202      	movs	r2, #2
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fbdd 	bl	8007974 <USBD_CtlSendData>
              break;
 80071ba:	e004      	b.n	80071c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fb5b 	bl	800787a <USBD_CtlError>
              break;
 80071c4:	bf00      	nop
          }
          break;
 80071c6:	e004      	b.n	80071d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fb55 	bl	800787a <USBD_CtlError>
          break;
 80071d0:	bf00      	nop
      }
      break;
 80071d2:	e005      	b.n	80071e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fb4f 	bl	800787a <USBD_CtlError>
      break;
 80071dc:	e000      	b.n	80071e0 <USBD_StdEPReq+0x330>
      break;
 80071de:	bf00      	nop
  }

  return ret;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	0a1b      	lsrs	r3, r3, #8
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	2b06      	cmp	r3, #6
 800720e:	f200 8128 	bhi.w	8007462 <USBD_GetDescriptor+0x276>
 8007212:	a201      	add	r2, pc, #4	@ (adr r2, 8007218 <USBD_GetDescriptor+0x2c>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	08007235 	.word	0x08007235
 800721c:	0800724d 	.word	0x0800724d
 8007220:	0800728d 	.word	0x0800728d
 8007224:	08007463 	.word	0x08007463
 8007228:	08007463 	.word	0x08007463
 800722c:	08007403 	.word	0x08007403
 8007230:	0800742f 	.word	0x0800742f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	7c12      	ldrb	r2, [r2, #16]
 8007240:	f107 0108 	add.w	r1, r7, #8
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
 8007248:	60f8      	str	r0, [r7, #12]
      break;
 800724a:	e112      	b.n	8007472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	7c1b      	ldrb	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10d      	bne.n	8007270 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800725a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725c:	f107 0208 	add.w	r2, r7, #8
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	2202      	movs	r2, #2
 800726c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800726e:	e100      	b.n	8007472 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007278:	f107 0208 	add.w	r2, r7, #8
 800727c:	4610      	mov	r0, r2
 800727e:	4798      	blx	r3
 8007280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3301      	adds	r3, #1
 8007286:	2202      	movs	r2, #2
 8007288:	701a      	strb	r2, [r3, #0]
      break;
 800728a:	e0f2      	b.n	8007472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	885b      	ldrh	r3, [r3, #2]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b05      	cmp	r3, #5
 8007294:	f200 80ac 	bhi.w	80073f0 <USBD_GetDescriptor+0x204>
 8007298:	a201      	add	r2, pc, #4	@ (adr r2, 80072a0 <USBD_GetDescriptor+0xb4>)
 800729a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729e:	bf00      	nop
 80072a0:	080072b9 	.word	0x080072b9
 80072a4:	080072ed 	.word	0x080072ed
 80072a8:	08007321 	.word	0x08007321
 80072ac:	08007355 	.word	0x08007355
 80072b0:	08007389 	.word	0x08007389
 80072b4:	080073bd 	.word	0x080073bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072da:	e091      	b.n	8007400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 facb 	bl	800787a <USBD_CtlError>
            err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ea:	e089      	b.n	8007400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	7c12      	ldrb	r2, [r2, #16]
 8007304:	f107 0108 	add.w	r1, r7, #8
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800730e:	e077      	b.n	8007400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fab1 	bl	800787a <USBD_CtlError>
            err++;
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	3301      	adds	r3, #1
 800731c:	72fb      	strb	r3, [r7, #11]
          break;
 800731e:	e06f      	b.n	8007400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	7c12      	ldrb	r2, [r2, #16]
 8007338:	f107 0108 	add.w	r1, r7, #8
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007342:	e05d      	b.n	8007400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa97 	bl	800787a <USBD_CtlError>
            err++;
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	3301      	adds	r3, #1
 8007350:	72fb      	strb	r3, [r7, #11]
          break;
 8007352:	e055      	b.n	8007400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	7c12      	ldrb	r2, [r2, #16]
 800736c:	f107 0108 	add.w	r1, r7, #8
 8007370:	4610      	mov	r0, r2
 8007372:	4798      	blx	r3
 8007374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007376:	e043      	b.n	8007400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa7d 	bl	800787a <USBD_CtlError>
            err++;
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	3301      	adds	r3, #1
 8007384:	72fb      	strb	r3, [r7, #11]
          break;
 8007386:	e03b      	b.n	8007400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00b      	beq.n	80073ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7c12      	ldrb	r2, [r2, #16]
 80073a0:	f107 0108 	add.w	r1, r7, #8
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
 80073a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073aa:	e029      	b.n	8007400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa63 	bl	800787a <USBD_CtlError>
            err++;
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	3301      	adds	r3, #1
 80073b8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ba:	e021      	b.n	8007400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	7c12      	ldrb	r2, [r2, #16]
 80073d4:	f107 0108 	add.w	r1, r7, #8
 80073d8:	4610      	mov	r0, r2
 80073da:	4798      	blx	r3
 80073dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073de:	e00f      	b.n	8007400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa49 	bl	800787a <USBD_CtlError>
            err++;
 80073e8:	7afb      	ldrb	r3, [r7, #11]
 80073ea:	3301      	adds	r3, #1
 80073ec:	72fb      	strb	r3, [r7, #11]
          break;
 80073ee:	e007      	b.n	8007400 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa41 	bl	800787a <USBD_CtlError>
          err++;
 80073f8:	7afb      	ldrb	r3, [r7, #11]
 80073fa:	3301      	adds	r3, #1
 80073fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80073fe:	bf00      	nop
      }
      break;
 8007400:	e037      	b.n	8007472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	7c1b      	ldrb	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007412:	f107 0208 	add.w	r2, r7, #8
 8007416:	4610      	mov	r0, r2
 8007418:	4798      	blx	r3
 800741a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800741c:	e029      	b.n	8007472 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fa2a 	bl	800787a <USBD_CtlError>
        err++;
 8007426:	7afb      	ldrb	r3, [r7, #11]
 8007428:	3301      	adds	r3, #1
 800742a:	72fb      	strb	r3, [r7, #11]
      break;
 800742c:	e021      	b.n	8007472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	7c1b      	ldrb	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10d      	bne.n	8007452 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800743c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743e:	f107 0208 	add.w	r2, r7, #8
 8007442:	4610      	mov	r0, r2
 8007444:	4798      	blx	r3
 8007446:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	2207      	movs	r2, #7
 800744e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007450:	e00f      	b.n	8007472 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fa10 	bl	800787a <USBD_CtlError>
        err++;
 800745a:	7afb      	ldrb	r3, [r7, #11]
 800745c:	3301      	adds	r3, #1
 800745e:	72fb      	strb	r3, [r7, #11]
      break;
 8007460:	e007      	b.n	8007472 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa08 	bl	800787a <USBD_CtlError>
      err++;
 800746a:	7afb      	ldrb	r3, [r7, #11]
 800746c:	3301      	adds	r3, #1
 800746e:	72fb      	strb	r3, [r7, #11]
      break;
 8007470:	bf00      	nop
  }

  if (err != 0U)
 8007472:	7afb      	ldrb	r3, [r7, #11]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d11e      	bne.n	80074b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	88db      	ldrh	r3, [r3, #6]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d016      	beq.n	80074ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007480:	893b      	ldrh	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00e      	beq.n	80074a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	88da      	ldrh	r2, [r3, #6]
 800748a:	893b      	ldrh	r3, [r7, #8]
 800748c:	4293      	cmp	r3, r2
 800748e:	bf28      	it	cs
 8007490:	4613      	movcs	r3, r2
 8007492:	b29b      	uxth	r3, r3
 8007494:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007496:	893b      	ldrh	r3, [r7, #8]
 8007498:	461a      	mov	r2, r3
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fa69 	bl	8007974 <USBD_CtlSendData>
 80074a2:	e009      	b.n	80074b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f9e7 	bl	800787a <USBD_CtlError>
 80074ac:	e004      	b.n	80074b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa9d 	bl	80079ee <USBD_CtlSendStatus>
 80074b4:	e000      	b.n	80074b8 <USBD_GetDescriptor+0x2cc>
    return;
 80074b6:	bf00      	nop
  }
}
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop

080074c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	889b      	ldrh	r3, [r3, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d131      	bne.n	8007536 <USBD_SetAddress+0x76>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	88db      	ldrh	r3, [r3, #6]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d12d      	bne.n	8007536 <USBD_SetAddress+0x76>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	885b      	ldrh	r3, [r3, #2]
 80074de:	2b7f      	cmp	r3, #127	@ 0x7f
 80074e0:	d829      	bhi.n	8007536 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	885b      	ldrh	r3, [r3, #2]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d104      	bne.n	8007504 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f9bc 	bl	800787a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007502:	e01d      	b.n	8007540 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7bfa      	ldrb	r2, [r7, #15]
 8007508:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fe1b 	bl	800814c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fa69 	bl	80079ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d004      	beq.n	800752c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2202      	movs	r2, #2
 8007526:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800752a:	e009      	b.n	8007540 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007534:	e004      	b.n	8007540 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f99e 	bl	800787a <USBD_CtlError>
  }
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	885b      	ldrh	r3, [r3, #2]
 800755a:	b2da      	uxtb	r2, r3
 800755c:	4b4e      	ldr	r3, [pc, #312]	@ (8007698 <USBD_SetConfig+0x150>)
 800755e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007560:	4b4d      	ldr	r3, [pc, #308]	@ (8007698 <USBD_SetConfig+0x150>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d905      	bls.n	8007574 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f985 	bl	800787a <USBD_CtlError>
    return USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	e08c      	b.n	800768e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b02      	cmp	r3, #2
 800757e:	d002      	beq.n	8007586 <USBD_SetConfig+0x3e>
 8007580:	2b03      	cmp	r3, #3
 8007582:	d029      	beq.n	80075d8 <USBD_SetConfig+0x90>
 8007584:	e075      	b.n	8007672 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007586:	4b44      	ldr	r3, [pc, #272]	@ (8007698 <USBD_SetConfig+0x150>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d020      	beq.n	80075d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800758e:	4b42      	ldr	r3, [pc, #264]	@ (8007698 <USBD_SetConfig+0x150>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007598:	4b3f      	ldr	r3, [pc, #252]	@ (8007698 <USBD_SetConfig+0x150>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fe ffe3 	bl	800656a <USBD_SetClassConfig>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d008      	beq.n	80075c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f962 	bl	800787a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2202      	movs	r2, #2
 80075ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075be:	e065      	b.n	800768c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fa14 	bl	80079ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2203      	movs	r2, #3
 80075ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80075ce:	e05d      	b.n	800768c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fa0c 	bl	80079ee <USBD_CtlSendStatus>
      break;
 80075d6:	e059      	b.n	800768c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80075d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007698 <USBD_SetConfig+0x150>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d112      	bne.n	8007606 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80075e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007698 <USBD_SetConfig+0x150>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075f2:	4b29      	ldr	r3, [pc, #164]	@ (8007698 <USBD_SetConfig+0x150>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fe ffd2 	bl	80065a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f9f5 	bl	80079ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007604:	e042      	b.n	800768c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007606:	4b24      	ldr	r3, [pc, #144]	@ (8007698 <USBD_SetConfig+0x150>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d02a      	beq.n	800766a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7fe ffc0 	bl	80065a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007622:	4b1d      	ldr	r3, [pc, #116]	@ (8007698 <USBD_SetConfig+0x150>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800762c:	4b1a      	ldr	r3, [pc, #104]	@ (8007698 <USBD_SetConfig+0x150>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fe ff99 	bl	800656a <USBD_SetClassConfig>
 8007638:	4603      	mov	r3, r0
 800763a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00f      	beq.n	8007662 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f918 	bl	800787a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fe ffa5 	bl	80065a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007660:	e014      	b.n	800768c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f9c3 	bl	80079ee <USBD_CtlSendStatus>
      break;
 8007668:	e010      	b.n	800768c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f9bf 	bl	80079ee <USBD_CtlSendStatus>
      break;
 8007670:	e00c      	b.n	800768c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f900 	bl	800787a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800767a:	4b07      	ldr	r3, [pc, #28]	@ (8007698 <USBD_SetConfig+0x150>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7fe ff8e 	bl	80065a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007686:	2303      	movs	r3, #3
 8007688:	73fb      	strb	r3, [r7, #15]
      break;
 800768a:	bf00      	nop
  }

  return ret;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20002118 	.word	0x20002118

0800769c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	88db      	ldrh	r3, [r3, #6]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d004      	beq.n	80076b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f8e2 	bl	800787a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076b6:	e023      	b.n	8007700 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	dc02      	bgt.n	80076ca <USBD_GetConfig+0x2e>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	dc03      	bgt.n	80076d0 <USBD_GetConfig+0x34>
 80076c8:	e015      	b.n	80076f6 <USBD_GetConfig+0x5a>
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d00b      	beq.n	80076e6 <USBD_GetConfig+0x4a>
 80076ce:	e012      	b.n	80076f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3308      	adds	r3, #8
 80076da:	2201      	movs	r2, #1
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f948 	bl	8007974 <USBD_CtlSendData>
        break;
 80076e4:	e00c      	b.n	8007700 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3304      	adds	r3, #4
 80076ea:	2201      	movs	r2, #1
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f940 	bl	8007974 <USBD_CtlSendData>
        break;
 80076f4:	e004      	b.n	8007700 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f8be 	bl	800787a <USBD_CtlError>
        break;
 80076fe:	bf00      	nop
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	3b01      	subs	r3, #1
 800771c:	2b02      	cmp	r3, #2
 800771e:	d81e      	bhi.n	800775e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	88db      	ldrh	r3, [r3, #6]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d004      	beq.n	8007732 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f8a5 	bl	800787a <USBD_CtlError>
        break;
 8007730:	e01a      	b.n	8007768 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800773e:	2b00      	cmp	r3, #0
 8007740:	d005      	beq.n	800774e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f043 0202 	orr.w	r2, r3, #2
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	330c      	adds	r3, #12
 8007752:	2202      	movs	r2, #2
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f90c 	bl	8007974 <USBD_CtlSendData>
      break;
 800775c:	e004      	b.n	8007768 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f88a 	bl	800787a <USBD_CtlError>
      break;
 8007766:	bf00      	nop
  }
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	885b      	ldrh	r3, [r3, #2]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d107      	bne.n	8007792 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f92f 	bl	80079ee <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007790:	e013      	b.n	80077ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	885b      	ldrh	r3, [r3, #2]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d10b      	bne.n	80077b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	889b      	ldrh	r3, [r3, #4]
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f91f 	bl	80079ee <USBD_CtlSendStatus>
}
 80077b0:	e003      	b.n	80077ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f860 	bl	800787a <USBD_CtlError>
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d80b      	bhi.n	80077f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	885b      	ldrh	r3, [r3, #2]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d10c      	bne.n	80077fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f8ff 	bl	80079ee <USBD_CtlSendStatus>
      }
      break;
 80077f0:	e004      	b.n	80077fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f840 	bl	800787a <USBD_CtlError>
      break;
 80077fa:	e000      	b.n	80077fe <USBD_ClrFeature+0x3c>
      break;
 80077fc:	bf00      	nop
  }
}
 80077fe:	bf00      	nop
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	781a      	ldrb	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3301      	adds	r3, #1
 800782e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff fa40 	bl	8006cb6 <SWAPBYTE>
 8007836:	4603      	mov	r3, r0
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3301      	adds	r3, #1
 8007842:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff fa33 	bl	8006cb6 <SWAPBYTE>
 8007850:	4603      	mov	r3, r0
 8007852:	461a      	mov	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f7ff fa26 	bl	8006cb6 <SWAPBYTE>
 800786a:	4603      	mov	r3, r0
 800786c:	461a      	mov	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	80da      	strh	r2, [r3, #6]
}
 8007872:	bf00      	nop
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007884:	2180      	movs	r1, #128	@ 0x80
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fbf6 	bl	8008078 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800788c:	2100      	movs	r1, #0
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fbf2 	bl	8008078 <USBD_LL_StallEP>
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d042      	beq.n	8007938 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80078b6:	6938      	ldr	r0, [r7, #16]
 80078b8:	f000 f842 	bl	8007940 <USBD_GetLen>
 80078bc:	4603      	mov	r3, r0
 80078be:	3301      	adds	r3, #1
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078c6:	d808      	bhi.n	80078da <USBD_GetString+0x3e>
 80078c8:	6938      	ldr	r0, [r7, #16]
 80078ca:	f000 f839 	bl	8007940 <USBD_GetLen>
 80078ce:	4603      	mov	r3, r0
 80078d0:	3301      	adds	r3, #1
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	e001      	b.n	80078de <USBD_GetString+0x42>
 80078da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	4413      	add	r3, r2
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	7812      	ldrb	r2, [r2, #0]
 80078ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	3301      	adds	r3, #1
 80078f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4413      	add	r3, r2
 80078fa:	2203      	movs	r2, #3
 80078fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
 8007900:	3301      	adds	r3, #1
 8007902:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007904:	e013      	b.n	800792e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	4413      	add	r3, r2
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	7812      	ldrb	r2, [r2, #0]
 8007910:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	3301      	adds	r3, #1
 8007916:	613b      	str	r3, [r7, #16]
    idx++;
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	3301      	adds	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	4413      	add	r3, r2
 8007924:	2200      	movs	r2, #0
 8007926:	701a      	strb	r2, [r3, #0]
    idx++;
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	3301      	adds	r3, #1
 800792c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e7      	bne.n	8007906 <USBD_GetString+0x6a>
 8007936:	e000      	b.n	800793a <USBD_GetString+0x9e>
    return;
 8007938:	bf00      	nop
  }
}
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007950:	e005      	b.n	800795e <USBD_GetLen+0x1e>
  {
    len++;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	3301      	adds	r3, #1
 8007956:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	3301      	adds	r3, #1
 800795c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1f5      	bne.n	8007952 <USBD_GetLen+0x12>
  }

  return len;
 8007966:	7bfb      	ldrb	r3, [r7, #15]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2202      	movs	r2, #2
 8007984:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	2100      	movs	r1, #0
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fbf5 	bl	800818a <USBD_LL_Transmit>

  return USBD_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	60f8      	str	r0, [r7, #12]
 80079b2:	60b9      	str	r1, [r7, #8]
 80079b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	2100      	movs	r1, #0
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 fbe4 	bl	800818a <USBD_LL_Transmit>

  return USBD_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	2100      	movs	r1, #0
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fbf4 	bl	80081cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2204      	movs	r2, #4
 80079fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80079fe:	2300      	movs	r3, #0
 8007a00:	2200      	movs	r2, #0
 8007a02:	2100      	movs	r1, #0
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fbc0 	bl	800818a <USBD_LL_Transmit>

  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2205      	movs	r2, #5
 8007a20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a24:	2300      	movs	r3, #0
 8007a26:	2200      	movs	r2, #0
 8007a28:	2100      	movs	r1, #0
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fbce 	bl	80081cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a40:	2200      	movs	r2, #0
 8007a42:	490e      	ldr	r1, [pc, #56]	@ (8007a7c <MX_USB_DEVICE_Init+0x40>)
 8007a44:	480e      	ldr	r0, [pc, #56]	@ (8007a80 <MX_USB_DEVICE_Init+0x44>)
 8007a46:	f7fe fd13 	bl	8006470 <USBD_Init>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a50:	f7fa f9fe 	bl	8001e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007a54:	490b      	ldr	r1, [pc, #44]	@ (8007a84 <MX_USB_DEVICE_Init+0x48>)
 8007a56:	480a      	ldr	r0, [pc, #40]	@ (8007a80 <MX_USB_DEVICE_Init+0x44>)
 8007a58:	f7fe fd3a 	bl	80064d0 <USBD_RegisterClass>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a62:	f7fa f9f5 	bl	8001e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a66:	4806      	ldr	r0, [pc, #24]	@ (8007a80 <MX_USB_DEVICE_Init+0x44>)
 8007a68:	f7fe fd68 	bl	800653c <USBD_Start>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007a72:	f7fa f9ed 	bl	8001e50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a76:	bf00      	nop
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	200000c0 	.word	0x200000c0
 8007a80:	2000211c 	.word	0x2000211c
 8007a84:	2000000c 	.word	0x2000000c

08007a88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2212      	movs	r2, #18
 8007a98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a9a:	4b03      	ldr	r3, [pc, #12]	@ (8007aa8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	200000dc 	.word	0x200000dc

08007aac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2204      	movs	r2, #4
 8007abc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007abe:	4b03      	ldr	r3, [pc, #12]	@ (8007acc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	200000f0 	.word	0x200000f0

08007ad0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	6039      	str	r1, [r7, #0]
 8007ada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d105      	bne.n	8007aee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	4907      	ldr	r1, [pc, #28]	@ (8007b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ae6:	4808      	ldr	r0, [pc, #32]	@ (8007b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ae8:	f7ff fed8 	bl	800789c <USBD_GetString>
 8007aec:	e004      	b.n	8007af8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	4904      	ldr	r1, [pc, #16]	@ (8007b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007af2:	4805      	ldr	r0, [pc, #20]	@ (8007b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007af4:	f7ff fed2 	bl	800789c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007af8:	4b02      	ldr	r3, [pc, #8]	@ (8007b04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200023f8 	.word	0x200023f8
 8007b08:	08008630 	.word	0x08008630

08007b0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	4904      	ldr	r1, [pc, #16]	@ (8007b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b1c:	4804      	ldr	r0, [pc, #16]	@ (8007b30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b1e:	f7ff febd 	bl	800789c <USBD_GetString>
  return USBD_StrDesc;
 8007b22:	4b02      	ldr	r3, [pc, #8]	@ (8007b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	200023f8 	.word	0x200023f8
 8007b30:	08008648 	.word	0x08008648

08007b34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	221a      	movs	r2, #26
 8007b44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b46:	f000 f843 	bl	8007bd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b4a:	4b02      	ldr	r3, [pc, #8]	@ (8007b54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	200000f4 	.word	0x200000f4

08007b58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d105      	bne.n	8007b76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4907      	ldr	r1, [pc, #28]	@ (8007b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b6e:	4808      	ldr	r0, [pc, #32]	@ (8007b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b70:	f7ff fe94 	bl	800789c <USBD_GetString>
 8007b74:	e004      	b.n	8007b80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	4904      	ldr	r1, [pc, #16]	@ (8007b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b7a:	4805      	ldr	r0, [pc, #20]	@ (8007b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b7c:	f7ff fe8e 	bl	800789c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b80:	4b02      	ldr	r3, [pc, #8]	@ (8007b8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	200023f8 	.word	0x200023f8
 8007b90:	0800865c 	.word	0x0800865c

08007b94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ba0:	79fb      	ldrb	r3, [r7, #7]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d105      	bne.n	8007bb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	4907      	ldr	r1, [pc, #28]	@ (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007baa:	4808      	ldr	r0, [pc, #32]	@ (8007bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bac:	f7ff fe76 	bl	800789c <USBD_GetString>
 8007bb0:	e004      	b.n	8007bbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	4904      	ldr	r1, [pc, #16]	@ (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bb6:	4805      	ldr	r0, [pc, #20]	@ (8007bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bb8:	f7ff fe70 	bl	800789c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bbc:	4b02      	ldr	r3, [pc, #8]	@ (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	200023f8 	.word	0x200023f8
 8007bcc:	08008668 	.word	0x08008668

08007bd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c14 <Get_SerialNum+0x44>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8007c18 <Get_SerialNum+0x48>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007be2:	4b0e      	ldr	r3, [pc, #56]	@ (8007c1c <Get_SerialNum+0x4c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	4909      	ldr	r1, [pc, #36]	@ (8007c20 <Get_SerialNum+0x50>)
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f814 	bl	8007c28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c00:	2204      	movs	r2, #4
 8007c02:	4908      	ldr	r1, [pc, #32]	@ (8007c24 <Get_SerialNum+0x54>)
 8007c04:	68b8      	ldr	r0, [r7, #8]
 8007c06:	f000 f80f 	bl	8007c28 <IntToUnicode>
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	1fff7a10 	.word	0x1fff7a10
 8007c18:	1fff7a14 	.word	0x1fff7a14
 8007c1c:	1fff7a18 	.word	0x1fff7a18
 8007c20:	200000f6 	.word	0x200000f6
 8007c24:	20000106 	.word	0x20000106

08007c28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	75fb      	strb	r3, [r7, #23]
 8007c3e:	e027      	b.n	8007c90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	0f1b      	lsrs	r3, r3, #28
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	d80b      	bhi.n	8007c60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	0f1b      	lsrs	r3, r3, #28
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4619      	mov	r1, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	440b      	add	r3, r1
 8007c58:	3230      	adds	r2, #48	@ 0x30
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e00a      	b.n	8007c76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	0f1b      	lsrs	r3, r3, #28
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	440b      	add	r3, r1
 8007c70:	3237      	adds	r2, #55	@ 0x37
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	3301      	adds	r3, #1
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	4413      	add	r3, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	75fb      	strb	r3, [r7, #23]
 8007c90:	7dfa      	ldrb	r2, [r7, #23]
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d3d3      	bcc.n	8007c40 <IntToUnicode+0x18>
  }
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	371c      	adds	r7, #28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
	...

08007ca8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	@ 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cb0:	f107 0314 	add.w	r3, r7, #20
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	605a      	str	r2, [r3, #4]
 8007cba:	609a      	str	r2, [r3, #8]
 8007cbc:	60da      	str	r2, [r3, #12]
 8007cbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cc8:	d13a      	bne.n	8007d40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cca:	2300      	movs	r3, #0
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	4b1e      	ldr	r3, [pc, #120]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007cd4:	f043 0301 	orr.w	r3, r3, #1
 8007cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cda:	4b1b      	ldr	r3, [pc, #108]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ce6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cec:	2302      	movs	r3, #2
 8007cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cf8:	230a      	movs	r3, #10
 8007cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cfc:	f107 0314 	add.w	r3, r7, #20
 8007d00:	4619      	mov	r1, r3
 8007d02:	4812      	ldr	r0, [pc, #72]	@ (8007d4c <HAL_PCD_MspInit+0xa4>)
 8007d04:	f7fa fb58 	bl	80023b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d08:	4b0f      	ldr	r3, [pc, #60]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d12:	6353      	str	r3, [r2, #52]	@ 0x34
 8007d14:	2300      	movs	r3, #0
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d22:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d24:	4b08      	ldr	r3, [pc, #32]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d30:	2200      	movs	r2, #0
 8007d32:	2100      	movs	r1, #0
 8007d34:	2043      	movs	r0, #67	@ 0x43
 8007d36:	f7fa fb08 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d3a:	2043      	movs	r0, #67	@ 0x43
 8007d3c:	f7fa fb21 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d40:	bf00      	nop
 8007d42:	3728      	adds	r7, #40	@ 0x28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40023800 	.word	0x40023800
 8007d4c:	40020000 	.word	0x40020000

08007d50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d64:	4619      	mov	r1, r3
 8007d66:	4610      	mov	r0, r2
 8007d68:	f7fe fc35 	bl	80065d6 <USBD_LL_SetupStage>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7fe fc6f 	bl	8006680 <USBD_LL_DataOutStage>
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	440b      	add	r3, r1
 8007dca:	3320      	adds	r3, #32
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f7fe fd08 	bl	80067e6 <USBD_LL_DataInStage>
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe fe42 	bl	8006a76 <USBD_LL_SOF>
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e02:	2301      	movs	r3, #1
 8007e04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	79db      	ldrb	r3, [r3, #7]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d001      	beq.n	8007e12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e0e:	f7fa f81f 	bl	8001e50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e18:	7bfa      	ldrb	r2, [r7, #15]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe fde6 	bl	80069ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe fd8e 	bl	800694a <USBD_LL_Reset>
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fde1 	bl	8006a0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	7adb      	ldrb	r3, [r3, #11]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e6c:	4b04      	ldr	r3, [pc, #16]	@ (8007e80 <HAL_PCD_SuspendCallback+0x48>)
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	4a03      	ldr	r2, [pc, #12]	@ (8007e80 <HAL_PCD_SuspendCallback+0x48>)
 8007e72:	f043 0306 	orr.w	r3, r3, #6
 8007e76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	e000ed00 	.word	0xe000ed00

08007e84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe fdd7 	bl	8006a46 <USBD_LL_Resume>
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007eb2:	78fa      	ldrb	r2, [r7, #3]
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fe2f 	bl	8006b1a <USBD_LL_IsoOUTIncomplete>
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ed6:	78fa      	ldrb	r2, [r7, #3]
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe fdeb 	bl	8006ab6 <USBD_LL_IsoINIncomplete>
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fe41 	bl	8006b7e <USBD_LL_DevConnected>
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe fe3e 	bl	8006b94 <USBD_LL_DevDisconnected>
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d13c      	bne.n	8007faa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f30:	4a20      	ldr	r2, [pc, #128]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f3c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f40:	4b1c      	ldr	r3, [pc, #112]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f42:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007f46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f48:	4b1a      	ldr	r3, [pc, #104]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f4a:	2204      	movs	r2, #4
 8007f4c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f4e:	4b19      	ldr	r3, [pc, #100]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f50:	2202      	movs	r2, #2
 8007f52:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f54:	4b17      	ldr	r3, [pc, #92]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f5a:	4b16      	ldr	r3, [pc, #88]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f60:	4b14      	ldr	r3, [pc, #80]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f66:	4b13      	ldr	r3, [pc, #76]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f6c:	4b11      	ldr	r3, [pc, #68]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f72:	4b10      	ldr	r3, [pc, #64]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f78:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f7e:	480d      	ldr	r0, [pc, #52]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f80:	f7fa fbcf 	bl	8002722 <HAL_PCD_Init>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f8a:	f7f9 ff61 	bl	8001e50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f8e:	2180      	movs	r1, #128	@ 0x80
 8007f90:	4808      	ldr	r0, [pc, #32]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f92:	f7fb fde4 	bl	8003b5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f96:	2240      	movs	r2, #64	@ 0x40
 8007f98:	2100      	movs	r1, #0
 8007f9a:	4806      	ldr	r0, [pc, #24]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f9c:	f7fb fd98 	bl	8003ad0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fa0:	2280      	movs	r2, #128	@ 0x80
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4803      	ldr	r0, [pc, #12]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007fa6:	f7fb fd93 	bl	8003ad0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	200025f8 	.word	0x200025f8

08007fb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fa fcb6 	bl	8002940 <HAL_PCD_Start>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f930 	bl	8008240 <USBD_Get_USB_Status>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	4608      	mov	r0, r1
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	70fb      	strb	r3, [r7, #3]
 8008000:	460b      	mov	r3, r1
 8008002:	70bb      	strb	r3, [r7, #2]
 8008004:	4613      	mov	r3, r2
 8008006:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008016:	78bb      	ldrb	r3, [r7, #2]
 8008018:	883a      	ldrh	r2, [r7, #0]
 800801a:	78f9      	ldrb	r1, [r7, #3]
 800801c:	f7fb f98a 	bl	8003334 <HAL_PCD_EP_Open>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f90a 	bl	8008240 <USBD_Get_USB_Status>
 800802c:	4603      	mov	r3, r0
 800802e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008030:	7bbb      	ldrb	r3, [r7, #14]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	460b      	mov	r3, r1
 8008044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	4611      	mov	r1, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f7fb f9d5 	bl	8003408 <HAL_PCD_EP_Close>
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	4618      	mov	r0, r3
 8008066:	f000 f8eb 	bl	8008240 <USBD_Get_USB_Status>
 800806a:	4603      	mov	r3, r0
 800806c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800806e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f7fb fa75 	bl	8003586 <HAL_PCD_EP_SetStall>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f8cc 	bl	8008240 <USBD_Get_USB_Status>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080d0:	78fa      	ldrb	r2, [r7, #3]
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fb fab9 	bl	800364c <HAL_PCD_EP_ClrStall>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 f8ad 	bl	8008240 <USBD_Get_USB_Status>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008106:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800810c:	2b00      	cmp	r3, #0
 800810e:	da0b      	bge.n	8008128 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	4613      	mov	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	3316      	adds	r3, #22
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	e00b      	b.n	8008140 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800812e:	68f9      	ldr	r1, [r7, #12]
 8008130:	4613      	mov	r3, r2
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	440b      	add	r3, r1
 800813a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800813e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	4611      	mov	r1, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f7fb f8be 	bl	80032ec <HAL_PCD_SetAddress>
 8008170:	4603      	mov	r3, r0
 8008172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f862 	bl	8008240 <USBD_Get_USB_Status>
 800817c:	4603      	mov	r3, r0
 800817e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008180:	7bbb      	ldrb	r3, [r7, #14]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b086      	sub	sp, #24
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	460b      	mov	r3, r1
 8008198:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80081a8:	7af9      	ldrb	r1, [r7, #11]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	f7fb f9b0 	bl	8003512 <HAL_PCD_EP_Transmit>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 f841 	bl	8008240 <USBD_Get_USB_Status>
 80081be:	4603      	mov	r3, r0
 80081c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	460b      	mov	r3, r1
 80081da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80081ea:	7af9      	ldrb	r1, [r7, #11]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	f7fb f954 	bl	800349c <HAL_PCD_EP_Receive>
 80081f4:	4603      	mov	r3, r0
 80081f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f820 	bl	8008240 <USBD_Get_USB_Status>
 8008200:	4603      	mov	r3, r0
 8008202:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008204:	7dbb      	ldrb	r3, [r7, #22]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008218:	4b03      	ldr	r3, [pc, #12]	@ (8008228 <USBD_static_malloc+0x18>)
}
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	20002adc 	.word	0x20002adc

0800822c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]

}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	2b03      	cmp	r3, #3
 8008252:	d817      	bhi.n	8008284 <USBD_Get_USB_Status+0x44>
 8008254:	a201      	add	r2, pc, #4	@ (adr r2, 800825c <USBD_Get_USB_Status+0x1c>)
 8008256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825a:	bf00      	nop
 800825c:	0800826d 	.word	0x0800826d
 8008260:	08008273 	.word	0x08008273
 8008264:	08008279 	.word	0x08008279
 8008268:	0800827f 	.word	0x0800827f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
    break;
 8008270:	e00b      	b.n	800828a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008272:	2303      	movs	r3, #3
 8008274:	73fb      	strb	r3, [r7, #15]
    break;
 8008276:	e008      	b.n	800828a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008278:	2301      	movs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
    break;
 800827c:	e005      	b.n	800828a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800827e:	2303      	movs	r3, #3
 8008280:	73fb      	strb	r3, [r7, #15]
    break;
 8008282:	e002      	b.n	800828a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	73fb      	strb	r3, [r7, #15]
    break;
 8008288:	bf00      	nop
  }
  return usb_status;
 800828a:	7bfb      	ldrb	r3, [r7, #15]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <malloc>:
 8008298:	4b02      	ldr	r3, [pc, #8]	@ (80082a4 <malloc+0xc>)
 800829a:	4601      	mov	r1, r0
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	f000 b825 	b.w	80082ec <_malloc_r>
 80082a2:	bf00      	nop
 80082a4:	20000110 	.word	0x20000110

080082a8 <sbrk_aligned>:
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	4e0f      	ldr	r6, [pc, #60]	@ (80082e8 <sbrk_aligned+0x40>)
 80082ac:	460c      	mov	r4, r1
 80082ae:	6831      	ldr	r1, [r6, #0]
 80082b0:	4605      	mov	r5, r0
 80082b2:	b911      	cbnz	r1, 80082ba <sbrk_aligned+0x12>
 80082b4:	f000 f8ae 	bl	8008414 <_sbrk_r>
 80082b8:	6030      	str	r0, [r6, #0]
 80082ba:	4621      	mov	r1, r4
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 f8a9 	bl	8008414 <_sbrk_r>
 80082c2:	1c43      	adds	r3, r0, #1
 80082c4:	d103      	bne.n	80082ce <sbrk_aligned+0x26>
 80082c6:	f04f 34ff 	mov.w	r4, #4294967295
 80082ca:	4620      	mov	r0, r4
 80082cc:	bd70      	pop	{r4, r5, r6, pc}
 80082ce:	1cc4      	adds	r4, r0, #3
 80082d0:	f024 0403 	bic.w	r4, r4, #3
 80082d4:	42a0      	cmp	r0, r4
 80082d6:	d0f8      	beq.n	80082ca <sbrk_aligned+0x22>
 80082d8:	1a21      	subs	r1, r4, r0
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 f89a 	bl	8008414 <_sbrk_r>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d1f2      	bne.n	80082ca <sbrk_aligned+0x22>
 80082e4:	e7ef      	b.n	80082c6 <sbrk_aligned+0x1e>
 80082e6:	bf00      	nop
 80082e8:	20002af0 	.word	0x20002af0

080082ec <_malloc_r>:
 80082ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	1ccd      	adds	r5, r1, #3
 80082f2:	f025 0503 	bic.w	r5, r5, #3
 80082f6:	3508      	adds	r5, #8
 80082f8:	2d0c      	cmp	r5, #12
 80082fa:	bf38      	it	cc
 80082fc:	250c      	movcc	r5, #12
 80082fe:	2d00      	cmp	r5, #0
 8008300:	4606      	mov	r6, r0
 8008302:	db01      	blt.n	8008308 <_malloc_r+0x1c>
 8008304:	42a9      	cmp	r1, r5
 8008306:	d904      	bls.n	8008312 <_malloc_r+0x26>
 8008308:	230c      	movs	r3, #12
 800830a:	6033      	str	r3, [r6, #0]
 800830c:	2000      	movs	r0, #0
 800830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008312:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083e8 <_malloc_r+0xfc>
 8008316:	f000 f869 	bl	80083ec <__malloc_lock>
 800831a:	f8d8 3000 	ldr.w	r3, [r8]
 800831e:	461c      	mov	r4, r3
 8008320:	bb44      	cbnz	r4, 8008374 <_malloc_r+0x88>
 8008322:	4629      	mov	r1, r5
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff ffbf 	bl	80082a8 <sbrk_aligned>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	4604      	mov	r4, r0
 800832e:	d158      	bne.n	80083e2 <_malloc_r+0xf6>
 8008330:	f8d8 4000 	ldr.w	r4, [r8]
 8008334:	4627      	mov	r7, r4
 8008336:	2f00      	cmp	r7, #0
 8008338:	d143      	bne.n	80083c2 <_malloc_r+0xd6>
 800833a:	2c00      	cmp	r4, #0
 800833c:	d04b      	beq.n	80083d6 <_malloc_r+0xea>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	4639      	mov	r1, r7
 8008342:	4630      	mov	r0, r6
 8008344:	eb04 0903 	add.w	r9, r4, r3
 8008348:	f000 f864 	bl	8008414 <_sbrk_r>
 800834c:	4581      	cmp	r9, r0
 800834e:	d142      	bne.n	80083d6 <_malloc_r+0xea>
 8008350:	6821      	ldr	r1, [r4, #0]
 8008352:	1a6d      	subs	r5, r5, r1
 8008354:	4629      	mov	r1, r5
 8008356:	4630      	mov	r0, r6
 8008358:	f7ff ffa6 	bl	80082a8 <sbrk_aligned>
 800835c:	3001      	adds	r0, #1
 800835e:	d03a      	beq.n	80083d6 <_malloc_r+0xea>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	442b      	add	r3, r5
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	f8d8 3000 	ldr.w	r3, [r8]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	bb62      	cbnz	r2, 80083c8 <_malloc_r+0xdc>
 800836e:	f8c8 7000 	str.w	r7, [r8]
 8008372:	e00f      	b.n	8008394 <_malloc_r+0xa8>
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	1b52      	subs	r2, r2, r5
 8008378:	d420      	bmi.n	80083bc <_malloc_r+0xd0>
 800837a:	2a0b      	cmp	r2, #11
 800837c:	d917      	bls.n	80083ae <_malloc_r+0xc2>
 800837e:	1961      	adds	r1, r4, r5
 8008380:	42a3      	cmp	r3, r4
 8008382:	6025      	str	r5, [r4, #0]
 8008384:	bf18      	it	ne
 8008386:	6059      	strne	r1, [r3, #4]
 8008388:	6863      	ldr	r3, [r4, #4]
 800838a:	bf08      	it	eq
 800838c:	f8c8 1000 	streq.w	r1, [r8]
 8008390:	5162      	str	r2, [r4, r5]
 8008392:	604b      	str	r3, [r1, #4]
 8008394:	4630      	mov	r0, r6
 8008396:	f000 f82f 	bl	80083f8 <__malloc_unlock>
 800839a:	f104 000b 	add.w	r0, r4, #11
 800839e:	1d23      	adds	r3, r4, #4
 80083a0:	f020 0007 	bic.w	r0, r0, #7
 80083a4:	1ac2      	subs	r2, r0, r3
 80083a6:	bf1c      	itt	ne
 80083a8:	1a1b      	subne	r3, r3, r0
 80083aa:	50a3      	strne	r3, [r4, r2]
 80083ac:	e7af      	b.n	800830e <_malloc_r+0x22>
 80083ae:	6862      	ldr	r2, [r4, #4]
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	bf0c      	ite	eq
 80083b4:	f8c8 2000 	streq.w	r2, [r8]
 80083b8:	605a      	strne	r2, [r3, #4]
 80083ba:	e7eb      	b.n	8008394 <_malloc_r+0xa8>
 80083bc:	4623      	mov	r3, r4
 80083be:	6864      	ldr	r4, [r4, #4]
 80083c0:	e7ae      	b.n	8008320 <_malloc_r+0x34>
 80083c2:	463c      	mov	r4, r7
 80083c4:	687f      	ldr	r7, [r7, #4]
 80083c6:	e7b6      	b.n	8008336 <_malloc_r+0x4a>
 80083c8:	461a      	mov	r2, r3
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	d1fb      	bne.n	80083c8 <_malloc_r+0xdc>
 80083d0:	2300      	movs	r3, #0
 80083d2:	6053      	str	r3, [r2, #4]
 80083d4:	e7de      	b.n	8008394 <_malloc_r+0xa8>
 80083d6:	230c      	movs	r3, #12
 80083d8:	6033      	str	r3, [r6, #0]
 80083da:	4630      	mov	r0, r6
 80083dc:	f000 f80c 	bl	80083f8 <__malloc_unlock>
 80083e0:	e794      	b.n	800830c <_malloc_r+0x20>
 80083e2:	6005      	str	r5, [r0, #0]
 80083e4:	e7d6      	b.n	8008394 <_malloc_r+0xa8>
 80083e6:	bf00      	nop
 80083e8:	20002af4 	.word	0x20002af4

080083ec <__malloc_lock>:
 80083ec:	4801      	ldr	r0, [pc, #4]	@ (80083f4 <__malloc_lock+0x8>)
 80083ee:	f000 b84b 	b.w	8008488 <__retarget_lock_acquire_recursive>
 80083f2:	bf00      	nop
 80083f4:	20002c34 	.word	0x20002c34

080083f8 <__malloc_unlock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	@ (8008400 <__malloc_unlock+0x8>)
 80083fa:	f000 b846 	b.w	800848a <__retarget_lock_release_recursive>
 80083fe:	bf00      	nop
 8008400:	20002c34 	.word	0x20002c34

08008404 <memset>:
 8008404:	4402      	add	r2, r0
 8008406:	4603      	mov	r3, r0
 8008408:	4293      	cmp	r3, r2
 800840a:	d100      	bne.n	800840e <memset+0xa>
 800840c:	4770      	bx	lr
 800840e:	f803 1b01 	strb.w	r1, [r3], #1
 8008412:	e7f9      	b.n	8008408 <memset+0x4>

08008414 <_sbrk_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d06      	ldr	r5, [pc, #24]	@ (8008430 <_sbrk_r+0x1c>)
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	f7f9 fdb0 	bl	8001f84 <_sbrk>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_sbrk_r+0x1a>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_sbrk_r+0x1a>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	20002c30 	.word	0x20002c30

08008434 <__errno>:
 8008434:	4b01      	ldr	r3, [pc, #4]	@ (800843c <__errno+0x8>)
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	20000110 	.word	0x20000110

08008440 <__libc_init_array>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	4d0d      	ldr	r5, [pc, #52]	@ (8008478 <__libc_init_array+0x38>)
 8008444:	4c0d      	ldr	r4, [pc, #52]	@ (800847c <__libc_init_array+0x3c>)
 8008446:	1b64      	subs	r4, r4, r5
 8008448:	10a4      	asrs	r4, r4, #2
 800844a:	2600      	movs	r6, #0
 800844c:	42a6      	cmp	r6, r4
 800844e:	d109      	bne.n	8008464 <__libc_init_array+0x24>
 8008450:	4d0b      	ldr	r5, [pc, #44]	@ (8008480 <__libc_init_array+0x40>)
 8008452:	4c0c      	ldr	r4, [pc, #48]	@ (8008484 <__libc_init_array+0x44>)
 8008454:	f000 f822 	bl	800849c <_init>
 8008458:	1b64      	subs	r4, r4, r5
 800845a:	10a4      	asrs	r4, r4, #2
 800845c:	2600      	movs	r6, #0
 800845e:	42a6      	cmp	r6, r4
 8008460:	d105      	bne.n	800846e <__libc_init_array+0x2e>
 8008462:	bd70      	pop	{r4, r5, r6, pc}
 8008464:	f855 3b04 	ldr.w	r3, [r5], #4
 8008468:	4798      	blx	r3
 800846a:	3601      	adds	r6, #1
 800846c:	e7ee      	b.n	800844c <__libc_init_array+0xc>
 800846e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008472:	4798      	blx	r3
 8008474:	3601      	adds	r6, #1
 8008476:	e7f2      	b.n	800845e <__libc_init_array+0x1e>
 8008478:	08008690 	.word	0x08008690
 800847c:	08008690 	.word	0x08008690
 8008480:	08008690 	.word	0x08008690
 8008484:	08008694 	.word	0x08008694

08008488 <__retarget_lock_acquire_recursive>:
 8008488:	4770      	bx	lr

0800848a <__retarget_lock_release_recursive>:
 800848a:	4770      	bx	lr

0800848c <strcpy>:
 800848c:	4603      	mov	r3, r0
 800848e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008492:	f803 2b01 	strb.w	r2, [r3], #1
 8008496:	2a00      	cmp	r2, #0
 8008498:	d1f9      	bne.n	800848e <strcpy+0x2>
 800849a:	4770      	bx	lr

0800849c <_init>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	bf00      	nop
 80084a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a2:	bc08      	pop	{r3}
 80084a4:	469e      	mov	lr, r3
 80084a6:	4770      	bx	lr

080084a8 <_fini>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr
