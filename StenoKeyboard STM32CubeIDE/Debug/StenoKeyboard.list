
StenoKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08008b48  08008b48  00009b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009268  08009268  0000b16c  2**0
                  CONTENTS
  4 .ARM          00000008  08009268  08009268  0000a268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009270  08009270  0000b16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009270  08009270  0000a270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009274  08009274  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08009278  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b50  2000016c  080093e4  0000b16c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cbc  080093e4  0000bcbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b16c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d97b  00000000  00000000  0000b19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b28  00000000  00000000  00018b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0001b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008af  00000000  00000000  0001c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a8e  00000000  00000000  0001cabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb61  00000000  00000000  0003554d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008971c  00000000  00000000  000450ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce7ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003710  00000000  00000000  000ce810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d1f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000016c 	.word	0x2000016c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b30 	.word	0x08008b30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000170 	.word	0x20000170
 80001dc:	08008b30 	.word	0x08008b30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Scan_KeyMatrix.0>:
  int timeout = 0;
  int previousChar = 0;
  int buffer[21] = {};
  int bufferItemsNumber = 0;

  uint8_t Scan_KeyMatrix(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	f8c7 c004 	str.w	ip, [r7, #4]
        uint8_t key = 0xFF;
 800058a:	23ff      	movs	r3, #255	@ 0xff
 800058c:	73fb      	strb	r3, [r7, #15]

  		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	2110      	movs	r1, #16
 8000592:	48cf      	ldr	r0, [pc, #828]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000594:	f001 feaa 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	48cc      	ldr	r0, [pc, #816]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 800059e:	f001 fea5 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	@ 0x40
 80005a6:	48ca      	ldr	r0, [pc, #808]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80005a8:	f001 fea0 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	48c7      	ldr	r0, [pc, #796]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80005b2:	f001 fe9b 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2101      	movs	r1, #1
 80005ba:	48c6      	ldr	r0, [pc, #792]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80005bc:	f001 fe96 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2102      	movs	r1, #2
 80005c4:	48c3      	ldr	r0, [pc, #780]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80005c6:	f001 fe91 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2104      	movs	r1, #4
 80005ce:	48c1      	ldr	r0, [pc, #772]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80005d0:	f001 fe8c 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005da:	48be      	ldr	r0, [pc, #760]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80005dc:	f001 fe86 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005e6:	48bb      	ldr	r0, [pc, #748]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80005e8:	f001 fe80 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f2:	48b8      	ldr	r0, [pc, #736]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80005f4:	f001 fe7a 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005fe:	48b5      	ldr	r0, [pc, #724]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000600:	f001 fe74 	bl	80022ec <HAL_GPIO_WritePin>


        if (HAL_GPIO_ReadPin(Row1_GPIO_Port, Row1_Pin) == 1) {
 8000604:	2101      	movs	r1, #1
 8000606:	48b2      	ldr	r0, [pc, #712]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000608:	f001 fe58 	bl	80022bc <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d101      	bne.n	8000616 <Scan_KeyMatrix.0+0x96>
            key = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000616:	2102      	movs	r1, #2
 8000618:	48ad      	ldr	r0, [pc, #692]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 800061a:	f001 fe4f 	bl	80022bc <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d101      	bne.n	8000628 <Scan_KeyMatrix.0+0xa8>
            key = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000628:	2104      	movs	r1, #4
 800062a:	48a9      	ldr	r0, [pc, #676]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 800062c:	f001 fe46 	bl	80022bc <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b01      	cmp	r3, #1
 8000634:	d101      	bne.n	800063a <Scan_KeyMatrix.0+0xba>
			key = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	73fb      	strb	r3, [r7, #15]
        }

  		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2110      	movs	r1, #16
 800063e:	48a4      	ldr	r0, [pc, #656]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000640:	f001 fe54 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	2120      	movs	r1, #32
 8000648:	48a1      	ldr	r0, [pc, #644]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 800064a:	f001 fe4f 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2140      	movs	r1, #64	@ 0x40
 8000652:	489f      	ldr	r0, [pc, #636]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000654:	f001 fe4a 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2180      	movs	r1, #128	@ 0x80
 800065c:	489c      	ldr	r0, [pc, #624]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 800065e:	f001 fe45 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2101      	movs	r1, #1
 8000666:	489b      	ldr	r0, [pc, #620]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000668:	f001 fe40 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2102      	movs	r1, #2
 8000670:	4898      	ldr	r0, [pc, #608]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000672:	f001 fe3b 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2104      	movs	r1, #4
 800067a:	4896      	ldr	r0, [pc, #600]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 800067c:	f001 fe36 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000686:	4893      	ldr	r0, [pc, #588]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000688:	f001 fe30 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000692:	4890      	ldr	r0, [pc, #576]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000694:	f001 fe2a 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800069e:	488d      	ldr	r0, [pc, #564]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80006a0:	f001 fe24 	bl	80022ec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006aa:	488a      	ldr	r0, [pc, #552]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80006ac:	f001 fe1e 	bl	80022ec <HAL_GPIO_WritePin>


        if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80006b0:	2102      	movs	r1, #2
 80006b2:	4887      	ldr	r0, [pc, #540]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80006b4:	f001 fe02 	bl	80022bc <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d101      	bne.n	80006c2 <Scan_KeyMatrix.0+0x142>
            key = 3;
 80006be:	2303      	movs	r3, #3
 80006c0:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80006c2:	2104      	movs	r1, #4
 80006c4:	4882      	ldr	r0, [pc, #520]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80006c6:	f001 fdf9 	bl	80022bc <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d101      	bne.n	80006d4 <Scan_KeyMatrix.0+0x154>
			key = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	73fb      	strb	r3, [r7, #15]
        }

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	487d      	ldr	r0, [pc, #500]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80006da:	f001 fe07 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2120      	movs	r1, #32
 80006e2:	487b      	ldr	r0, [pc, #492]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80006e4:	f001 fe02 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2140      	movs	r1, #64	@ 0x40
 80006ec:	4878      	ldr	r0, [pc, #480]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80006ee:	f001 fdfd 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	4876      	ldr	r0, [pc, #472]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80006f8:	f001 fdf8 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2101      	movs	r1, #1
 8000700:	4874      	ldr	r0, [pc, #464]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000702:	f001 fdf3 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2102      	movs	r1, #2
 800070a:	4872      	ldr	r0, [pc, #456]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 800070c:	f001 fdee 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2104      	movs	r1, #4
 8000714:	486f      	ldr	r0, [pc, #444]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000716:	f001 fde9 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000720:	486c      	ldr	r0, [pc, #432]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000722:	f001 fde3 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072c:	4869      	ldr	r0, [pc, #420]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 800072e:	f001 fddd 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000738:	4866      	ldr	r0, [pc, #408]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 800073a:	f001 fdd7 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000744:	4863      	ldr	r0, [pc, #396]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000746:	f001 fdd1 	bl	80022ec <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 800074a:	2102      	movs	r1, #2
 800074c:	4860      	ldr	r0, [pc, #384]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 800074e:	f001 fdb5 	bl	80022bc <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	2b01      	cmp	r3, #1
 8000756:	d101      	bne.n	800075c <Scan_KeyMatrix.0+0x1dc>
			key = 5;
 8000758:	2305      	movs	r3, #5
 800075a:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 800075c:	2104      	movs	r1, #4
 800075e:	485c      	ldr	r0, [pc, #368]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000760:	f001 fdac 	bl	80022bc <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d101      	bne.n	800076e <Scan_KeyMatrix.0+0x1ee>
			key = 6;
 800076a:	2306      	movs	r3, #6
 800076c:	73fb      	strb	r3, [r7, #15]
		}
		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2110      	movs	r1, #16
 8000772:	4857      	ldr	r0, [pc, #348]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000774:	f001 fdba 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2120      	movs	r1, #32
 800077c:	4854      	ldr	r0, [pc, #336]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 800077e:	f001 fdb5 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2140      	movs	r1, #64	@ 0x40
 8000786:	4852      	ldr	r0, [pc, #328]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000788:	f001 fdb0 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 1);
 800078c:	2201      	movs	r2, #1
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	484f      	ldr	r0, [pc, #316]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000792:	f001 fdab 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2101      	movs	r1, #1
 800079a:	484e      	ldr	r0, [pc, #312]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 800079c:	f001 fda6 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2102      	movs	r1, #2
 80007a4:	484b      	ldr	r0, [pc, #300]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80007a6:	f001 fda1 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2104      	movs	r1, #4
 80007ae:	4849      	ldr	r0, [pc, #292]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80007b0:	f001 fd9c 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ba:	4846      	ldr	r0, [pc, #280]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80007bc:	f001 fd96 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c6:	4843      	ldr	r0, [pc, #268]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80007c8:	f001 fd90 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d2:	4840      	ldr	r0, [pc, #256]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80007d4:	f001 fd8a 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007de:	483d      	ldr	r0, [pc, #244]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 80007e0:	f001 fd84 	bl	80022ec <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80007e4:	2102      	movs	r1, #2
 80007e6:	483a      	ldr	r0, [pc, #232]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80007e8:	f001 fd68 	bl	80022bc <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d101      	bne.n	80007f6 <Scan_KeyMatrix.0+0x276>
			key = 7;
 80007f2:	2307      	movs	r3, #7
 80007f4:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80007f6:	2104      	movs	r1, #4
 80007f8:	4835      	ldr	r0, [pc, #212]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80007fa:	f001 fd5f 	bl	80022bc <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b01      	cmp	r3, #1
 8000802:	d101      	bne.n	8000808 <Scan_KeyMatrix.0+0x288>
			key = 8;
 8000804:	2308      	movs	r3, #8
 8000806:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 8000808:	2108      	movs	r1, #8
 800080a:	4831      	ldr	r0, [pc, #196]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 800080c:	f001 fd56 	bl	80022bc <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d101      	bne.n	800081a <Scan_KeyMatrix.0+0x29a>
			key = 9;
 8000816:	2309      	movs	r3, #9
 8000818:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2110      	movs	r1, #16
 800081e:	482c      	ldr	r0, [pc, #176]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000820:	f001 fd64 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2120      	movs	r1, #32
 8000828:	4829      	ldr	r0, [pc, #164]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 800082a:	f001 fd5f 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	@ 0x40
 8000832:	4827      	ldr	r0, [pc, #156]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000834:	f001 fd5a 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	4824      	ldr	r0, [pc, #144]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 800083e:	f001 fd55 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	2101      	movs	r1, #1
 8000846:	4823      	ldr	r0, [pc, #140]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000848:	f001 fd50 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2102      	movs	r1, #2
 8000850:	4820      	ldr	r0, [pc, #128]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000852:	f001 fd4b 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2104      	movs	r1, #4
 800085a:	481e      	ldr	r0, [pc, #120]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 800085c:	f001 fd46 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000866:	481b      	ldr	r0, [pc, #108]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000868:	f001 fd40 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000872:	4818      	ldr	r0, [pc, #96]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000874:	f001 fd3a 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087e:	4815      	ldr	r0, [pc, #84]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 8000880:	f001 fd34 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800088a:	4812      	ldr	r0, [pc, #72]	@ (80008d4 <Scan_KeyMatrix.0+0x354>)
 800088c:	f001 fd2e 	bl	80022ec <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000890:	2104      	movs	r1, #4
 8000892:	480f      	ldr	r0, [pc, #60]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 8000894:	f001 fd12 	bl	80022bc <HAL_GPIO_ReadPin>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d101      	bne.n	80008a2 <Scan_KeyMatrix.0+0x322>
			key = 11;
 800089e:	230b      	movs	r3, #11
 80008a0:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 80008a2:	2108      	movs	r1, #8
 80008a4:	480a      	ldr	r0, [pc, #40]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80008a6:	f001 fd09 	bl	80022bc <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d101      	bne.n	80008b4 <Scan_KeyMatrix.0+0x334>
			key = 10;
 80008b0:	230a      	movs	r3, #10
 80008b2:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2110      	movs	r1, #16
 80008b8:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80008ba:	f001 fd17 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2120      	movs	r1, #32
 80008c2:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <Scan_KeyMatrix.0+0x350>)
 80008c4:	f001 fd12 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2140      	movs	r1, #64	@ 0x40
 80008cc:	e004      	b.n	80008d8 <Scan_KeyMatrix.0+0x358>
 80008ce:	bf00      	nop
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020400 	.word	0x40020400
 80008d8:	48cf      	ldr	r0, [pc, #828]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 80008da:	f001 fd07 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2180      	movs	r1, #128	@ 0x80
 80008e2:	48cd      	ldr	r0, [pc, #820]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 80008e4:	f001 fd02 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	48cb      	ldr	r0, [pc, #812]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 80008ee:	f001 fcfd 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 1);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2102      	movs	r1, #2
 80008f6:	48c9      	ldr	r0, [pc, #804]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 80008f8:	f001 fcf8 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2104      	movs	r1, #4
 8000900:	48c6      	ldr	r0, [pc, #792]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000902:	f001 fcf3 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800090c:	48c3      	ldr	r0, [pc, #780]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 800090e:	f001 fced 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000918:	48c0      	ldr	r0, [pc, #768]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 800091a:	f001 fce7 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000924:	48bd      	ldr	r0, [pc, #756]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000926:	f001 fce1 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000930:	48ba      	ldr	r0, [pc, #744]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000932:	f001 fcdb 	bl	80022ec <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000936:	2104      	movs	r1, #4
 8000938:	48b7      	ldr	r0, [pc, #732]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 800093a:	f001 fcbf 	bl	80022bc <HAL_GPIO_ReadPin>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	d101      	bne.n	8000948 <Scan_KeyMatrix.0+0x3c8>
			key = 11;
 8000944:	230b      	movs	r3, #11
 8000946:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 8000948:	2108      	movs	r1, #8
 800094a:	48b3      	ldr	r0, [pc, #716]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 800094c:	f001 fcb6 	bl	80022bc <HAL_GPIO_ReadPin>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d101      	bne.n	800095a <Scan_KeyMatrix.0+0x3da>
			key = 12;
 8000956:	230c      	movs	r3, #12
 8000958:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2110      	movs	r1, #16
 800095e:	48ae      	ldr	r0, [pc, #696]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000960:	f001 fcc4 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2120      	movs	r1, #32
 8000968:	48ab      	ldr	r0, [pc, #684]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 800096a:	f001 fcbf 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2140      	movs	r1, #64	@ 0x40
 8000972:	48a9      	ldr	r0, [pc, #676]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000974:	f001 fcba 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2180      	movs	r1, #128	@ 0x80
 800097c:	48a6      	ldr	r0, [pc, #664]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 800097e:	f001 fcb5 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2101      	movs	r1, #1
 8000986:	48a5      	ldr	r0, [pc, #660]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000988:	f001 fcb0 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2102      	movs	r1, #2
 8000990:	48a2      	ldr	r0, [pc, #648]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000992:	f001 fcab 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	2104      	movs	r1, #4
 800099a:	48a0      	ldr	r0, [pc, #640]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 800099c:	f001 fca6 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a6:	489d      	ldr	r0, [pc, #628]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 80009a8:	f001 fca0 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b2:	489a      	ldr	r0, [pc, #616]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 80009b4:	f001 fc9a 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009be:	4897      	ldr	r0, [pc, #604]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 80009c0:	f001 fc94 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ca:	4894      	ldr	r0, [pc, #592]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 80009cc:	f001 fc8e 	bl	80022ec <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80009d0:	2102      	movs	r1, #2
 80009d2:	4891      	ldr	r0, [pc, #580]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 80009d4:	f001 fc72 	bl	80022bc <HAL_GPIO_ReadPin>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d101      	bne.n	80009e2 <Scan_KeyMatrix.0+0x462>
			key = 14;
 80009de:	230e      	movs	r3, #14
 80009e0:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80009e2:	2104      	movs	r1, #4
 80009e4:	488c      	ldr	r0, [pc, #560]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 80009e6:	f001 fc69 	bl	80022bc <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d101      	bne.n	80009f4 <Scan_KeyMatrix.0+0x474>
			key = 15;
 80009f0:	230f      	movs	r3, #15
 80009f2:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 80009f4:	2108      	movs	r1, #8
 80009f6:	4888      	ldr	r0, [pc, #544]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 80009f8:	f001 fc60 	bl	80022bc <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d101      	bne.n	8000a06 <Scan_KeyMatrix.0+0x486>
			key = 13;
 8000a02:	230d      	movs	r3, #13
 8000a04:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2110      	movs	r1, #16
 8000a0a:	4883      	ldr	r0, [pc, #524]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000a0c:	f001 fc6e 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2120      	movs	r1, #32
 8000a14:	4880      	ldr	r0, [pc, #512]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000a16:	f001 fc69 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2140      	movs	r1, #64	@ 0x40
 8000a1e:	487e      	ldr	r0, [pc, #504]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000a20:	f001 fc64 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2180      	movs	r1, #128	@ 0x80
 8000a28:	487b      	ldr	r0, [pc, #492]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000a2a:	f001 fc5f 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2101      	movs	r1, #1
 8000a32:	487a      	ldr	r0, [pc, #488]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000a34:	f001 fc5a 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4877      	ldr	r0, [pc, #476]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000a3e:	f001 fc55 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2104      	movs	r1, #4
 8000a46:	4875      	ldr	r0, [pc, #468]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000a48:	f001 fc50 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a52:	4872      	ldr	r0, [pc, #456]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000a54:	f001 fc4a 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a5e:	486f      	ldr	r0, [pc, #444]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000a60:	f001 fc44 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6a:	486c      	ldr	r0, [pc, #432]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000a6c:	f001 fc3e 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a76:	4869      	ldr	r0, [pc, #420]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000a78:	f001 fc38 	bl	80022ec <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	4866      	ldr	r0, [pc, #408]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000a80:	f001 fc1c 	bl	80022bc <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d101      	bne.n	8000a8e <Scan_KeyMatrix.0+0x50e>
			key = 16;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4861      	ldr	r0, [pc, #388]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000a92:	f001 fc13 	bl	80022bc <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d101      	bne.n	8000aa0 <Scan_KeyMatrix.0+0x520>
			key = 17;
 8000a9c:	2311      	movs	r3, #17
 8000a9e:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	485c      	ldr	r0, [pc, #368]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000aa6:	f001 fc21 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2120      	movs	r1, #32
 8000aae:	485a      	ldr	r0, [pc, #360]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000ab0:	f001 fc1c 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2140      	movs	r1, #64	@ 0x40
 8000ab8:	4857      	ldr	r0, [pc, #348]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000aba:	f001 fc17 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2180      	movs	r1, #128	@ 0x80
 8000ac2:	4855      	ldr	r0, [pc, #340]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000ac4:	f001 fc12 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2101      	movs	r1, #1
 8000acc:	4853      	ldr	r0, [pc, #332]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000ace:	f001 fc0d 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4851      	ldr	r0, [pc, #324]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000ad8:	f001 fc08 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2104      	movs	r1, #4
 8000ae0:	484e      	ldr	r0, [pc, #312]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000ae2:	f001 fc03 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aec:	484b      	ldr	r0, [pc, #300]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000aee:	f001 fbfd 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000af8:	4848      	ldr	r0, [pc, #288]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000afa:	f001 fbf7 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b04:	4845      	ldr	r0, [pc, #276]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000b06:	f001 fbf1 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b10:	4842      	ldr	r0, [pc, #264]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000b12:	f001 fbeb 	bl	80022ec <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000b16:	2102      	movs	r1, #2
 8000b18:	483f      	ldr	r0, [pc, #252]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000b1a:	f001 fbcf 	bl	80022bc <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d101      	bne.n	8000b28 <Scan_KeyMatrix.0+0x5a8>
			key = 18;
 8000b24:	2312      	movs	r3, #18
 8000b26:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000b28:	2104      	movs	r1, #4
 8000b2a:	483b      	ldr	r0, [pc, #236]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000b2c:	f001 fbc6 	bl	80022bc <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d101      	bne.n	8000b3a <Scan_KeyMatrix.0+0x5ba>
			key = 19;
 8000b36:	2313      	movs	r3, #19
 8000b38:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2110      	movs	r1, #16
 8000b3e:	4836      	ldr	r0, [pc, #216]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000b40:	f001 fbd4 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2120      	movs	r1, #32
 8000b48:	4833      	ldr	r0, [pc, #204]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000b4a:	f001 fbcf 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2140      	movs	r1, #64	@ 0x40
 8000b52:	4831      	ldr	r0, [pc, #196]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000b54:	f001 fbca 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2180      	movs	r1, #128	@ 0x80
 8000b5c:	482e      	ldr	r0, [pc, #184]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000b5e:	f001 fbc5 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2101      	movs	r1, #1
 8000b66:	482d      	ldr	r0, [pc, #180]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000b68:	f001 fbc0 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2102      	movs	r1, #2
 8000b70:	482a      	ldr	r0, [pc, #168]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000b72:	f001 fbbb 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4828      	ldr	r0, [pc, #160]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000b7c:	f001 fbb6 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b86:	4825      	ldr	r0, [pc, #148]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000b88:	f001 fbb0 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b92:	4822      	ldr	r0, [pc, #136]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000b94:	f001 fbaa 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9e:	481f      	ldr	r0, [pc, #124]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000ba0:	f001 fba4 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000baa:	481c      	ldr	r0, [pc, #112]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000bac:	f001 fb9e 	bl	80022ec <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	4819      	ldr	r0, [pc, #100]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000bb4:	f001 fb82 	bl	80022bc <HAL_GPIO_ReadPin>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d101      	bne.n	8000bc2 <Scan_KeyMatrix.0+0x642>
			key = 20;
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4814      	ldr	r0, [pc, #80]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000bc6:	f001 fb79 	bl	80022bc <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d101      	bne.n	8000bd4 <Scan_KeyMatrix.0+0x654>
			key = 21;
 8000bd0:	2315      	movs	r3, #21
 8000bd2:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	480f      	ldr	r0, [pc, #60]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000bda:	f001 fb87 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2120      	movs	r1, #32
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000be4:	f001 fb82 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2140      	movs	r1, #64	@ 0x40
 8000bec:	480a      	ldr	r0, [pc, #40]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000bee:	f001 fb7d 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2180      	movs	r1, #128	@ 0x80
 8000bf6:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <Scan_KeyMatrix.0+0x698>)
 8000bf8:	f001 fb78 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000c02:	f001 fb73 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <Scan_KeyMatrix.0+0x69c>)
 8000c0c:	f001 fb6e 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2104      	movs	r1, #4
 8000c14:	e004      	b.n	8000c20 <Scan_KeyMatrix.0+0x6a0>
 8000c16:	bf00      	nop
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	481d      	ldr	r0, [pc, #116]	@ (8000c98 <Scan_KeyMatrix.0+0x718>)
 8000c22:	f001 fb63 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c2c:	481a      	ldr	r0, [pc, #104]	@ (8000c98 <Scan_KeyMatrix.0+0x718>)
 8000c2e:	f001 fb5d 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c38:	4817      	ldr	r0, [pc, #92]	@ (8000c98 <Scan_KeyMatrix.0+0x718>)
 8000c3a:	f001 fb57 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c44:	4814      	ldr	r0, [pc, #80]	@ (8000c98 <Scan_KeyMatrix.0+0x718>)
 8000c46:	f001 fb51 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 1);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c50:	4811      	ldr	r0, [pc, #68]	@ (8000c98 <Scan_KeyMatrix.0+0x718>)
 8000c52:	f001 fb4b 	bl	80022ec <HAL_GPIO_WritePin>



        if (HAL_GPIO_ReadPin(Row1_GPIO_Port, Row1_Pin) == 1) {
 8000c56:	2101      	movs	r1, #1
 8000c58:	4810      	ldr	r0, [pc, #64]	@ (8000c9c <Scan_KeyMatrix.0+0x71c>)
 8000c5a:	f001 fb2f 	bl	80022bc <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d101      	bne.n	8000c68 <Scan_KeyMatrix.0+0x6e8>
            key = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
        }
		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000c68:	2102      	movs	r1, #2
 8000c6a:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <Scan_KeyMatrix.0+0x71c>)
 8000c6c:	f001 fb26 	bl	80022bc <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d101      	bne.n	8000c7a <Scan_KeyMatrix.0+0x6fa>
			key = 22;
 8000c76:	2316      	movs	r3, #22
 8000c78:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <Scan_KeyMatrix.0+0x71c>)
 8000c7e:	f001 fb1d 	bl	80022bc <HAL_GPIO_ReadPin>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d101      	bne.n	8000c8c <Scan_KeyMatrix.0+0x70c>
			key = 23;
 8000c88:	2317      	movs	r3, #23
 8000c8a:	73fb      	strb	r3, [r7, #15]
		}

        return key;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
    }
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <main>:
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0b2      	sub	sp, #200	@ 0xc8
 8000ca4:	af00      	add	r7, sp, #0
int main(void)
 8000ca6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000caa:	667b      	str	r3, [r7, #100]	@ 0x64
  HAL_Init();
 8000cac:	f000 ffda 	bl	8001c64 <HAL_Init>
  SystemClock_Config();
 8000cb0:	f000 fd82 	bl	80017b8 <SystemClock_Config>
  MX_GPIO_Init();
 8000cb4:	f000 fde8 	bl	8001888 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000cb8:	f006 fa24 	bl	8007104 <MX_USB_DEVICE_Init>
  int counter1 = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int counter2 = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  int counter3 = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  int counter4 = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  int counter5 = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  int counter6 = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  int counter7 = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int counter8 = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  int counter9 = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int counter10 = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int counter11 = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int counter12 = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  int counter13 = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int counter14 = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  int counter15 = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int counter16 = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int counter17 = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int counter18 = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int counter19 = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  int counter20 = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  int counter21 = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	67bb      	str	r3, [r7, #120]	@ 0x78
  int counter22 = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	677b      	str	r3, [r7, #116]	@ 0x74
  int counter23 = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	673b      	str	r3, [r7, #112]	@ 0x70
  int lastPress = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
  int timeout = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  int previousChar = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  int buffer[21] = {};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2254      	movs	r2, #84	@ 0x54
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f007 f9d1 	bl	80080f8 <memset>
  int bufferItemsNumber = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]

    /* USER CODE BEGIN 3 */

  	  // Initialize GPIOs for keyboard matrix

  	pressed_key = Scan_KeyMatrix();
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	469c      	mov	ip, r3
 8000d5e:	f7ff fc0f 	bl	8000580 <Scan_KeyMatrix.0>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

  	// Change the blink speed based on the button pressed
  	switch (pressed_key) {
 8000d68:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	2b16      	cmp	r3, #22
 8000d70:	f200 825f 	bhi.w	8001232 <main+0x592>
 8000d74:	a201      	add	r2, pc, #4	@ (adr r2, 8000d7c <main+0xdc>)
 8000d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7a:	bf00      	nop
 8000d7c:	08000dd9 	.word	0x08000dd9
 8000d80:	08000de3 	.word	0x08000de3
 8000d84:	08000e17 	.word	0x08000e17
 8000d88:	08000e4b 	.word	0x08000e4b
 8000d8c:	08000e7f 	.word	0x08000e7f
 8000d90:	08000eb3 	.word	0x08000eb3
 8000d94:	08000ee7 	.word	0x08000ee7
 8000d98:	08000f1b 	.word	0x08000f1b
 8000d9c:	08000f4f 	.word	0x08000f4f
 8000da0:	08000f83 	.word	0x08000f83
 8000da4:	08000fb7 	.word	0x08000fb7
 8000da8:	08000feb 	.word	0x08000feb
 8000dac:	0800101f 	.word	0x0800101f
 8000db0:	08001053 	.word	0x08001053
 8000db4:	08001087 	.word	0x08001087
 8000db8:	080010bb 	.word	0x080010bb
 8000dbc:	080010ef 	.word	0x080010ef
 8000dc0:	08001123 	.word	0x08001123
 8000dc4:	08001157 	.word	0x08001157
 8000dc8:	0800118b 	.word	0x0800118b
 8000dcc:	080011b5 	.word	0x080011b5
 8000dd0:	080011df 	.word	0x080011df
 8000dd4:	08001209 	.word	0x08001209
##############################################



  	    	*/
  	    	Read_File_Test();
 8000dd8:	463b      	mov	r3, r7
 8000dda:	469c      	mov	ip, r3
 8000ddc:	f000 fcb2 	bl	8001744 <Read_File_Test.1>
  	        break;
 8000de0:	e254      	b.n	800128c <main+0x5ec>
  	    case 2:
		  counter2 += 1;
 8000de2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000de6:	3301      	adds	r3, #1
 8000de8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		  if (counter2 >= 3) {
 8000dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	f340 8220 	ble.w	8001236 <main+0x596>
			  Set_Character('s');
 8000df6:	463b      	mov	r3, r7
 8000df8:	469c      	mov	ip, r3
 8000dfa:	2073      	movs	r0, #115	@ 0x73
 8000dfc:	f000 fa94 	bl	8001328 <Set_Character.3>
			Send_Gate(2);
 8000e00:	463b      	mov	r3, r7
 8000e02:	469c      	mov	ip, r3
 8000e04:	2002      	movs	r0, #2
 8000e06:	f000 fa67 	bl	80012d8 <Send_Gate.4>
			lastPress = 2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	607b      	str	r3, [r7, #4]
			  counter2 = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		  }
  	        break;
 8000e14:	e20f      	b.n	8001236 <main+0x596>
  	    case 3:
  		  counter3 += 1;
 8000e16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  		  if (counter3 >= 3) {
 8000e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	f340 8208 	ble.w	800123a <main+0x59a>
  			Set_Character('t');
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	469c      	mov	ip, r3
 8000e2e:	2074      	movs	r0, #116	@ 0x74
 8000e30:	f000 fa7a 	bl	8001328 <Set_Character.3>
  			Send_Gate(3);
 8000e34:	463b      	mov	r3, r7
 8000e36:	469c      	mov	ip, r3
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 fa4d 	bl	80012d8 <Send_Gate.4>
  			lastPress = 3;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	607b      	str	r3, [r7, #4]
  			  counter3 = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  		  }
  	        break;
 8000e48:	e1f7      	b.n	800123a <main+0x59a>
  	    case 4:
		  counter4 += 1;
 8000e4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		  if (counter4 >= 3) {
 8000e54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	f340 81f0 	ble.w	800123e <main+0x59e>
			  Set_Character('k');
 8000e5e:	463b      	mov	r3, r7
 8000e60:	469c      	mov	ip, r3
 8000e62:	206b      	movs	r0, #107	@ 0x6b
 8000e64:	f000 fa60 	bl	8001328 <Set_Character.3>
			Send_Gate(4);
 8000e68:	463b      	mov	r3, r7
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f000 fa33 	bl	80012d8 <Send_Gate.4>
			lastPress = 4;
 8000e72:	2304      	movs	r3, #4
 8000e74:	607b      	str	r3, [r7, #4]
			  counter4 = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		  }
  	        break;
 8000e7c:	e1df      	b.n	800123e <main+0x59e>
  	    case 5:
		  counter5 += 1;
 8000e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000e82:	3301      	adds	r3, #1
 8000e84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		  if (counter5 >= 3) {
 8000e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	f340 81d8 	ble.w	8001242 <main+0x5a2>
			  Set_Character('p');
 8000e92:	463b      	mov	r3, r7
 8000e94:	469c      	mov	ip, r3
 8000e96:	2070      	movs	r0, #112	@ 0x70
 8000e98:	f000 fa46 	bl	8001328 <Set_Character.3>
			Send_Gate(5);
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	469c      	mov	ip, r3
 8000ea0:	2005      	movs	r0, #5
 8000ea2:	f000 fa19 	bl	80012d8 <Send_Gate.4>
			lastPress = 5;
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	607b      	str	r3, [r7, #4]
			  counter5 = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    		  }
  	        break;
 8000eb0:	e1c7      	b.n	8001242 <main+0x5a2>
  	    case 6:
		  counter6 += 1;
 8000eb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		if (counter6 >= 3) {
 8000ebc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	f340 81c0 	ble.w	8001246 <main+0x5a6>
			  Set_Character('w');
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	469c      	mov	ip, r3
 8000eca:	2077      	movs	r0, #119	@ 0x77
 8000ecc:	f000 fa2c 	bl	8001328 <Set_Character.3>
			Send_Gate(6);
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	2006      	movs	r0, #6
 8000ed6:	f000 f9ff 	bl	80012d8 <Send_Gate.4>
			lastPress = 6;
 8000eda:	2306      	movs	r3, #6
 8000edc:	607b      	str	r3, [r7, #4]
			  counter6 = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    		  }
  	        break;
 8000ee4:	e1af      	b.n	8001246 <main+0x5a6>
  	    case 7:
		  counter7 += 1;
 8000ee6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000eea:	3301      	adds	r3, #1
 8000eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		  if (counter7 >= 3) {
 8000ef0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	f340 81a8 	ble.w	800124a <main+0x5aa>
			  Set_Character('h');
 8000efa:	463b      	mov	r3, r7
 8000efc:	469c      	mov	ip, r3
 8000efe:	2068      	movs	r0, #104	@ 0x68
 8000f00:	f000 fa12 	bl	8001328 <Set_Character.3>
			Send_Gate(7);
 8000f04:	463b      	mov	r3, r7
 8000f06:	469c      	mov	ip, r3
 8000f08:	2007      	movs	r0, #7
 8000f0a:	f000 f9e5 	bl	80012d8 <Send_Gate.4>
			lastPress = 7;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	607b      	str	r3, [r7, #4]
			  counter7 = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    		  }
  	        break;
 8000f18:	e197      	b.n	800124a <main+0x5aa>
  	    case 8:
		  counter8 += 1;
 8000f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  if (counter8 >= 3) {
 8000f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	f340 8190 	ble.w	800124e <main+0x5ae>
			  Set_Character('r');
 8000f2e:	463b      	mov	r3, r7
 8000f30:	469c      	mov	ip, r3
 8000f32:	2072      	movs	r0, #114	@ 0x72
 8000f34:	f000 f9f8 	bl	8001328 <Set_Character.3>
			Send_Gate(8);
 8000f38:	463b      	mov	r3, r7
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	2008      	movs	r0, #8
 8000f3e:	f000 f9cb 	bl	80012d8 <Send_Gate.4>
			lastPress = 8;
 8000f42:	2308      	movs	r3, #8
 8000f44:	607b      	str	r3, [r7, #4]
			  counter8 = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    		  }
  	        break;
 8000f4c:	e17f      	b.n	800124e <main+0x5ae>
  	    case 9:
		  counter9 += 1;
 8000f4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f52:	3301      	adds	r3, #1
 8000f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		  if (counter9 >= 3) {
 8000f58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	f340 8178 	ble.w	8001252 <main+0x5b2>
			  Set_Character('a');
 8000f62:	463b      	mov	r3, r7
 8000f64:	469c      	mov	ip, r3
 8000f66:	2061      	movs	r0, #97	@ 0x61
 8000f68:	f000 f9de 	bl	8001328 <Set_Character.3>
			Send_Gate(9);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	469c      	mov	ip, r3
 8000f70:	2009      	movs	r0, #9
 8000f72:	f000 f9b1 	bl	80012d8 <Send_Gate.4>
			lastPress = 9;
 8000f76:	2309      	movs	r3, #9
 8000f78:	607b      	str	r3, [r7, #4]
			  counter9 = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    		  }
  	        break;
 8000f80:	e167      	b.n	8001252 <main+0x5b2>
  	    case 10:
		  counter10 += 1;
 8000f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000f86:	3301      	adds	r3, #1
 8000f88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  if (counter10 >= 3) {
 8000f8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	f340 8160 	ble.w	8001256 <main+0x5b6>
			  Set_Character('o');
 8000f96:	463b      	mov	r3, r7
 8000f98:	469c      	mov	ip, r3
 8000f9a:	206f      	movs	r0, #111	@ 0x6f
 8000f9c:	f000 f9c4 	bl	8001328 <Set_Character.3>
			Send_Gate(10);
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	469c      	mov	ip, r3
 8000fa4:	200a      	movs	r0, #10
 8000fa6:	f000 f997 	bl	80012d8 <Send_Gate.4>
			lastPress = 10;
 8000faa:	230a      	movs	r3, #10
 8000fac:	607b      	str	r3, [r7, #4]
			  counter10 = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    		  }
  	        break;
 8000fb4:	e14f      	b.n	8001256 <main+0x5b6>
  	    case 11:
		  counter11 += 1;
 8000fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		  if (counter11 >= 3) {
 8000fc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	f340 8148 	ble.w	800125a <main+0x5ba>
			  Set_Character('*');
 8000fca:	463b      	mov	r3, r7
 8000fcc:	469c      	mov	ip, r3
 8000fce:	202a      	movs	r0, #42	@ 0x2a
 8000fd0:	f000 f9aa 	bl	8001328 <Set_Character.3>
			Send_Gate(11);
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	200b      	movs	r0, #11
 8000fda:	f000 f97d 	bl	80012d8 <Send_Gate.4>
			lastPress = 11;
 8000fde:	230b      	movs	r3, #11
 8000fe0:	607b      	str	r3, [r7, #4]
			  counter11 = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    		  }
  	        break;
 8000fe8:	e137      	b.n	800125a <main+0x5ba>
  	    case 12:
		  counter12 += 1;
 8000fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		  if (counter12 >= 3) {
 8000ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	f340 8130 	ble.w	800125e <main+0x5be>
			  Set_Character('e');
 8000ffe:	463b      	mov	r3, r7
 8001000:	469c      	mov	ip, r3
 8001002:	2065      	movs	r0, #101	@ 0x65
 8001004:	f000 f990 	bl	8001328 <Set_Character.3>
			Send_Gate(12);
 8001008:	463b      	mov	r3, r7
 800100a:	469c      	mov	ip, r3
 800100c:	200c      	movs	r0, #12
 800100e:	f000 f963 	bl	80012d8 <Send_Gate.4>
			lastPress = 12;
 8001012:	230c      	movs	r3, #12
 8001014:	607b      	str	r3, [r7, #4]
			  counter12 = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    		  }
  	        break;
 800101c:	e11f      	b.n	800125e <main+0x5be>
  	    case 13:
		  counter13 += 1;
 800101e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001022:	3301      	adds	r3, #1
 8001024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  if (counter13 >= 3) {
 8001028:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800102c:	2b02      	cmp	r3, #2
 800102e:	f340 8118 	ble.w	8001262 <main+0x5c2>
			  Set_Character('u');
 8001032:	463b      	mov	r3, r7
 8001034:	469c      	mov	ip, r3
 8001036:	2075      	movs	r0, #117	@ 0x75
 8001038:	f000 f976 	bl	8001328 <Set_Character.3>
			Send_Gate(13);
 800103c:	463b      	mov	r3, r7
 800103e:	469c      	mov	ip, r3
 8001040:	200d      	movs	r0, #13
 8001042:	f000 f949 	bl	80012d8 <Send_Gate.4>
			lastPress = 13;
 8001046:	230d      	movs	r3, #13
 8001048:	607b      	str	r3, [r7, #4]
			  counter13 = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  }
  	        break;
 8001050:	e107      	b.n	8001262 <main+0x5c2>
  	    case 14:
		  counter14 += 1;
 8001052:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001056:	3301      	adds	r3, #1
 8001058:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		  if (counter14 >= 3) {
 800105c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001060:	2b02      	cmp	r3, #2
 8001062:	f340 8100 	ble.w	8001266 <main+0x5c6>
			  Set_Character('f');
 8001066:	463b      	mov	r3, r7
 8001068:	469c      	mov	ip, r3
 800106a:	2066      	movs	r0, #102	@ 0x66
 800106c:	f000 f95c 	bl	8001328 <Set_Character.3>
			Send_Gate(14);
 8001070:	463b      	mov	r3, r7
 8001072:	469c      	mov	ip, r3
 8001074:	200e      	movs	r0, #14
 8001076:	f000 f92f 	bl	80012d8 <Send_Gate.4>
			lastPress = 14;
 800107a:	230e      	movs	r3, #14
 800107c:	607b      	str	r3, [r7, #4]
			  counter14 = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		  }
  	        break;
 8001084:	e0ef      	b.n	8001266 <main+0x5c6>
  	    case 15:
		  counter15 += 1;
 8001086:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800108a:	3301      	adds	r3, #1
 800108c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  if (counter15 >= 3) {
 8001090:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001094:	2b02      	cmp	r3, #2
 8001096:	f340 80e8 	ble.w	800126a <main+0x5ca>
			  Set_Character('r');
 800109a:	463b      	mov	r3, r7
 800109c:	469c      	mov	ip, r3
 800109e:	2072      	movs	r0, #114	@ 0x72
 80010a0:	f000 f942 	bl	8001328 <Set_Character.3>
			Send_Gate(15);
 80010a4:	463b      	mov	r3, r7
 80010a6:	469c      	mov	ip, r3
 80010a8:	200f      	movs	r0, #15
 80010aa:	f000 f915 	bl	80012d8 <Send_Gate.4>
			lastPress = 15;
 80010ae:	230f      	movs	r3, #15
 80010b0:	607b      	str	r3, [r7, #4]
			  counter15 = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  }
  	        break;
 80010b8:	e0d7      	b.n	800126a <main+0x5ca>
  	    case 16:
		  counter16 += 1;
 80010ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010be:	3301      	adds	r3, #1
 80010c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  if (counter16 >= 3) {
 80010c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	f340 80d0 	ble.w	800126e <main+0x5ce>
			  Set_Character('p');
 80010ce:	463b      	mov	r3, r7
 80010d0:	469c      	mov	ip, r3
 80010d2:	2070      	movs	r0, #112	@ 0x70
 80010d4:	f000 f928 	bl	8001328 <Set_Character.3>
			Send_Gate(16);
 80010d8:	463b      	mov	r3, r7
 80010da:	469c      	mov	ip, r3
 80010dc:	2010      	movs	r0, #16
 80010de:	f000 f8fb 	bl	80012d8 <Send_Gate.4>
			lastPress = 16;
 80010e2:	2310      	movs	r3, #16
 80010e4:	607b      	str	r3, [r7, #4]
			  counter16 = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  }
  	        break;
 80010ec:	e0bf      	b.n	800126e <main+0x5ce>
  	    case 17:
		  counter17 += 1;
 80010ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010f2:	3301      	adds	r3, #1
 80010f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		  if (counter17 >= 3) {
 80010f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	f340 80b8 	ble.w	8001272 <main+0x5d2>
			  Set_Character('b');
 8001102:	463b      	mov	r3, r7
 8001104:	469c      	mov	ip, r3
 8001106:	2062      	movs	r0, #98	@ 0x62
 8001108:	f000 f90e 	bl	8001328 <Set_Character.3>
			Send_Gate(17);
 800110c:	463b      	mov	r3, r7
 800110e:	469c      	mov	ip, r3
 8001110:	2011      	movs	r0, #17
 8001112:	f000 f8e1 	bl	80012d8 <Send_Gate.4>
			lastPress = 17;
 8001116:	2311      	movs	r3, #17
 8001118:	607b      	str	r3, [r7, #4]
			  counter17 = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		  }
  	        break;
 8001120:	e0a7      	b.n	8001272 <main+0x5d2>
  	    case 18:
		  counter18 += 1;
 8001122:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001126:	3301      	adds	r3, #1
 8001128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  if (counter18 >= 3) {
 800112c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001130:	2b02      	cmp	r3, #2
 8001132:	f340 80a0 	ble.w	8001276 <main+0x5d6>
			  Set_Character('l');
 8001136:	463b      	mov	r3, r7
 8001138:	469c      	mov	ip, r3
 800113a:	206c      	movs	r0, #108	@ 0x6c
 800113c:	f000 f8f4 	bl	8001328 <Set_Character.3>
			Send_Gate(18);
 8001140:	463b      	mov	r3, r7
 8001142:	469c      	mov	ip, r3
 8001144:	2012      	movs	r0, #18
 8001146:	f000 f8c7 	bl	80012d8 <Send_Gate.4>
			lastPress = 18;
 800114a:	2312      	movs	r3, #18
 800114c:	607b      	str	r3, [r7, #4]
			  counter18 = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  }
  	        break;
 8001154:	e08f      	b.n	8001276 <main+0x5d6>
  	    case 19:
		  counter19 += 1;
 8001156:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800115a:	3301      	adds	r3, #1
 800115c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  if (counter19 >= 3) {
 8001160:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001164:	2b02      	cmp	r3, #2
 8001166:	f340 8088 	ble.w	800127a <main+0x5da>
			  Set_Character('g');
 800116a:	463b      	mov	r3, r7
 800116c:	469c      	mov	ip, r3
 800116e:	2067      	movs	r0, #103	@ 0x67
 8001170:	f000 f8da 	bl	8001328 <Set_Character.3>
			Send_Gate(19);
 8001174:	463b      	mov	r3, r7
 8001176:	469c      	mov	ip, r3
 8001178:	2013      	movs	r0, #19
 800117a:	f000 f8ad 	bl	80012d8 <Send_Gate.4>
			lastPress = 19;
 800117e:	2313      	movs	r3, #19
 8001180:	607b      	str	r3, [r7, #4]
			  counter19 = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  }
  	        break;
 8001188:	e077      	b.n	800127a <main+0x5da>
  	    case 20:
		  counter20 += 1;
 800118a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800118c:	3301      	adds	r3, #1
 800118e:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  if (counter20 >= 3) {
 8001190:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001192:	2b02      	cmp	r3, #2
 8001194:	dd73      	ble.n	800127e <main+0x5de>
			  Set_Character('t');
 8001196:	463b      	mov	r3, r7
 8001198:	469c      	mov	ip, r3
 800119a:	2074      	movs	r0, #116	@ 0x74
 800119c:	f000 f8c4 	bl	8001328 <Set_Character.3>
			Send_Gate(20);
 80011a0:	463b      	mov	r3, r7
 80011a2:	469c      	mov	ip, r3
 80011a4:	2014      	movs	r0, #20
 80011a6:	f000 f897 	bl	80012d8 <Send_Gate.4>
			lastPress = 20;
 80011aa:	2314      	movs	r3, #20
 80011ac:	607b      	str	r3, [r7, #4]
			  counter20 = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  }
  	        break;
 80011b2:	e064      	b.n	800127e <main+0x5de>
  	    case 21:
		  counter21 += 1;
 80011b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011b6:	3301      	adds	r3, #1
 80011b8:	67bb      	str	r3, [r7, #120]	@ 0x78
		  if (counter21 >= 3) {
 80011ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011bc:	2b02      	cmp	r3, #2
 80011be:	dd60      	ble.n	8001282 <main+0x5e2>
			  Set_Character('s');
 80011c0:	463b      	mov	r3, r7
 80011c2:	469c      	mov	ip, r3
 80011c4:	2073      	movs	r0, #115	@ 0x73
 80011c6:	f000 f8af 	bl	8001328 <Set_Character.3>
			Send_Gate(21);
 80011ca:	463b      	mov	r3, r7
 80011cc:	469c      	mov	ip, r3
 80011ce:	2015      	movs	r0, #21
 80011d0:	f000 f882 	bl	80012d8 <Send_Gate.4>
			lastPress = 21;
 80011d4:	2315      	movs	r3, #21
 80011d6:	607b      	str	r3, [r7, #4]
			  counter21 = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	67bb      	str	r3, [r7, #120]	@ 0x78
		  }
  	        break;
 80011dc:	e051      	b.n	8001282 <main+0x5e2>
  	    case 22:
		  counter22 += 1;
 80011de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011e0:	3301      	adds	r3, #1
 80011e2:	677b      	str	r3, [r7, #116]	@ 0x74
		  if (counter22 >= 3) {
 80011e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	dd4d      	ble.n	8001286 <main+0x5e6>
			  Set_Character('d');
 80011ea:	463b      	mov	r3, r7
 80011ec:	469c      	mov	ip, r3
 80011ee:	2064      	movs	r0, #100	@ 0x64
 80011f0:	f000 f89a 	bl	8001328 <Set_Character.3>
			Send_Gate(22);
 80011f4:	463b      	mov	r3, r7
 80011f6:	469c      	mov	ip, r3
 80011f8:	2016      	movs	r0, #22
 80011fa:	f000 f86d 	bl	80012d8 <Send_Gate.4>
			lastPress = 22;
 80011fe:	2316      	movs	r3, #22
 8001200:	607b      	str	r3, [r7, #4]
			  counter22 = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	677b      	str	r3, [r7, #116]	@ 0x74
		  }
  	        break;
 8001206:	e03e      	b.n	8001286 <main+0x5e6>
  	    case 23:
		  counter23 += 1;
 8001208:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800120a:	3301      	adds	r3, #1
 800120c:	673b      	str	r3, [r7, #112]	@ 0x70
		  if (counter23 >= 3) {
 800120e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001210:	2b02      	cmp	r3, #2
 8001212:	dd3a      	ble.n	800128a <main+0x5ea>
			  Set_Character('z');
 8001214:	463b      	mov	r3, r7
 8001216:	469c      	mov	ip, r3
 8001218:	207a      	movs	r0, #122	@ 0x7a
 800121a:	f000 f885 	bl	8001328 <Set_Character.3>
			Send_Gate(23);
 800121e:	463b      	mov	r3, r7
 8001220:	469c      	mov	ip, r3
 8001222:	2017      	movs	r0, #23
 8001224:	f000 f858 	bl	80012d8 <Send_Gate.4>
			lastPress = 23;
 8001228:	2317      	movs	r3, #23
 800122a:	607b      	str	r3, [r7, #4]
			  counter23 = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	673b      	str	r3, [r7, #112]	@ 0x70
		  }
  	        break;
 8001230:	e02b      	b.n	800128a <main+0x5ea>
  	    default:
  	        break;
 8001232:	bf00      	nop
 8001234:	e591      	b.n	8000d5a <main+0xba>
  	        break;
 8001236:	bf00      	nop
 8001238:	e58f      	b.n	8000d5a <main+0xba>
  	        break;
 800123a:	bf00      	nop
 800123c:	e58d      	b.n	8000d5a <main+0xba>
  	        break;
 800123e:	bf00      	nop
 8001240:	e58b      	b.n	8000d5a <main+0xba>
  	        break;
 8001242:	bf00      	nop
 8001244:	e589      	b.n	8000d5a <main+0xba>
  	        break;
 8001246:	bf00      	nop
 8001248:	e587      	b.n	8000d5a <main+0xba>
  	        break;
 800124a:	bf00      	nop
 800124c:	e585      	b.n	8000d5a <main+0xba>
  	        break;
 800124e:	bf00      	nop
 8001250:	e583      	b.n	8000d5a <main+0xba>
  	        break;
 8001252:	bf00      	nop
 8001254:	e581      	b.n	8000d5a <main+0xba>
  	        break;
 8001256:	bf00      	nop
 8001258:	e57f      	b.n	8000d5a <main+0xba>
  	        break;
 800125a:	bf00      	nop
 800125c:	e57d      	b.n	8000d5a <main+0xba>
  	        break;
 800125e:	bf00      	nop
 8001260:	e57b      	b.n	8000d5a <main+0xba>
  	        break;
 8001262:	bf00      	nop
 8001264:	e579      	b.n	8000d5a <main+0xba>
  	        break;
 8001266:	bf00      	nop
 8001268:	e577      	b.n	8000d5a <main+0xba>
  	        break;
 800126a:	bf00      	nop
 800126c:	e575      	b.n	8000d5a <main+0xba>
  	        break;
 800126e:	bf00      	nop
 8001270:	e573      	b.n	8000d5a <main+0xba>
  	        break;
 8001272:	bf00      	nop
 8001274:	e571      	b.n	8000d5a <main+0xba>
  	        break;
 8001276:	bf00      	nop
 8001278:	e56f      	b.n	8000d5a <main+0xba>
  	        break;
 800127a:	bf00      	nop
 800127c:	e56d      	b.n	8000d5a <main+0xba>
  	        break;
 800127e:	bf00      	nop
 8001280:	e56b      	b.n	8000d5a <main+0xba>
  	        break;
 8001282:	bf00      	nop
 8001284:	e569      	b.n	8000d5a <main+0xba>
  	        break;
 8001286:	bf00      	nop
 8001288:	e567      	b.n	8000d5a <main+0xba>
  	        break;
 800128a:	bf00      	nop
  	pressed_key = Scan_KeyMatrix();
 800128c:	e565      	b.n	8000d5a <main+0xba>
 800128e:	bf00      	nop

08001290 <Send_Character.2>:
  void Send_Character(){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	f8c7 c004 	str.w	ip, [r7, #4]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 800129a:	2208      	movs	r2, #8
 800129c:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <Send_Character.2+0x40>)
 800129e:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <Send_Character.2+0x44>)
 80012a0:	f004 fba6 	bl	80059f0 <USBD_HID_SendReport>
	  HAL_Delay(20);
 80012a4:	2014      	movs	r0, #20
 80012a6:	f000 fd4f 	bl	8001d48 <HAL_Delay>
	  keyBoardHIDsub.MODIFIER=0x00;
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <Send_Character.2+0x40>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	  keyBoardHIDsub.KEYCODE2=0x00;
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <Send_Character.2+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80012b6:	2208      	movs	r2, #8
 80012b8:	4905      	ldr	r1, [pc, #20]	@ (80012d0 <Send_Character.2+0x40>)
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <Send_Character.2+0x44>)
 80012bc:	f004 fb98 	bl	80059f0 <USBD_HID_SendReport>
	  HAL_Delay(20);
 80012c0:	2014      	movs	r0, #20
 80012c2:	f000 fd41 	bl	8001d48 <HAL_Delay>
	  }
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000188 	.word	0x20000188
 80012d4:	2000019c 	.word	0x2000019c

080012d8 <Send_Gate.4>:
  void Send_Gate(int n) {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	4664      	mov	r4, ip
 80012e2:	f8c7 c000 	str.w	ip, [r7]
	  if(previousChar < n || n == 1){
 80012e6:	68a2      	ldr	r2, [r4, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	db02      	blt.n	80012f4 <Send_Gate.4+0x1c>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d115      	bne.n	8001320 <Send_Gate.4+0x48>
		  if(n != lastPress){
 80012f4:	6863      	ldr	r3, [r4, #4]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d002      	beq.n	8001302 <Send_Gate.4+0x2a>
			  timeout = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	6023      	str	r3, [r4, #0]
 8001300:	e002      	b.n	8001308 <Send_Gate.4+0x30>
			  timeout +=1;
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	6023      	str	r3, [r4, #0]
		  if(timeout >= 1200 || timeout == 0){
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800130e:	da02      	bge.n	8001316 <Send_Gate.4+0x3e>
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <Send_Gate.4+0x44>
			  Send_Character();
 8001316:	46a4      	mov	ip, r4
 8001318:	f7ff ffba 	bl	8001290 <Send_Character.2>
		  previousChar = n;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	60a3      	str	r3, [r4, #8]
  }
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bd90      	pop	{r4, r7, pc}

08001328 <Set_Character.3>:
  void Set_Character(char i){
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	f8c7 c000 	str.w	ip, [r7]
	  switch(i){
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	3b21      	subs	r3, #33	@ 0x21
 800133a:	2b59      	cmp	r3, #89	@ 0x59
 800133c:	f200 81fa 	bhi.w	8001734 <Set_Character.3+0x40c>
 8001340:	a201      	add	r2, pc, #4	@ (adr r2, 8001348 <Set_Character.3+0x20>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	080016a9 	.word	0x080016a9
 800134c:	08001735 	.word	0x08001735
 8001350:	080016c5 	.word	0x080016c5
 8001354:	080016d3 	.word	0x080016d3
 8001358:	080016e1 	.word	0x080016e1
 800135c:	080016fd 	.word	0x080016fd
 8001360:	08001735 	.word	0x08001735
 8001364:	08001719 	.word	0x08001719
 8001368:	08001727 	.word	0x08001727
 800136c:	0800170b 	.word	0x0800170b
 8001370:	08001735 	.word	0x08001735
 8001374:	08001735 	.word	0x08001735
 8001378:	08001735 	.word	0x08001735
 800137c:	08001735 	.word	0x08001735
 8001380:	08001735 	.word	0x08001735
 8001384:	0800169b 	.word	0x0800169b
 8001388:	0800161d 	.word	0x0800161d
 800138c:	0800162b 	.word	0x0800162b
 8001390:	08001639 	.word	0x08001639
 8001394:	08001647 	.word	0x08001647
 8001398:	08001655 	.word	0x08001655
 800139c:	08001663 	.word	0x08001663
 80013a0:	08001671 	.word	0x08001671
 80013a4:	0800167f 	.word	0x0800167f
 80013a8:	0800168d 	.word	0x0800168d
 80013ac:	08001735 	.word	0x08001735
 80013b0:	08001735 	.word	0x08001735
 80013b4:	08001735 	.word	0x08001735
 80013b8:	08001735 	.word	0x08001735
 80013bc:	08001735 	.word	0x08001735
 80013c0:	08001735 	.word	0x08001735
 80013c4:	080016b7 	.word	0x080016b7
 80013c8:	08001735 	.word	0x08001735
 80013cc:	08001735 	.word	0x08001735
 80013d0:	08001735 	.word	0x08001735
 80013d4:	08001735 	.word	0x08001735
 80013d8:	08001735 	.word	0x08001735
 80013dc:	08001735 	.word	0x08001735
 80013e0:	08001735 	.word	0x08001735
 80013e4:	08001735 	.word	0x08001735
 80013e8:	08001735 	.word	0x08001735
 80013ec:	08001735 	.word	0x08001735
 80013f0:	08001735 	.word	0x08001735
 80013f4:	08001735 	.word	0x08001735
 80013f8:	08001735 	.word	0x08001735
 80013fc:	08001735 	.word	0x08001735
 8001400:	08001735 	.word	0x08001735
 8001404:	08001735 	.word	0x08001735
 8001408:	08001735 	.word	0x08001735
 800140c:	08001735 	.word	0x08001735
 8001410:	08001735 	.word	0x08001735
 8001414:	08001735 	.word	0x08001735
 8001418:	08001735 	.word	0x08001735
 800141c:	08001735 	.word	0x08001735
 8001420:	08001735 	.word	0x08001735
 8001424:	08001735 	.word	0x08001735
 8001428:	08001735 	.word	0x08001735
 800142c:	08001735 	.word	0x08001735
 8001430:	08001735 	.word	0x08001735
 8001434:	08001735 	.word	0x08001735
 8001438:	08001735 	.word	0x08001735
 800143c:	080016ef 	.word	0x080016ef
 8001440:	08001735 	.word	0x08001735
 8001444:	08001735 	.word	0x08001735
 8001448:	080014b1 	.word	0x080014b1
 800144c:	080014bf 	.word	0x080014bf
 8001450:	080014cd 	.word	0x080014cd
 8001454:	080014db 	.word	0x080014db
 8001458:	080014e9 	.word	0x080014e9
 800145c:	080014f7 	.word	0x080014f7
 8001460:	08001505 	.word	0x08001505
 8001464:	08001513 	.word	0x08001513
 8001468:	08001521 	.word	0x08001521
 800146c:	0800152f 	.word	0x0800152f
 8001470:	0800153d 	.word	0x0800153d
 8001474:	0800154b 	.word	0x0800154b
 8001478:	08001559 	.word	0x08001559
 800147c:	08001567 	.word	0x08001567
 8001480:	08001575 	.word	0x08001575
 8001484:	08001583 	.word	0x08001583
 8001488:	08001591 	.word	0x08001591
 800148c:	0800159f 	.word	0x0800159f
 8001490:	080015ad 	.word	0x080015ad
 8001494:	080015bb 	.word	0x080015bb
 8001498:	080015c9 	.word	0x080015c9
 800149c:	080015d7 	.word	0x080015d7
 80014a0:	080015e5 	.word	0x080015e5
 80014a4:	080015f3 	.word	0x080015f3
 80014a8:	08001601 	.word	0x08001601
 80014ac:	0800160f 	.word	0x0800160f
					keyBoardHIDsub.MODIFIER=0x00;
 80014b0:	4ba3      	ldr	r3, [pc, #652]	@ (8001740 <Set_Character.3+0x418>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
	  			    keyBoardHIDsub.KEYCODE2=KEY_A;
 80014b6:	4ba2      	ldr	r3, [pc, #648]	@ (8001740 <Set_Character.3+0x418>)
 80014b8:	2204      	movs	r2, #4
 80014ba:	70da      	strb	r2, [r3, #3]
	  			    break;
 80014bc:	e13a      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x00;
 80014be:	4ba0      	ldr	r3, [pc, #640]	@ (8001740 <Set_Character.3+0x418>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	  	  		  	keyBoardHIDsub.KEYCODE2=KEY_B;
 80014c4:	4b9e      	ldr	r3, [pc, #632]	@ (8001740 <Set_Character.3+0x418>)
 80014c6:	2205      	movs	r2, #5
 80014c8:	70da      	strb	r2, [r3, #3]
	  	  		  	break;
 80014ca:	e133      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 80014cc:	4b9c      	ldr	r3, [pc, #624]	@ (8001740 <Set_Character.3+0x418>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_C;
 80014d2:	4b9b      	ldr	r3, [pc, #620]	@ (8001740 <Set_Character.3+0x418>)
 80014d4:	2206      	movs	r2, #6
 80014d6:	70da      	strb	r2, [r3, #3]
	    			break;
 80014d8:	e12c      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 80014da:	4b99      	ldr	r3, [pc, #612]	@ (8001740 <Set_Character.3+0x418>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_D;
 80014e0:	4b97      	ldr	r3, [pc, #604]	@ (8001740 <Set_Character.3+0x418>)
 80014e2:	2207      	movs	r2, #7
 80014e4:	70da      	strb	r2, [r3, #3]
	  			break;
 80014e6:	e125      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 80014e8:	4b95      	ldr	r3, [pc, #596]	@ (8001740 <Set_Character.3+0x418>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_E;
 80014ee:	4b94      	ldr	r3, [pc, #592]	@ (8001740 <Set_Character.3+0x418>)
 80014f0:	2208      	movs	r2, #8
 80014f2:	70da      	strb	r2, [r3, #3]
	  			break;
 80014f4:	e11e      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 80014f6:	4b92      	ldr	r3, [pc, #584]	@ (8001740 <Set_Character.3+0x418>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_F;
 80014fc:	4b90      	ldr	r3, [pc, #576]	@ (8001740 <Set_Character.3+0x418>)
 80014fe:	2209      	movs	r2, #9
 8001500:	70da      	strb	r2, [r3, #3]
	  			break;
 8001502:	e117      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001504:	4b8e      	ldr	r3, [pc, #568]	@ (8001740 <Set_Character.3+0x418>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_G;
 800150a:	4b8d      	ldr	r3, [pc, #564]	@ (8001740 <Set_Character.3+0x418>)
 800150c:	220a      	movs	r2, #10
 800150e:	70da      	strb	r2, [r3, #3]
	  			break;
 8001510:	e110      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001512:	4b8b      	ldr	r3, [pc, #556]	@ (8001740 <Set_Character.3+0x418>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_H;
 8001518:	4b89      	ldr	r3, [pc, #548]	@ (8001740 <Set_Character.3+0x418>)
 800151a:	220b      	movs	r2, #11
 800151c:	70da      	strb	r2, [r3, #3]
	  			break;
 800151e:	e109      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001520:	4b87      	ldr	r3, [pc, #540]	@ (8001740 <Set_Character.3+0x418>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_I;
 8001526:	4b86      	ldr	r3, [pc, #536]	@ (8001740 <Set_Character.3+0x418>)
 8001528:	220c      	movs	r2, #12
 800152a:	70da      	strb	r2, [r3, #3]
	  			break;
 800152c:	e102      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 800152e:	4b84      	ldr	r3, [pc, #528]	@ (8001740 <Set_Character.3+0x418>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_J;
 8001534:	4b82      	ldr	r3, [pc, #520]	@ (8001740 <Set_Character.3+0x418>)
 8001536:	220d      	movs	r2, #13
 8001538:	70da      	strb	r2, [r3, #3]
					break;
 800153a:	e0fb      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 800153c:	4b80      	ldr	r3, [pc, #512]	@ (8001740 <Set_Character.3+0x418>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_K;
 8001542:	4b7f      	ldr	r3, [pc, #508]	@ (8001740 <Set_Character.3+0x418>)
 8001544:	220e      	movs	r2, #14
 8001546:	70da      	strb	r2, [r3, #3]
	  			break;
 8001548:	e0f4      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 800154a:	4b7d      	ldr	r3, [pc, #500]	@ (8001740 <Set_Character.3+0x418>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_L;
 8001550:	4b7b      	ldr	r3, [pc, #492]	@ (8001740 <Set_Character.3+0x418>)
 8001552:	220f      	movs	r2, #15
 8001554:	70da      	strb	r2, [r3, #3]
	  			break;
 8001556:	e0ed      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001558:	4b79      	ldr	r3, [pc, #484]	@ (8001740 <Set_Character.3+0x418>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_M;
 800155e:	4b78      	ldr	r3, [pc, #480]	@ (8001740 <Set_Character.3+0x418>)
 8001560:	2210      	movs	r2, #16
 8001562:	70da      	strb	r2, [r3, #3]
	  			break;
 8001564:	e0e6      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001566:	4b76      	ldr	r3, [pc, #472]	@ (8001740 <Set_Character.3+0x418>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_N;
 800156c:	4b74      	ldr	r3, [pc, #464]	@ (8001740 <Set_Character.3+0x418>)
 800156e:	2211      	movs	r2, #17
 8001570:	70da      	strb	r2, [r3, #3]
	  			break;
 8001572:	e0df      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001574:	4b72      	ldr	r3, [pc, #456]	@ (8001740 <Set_Character.3+0x418>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_O;
 800157a:	4b71      	ldr	r3, [pc, #452]	@ (8001740 <Set_Character.3+0x418>)
 800157c:	2212      	movs	r2, #18
 800157e:	70da      	strb	r2, [r3, #3]
	  			break;
 8001580:	e0d8      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001582:	4b6f      	ldr	r3, [pc, #444]	@ (8001740 <Set_Character.3+0x418>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_P;
 8001588:	4b6d      	ldr	r3, [pc, #436]	@ (8001740 <Set_Character.3+0x418>)
 800158a:	2213      	movs	r2, #19
 800158c:	70da      	strb	r2, [r3, #3]
	  			break;
 800158e:	e0d1      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001590:	4b6b      	ldr	r3, [pc, #428]	@ (8001740 <Set_Character.3+0x418>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_Q;
 8001596:	4b6a      	ldr	r3, [pc, #424]	@ (8001740 <Set_Character.3+0x418>)
 8001598:	2214      	movs	r2, #20
 800159a:	70da      	strb	r2, [r3, #3]
	  			break;
 800159c:	e0ca      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 800159e:	4b68      	ldr	r3, [pc, #416]	@ (8001740 <Set_Character.3+0x418>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_R;
 80015a4:	4b66      	ldr	r3, [pc, #408]	@ (8001740 <Set_Character.3+0x418>)
 80015a6:	2215      	movs	r2, #21
 80015a8:	70da      	strb	r2, [r3, #3]
	  			break;
 80015aa:	e0c3      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 80015ac:	4b64      	ldr	r3, [pc, #400]	@ (8001740 <Set_Character.3+0x418>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_S;
 80015b2:	4b63      	ldr	r3, [pc, #396]	@ (8001740 <Set_Character.3+0x418>)
 80015b4:	2216      	movs	r2, #22
 80015b6:	70da      	strb	r2, [r3, #3]
	  			break;
 80015b8:	e0bc      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 80015ba:	4b61      	ldr	r3, [pc, #388]	@ (8001740 <Set_Character.3+0x418>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_T;
 80015c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001740 <Set_Character.3+0x418>)
 80015c2:	2217      	movs	r2, #23
 80015c4:	70da      	strb	r2, [r3, #3]
	  			break;
 80015c6:	e0b5      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 80015c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001740 <Set_Character.3+0x418>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_U;
 80015ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001740 <Set_Character.3+0x418>)
 80015d0:	2218      	movs	r2, #24
 80015d2:	70da      	strb	r2, [r3, #3]
	  			break;
 80015d4:	e0ae      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 80015d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001740 <Set_Character.3+0x418>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_V;
 80015dc:	4b58      	ldr	r3, [pc, #352]	@ (8001740 <Set_Character.3+0x418>)
 80015de:	2219      	movs	r2, #25
 80015e0:	70da      	strb	r2, [r3, #3]
	  			break;
 80015e2:	e0a7      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 80015e4:	4b56      	ldr	r3, [pc, #344]	@ (8001740 <Set_Character.3+0x418>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_W;
 80015ea:	4b55      	ldr	r3, [pc, #340]	@ (8001740 <Set_Character.3+0x418>)
 80015ec:	221a      	movs	r2, #26
 80015ee:	70da      	strb	r2, [r3, #3]
				break;
 80015f0:	e0a0      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 80015f2:	4b53      	ldr	r3, [pc, #332]	@ (8001740 <Set_Character.3+0x418>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_X;
 80015f8:	4b51      	ldr	r3, [pc, #324]	@ (8001740 <Set_Character.3+0x418>)
 80015fa:	221b      	movs	r2, #27
 80015fc:	70da      	strb	r2, [r3, #3]
				break;
 80015fe:	e099      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001600:	4b4f      	ldr	r3, [pc, #316]	@ (8001740 <Set_Character.3+0x418>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_Y;
 8001606:	4b4e      	ldr	r3, [pc, #312]	@ (8001740 <Set_Character.3+0x418>)
 8001608:	221c      	movs	r2, #28
 800160a:	70da      	strb	r2, [r3, #3]
				break;
 800160c:	e092      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 800160e:	4b4c      	ldr	r3, [pc, #304]	@ (8001740 <Set_Character.3+0x418>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_Z;
 8001614:	4b4a      	ldr	r3, [pc, #296]	@ (8001740 <Set_Character.3+0x418>)
 8001616:	221d      	movs	r2, #29
 8001618:	70da      	strb	r2, [r3, #3]
				break;
 800161a:	e08b      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 800161c:	4b48      	ldr	r3, [pc, #288]	@ (8001740 <Set_Character.3+0x418>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_1;
 8001622:	4b47      	ldr	r3, [pc, #284]	@ (8001740 <Set_Character.3+0x418>)
 8001624:	221e      	movs	r2, #30
 8001626:	70da      	strb	r2, [r3, #3]
				break;
 8001628:	e084      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 800162a:	4b45      	ldr	r3, [pc, #276]	@ (8001740 <Set_Character.3+0x418>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_2;
 8001630:	4b43      	ldr	r3, [pc, #268]	@ (8001740 <Set_Character.3+0x418>)
 8001632:	221f      	movs	r2, #31
 8001634:	70da      	strb	r2, [r3, #3]
				break;
 8001636:	e07d      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001638:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <Set_Character.3+0x418>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_3;
 800163e:	4b40      	ldr	r3, [pc, #256]	@ (8001740 <Set_Character.3+0x418>)
 8001640:	2220      	movs	r2, #32
 8001642:	70da      	strb	r2, [r3, #3]
				break;
 8001644:	e076      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001646:	4b3e      	ldr	r3, [pc, #248]	@ (8001740 <Set_Character.3+0x418>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_4;
 800164c:	4b3c      	ldr	r3, [pc, #240]	@ (8001740 <Set_Character.3+0x418>)
 800164e:	2221      	movs	r2, #33	@ 0x21
 8001650:	70da      	strb	r2, [r3, #3]
				break;
 8001652:	e06f      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001654:	4b3a      	ldr	r3, [pc, #232]	@ (8001740 <Set_Character.3+0x418>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_5;
 800165a:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <Set_Character.3+0x418>)
 800165c:	2222      	movs	r2, #34	@ 0x22
 800165e:	70da      	strb	r2, [r3, #3]
				break;
 8001660:	e068      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001662:	4b37      	ldr	r3, [pc, #220]	@ (8001740 <Set_Character.3+0x418>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_6;
 8001668:	4b35      	ldr	r3, [pc, #212]	@ (8001740 <Set_Character.3+0x418>)
 800166a:	2223      	movs	r2, #35	@ 0x23
 800166c:	70da      	strb	r2, [r3, #3]
				break;
 800166e:	e061      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 8001670:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <Set_Character.3+0x418>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_7;
 8001676:	4b32      	ldr	r3, [pc, #200]	@ (8001740 <Set_Character.3+0x418>)
 8001678:	2224      	movs	r2, #36	@ 0x24
 800167a:	70da      	strb	r2, [r3, #3]
				break;
 800167c:	e05a      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 800167e:	4b30      	ldr	r3, [pc, #192]	@ (8001740 <Set_Character.3+0x418>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_8;
 8001684:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <Set_Character.3+0x418>)
 8001686:	2225      	movs	r2, #37	@ 0x25
 8001688:	70da      	strb	r2, [r3, #3]
				break;
 800168a:	e053      	b.n	8001734 <Set_Character.3+0x40c>
				keyBoardHIDsub.MODIFIER=0x00;
 800168c:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <Set_Character.3+0x418>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_9;
 8001692:	4b2b      	ldr	r3, [pc, #172]	@ (8001740 <Set_Character.3+0x418>)
 8001694:	2226      	movs	r2, #38	@ 0x26
 8001696:	70da      	strb	r2, [r3, #3]
				break;
 8001698:	e04c      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x00;
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <Set_Character.3+0x418>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_0;
 80016a0:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <Set_Character.3+0x418>)
 80016a2:	2227      	movs	r2, #39	@ 0x27
 80016a4:	70da      	strb	r2, [r3, #3]
				break;
 80016a6:	e045      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x02;
 80016a8:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <Set_Character.3+0x418>)
 80016aa:	2202      	movs	r2, #2
 80016ac:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_1;
 80016ae:	4b24      	ldr	r3, [pc, #144]	@ (8001740 <Set_Character.3+0x418>)
 80016b0:	221e      	movs	r2, #30
 80016b2:	70da      	strb	r2, [r3, #3]
				break;
 80016b4:	e03e      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x02;
 80016b6:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <Set_Character.3+0x418>)
 80016b8:	2202      	movs	r2, #2
 80016ba:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_2;
 80016bc:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <Set_Character.3+0x418>)
 80016be:	221f      	movs	r2, #31
 80016c0:	70da      	strb	r2, [r3, #3]
				break;
 80016c2:	e037      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x02;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <Set_Character.3+0x418>)
 80016c6:	2202      	movs	r2, #2
 80016c8:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_3;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <Set_Character.3+0x418>)
 80016cc:	2220      	movs	r2, #32
 80016ce:	70da      	strb	r2, [r3, #3]
				break;
 80016d0:	e030      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x02;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <Set_Character.3+0x418>)
 80016d4:	2202      	movs	r2, #2
 80016d6:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_4;
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <Set_Character.3+0x418>)
 80016da:	2221      	movs	r2, #33	@ 0x21
 80016dc:	70da      	strb	r2, [r3, #3]
				break;
 80016de:	e029      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x02;
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <Set_Character.3+0x418>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_5;
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <Set_Character.3+0x418>)
 80016e8:	2222      	movs	r2, #34	@ 0x22
 80016ea:	70da      	strb	r2, [r3, #3]
				break;
 80016ec:	e022      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x02;
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <Set_Character.3+0x418>)
 80016f0:	2202      	movs	r2, #2
 80016f2:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_6;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <Set_Character.3+0x418>)
 80016f6:	2223      	movs	r2, #35	@ 0x23
 80016f8:	70da      	strb	r2, [r3, #3]
				break;
 80016fa:	e01b      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x02;
 80016fc:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <Set_Character.3+0x418>)
 80016fe:	2202      	movs	r2, #2
 8001700:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_7;
 8001702:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <Set_Character.3+0x418>)
 8001704:	2224      	movs	r2, #36	@ 0x24
 8001706:	70da      	strb	r2, [r3, #3]
				break;
 8001708:	e014      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x02;
 800170a:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <Set_Character.3+0x418>)
 800170c:	2202      	movs	r2, #2
 800170e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_8;
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <Set_Character.3+0x418>)
 8001712:	2225      	movs	r2, #37	@ 0x25
 8001714:	70da      	strb	r2, [r3, #3]
				break;
 8001716:	e00d      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x02;
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <Set_Character.3+0x418>)
 800171a:	2202      	movs	r2, #2
 800171c:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_9;
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <Set_Character.3+0x418>)
 8001720:	2226      	movs	r2, #38	@ 0x26
 8001722:	70da      	strb	r2, [r3, #3]
				break;
 8001724:	e006      	b.n	8001734 <Set_Character.3+0x40c>
					keyBoardHIDsub.MODIFIER=0x02;
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <Set_Character.3+0x418>)
 8001728:	2202      	movs	r2, #2
 800172a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_0;
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <Set_Character.3+0x418>)
 800172e:	2227      	movs	r2, #39	@ 0x27
 8001730:	70da      	strb	r2, [r3, #3]
				break;
 8001732:	bf00      	nop
  }
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20000188 	.word	0x20000188

08001744 <Read_File_Test.1>:
  void Read_File_Test(){
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b093      	sub	sp, #76	@ 0x4c
 8001748:	af00      	add	r7, sp, #0
 800174a:	4664      	mov	r4, ip
 800174c:	f8c7 c004 	str.w	ip, [r7, #4]
	  FILE *f = fopen("Combinations.txt", "r");
 8001750:	4916      	ldr	r1, [pc, #88]	@ (80017ac <Read_File_Test.1+0x68>)
 8001752:	4817      	ldr	r0, [pc, #92]	@ (80017b0 <Read_File_Test.1+0x6c>)
 8001754:	f006 fabe 	bl	8007cd4 <fopen>
 8001758:	6438      	str	r0, [r7, #64]	@ 0x40
	  if(f == NULL){
 800175a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800175c:	2b00      	cmp	r3, #0
 800175e:	d103      	bne.n	8001768 <Read_File_Test.1+0x24>
		 perror("Error encountered");
 8001760:	4814      	ldr	r0, [pc, #80]	@ (80017b4 <Read_File_Test.1+0x70>)
 8001762:	f006 fb65 	bl	8007e30 <perror>
 8001766:	e01e      	b.n	80017a6 <Read_File_Test.1+0x62>
	  if(fgets(line, sizeof(line), f) != NULL){
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800176e:	2132      	movs	r1, #50	@ 0x32
 8001770:	4618      	mov	r0, r3
 8001772:	f006 f95b 	bl	8007a2c <fgets>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d014      	beq.n	80017a6 <Read_File_Test.1+0x62>
		  for(int n = 0; n < sizeof(line); n++){
 800177c:	2300      	movs	r3, #0
 800177e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001780:	e00e      	b.n	80017a0 <Read_File_Test.1+0x5c>
			  Set_Character(line[n]);
 8001782:	f107 020c 	add.w	r2, r7, #12
 8001786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	46a4      	mov	ip, r4
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fdca 	bl	8001328 <Set_Character.3>
			  Send_Character();
 8001794:	46a4      	mov	ip, r4
 8001796:	f7ff fd7b 	bl	8001290 <Send_Character.2>
		  for(int n = 0; n < sizeof(line); n++){
 800179a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800179c:	3301      	adds	r3, #1
 800179e:	647b      	str	r3, [r7, #68]	@ 0x44
 80017a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017a2:	2b31      	cmp	r3, #49	@ 0x31
 80017a4:	d9ed      	bls.n	8001782 <Read_File_Test.1+0x3e>
  }
 80017a6:	374c      	adds	r7, #76	@ 0x4c
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}
 80017ac:	08008b48 	.word	0x08008b48
 80017b0:	08008b4c 	.word	0x08008b4c
 80017b4:	08008b60 	.word	0x08008b60

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	@ 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	2230      	movs	r2, #48	@ 0x30
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f006 fc96 	bl	80080f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <SystemClock_Config+0xc8>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	4a26      	ldr	r2, [pc, #152]	@ (8001880 <SystemClock_Config+0xc8>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ec:	4b24      	ldr	r3, [pc, #144]	@ (8001880 <SystemClock_Config+0xc8>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	4b21      	ldr	r3, [pc, #132]	@ (8001884 <SystemClock_Config+0xcc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a20      	ldr	r2, [pc, #128]	@ (8001884 <SystemClock_Config+0xcc>)
 8001802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <SystemClock_Config+0xcc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001814:	2301      	movs	r3, #1
 8001816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001818:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181e:	2302      	movs	r3, #2
 8001820:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001822:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001828:	2319      	movs	r3, #25
 800182a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800182c:	23c0      	movs	r3, #192	@ 0xc0
 800182e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001830:	2302      	movs	r3, #2
 8001832:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001834:	2304      	movs	r3, #4
 8001836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001838:	f107 0320 	add.w	r3, r7, #32
 800183c:	4618      	mov	r0, r3
 800183e:	f001 ffa9 	bl	8003794 <HAL_RCC_OscConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001848:	f000 f8b6 	bl	80019b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184c:	230f      	movs	r3, #15
 800184e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800185c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	2103      	movs	r1, #3
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fa0b 	bl	8003c84 <HAL_RCC_ClockConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001874:	f000 f8a0 	bl	80019b8 <Error_Handler>
  }
}
 8001878:	bf00      	nop
 800187a:	3750      	adds	r7, #80	@ 0x50
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	@ 0x28
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b41      	ldr	r3, [pc, #260]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a40      	ldr	r2, [pc, #256]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b3e      	ldr	r3, [pc, #248]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b3a      	ldr	r3, [pc, #232]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a39      	ldr	r2, [pc, #228]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b33      	ldr	r3, [pc, #204]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a32      	ldr	r2, [pc, #200]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b30      	ldr	r3, [pc, #192]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b2c      	ldr	r3, [pc, #176]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a2b      	ldr	r2, [pc, #172]	@ (80019a8 <MX_GPIO_Init+0x120>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <MX_GPIO_Init+0x120>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001914:	4825      	ldr	r0, [pc, #148]	@ (80019ac <MX_GPIO_Init+0x124>)
 8001916:	f000 fce9 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	21f0      	movs	r1, #240	@ 0xf0
 800191e:	4824      	ldr	r0, [pc, #144]	@ (80019b0 <MX_GPIO_Init+0x128>)
 8001920:	f000 fce4 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Column5_Pin|Column6_Pin|Column7_Pin|Column8_Pin
 8001924:	2200      	movs	r2, #0
 8001926:	f247 4107 	movw	r1, #29703	@ 0x7407
 800192a:	4822      	ldr	r0, [pc, #136]	@ (80019b4 <MX_GPIO_Init+0x12c>)
 800192c:	f000 fcde 	bl	80022ec <HAL_GPIO_WritePin>
                          |Column11_Pin|Column10_Pin|Column9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4818      	ldr	r0, [pc, #96]	@ (80019ac <MX_GPIO_Init+0x124>)
 800194a:	f000 fb33 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row1_Pin Row2_Pin Row3_Pin Row4_Pin */
  GPIO_InitStruct.Pin = Row1_Pin|Row2_Pin|Row3_Pin|Row4_Pin;
 800194e:	230f      	movs	r3, #15
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001956:	2302      	movs	r3, #2
 8001958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4813      	ldr	r0, [pc, #76]	@ (80019b0 <MX_GPIO_Init+0x128>)
 8001962:	f000 fb27 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Column1_Pin Column2_Pin Column3_Pin Column4_Pin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 8001966:	23f0      	movs	r3, #240	@ 0xf0
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <MX_GPIO_Init+0x128>)
 800197e:	f000 fb19 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Column5_Pin Column6_Pin Column7_Pin Column8_Pin
                           Column11_Pin Column10_Pin Column9_Pin */
  GPIO_InitStruct.Pin = Column5_Pin|Column6_Pin|Column7_Pin|Column8_Pin
 8001982:	f247 4307 	movw	r3, #29703	@ 0x7407
 8001986:	617b      	str	r3, [r7, #20]
                          |Column11_Pin|Column10_Pin|Column9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	@ (80019b4 <MX_GPIO_Init+0x12c>)
 800199c:	f000 fb0a 	bl	8001fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	@ 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400

080019b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <Error_Handler+0x8>

080019c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	4a08      	ldr	r2, [pc, #32]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <NMI_Handler+0x4>

08001a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6a:	f000 f94d 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <OTG_FS_IRQHandler+0x10>)
 8001a7a:	f000 fd94 	bl	80025a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000678 	.word	0x20000678

08001a88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e00a      	b.n	8001ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a9a:	f3af 8000 	nop.w
 8001a9e:	4601      	mov	r1, r0
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	b2ca      	uxtb	r2, r1
 8001aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf0      	blt.n	8001a9a <_read+0x12>
  }

  return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e009      	b.n	8001ae8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	60ba      	str	r2, [r7, #8]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbf1      	blt.n	8001ad4 <_write+0x12>
  }
  return len;
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_close>:

int _close(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b22:	605a      	str	r2, [r3, #4]
  return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_isatty>:

int _isatty(int file)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_open>:

int _open(char *path, int flags, ...)
{
 8001b62:	b40e      	push	{r1, r2, r3}
 8001b64:	b480      	push	{r7}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	b003      	add	sp, #12
 8001b7c:	4770      	bx	lr
	...

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	@ (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	@ (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f006 fcea 	bl	8008588 <__errno>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	@ (8001be4 <_sbrk+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20020000 	.word	0x20020000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	20000190 	.word	0x20000190
 8001be8:	20000cc0 	.word	0x20000cc0

08001bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <SystemInit+0x20>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <SystemInit+0x20>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c14:	f7ff ffea 	bl	8001bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	@ (8001c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	@ (8001c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f006 fca9 	bl	8008594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c42:	f7ff f82d 	bl	8000ca0 <main>
  bx  lr    
 8001c46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001c54:	08009278 	.word	0x08009278
  ldr r2, =_sbss
 8001c58:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001c5c:	20000cbc 	.word	0x20000cbc

08001c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <HAL_Init+0x40>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_Init+0x40>)
 8001c7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <HAL_Init+0x40>)
 8001c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 f94f 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	200f      	movs	r0, #15
 8001c94:	f000 f808 	bl	8001ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff fe94 	bl	80019c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_InitTick+0x54>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_InitTick+0x58>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f967 	bl	8001f9a <HAL_SYSTICK_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00e      	b.n	8001cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d80a      	bhi.n	8001cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f000 f92f 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce8:	4a06      	ldr	r2, [pc, #24]	@ (8001d04 <HAL_InitTick+0x5c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000194 	.word	0x20000194

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000194 	.word	0x20000194

08001d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff ffee 	bl	8001d30 <HAL_GetTick>
 8001d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d005      	beq.n	8001d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <HAL_Delay+0x44>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d6e:	bf00      	nop
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d8f7      	bhi.n	8001d70 <HAL_Delay+0x28>
  {
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4907      	ldr	r1, [pc, #28]	@ (8001e2c <__NVIC_EnableIRQ+0x38>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	@ (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	@ (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff29 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff3e 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff31 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa2 	bl	8001eec <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	e159      	b.n	8002284 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f040 8148 	bne.w	800227e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d005      	beq.n	8002006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002002:	2b02      	cmp	r3, #2
 8002004:	d130      	bne.n	8002068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 0201 	and.w	r2, r3, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b03      	cmp	r3, #3
 8002072:	d017      	beq.n	80020a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d123      	bne.n	80020f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	08da      	lsrs	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3208      	adds	r2, #8
 80020b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	220f      	movs	r2, #15
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	08da      	lsrs	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3208      	adds	r2, #8
 80020f2:	69b9      	ldr	r1, [r7, #24]
 80020f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0203 	and.w	r2, r3, #3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a2 	beq.w	800227e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b57      	ldr	r3, [pc, #348]	@ (800229c <HAL_GPIO_Init+0x2e8>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	4a56      	ldr	r2, [pc, #344]	@ (800229c <HAL_GPIO_Init+0x2e8>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002148:	6453      	str	r3, [r2, #68]	@ 0x44
 800214a:	4b54      	ldr	r3, [pc, #336]	@ (800229c <HAL_GPIO_Init+0x2e8>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002156:	4a52      	ldr	r2, [pc, #328]	@ (80022a0 <HAL_GPIO_Init+0x2ec>)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	220f      	movs	r2, #15
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a49      	ldr	r2, [pc, #292]	@ (80022a4 <HAL_GPIO_Init+0x2f0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x202>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a48      	ldr	r2, [pc, #288]	@ (80022a8 <HAL_GPIO_Init+0x2f4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x1fe>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a47      	ldr	r2, [pc, #284]	@ (80022ac <HAL_GPIO_Init+0x2f8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x1fa>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a46      	ldr	r2, [pc, #280]	@ (80022b0 <HAL_GPIO_Init+0x2fc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x1f6>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a45      	ldr	r2, [pc, #276]	@ (80022b4 <HAL_GPIO_Init+0x300>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x1f2>
 80021a2:	2304      	movs	r3, #4
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_Init+0x204>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x204>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_Init+0x204>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x204>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x204>
 80021b6:	2300      	movs	r3, #0
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c8:	4935      	ldr	r1, [pc, #212]	@ (80022a0 <HAL_GPIO_Init+0x2ec>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d6:	4b38      	ldr	r3, [pc, #224]	@ (80022b8 <HAL_GPIO_Init+0x304>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fa:	4a2f      	ldr	r2, [pc, #188]	@ (80022b8 <HAL_GPIO_Init+0x304>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002200:	4b2d      	ldr	r3, [pc, #180]	@ (80022b8 <HAL_GPIO_Init+0x304>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002224:	4a24      	ldr	r2, [pc, #144]	@ (80022b8 <HAL_GPIO_Init+0x304>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222a:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <HAL_GPIO_Init+0x304>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224e:	4a1a      	ldr	r2, [pc, #104]	@ (80022b8 <HAL_GPIO_Init+0x304>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002254:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <HAL_GPIO_Init+0x304>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002278:	4a0f      	ldr	r2, [pc, #60]	@ (80022b8 <HAL_GPIO_Init+0x304>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	f67f aea2 	bls.w	8001fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3724      	adds	r7, #36	@ 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40013c00 	.word	0x40013c00

080022bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e001      	b.n	80022de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af02      	add	r7, sp, #8
 8002324:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e101      	b.n	8002534 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f005 f810 	bl	8007370 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2203      	movs	r2, #3
 8002354:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800235e:	d102      	bne.n	8002366 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f001 ff59 	bl	8004222 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7c1a      	ldrb	r2, [r3, #16]
 8002378:	f88d 2000 	strb.w	r2, [sp]
 800237c:	3304      	adds	r3, #4
 800237e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002380:	f001 fe38 	bl	8003ff4 <USB_CoreInit>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0ce      	b.n	8002534 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f001 ff51 	bl	8004244 <USB_SetCurrentMode>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0bf      	b.n	8002534 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e04a      	b.n	8002450 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	3315      	adds	r3, #21
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3314      	adds	r3, #20
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	b298      	uxth	r0, r3
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	332e      	adds	r3, #46	@ 0x2e
 80023f6:	4602      	mov	r2, r0
 80023f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3318      	adds	r3, #24
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	331c      	adds	r3, #28
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3320      	adds	r3, #32
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3324      	adds	r3, #36	@ 0x24
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3301      	adds	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	791b      	ldrb	r3, [r3, #4]
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	429a      	cmp	r2, r3
 8002458:	d3af      	bcc.n	80023ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e044      	b.n	80024ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	3301      	adds	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	791b      	ldrb	r3, [r3, #4]
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d3b5      	bcc.n	8002460 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7c1a      	ldrb	r2, [r3, #16]
 80024fc:	f88d 2000 	strb.w	r2, [sp]
 8002500:	3304      	adds	r3, #4
 8002502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002504:	f001 feea 	bl	80042dc <USB_DevInit>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2202      	movs	r2, #2
 8002512:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e00c      	b.n	8002534 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f002 ff34 	bl	800539a <USB_DevDisconnect>

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_PCD_Start+0x1c>
 8002554:	2302      	movs	r3, #2
 8002556:	e022      	b.n	800259e <HAL_PCD_Start+0x62>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002578:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fe3b 	bl	8004200 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fee2 	bl	8005358 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025a6:	b590      	push	{r4, r7, lr}
 80025a8:	b08d      	sub	sp, #52	@ 0x34
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 ffa0 	bl	8005502 <USB_GetMode>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 848c 	bne.w	8002ee2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 ff04 	bl	80053dc <USB_ReadInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 8482 	beq.w	8002ee0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fef1 	bl	80053dc <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d107      	bne.n	8002614 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f002 0202 	and.w	r2, r2, #2
 8002612:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fedf 	bl	80053dc <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b10      	cmp	r3, #16
 8002626:	d161      	bne.n	80026ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0210 	bic.w	r2, r2, #16
 8002636:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f003 020f 	and.w	r2, r3, #15
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	3304      	adds	r3, #4
 8002656:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	0c5b      	lsrs	r3, r3, #17
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	2b02      	cmp	r3, #2
 8002662:	d124      	bne.n	80026ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d035      	beq.n	80026dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800267a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800267e:	b29b      	uxth	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	6a38      	ldr	r0, [r7, #32]
 8002684:	f002 fd16 	bl	80050b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002694:	441a      	add	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a6:	441a      	add	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	615a      	str	r2, [r3, #20]
 80026ac:	e016      	b.n	80026dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	0c5b      	lsrs	r3, r3, #17
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d110      	bne.n	80026dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026c0:	2208      	movs	r2, #8
 80026c2:	4619      	mov	r1, r3
 80026c4:	6a38      	ldr	r0, [r7, #32]
 80026c6:	f002 fcf5 	bl	80050b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026d6:	441a      	add	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0210 	orr.w	r2, r2, #16
 80026ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fe73 	bl	80053dc <USB_ReadInterrupts>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002700:	f040 80a7 	bne.w	8002852 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f002 fe78 	bl	8005402 <USB_ReadDevAllOutEpInterrupt>
 8002712:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002714:	e099      	b.n	800284a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 808e 	beq.w	800283e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f002 fe9c 	bl	800546a <USB_ReadDevOutEPInterrupt>
 8002732:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00c      	beq.n	8002758 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800274a:	461a      	mov	r2, r3
 800274c:	2301      	movs	r3, #1
 800274e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002750:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fe8c 	bl	8003470 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00c      	beq.n	800277c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800276e:	461a      	mov	r2, r3
 8002770:	2308      	movs	r3, #8
 8002772:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002774:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 ff62 	bl	8003640 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002792:	461a      	mov	r2, r3
 8002794:	2310      	movs	r3, #16
 8002796:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d030      	beq.n	8002804 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027aa:	2b80      	cmp	r3, #128	@ 0x80
 80027ac:	d109      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	3304      	adds	r3, #4
 80027d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	78db      	ldrb	r3, [r3, #3]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d108      	bne.n	80027f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2200      	movs	r2, #0
 80027e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f004 febb 	bl	8007568 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027fe:	461a      	mov	r2, r3
 8002800:	2302      	movs	r3, #2
 8002802:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800281a:	461a      	mov	r2, r3
 800281c:	2320      	movs	r3, #32
 800281e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002836:	461a      	mov	r2, r3
 8002838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800283c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	3301      	adds	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800284a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284c:	2b00      	cmp	r3, #0
 800284e:	f47f af62 	bne.w	8002716 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f002 fdc0 	bl	80053dc <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002862:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002866:	f040 80db 	bne.w	8002a20 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fde1 	bl	8005436 <USB_ReadDevAllInEpInterrupt>
 8002874:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800287a:	e0cd      	b.n	8002a18 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800287c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80c2 	beq.w	8002a0c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f002 fe07 	bl	80054a6 <USB_ReadDevInEPInterrupt>
 8002898:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d057      	beq.n	8002954 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	2201      	movs	r2, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69f9      	ldr	r1, [r7, #28]
 80028c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028c4:	4013      	ands	r3, r2
 80028c6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028d4:	461a      	mov	r2, r3
 80028d6:	2301      	movs	r3, #1
 80028d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	799b      	ldrb	r3, [r3, #6]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d132      	bne.n	8002948 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3320      	adds	r3, #32
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4403      	add	r3, r0
 8002902:	331c      	adds	r3, #28
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4419      	add	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	3320      	adds	r3, #32
 8002918:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	2b00      	cmp	r3, #0
 800291e:	d113      	bne.n	8002948 <HAL_PCD_IRQHandler+0x3a2>
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	3324      	adds	r3, #36	@ 0x24
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d108      	bne.n	8002948 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002940:	461a      	mov	r2, r3
 8002942:	2101      	movs	r1, #1
 8002944:	f002 fe0e 	bl	8005564 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f004 fd8f 	bl	8007472 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800296a:	461a      	mov	r2, r3
 800296c:	2308      	movs	r3, #8
 800296e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002986:	461a      	mov	r2, r3
 8002988:	2310      	movs	r3, #16
 800298a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029a2:	461a      	mov	r2, r3
 80029a4:	2340      	movs	r3, #64	@ 0x40
 80029a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d023      	beq.n	80029fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029b4:	6a38      	ldr	r0, [r7, #32]
 80029b6:	f001 fdf5 	bl	80045a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3310      	adds	r3, #16
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	78db      	ldrb	r3, [r3, #3]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d108      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f004 fdd2 	bl	800758c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029f4:	461a      	mov	r2, r3
 80029f6:	2302      	movs	r3, #2
 80029f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fca5 	bl	8003356 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	3301      	adds	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f47f af2e 	bne.w	800287c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fcd9 	bl	80053dc <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a34:	d122      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d108      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fe8c 	bl	800377c <HAL_PCDEx_LPM_Callback>
 8002a64:	e002      	b.n	8002a6c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f004 fd70 	bl	800754c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fcab 	bl	80053dc <USB_ReadInterrupts>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a90:	d112      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f004 fd2c 	bl	8007500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ab6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 fc8d 	bl	80053dc <USB_ReadInterrupts>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002acc:	f040 80b7 	bne.w	8002c3e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2110      	movs	r1, #16
 8002aea:	4618      	mov	r0, r3
 8002aec:	f001 fd5a 	bl	80045a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af4:	e046      	b.n	8002b84 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b02:	461a      	mov	r2, r3
 8002b04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b1a:	0151      	lsls	r1, r2, #5
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	440a      	add	r2, r1
 8002b20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b36:	461a      	mov	r2, r3
 8002b38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b4e:	0151      	lsls	r1, r2, #5
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	440a      	add	r2, r1
 8002b54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b6e:	0151      	lsls	r1, r2, #5
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	440a      	add	r2, r1
 8002b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b80:	3301      	adds	r3, #1
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	791b      	ldrb	r3, [r3, #4]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d3b2      	bcc.n	8002af6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b9e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ba2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7bdb      	ldrb	r3, [r3, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d016      	beq.n	8002bda <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bbc:	f043 030b 	orr.w	r3, r3, #11
 8002bc0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bd2:	f043 030b 	orr.w	r3, r3, #11
 8002bd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bd8:	e015      	b.n	8002c06 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002be8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002bf0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c00:	f043 030b 	orr.w	r3, r3, #11
 8002c04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c14:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f002 fc9b 	bl	8005564 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 fbca 	bl	80053dc <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c52:	d123      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f002 fc60 	bl	800551e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 fd17 	bl	8004696 <USB_GetDevSpeed>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681c      	ldr	r4, [r3, #0]
 8002c74:	f001 f9b2 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8002c78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4620      	mov	r0, r4
 8002c82:	f001 fa1b 	bl	80040bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f004 fc1b 	bl	80074c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f002 fb9b 	bl	80053dc <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d10a      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f004 fbf8 	bl	80074a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f002 0208 	and.w	r2, r2, #8
 8002cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fb86 	bl	80053dc <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd6:	2b80      	cmp	r3, #128	@ 0x80
 8002cd8:	d123      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cea:	e014      	b.n	8002d16 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 faf2 	bl	80032f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	3301      	adds	r3, #1
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	791b      	ldrb	r3, [r3, #4]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d3e4      	bcc.n	8002cec <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 fb58 	bl	80053dc <USB_ReadInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d36:	d13c      	bne.n	8002db2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d38:	2301      	movs	r3, #1
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3c:	e02b      	b.n	8002d96 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3318      	adds	r3, #24
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d115      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	da12      	bge.n	8002d90 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3317      	adds	r3, #23
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fab2 	bl	80032f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	3301      	adds	r3, #1
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	791b      	ldrb	r3, [r3, #4]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d3cd      	bcc.n	8002d3e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 fb10 	bl	80053dc <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dc6:	d156      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dc8:	2301      	movs	r3, #1
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dcc:	e045      	b.n	8002e5a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d12e      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002df6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da2b      	bge.n	8002e54 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e08:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d121      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e50:	6053      	str	r3, [r2, #4]
            break;
 8002e52:	e008      	b.n	8002e66 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	3301      	adds	r3, #1
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	791b      	ldrb	r3, [r3, #4]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d3b3      	bcc.n	8002dce <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f002 faae 	bl	80053dc <USB_ReadInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f004 fb8f 	bl	80075b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 fa98 	bl	80053dc <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d115      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f004 fb7f 	bl	80075cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	e000      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002ee0:	bf00      	nop
    }
  }
}
 8002ee2:	3734      	adds	r7, #52	@ 0x34
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}

08002ee8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_PCD_SetAddress+0x1a>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e012      	b.n	8002f28 <HAL_PCD_SetAddress+0x40>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 f9f7 	bl	800530c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	70fb      	strb	r3, [r7, #3]
 8002f42:	460b      	mov	r3, r1
 8002f44:	803b      	strh	r3, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	da0f      	bge.n	8002f76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 020f 	and.w	r2, r3, #15
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	3310      	adds	r3, #16
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	705a      	strb	r2, [r3, #1]
 8002f74:	e00f      	b.n	8002f96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002fa2:	883b      	ldrh	r3, [r7, #0]
 8002fa4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	78ba      	ldrb	r2, [r7, #2]
 8002fb0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fc4:	78bb      	ldrb	r3, [r7, #2]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d102      	bne.n	8002fd0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_PCD_EP_Open+0xae>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e00e      	b.n	8002ffc <HAL_PCD_EP_Open+0xcc>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 fb77 	bl	80046e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003014:	2b00      	cmp	r3, #0
 8003016:	da0f      	bge.n	8003038 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	f003 020f 	and.w	r2, r3, #15
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	3310      	adds	r3, #16
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4413      	add	r3, r2
 800302c:	3304      	adds	r3, #4
 800302e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	705a      	strb	r2, [r3, #1]
 8003036:	e00f      	b.n	8003058 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	f003 020f 	and.w	r2, r3, #15
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	3304      	adds	r3, #4
 8003050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	b2da      	uxtb	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_PCD_EP_Close+0x6e>
 800306e:	2302      	movs	r3, #2
 8003070:	e00e      	b.n	8003090 <HAL_PCD_EP_Close+0x8c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	4618      	mov	r0, r3
 8003082:	f001 fbb5 	bl	80047f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	460b      	mov	r3, r1
 80030a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	7afb      	ldrb	r3, [r7, #11]
 80030aa:	f003 020f 	and.w	r2, r3, #15
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	3304      	adds	r3, #4
 80030c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2200      	movs	r2, #0
 80030d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030da:	7afb      	ldrb	r3, [r7, #11]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	799b      	ldrb	r3, [r3, #6]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d102      	bne.n	80030f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	799b      	ldrb	r3, [r3, #6]
 80030fc:	461a      	mov	r2, r3
 80030fe:	6979      	ldr	r1, [r7, #20]
 8003100:	f001 fc52 	bl	80049a8 <USB_EPStartXfer>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	460b      	mov	r3, r1
 800311c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	f003 020f 	and.w	r2, r3, #15
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	3310      	adds	r3, #16
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2201      	movs	r2, #1
 800314c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800314e:	7afb      	ldrb	r3, [r7, #11]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	b2da      	uxtb	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	799b      	ldrb	r3, [r3, #6]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	799b      	ldrb	r3, [r3, #6]
 8003170:	461a      	mov	r2, r3
 8003172:	6979      	ldr	r1, [r7, #20]
 8003174:	f001 fc18 	bl	80049a8 <USB_EPStartXfer>

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	7912      	ldrb	r2, [r2, #4]
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e04f      	b.n	8003240 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	da0f      	bge.n	80031c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 020f 	and.w	r2, r3, #15
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	3310      	adds	r3, #16
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	3304      	adds	r3, #4
 80031be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	705a      	strb	r2, [r3, #1]
 80031c6:	e00d      	b.n	80031e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	3304      	adds	r3, #4
 80031dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_PCD_EP_SetStall+0x82>
 8003200:	2302      	movs	r3, #2
 8003202:	e01d      	b.n	8003240 <HAL_PCD_EP_SetStall+0xbe>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68f9      	ldr	r1, [r7, #12]
 8003212:	4618      	mov	r0, r3
 8003214:	f001 ffa6 	bl	8005164 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7999      	ldrb	r1, [r3, #6]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003230:	461a      	mov	r2, r3
 8003232:	f002 f997 	bl	8005564 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	7912      	ldrb	r2, [r2, #4]
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e042      	b.n	80032ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800326a:	2b00      	cmp	r3, #0
 800326c:	da0f      	bge.n	800328e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 020f 	and.w	r2, r3, #15
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	3310      	adds	r3, #16
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	705a      	strb	r2, [r3, #1]
 800328c:	e00f      	b.n	80032ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	3304      	adds	r3, #4
 80032a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_PCD_EP_ClrStall+0x86>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e00e      	b.n	80032ec <HAL_PCD_EP_ClrStall+0xa4>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 ffaf 	bl	8005240 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003304:	2b00      	cmp	r3, #0
 8003306:	da0c      	bge.n	8003322 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	3310      	adds	r3, #16
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e00c      	b.n	800333c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3304      	adds	r3, #4
 800333a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	4618      	mov	r0, r3
 8003344:	f001 fdce 	bl	8004ee4 <USB_EPStopXfer>
 8003348:	4603      	mov	r3, r0
 800334a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800334c:	7afb      	ldrb	r3, [r7, #11]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b08a      	sub	sp, #40	@ 0x28
 800335a:	af02      	add	r7, sp, #8
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	3310      	adds	r3, #16
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	3304      	adds	r3, #4
 800337c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	429a      	cmp	r2, r3
 8003388:	d901      	bls.n	800338e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e06b      	b.n	8003466 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d902      	bls.n	80033aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3303      	adds	r3, #3
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033b2:	e02a      	b.n	800340a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d902      	bls.n	80033d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	3303      	adds	r3, #3
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68d9      	ldr	r1, [r3, #12]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	4603      	mov	r3, r0
 80033ec:	6978      	ldr	r0, [r7, #20]
 80033ee:	f001 fe23 	bl	8005038 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	441a      	add	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	441a      	add	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	429a      	cmp	r2, r3
 800341e:	d809      	bhi.n	8003434 <PCD_WriteEmptyTxFifo+0xde>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003428:	429a      	cmp	r2, r3
 800342a:	d203      	bcs.n	8003434 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1bf      	bne.n	80033b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	d811      	bhi.n	8003464 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	2201      	movs	r2, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	43db      	mvns	r3, r3
 800345a:	6939      	ldr	r1, [r7, #16]
 800345c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003460:	4013      	ands	r3, r2
 8003462:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	333c      	adds	r3, #60	@ 0x3c
 8003488:	3304      	adds	r3, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	4413      	add	r3, r2
 8003496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	799b      	ldrb	r3, [r3, #6]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d17b      	bne.n	800359e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d015      	beq.n	80034dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	4a61      	ldr	r2, [pc, #388]	@ (8003638 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	f240 80b9 	bls.w	800362c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80b3 	beq.w	800362c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d2:	461a      	mov	r2, r3
 80034d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034d8:	6093      	str	r3, [r2, #8]
 80034da:	e0a7      	b.n	800362c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f2:	461a      	mov	r2, r3
 80034f4:	2320      	movs	r3, #32
 80034f6:	6093      	str	r3, [r2, #8]
 80034f8:	e098      	b.n	800362c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 8093 	bne.w	800362c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	4a4b      	ldr	r2, [pc, #300]	@ (8003638 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d90f      	bls.n	800352e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800352a:	6093      	str	r3, [r2, #8]
 800352c:	e07e      	b.n	800362c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	3304      	adds	r3, #4
 8003542:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	0159      	lsls	r1, r3, #5
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	440b      	add	r3, r1
 8003550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355a:	1ad2      	subs	r2, r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d114      	bne.n	8003590 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003578:	461a      	mov	r2, r3
 800357a:	2101      	movs	r1, #1
 800357c:	f001 fff2 	bl	8005564 <USB_EP0_OutStart>
 8003580:	e006      	b.n	8003590 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	441a      	add	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f003 ff50 	bl	800743c <HAL_PCD_DataOutStageCallback>
 800359c:	e046      	b.n	800362c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4a26      	ldr	r2, [pc, #152]	@ (800363c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d124      	bne.n	80035f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035bc:	461a      	mov	r2, r3
 80035be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035c2:	6093      	str	r3, [r2, #8]
 80035c4:	e032      	b.n	800362c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035dc:	461a      	mov	r2, r3
 80035de:	2320      	movs	r3, #32
 80035e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	4619      	mov	r1, r3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f003 ff27 	bl	800743c <HAL_PCD_DataOutStageCallback>
 80035ee:	e01d      	b.n	800362c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d114      	bne.n	8003620 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d108      	bne.n	8003620 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003618:	461a      	mov	r2, r3
 800361a:	2100      	movs	r1, #0
 800361c:	f001 ffa2 	bl	8005564 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f003 ff08 	bl	800743c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	4f54300a 	.word	0x4f54300a
 800363c:	4f54310a 	.word	0x4f54310a

08003640 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	333c      	adds	r3, #60	@ 0x3c
 8003658:	3304      	adds	r3, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4a15      	ldr	r2, [pc, #84]	@ (80036c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d90e      	bls.n	8003694 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800367c:	2b00      	cmp	r3, #0
 800367e:	d009      	beq.n	8003694 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800368c:	461a      	mov	r2, r3
 800368e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003692:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f003 febf 	bl	8007418 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a0a      	ldr	r2, [pc, #40]	@ (80036c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d90c      	bls.n	80036bc <PCD_EP_OutSetupPacket_int+0x7c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	799b      	ldrb	r3, [r3, #6]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d108      	bne.n	80036bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036b4:	461a      	mov	r2, r3
 80036b6:	2101      	movs	r1, #1
 80036b8:	f001 ff54 	bl	8005564 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	4f54300a 	.word	0x4f54300a

080036cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
 80036d8:	4613      	mov	r3, r2
 80036da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036ea:	883b      	ldrh	r3, [r7, #0]
 80036ec:	0419      	lsls	r1, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80036f8:	e028      	b.n	800374c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	4413      	add	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e00d      	b.n	800372a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	3340      	adds	r3, #64	@ 0x40
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4413      	add	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	3301      	adds	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	3b01      	subs	r3, #1
 8003730:	429a      	cmp	r2, r3
 8003732:	d3ec      	bcc.n	800370e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003734:	883b      	ldrh	r3, [r7, #0]
 8003736:	0418      	lsls	r0, r3, #16
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6819      	ldr	r1, [r3, #0]
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	3b01      	subs	r3, #1
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	4302      	orrs	r2, r0
 8003744:	3340      	adds	r3, #64	@ 0x40
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	887a      	ldrh	r2, [r7, #2]
 800376c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e267      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d075      	beq.n	800389e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037b2:	4b88      	ldr	r3, [pc, #544]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d00c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037be:	4b85      	ldr	r3, [pc, #532]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d112      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ca:	4b82      	ldr	r3, [pc, #520]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	4b7e      	ldr	r3, [pc, #504]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d05b      	beq.n	800389c <HAL_RCC_OscConfig+0x108>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d157      	bne.n	800389c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e242      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f8:	d106      	bne.n	8003808 <HAL_RCC_OscConfig+0x74>
 80037fa:	4b76      	ldr	r3, [pc, #472]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a75      	ldr	r2, [pc, #468]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e01d      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x98>
 8003812:	4b70      	ldr	r3, [pc, #448]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6f      	ldr	r2, [pc, #444]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b6d      	ldr	r3, [pc, #436]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6c      	ldr	r2, [pc, #432]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 800382c:	4b69      	ldr	r3, [pc, #420]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a68      	ldr	r2, [pc, #416]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b66      	ldr	r3, [pc, #408]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a65      	ldr	r2, [pc, #404]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fa70 	bl	8001d30 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe fa6c 	bl	8001d30 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	@ 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e207      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b5b      	ldr	r3, [pc, #364]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0xc0>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fe fa5c 	bl	8001d30 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe fa58 	bl	8001d30 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	@ 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1f3      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	4b51      	ldr	r3, [pc, #324]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0xe8>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d063      	beq.n	8003972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038aa:	4b4a      	ldr	r3, [pc, #296]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b47      	ldr	r3, [pc, #284]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d11c      	bne.n	80038fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c2:	4b44      	ldr	r3, [pc, #272]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	4b41      	ldr	r3, [pc, #260]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x152>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1c7      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b3b      	ldr	r3, [pc, #236]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4937      	ldr	r1, [pc, #220]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e03a      	b.n	8003972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b34      	ldr	r3, [pc, #208]	@ (80039d8 <HAL_RCC_OscConfig+0x244>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fe fa11 	bl	8001d30 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003912:	f7fe fa0d 	bl	8001d30 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1a8      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	4b2b      	ldr	r3, [pc, #172]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	4b28      	ldr	r3, [pc, #160]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4925      	ldr	r1, [pc, #148]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003946:	4b24      	ldr	r3, [pc, #144]	@ (80039d8 <HAL_RCC_OscConfig+0x244>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe f9f0 	bl	8001d30 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003954:	f7fe f9ec 	bl	8001d30 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e187      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	4b1b      	ldr	r3, [pc, #108]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d036      	beq.n	80039ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b15      	ldr	r3, [pc, #84]	@ (80039dc <HAL_RCC_OscConfig+0x248>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fe f9d0 	bl	8001d30 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003994:	f7fe f9cc 	bl	8001d30 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e167      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_RCC_OscConfig+0x240>)
 80039a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x200>
 80039b2:	e01b      	b.n	80039ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b4:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <HAL_RCC_OscConfig+0x248>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7fe f9b9 	bl	8001d30 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	e00e      	b.n	80039e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c2:	f7fe f9b5 	bl	8001d30 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d907      	bls.n	80039e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e150      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	42470000 	.word	0x42470000
 80039dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	4b88      	ldr	r3, [pc, #544]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ea      	bne.n	80039c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8097 	beq.w	8003b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b81      	ldr	r3, [pc, #516]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	4a7c      	ldr	r2, [pc, #496]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b77      	ldr	r3, [pc, #476]	@ (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a36:	4b74      	ldr	r3, [pc, #464]	@ (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a73      	ldr	r2, [pc, #460]	@ (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7fe f975 	bl	8001d30 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fe f971 	bl	8001d30 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e10c      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x2ea>
 8003a70:	4b64      	ldr	r3, [pc, #400]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a74:	4a63      	ldr	r2, [pc, #396]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7c:	e01c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x324>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x30c>
 8003a86:	4b5f      	ldr	r3, [pc, #380]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a92:	4b5c      	ldr	r3, [pc, #368]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	4a5b      	ldr	r2, [pc, #364]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0x324>
 8003aa0:	4b58      	ldr	r3, [pc, #352]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa4:	4a57      	ldr	r2, [pc, #348]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aac:	4b55      	ldr	r3, [pc, #340]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab0:	4a54      	ldr	r2, [pc, #336]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	f023 0304 	bic.w	r3, r3, #4
 8003ab6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fe f936 	bl	8001d30 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fe f932 	bl	8001d30 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0cb      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	4b49      	ldr	r3, [pc, #292]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ee      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x334>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aec:	f7fe f920 	bl	8001d30 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7fe f91c 	bl	8001d30 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0b5      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ee      	bne.n	8003af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1c:	4b39      	ldr	r3, [pc, #228]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	4a38      	ldr	r2, [pc, #224]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80a1 	beq.w	8003c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b32:	4b34      	ldr	r3, [pc, #208]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d05c      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d141      	bne.n	8003bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b31      	ldr	r3, [pc, #196]	@ (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe f8f0 	bl	8001d30 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fe f8ec 	bl	8001d30 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e087      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	4b27      	ldr	r3, [pc, #156]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	041b      	lsls	r3, r3, #16
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	491b      	ldr	r1, [pc, #108]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fe f8c5 	bl	8001d30 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fe f8c1 	bl	8001d30 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e05c      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbc:	4b11      	ldr	r3, [pc, #68]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x416>
 8003bc8:	e054      	b.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bca:	4b10      	ldr	r3, [pc, #64]	@ (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe f8ae 	bl	8001d30 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fe f8aa 	bl	8001d30 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e045      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x444>
 8003bf6:	e03d      	b.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e038      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	@ (8003c80 <HAL_RCC_OscConfig+0x4ec>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d028      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d121      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d11a      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c40:	4013      	ands	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d111      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d107      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0cc      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b68      	ldr	r3, [pc, #416]	@ (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d90c      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b65      	ldr	r3, [pc, #404]	@ (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	4b63      	ldr	r3, [pc, #396]	@ (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0b8      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd8:	4b59      	ldr	r3, [pc, #356]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4a58      	ldr	r2, [pc, #352]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ce2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf0:	4b53      	ldr	r3, [pc, #332]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a52      	ldr	r2, [pc, #328]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfc:	4b50      	ldr	r3, [pc, #320]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	494d      	ldr	r1, [pc, #308]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d044      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b47      	ldr	r3, [pc, #284]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d119      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e07f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d003      	beq.n	8003d42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d42:	4b3f      	ldr	r3, [pc, #252]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e06f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d52:	4b3b      	ldr	r3, [pc, #236]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e067      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	4b37      	ldr	r3, [pc, #220]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4934      	ldr	r1, [pc, #208]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d74:	f7fd ffdc 	bl	8001d30 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7c:	f7fd ffd8 	bl	8001d30 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e04f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	4b2b      	ldr	r3, [pc, #172]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 020c 	and.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1eb      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da4:	4b25      	ldr	r3, [pc, #148]	@ (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d20c      	bcs.n	8003dcc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b22      	ldr	r3, [pc, #136]	@ (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b20      	ldr	r3, [pc, #128]	@ (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e032      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd8:	4b19      	ldr	r3, [pc, #100]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4916      	ldr	r1, [pc, #88]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df6:	4b12      	ldr	r3, [pc, #72]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	490e      	ldr	r1, [pc, #56]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e0a:	f000 f821 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	490a      	ldr	r1, [pc, #40]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c0>)
 8003e1c:	5ccb      	ldrb	r3, [r1, r3]
 8003e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e22:	4a09      	ldr	r2, [pc, #36]	@ (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e26:	4b09      	ldr	r3, [pc, #36]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd ff3c 	bl	8001ca8 <HAL_InitTick>

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023c00 	.word	0x40023c00
 8003e40:	40023800 	.word	0x40023800
 8003e44:	08008bbc 	.word	0x08008bbc
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	20000004 	.word	0x20000004

08003e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e54:	b090      	sub	sp, #64	@ 0x40
 8003e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e68:	4b59      	ldr	r3, [pc, #356]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d00d      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x40>
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	f200 80a1 	bhi.w	8003fbc <HAL_RCC_GetSysClockFreq+0x16c>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x34>
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e82:	e09b      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e84:	4b53      	ldr	r3, [pc, #332]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e88:	e09b      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e8a:	4b53      	ldr	r3, [pc, #332]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e8e:	e098      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e90:	4b4f      	ldr	r3, [pc, #316]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d028      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	099b      	lsrs	r3, r3, #6
 8003eac:	2200      	movs	r2, #0
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4b47      	ldr	r3, [pc, #284]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ebc:	fb03 f201 	mul.w	r2, r3, r1
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	fb00 f303 	mul.w	r3, r0, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	4a43      	ldr	r2, [pc, #268]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eca:	fba0 1202 	umull	r1, r2, r0, r2
 8003ece:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ed0:	460a      	mov	r2, r1
 8003ed2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ed6:	4413      	add	r3, r2
 8003ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003edc:	2200      	movs	r2, #0
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	61fa      	str	r2, [r7, #28]
 8003ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003eea:	f7fc f9d1 	bl	8000290 <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ef6:	e053      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef8:	4b35      	ldr	r3, [pc, #212]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	099b      	lsrs	r3, r3, #6
 8003efe:	2200      	movs	r2, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	617a      	str	r2, [r7, #20]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f0a:	f04f 0b00 	mov.w	fp, #0
 8003f0e:	4652      	mov	r2, sl
 8003f10:	465b      	mov	r3, fp
 8003f12:	f04f 0000 	mov.w	r0, #0
 8003f16:	f04f 0100 	mov.w	r1, #0
 8003f1a:	0159      	lsls	r1, r3, #5
 8003f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f20:	0150      	lsls	r0, r2, #5
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	ebb2 080a 	subs.w	r8, r2, sl
 8003f2a:	eb63 090b 	sbc.w	r9, r3, fp
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f42:	ebb2 0408 	subs.w	r4, r2, r8
 8003f46:	eb63 0509 	sbc.w	r5, r3, r9
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	00eb      	lsls	r3, r5, #3
 8003f54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f58:	00e2      	lsls	r2, r4, #3
 8003f5a:	4614      	mov	r4, r2
 8003f5c:	461d      	mov	r5, r3
 8003f5e:	eb14 030a 	adds.w	r3, r4, sl
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	eb45 030b 	adc.w	r3, r5, fp
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f76:	4629      	mov	r1, r5
 8003f78:	028b      	lsls	r3, r1, #10
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f80:	4621      	mov	r1, r4
 8003f82:	028a      	lsls	r2, r1, #10
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	60fa      	str	r2, [r7, #12]
 8003f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f94:	f7fc f97c 	bl	8000290 <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	3301      	adds	r3, #1
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003fb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fba:	e002      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3740      	adds	r7, #64	@ 0x40
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	017d7840 	.word	0x017d7840

08003fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	@ (8003ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000000 	.word	0x20000000

08003ff4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	f107 001c 	add.w	r0, r7, #28
 8004002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004006:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800400a:	2b01      	cmp	r3, #1
 800400c:	d123      	bne.n	8004056 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004012:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004036:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800403a:	2b01      	cmp	r3, #1
 800403c:	d105      	bne.n	800404a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f001 fae8 	bl	8005620 <USB_CoreReset>
 8004050:	4603      	mov	r3, r0
 8004052:	73fb      	strb	r3, [r7, #15]
 8004054:	e01b      	b.n	800408e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f001 fadc 	bl	8005620 <USB_CoreReset>
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800406c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004080:	e005      	b.n	800408e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004086:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800408e:	7fbb      	ldrb	r3, [r7, #30]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d10b      	bne.n	80040ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f043 0206 	orr.w	r2, r3, #6
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040b8:	b004      	add	sp, #16
 80040ba:	4770      	bx	lr

080040bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d165      	bne.n	800419c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a41      	ldr	r2, [pc, #260]	@ (80041d8 <USB_SetTurnaroundTime+0x11c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d906      	bls.n	80040e6 <USB_SetTurnaroundTime+0x2a>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4a40      	ldr	r2, [pc, #256]	@ (80041dc <USB_SetTurnaroundTime+0x120>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d202      	bcs.n	80040e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040e0:	230f      	movs	r3, #15
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	e062      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4a3c      	ldr	r2, [pc, #240]	@ (80041dc <USB_SetTurnaroundTime+0x120>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d306      	bcc.n	80040fc <USB_SetTurnaroundTime+0x40>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4a3b      	ldr	r2, [pc, #236]	@ (80041e0 <USB_SetTurnaroundTime+0x124>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d202      	bcs.n	80040fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040f6:	230e      	movs	r3, #14
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	e057      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4a38      	ldr	r2, [pc, #224]	@ (80041e0 <USB_SetTurnaroundTime+0x124>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d306      	bcc.n	8004112 <USB_SetTurnaroundTime+0x56>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4a37      	ldr	r2, [pc, #220]	@ (80041e4 <USB_SetTurnaroundTime+0x128>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d202      	bcs.n	8004112 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800410c:	230d      	movs	r3, #13
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e04c      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4a33      	ldr	r2, [pc, #204]	@ (80041e4 <USB_SetTurnaroundTime+0x128>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d306      	bcc.n	8004128 <USB_SetTurnaroundTime+0x6c>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4a32      	ldr	r2, [pc, #200]	@ (80041e8 <USB_SetTurnaroundTime+0x12c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d802      	bhi.n	8004128 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004122:	230c      	movs	r3, #12
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	e041      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4a2f      	ldr	r2, [pc, #188]	@ (80041e8 <USB_SetTurnaroundTime+0x12c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d906      	bls.n	800413e <USB_SetTurnaroundTime+0x82>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4a2e      	ldr	r2, [pc, #184]	@ (80041ec <USB_SetTurnaroundTime+0x130>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d802      	bhi.n	800413e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004138:	230b      	movs	r3, #11
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e036      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4a2a      	ldr	r2, [pc, #168]	@ (80041ec <USB_SetTurnaroundTime+0x130>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d906      	bls.n	8004154 <USB_SetTurnaroundTime+0x98>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4a29      	ldr	r2, [pc, #164]	@ (80041f0 <USB_SetTurnaroundTime+0x134>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d802      	bhi.n	8004154 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800414e:	230a      	movs	r3, #10
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e02b      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4a26      	ldr	r2, [pc, #152]	@ (80041f0 <USB_SetTurnaroundTime+0x134>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d906      	bls.n	800416a <USB_SetTurnaroundTime+0xae>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4a25      	ldr	r2, [pc, #148]	@ (80041f4 <USB_SetTurnaroundTime+0x138>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d202      	bcs.n	800416a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004164:	2309      	movs	r3, #9
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e020      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a21      	ldr	r2, [pc, #132]	@ (80041f4 <USB_SetTurnaroundTime+0x138>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d306      	bcc.n	8004180 <USB_SetTurnaroundTime+0xc4>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4a20      	ldr	r2, [pc, #128]	@ (80041f8 <USB_SetTurnaroundTime+0x13c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d802      	bhi.n	8004180 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800417a:	2308      	movs	r3, #8
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e015      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a1d      	ldr	r2, [pc, #116]	@ (80041f8 <USB_SetTurnaroundTime+0x13c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d906      	bls.n	8004196 <USB_SetTurnaroundTime+0xda>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4a1c      	ldr	r2, [pc, #112]	@ (80041fc <USB_SetTurnaroundTime+0x140>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d202      	bcs.n	8004196 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004190:	2307      	movs	r3, #7
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e00a      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004196:	2306      	movs	r3, #6
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e007      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041a2:	2309      	movs	r3, #9
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e001      	b.n	80041ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041a8:	2309      	movs	r3, #9
 80041aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	00d8acbf 	.word	0x00d8acbf
 80041dc:	00e4e1c0 	.word	0x00e4e1c0
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	01067380 	.word	0x01067380
 80041e8:	011a499f 	.word	0x011a499f
 80041ec:	01312cff 	.word	0x01312cff
 80041f0:	014ca43f 	.word	0x014ca43f
 80041f4:	016e3600 	.word	0x016e3600
 80041f8:	01a6ab1f 	.word	0x01a6ab1f
 80041fc:	01e84800 	.word	0x01e84800

08004200 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f043 0201 	orr.w	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d115      	bne.n	8004292 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004272:	200a      	movs	r0, #10
 8004274:	f7fd fd68 	bl	8001d48 <HAL_Delay>
      ms += 10U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	330a      	adds	r3, #10
 800427c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f001 f93f 	bl	8005502 <USB_GetMode>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d01e      	beq.n	80042c8 <USB_SetCurrentMode+0x84>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2bc7      	cmp	r3, #199	@ 0xc7
 800428e:	d9f0      	bls.n	8004272 <USB_SetCurrentMode+0x2e>
 8004290:	e01a      	b.n	80042c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d115      	bne.n	80042c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042a4:	200a      	movs	r0, #10
 80042a6:	f7fd fd4f 	bl	8001d48 <HAL_Delay>
      ms += 10U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	330a      	adds	r3, #10
 80042ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f001 f926 	bl	8005502 <USB_GetMode>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <USB_SetCurrentMode+0x84>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2bc7      	cmp	r3, #199	@ 0xc7
 80042c0:	d9f0      	bls.n	80042a4 <USB_SetCurrentMode+0x60>
 80042c2:	e001      	b.n	80042c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e005      	b.n	80042d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80042cc:	d101      	bne.n	80042d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042dc:	b084      	sub	sp, #16
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80042ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	e009      	b.n	8004310 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	3340      	adds	r3, #64	@ 0x40
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	2200      	movs	r2, #0
 8004308:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	3301      	adds	r3, #1
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b0e      	cmp	r3, #14
 8004314:	d9f2      	bls.n	80042fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004316:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11c      	bne.n	8004358 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004336:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004342:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	639a      	str	r2, [r3, #56]	@ 0x38
 8004356:	e00b      	b.n	8004370 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004368:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004376:	461a      	mov	r2, r3
 8004378:	2300      	movs	r3, #0
 800437a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800437c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10d      	bne.n	80043a0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004388:	2b00      	cmp	r3, #0
 800438a:	d104      	bne.n	8004396 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800438c:	2100      	movs	r1, #0
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f968 	bl	8004664 <USB_SetDevSpeed>
 8004394:	e008      	b.n	80043a8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004396:	2101      	movs	r1, #1
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f963 	bl	8004664 <USB_SetDevSpeed>
 800439e:	e003      	b.n	80043a8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043a0:	2103      	movs	r1, #3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f95e 	bl	8004664 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043a8:	2110      	movs	r1, #16
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8fa 	bl	80045a4 <USB_FlushTxFifo>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f924 	bl	8004608 <USB_FlushRxFifo>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d0:	461a      	mov	r2, r3
 80043d2:	2300      	movs	r3, #0
 80043d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043dc:	461a      	mov	r2, r3
 80043de:	2300      	movs	r3, #0
 80043e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e8:	461a      	mov	r2, r3
 80043ea:	2300      	movs	r3, #0
 80043ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e043      	b.n	800447c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004406:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800440a:	d118      	bne.n	800443e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800441e:	461a      	mov	r2, r3
 8004420:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e013      	b.n	8004450 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004434:	461a      	mov	r2, r3
 8004436:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	e008      	b.n	8004450 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444a:	461a      	mov	r2, r3
 800444c:	2300      	movs	r3, #0
 800444e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800445c:	461a      	mov	r2, r3
 800445e:	2300      	movs	r3, #0
 8004460:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800446e:	461a      	mov	r2, r3
 8004470:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004474:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	3301      	adds	r3, #1
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004480:	461a      	mov	r2, r3
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4293      	cmp	r3, r2
 8004486:	d3b5      	bcc.n	80043f4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e043      	b.n	8004516 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044a4:	d118      	bne.n	80044d8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b8:	461a      	mov	r2, r3
 80044ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e013      	b.n	80044ea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ce:	461a      	mov	r2, r3
 80044d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e008      	b.n	80044ea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e4:	461a      	mov	r2, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f6:	461a      	mov	r2, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004508:	461a      	mov	r2, r3
 800450a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800450e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	3301      	adds	r3, #1
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800451a:	461a      	mov	r2, r3
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4293      	cmp	r3, r2
 8004520:	d3b5      	bcc.n	800448e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004534:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004542:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004544:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f043 0210 	orr.w	r2, r3, #16
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	4b10      	ldr	r3, [pc, #64]	@ (80045a0 <USB_DevInit+0x2c4>)
 800455e:	4313      	orrs	r3, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004564:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f043 0208 	orr.w	r2, r3, #8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004578:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800457c:	2b01      	cmp	r3, #1
 800457e:	d107      	bne.n	8004590 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004590:	7dfb      	ldrb	r3, [r7, #23]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800459c:	b004      	add	sp, #16
 800459e:	4770      	bx	lr
 80045a0:	803c3800 	.word	0x803c3800

080045a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3301      	adds	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045be:	d901      	bls.n	80045c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e01b      	b.n	80045fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	daf2      	bge.n	80045b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	019b      	lsls	r3, r3, #6
 80045d4:	f043 0220 	orr.w	r2, r3, #32
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3301      	adds	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045e8:	d901      	bls.n	80045ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e006      	b.n	80045fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d0f0      	beq.n	80045dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3301      	adds	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004620:	d901      	bls.n	8004626 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e018      	b.n	8004658 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	daf2      	bge.n	8004614 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2210      	movs	r2, #16
 8004636:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3301      	adds	r3, #1
 800463c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004644:	d901      	bls.n	800464a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e006      	b.n	8004658 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b10      	cmp	r3, #16
 8004654:	d0f0      	beq.n	8004638 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004696:	b480      	push	{r7}
 8004698:	b087      	sub	sp, #28
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0306 	and.w	r3, r3, #6
 80046ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75fb      	strb	r3, [r7, #23]
 80046ba:	e00a      	b.n	80046d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d002      	beq.n	80046c8 <USB_GetDevSpeed+0x32>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b06      	cmp	r3, #6
 80046c6:	d102      	bne.n	80046ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046c8:	2302      	movs	r3, #2
 80046ca:	75fb      	strb	r3, [r7, #23]
 80046cc:	e001      	b.n	80046d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046ce:	230f      	movs	r3, #15
 80046d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d13a      	bne.n	8004772 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	2101      	movs	r1, #1
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	b29b      	uxth	r3, r3
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800471a:	4313      	orrs	r3, r2
 800471c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d155      	bne.n	80047e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	791b      	ldrb	r3, [r3, #4]
 800474e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004750:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	059b      	lsls	r3, r3, #22
 8004756:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004758:	4313      	orrs	r3, r2
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	e036      	b.n	80047e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	2101      	movs	r1, #1
 8004784:	fa01 f303 	lsl.w	r3, r1, r3
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004790:	4313      	orrs	r3, r2
 8004792:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11a      	bne.n	80047e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	791b      	ldrb	r3, [r3, #4]
 80047c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047c6:	430b      	orrs	r3, r1
 80047c8:	4313      	orrs	r3, r2
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d161      	bne.n	80048d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800481e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004822:	d11f      	bne.n	8004864 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800483e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004842:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	0151      	lsls	r1, r2, #5
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	440a      	add	r2, r1
 800485a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800485e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004862:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	2101      	movs	r1, #1
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	b29b      	uxth	r3, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004884:	4013      	ands	r3, r2
 8004886:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	b29b      	uxth	r3, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	68f9      	ldr	r1, [r7, #12]
 80048a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048a8:	4013      	ands	r3, r2
 80048aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	0159      	lsls	r1, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	440b      	add	r3, r1
 80048c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c6:	4619      	mov	r1, r3
 80048c8:	4b35      	ldr	r3, [pc, #212]	@ (80049a0 <USB_DeactivateEndpoint+0x1b0>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
 80048ce:	e060      	b.n	8004992 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048e6:	d11f      	bne.n	8004928 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	0151      	lsls	r1, r2, #5
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	440a      	add	r2, r1
 80048fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004902:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004906:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004922:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004926:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	2101      	movs	r1, #1
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	43db      	mvns	r3, r3
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004948:	4013      	ands	r3, r2
 800494a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	43db      	mvns	r3, r3
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800496c:	4013      	ands	r3, r2
 800496e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	0159      	lsls	r1, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	440b      	add	r3, r1
 8004986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498a:	4619      	mov	r1, r3
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <USB_DeactivateEndpoint+0x1b4>)
 800498e:	4013      	ands	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	ec337800 	.word	0xec337800
 80049a4:	eff37800 	.word	0xeff37800

080049a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	@ 0x28
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	785b      	ldrb	r3, [r3, #1]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	f040 817f 	bne.w	8004cc8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d132      	bne.n	8004a38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80049f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80049f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a30:	0cdb      	lsrs	r3, r3, #19
 8004a32:	04db      	lsls	r3, r3, #19
 8004a34:	6113      	str	r3, [r2, #16]
 8004a36:	e097      	b.n	8004b68 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a52:	0cdb      	lsrs	r3, r3, #19
 8004a54:	04db      	lsls	r3, r3, #19
 8004a56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a72:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a76:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a7a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11a      	bne.n	8004ab8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d903      	bls.n	8004a96 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	0151      	lsls	r1, r2, #5
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	440a      	add	r2, r1
 8004aac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ab0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ab4:	6113      	str	r3, [r2, #16]
 8004ab6:	e044      	b.n	8004b42 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	1e5a      	subs	r2, r3, #1
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	8afb      	ldrh	r3, [r7, #22]
 8004ade:	04d9      	lsls	r1, r3, #19
 8004ae0:	4ba4      	ldr	r3, [pc, #656]	@ (8004d74 <USB_EPStartXfer+0x3cc>)
 8004ae2:	400b      	ands	r3, r1
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	0148      	lsls	r0, r1, #5
 8004ae8:	69f9      	ldr	r1, [r7, #28]
 8004aea:	4401      	add	r1, r0
 8004aec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004af0:	4313      	orrs	r3, r2
 8004af2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	791b      	ldrb	r3, [r3, #4]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d122      	bne.n	8004b42 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b16:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004b1a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	8afb      	ldrh	r3, [r7, #22]
 8004b2c:	075b      	lsls	r3, r3, #29
 8004b2e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004b32:	69b9      	ldr	r1, [r7, #24]
 8004b34:	0148      	lsls	r0, r1, #5
 8004b36:	69f9      	ldr	r1, [r7, #28]
 8004b38:	4401      	add	r1, r0
 8004b3a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	0148      	lsls	r0, r1, #5
 8004b5c:	69f9      	ldr	r1, [r7, #28]
 8004b5e:	4401      	add	r1, r0
 8004b60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b64:	4313      	orrs	r3, r2
 8004b66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d14b      	bne.n	8004c06 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b82:	461a      	mov	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	791b      	ldrb	r3, [r3, #4]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d128      	bne.n	8004be4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d110      	bne.n	8004bc4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e00f      	b.n	8004be4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bfe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	e166      	b.n	8004ed4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c24:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	791b      	ldrb	r3, [r3, #4]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d015      	beq.n	8004c5a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 814e 	beq.w	8004ed4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	69f9      	ldr	r1, [r7, #28]
 8004c50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c54:	4313      	orrs	r3, r2
 8004c56:	634b      	str	r3, [r1, #52]	@ 0x34
 8004c58:	e13c      	b.n	8004ed4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d110      	bne.n	8004c8c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e00f      	b.n	8004cac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	68d9      	ldr	r1, [r3, #12]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	b298      	uxth	r0, r3
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f9b9 	bl	8005038 <USB_WritePacket>
 8004cc6:	e105      	b.n	8004ed4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ce2:	0cdb      	lsrs	r3, r3, #19
 8004ce4:	04db      	lsls	r3, r3, #19
 8004ce6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d02:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d06:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d0a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d132      	bne.n	8004d78 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	69b9      	ldr	r1, [r7, #24]
 8004d42:	0148      	lsls	r0, r1, #5
 8004d44:	69f9      	ldr	r1, [r7, #28]
 8004d46:	4401      	add	r1, r0
 8004d48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d6e:	6113      	str	r3, [r2, #16]
 8004d70:	e062      	b.n	8004e38 <USB_EPStartXfer+0x490>
 8004d72:	bf00      	nop
 8004d74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d123      	bne.n	8004dc8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d96:	69b9      	ldr	r1, [r7, #24]
 8004d98:	0148      	lsls	r0, r1, #5
 8004d9a:	69f9      	ldr	r1, [r7, #28]
 8004d9c:	4401      	add	r1, r0
 8004d9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004da2:	4313      	orrs	r3, r2
 8004da4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dc4:	6113      	str	r3, [r2, #16]
 8004dc6:	e037      	b.n	8004e38 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	1e5a      	subs	r2, r3, #1
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	8afa      	ldrh	r2, [r7, #22]
 8004de4:	fb03 f202 	mul.w	r2, r3, r2
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	8afb      	ldrh	r3, [r7, #22]
 8004dfc:	04d9      	lsls	r1, r3, #19
 8004dfe:	4b38      	ldr	r3, [pc, #224]	@ (8004ee0 <USB_EPStartXfer+0x538>)
 8004e00:	400b      	ands	r3, r1
 8004e02:	69b9      	ldr	r1, [r7, #24]
 8004e04:	0148      	lsls	r0, r1, #5
 8004e06:	69f9      	ldr	r1, [r7, #28]
 8004e08:	4401      	add	r1, r0
 8004e0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e28:	69b9      	ldr	r1, [r7, #24]
 8004e2a:	0148      	lsls	r0, r1, #5
 8004e2c:	69f9      	ldr	r1, [r7, #28]
 8004e2e:	4401      	add	r1, r0
 8004e30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e34:	4313      	orrs	r3, r2
 8004e36:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d10d      	bne.n	8004e5a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68d9      	ldr	r1, [r3, #12]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e56:	460a      	mov	r2, r1
 8004e58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	791b      	ldrb	r3, [r3, #4]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d128      	bne.n	8004eb4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d110      	bne.n	8004e94 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e00f      	b.n	8004eb4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ece:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ed2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	1ff80000 	.word	0x1ff80000

08004ee4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	785b      	ldrb	r3, [r3, #1]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d14a      	bne.n	8004f98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f1a:	f040 8086 	bne.w	800502a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d902      	bls.n	8004f7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	75fb      	strb	r3, [r7, #23]
          break;
 8004f7a:	e056      	b.n	800502a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f94:	d0e7      	beq.n	8004f66 <USB_EPStopXfer+0x82>
 8004f96:	e048      	b.n	800502a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fb0:	d13b      	bne.n	800502a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	7812      	ldrb	r2, [r2, #0]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ff8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005006:	4293      	cmp	r3, r2
 8005008:	d902      	bls.n	8005010 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	75fb      	strb	r3, [r7, #23]
          break;
 800500e:	e00c      	b.n	800502a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005024:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005028:	d0e7      	beq.n	8004ffa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
}
 800502c:	4618      	mov	r0, r3
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	@ 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	4611      	mov	r1, r2
 8005044:	461a      	mov	r2, r3
 8005046:	460b      	mov	r3, r1
 8005048:	71fb      	strb	r3, [r7, #7]
 800504a:	4613      	mov	r3, r2
 800504c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005056:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	d123      	bne.n	80050a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800505e:	88bb      	ldrh	r3, [r7, #4]
 8005060:	3303      	adds	r3, #3
 8005062:	089b      	lsrs	r3, r3, #2
 8005064:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005066:	2300      	movs	r3, #0
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e018      	b.n	800509e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	031a      	lsls	r2, r3, #12
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
 8005074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005078:	461a      	mov	r2, r3
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3301      	adds	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	3301      	adds	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	3301      	adds	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3301      	adds	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	3301      	adds	r3, #1
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3e2      	bcc.n	800506c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3724      	adds	r7, #36	@ 0x24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b08b      	sub	sp, #44	@ 0x2c
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050da:	2300      	movs	r3, #0
 80050dc:	623b      	str	r3, [r7, #32]
 80050de:	e014      	b.n	800510a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	3301      	adds	r3, #1
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	3301      	adds	r3, #1
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	3301      	adds	r3, #1
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	3301      	adds	r3, #1
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	3301      	adds	r3, #1
 8005108:	623b      	str	r3, [r7, #32]
 800510a:	6a3a      	ldr	r2, [r7, #32]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	429a      	cmp	r2, r3
 8005110:	d3e6      	bcc.n	80050e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005112:	8bfb      	ldrh	r3, [r7, #30]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01e      	beq.n	8005156 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005122:	461a      	mov	r2, r3
 8005124:	f107 0310 	add.w	r3, r7, #16
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
 8005138:	b2da      	uxtb	r2, r3
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	701a      	strb	r2, [r3, #0]
      i++;
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	3301      	adds	r3, #1
 8005142:	623b      	str	r3, [r7, #32]
      pDest++;
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	3301      	adds	r3, #1
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800514a:	8bfb      	ldrh	r3, [r7, #30]
 800514c:	3b01      	subs	r3, #1
 800514e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005150:	8bfb      	ldrh	r3, [r7, #30]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ea      	bne.n	800512c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005158:	4618      	mov	r0, r3
 800515a:	372c      	adds	r7, #44	@ 0x2c
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	785b      	ldrb	r3, [r3, #1]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d12c      	bne.n	80051da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	db12      	blt.n	80051b8 <USB_EPSetStall+0x54>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00f      	beq.n	80051b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80051b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	e02b      	b.n	8005232 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	db12      	blt.n	8005212 <USB_EPSetStall+0xae>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00f      	beq.n	8005212 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	440a      	add	r2, r1
 8005208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800520c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005210:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800522c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005230:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d128      	bne.n	80052ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005276:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800527a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	791b      	ldrb	r3, [r3, #4]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d003      	beq.n	800528c <USB_EPClearStall+0x4c>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	791b      	ldrb	r3, [r3, #4]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d138      	bne.n	80052fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	0151      	lsls	r1, r2, #5
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	440a      	add	r2, r1
 80052a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	e027      	b.n	80052fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	791b      	ldrb	r3, [r3, #4]
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d003      	beq.n	80052de <USB_EPClearStall+0x9e>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	791b      	ldrb	r3, [r3, #4]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d10f      	bne.n	80052fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800532a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800532e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005340:	68f9      	ldr	r1, [r7, #12]
 8005342:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005386:	f023 0302 	bic.w	r3, r3, #2
 800538a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80053b4:	f023 0303 	bic.w	r3, r3, #3
 80053b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053c8:	f043 0302 	orr.w	r3, r3, #2
 80053cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4013      	ands	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053f4:	68fb      	ldr	r3, [r7, #12]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	4013      	ands	r3, r2
 8005424:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0c1b      	lsrs	r3, r3, #16
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	4013      	ands	r3, r2
 8005458:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	b29b      	uxth	r3, r3
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	460b      	mov	r3, r1
 8005474:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800547a:	78fb      	ldrb	r3, [r7, #3]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	4013      	ands	r3, r2
 8005496:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005498:	68bb      	ldr	r3, [r7, #8]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b087      	sub	sp, #28
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054ca:	78fb      	ldrb	r3, [r7, #3]
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	fa22 f303 	lsr.w	r3, r2, r3
 80054d6:	01db      	lsls	r3, r3, #7
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4013      	ands	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054f4:	68bb      	ldr	r3, [r7, #8]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0301 	and.w	r3, r3, #1
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005538:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800553c:	f023 0307 	bic.w	r3, r3, #7
 8005540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	460b      	mov	r3, r1
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	333c      	adds	r3, #60	@ 0x3c
 800557a:	3304      	adds	r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4a26      	ldr	r2, [pc, #152]	@ (800561c <USB_EP0_OutStart+0xb8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d90a      	bls.n	800559e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005598:	d101      	bne.n	800559e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e037      	b.n	800560e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a4:	461a      	mov	r2, r3
 80055a6:	2300      	movs	r3, #0
 80055a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055cc:	f043 0318 	orr.w	r3, r3, #24
 80055d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80055e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055e6:	7afb      	ldrb	r3, [r7, #11]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d10f      	bne.n	800560c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f2:	461a      	mov	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005606:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800560a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	4f54300a 	.word	0x4f54300a

08005620 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3301      	adds	r3, #1
 8005630:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005638:	d901      	bls.n	800563e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e01b      	b.n	8005676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	daf2      	bge.n	800562c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f043 0201 	orr.w	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3301      	adds	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005662:	d901      	bls.n	8005668 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e006      	b.n	8005676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b01      	cmp	r3, #1
 8005672:	d0f0      	beq.n	8005656 <USB_CoreReset+0x36>

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005690:	2010      	movs	r0, #16
 8005692:	f002 f921 	bl	80078d8 <USBD_static_malloc>
 8005696:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	32b0      	adds	r2, #176	@ 0xb0
 80056a8:	2100      	movs	r1, #0
 80056aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056ae:	2302      	movs	r3, #2
 80056b0:	e048      	b.n	8005744 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	32b0      	adds	r2, #176	@ 0xb0
 80056bc:	68f9      	ldr	r1, [r7, #12]
 80056be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	32b0      	adds	r2, #176	@ 0xb0
 80056cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7c1b      	ldrb	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10d      	bne.n	80056fa <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80056de:	4b1b      	ldr	r3, [pc, #108]	@ (800574c <USBD_HID_Init+0xc8>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	f003 020f 	and.w	r2, r3, #15
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	3326      	adds	r3, #38	@ 0x26
 80056f4:	2207      	movs	r2, #7
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	e00c      	b.n	8005714 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80056fa:	4b14      	ldr	r3, [pc, #80]	@ (800574c <USBD_HID_Init+0xc8>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	3326      	adds	r3, #38	@ 0x26
 8005710:	220a      	movs	r2, #10
 8005712:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005714:	4b0d      	ldr	r3, [pc, #52]	@ (800574c <USBD_HID_Init+0xc8>)
 8005716:	7819      	ldrb	r1, [r3, #0]
 8005718:	2304      	movs	r3, #4
 800571a:	2203      	movs	r2, #3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 ffca 	bl	80076b6 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005722:	4b0a      	ldr	r3, [pc, #40]	@ (800574c <USBD_HID_Init+0xc8>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	f003 020f 	and.w	r2, r3, #15
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	3324      	adds	r3, #36	@ 0x24
 8005738:	2201      	movs	r2, #1
 800573a:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	200000bf 	.word	0x200000bf

08005750 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800575c:	4b1f      	ldr	r3, [pc, #124]	@ (80057dc <USBD_HID_DeInit+0x8c>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 ffcd 	bl	8007702 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005768:	4b1c      	ldr	r3, [pc, #112]	@ (80057dc <USBD_HID_DeInit+0x8c>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f003 020f 	and.w	r2, r3, #15
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	3324      	adds	r3, #36	@ 0x24
 800577e:	2200      	movs	r2, #0
 8005780:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005782:	4b16      	ldr	r3, [pc, #88]	@ (80057dc <USBD_HID_DeInit+0x8c>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	f003 020f 	and.w	r2, r3, #15
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	3326      	adds	r3, #38	@ 0x26
 8005798:	2200      	movs	r2, #0
 800579a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	32b0      	adds	r2, #176	@ 0xb0
 80057a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d011      	beq.n	80057d2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	32b0      	adds	r2, #176	@ 0xb0
 80057b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057bc:	4618      	mov	r0, r3
 80057be:	f002 f899 	bl	80078f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	32b0      	adds	r2, #176	@ 0xb0
 80057cc:	2100      	movs	r1, #0
 80057ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	200000bf 	.word	0x200000bf

080057e0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	32b0      	adds	r2, #176	@ 0xb0
 80057f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005808:	2303      	movs	r3, #3
 800580a:	e0e8      	b.n	80059de <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005814:	2b00      	cmp	r3, #0
 8005816:	d046      	beq.n	80058a6 <USBD_HID_Setup+0xc6>
 8005818:	2b20      	cmp	r3, #32
 800581a:	f040 80d8 	bne.w	80059ce <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	3b02      	subs	r3, #2
 8005824:	2b09      	cmp	r3, #9
 8005826:	d836      	bhi.n	8005896 <USBD_HID_Setup+0xb6>
 8005828:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <USBD_HID_Setup+0x50>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005887 	.word	0x08005887
 8005834:	08005867 	.word	0x08005867
 8005838:	08005897 	.word	0x08005897
 800583c:	08005897 	.word	0x08005897
 8005840:	08005897 	.word	0x08005897
 8005844:	08005897 	.word	0x08005897
 8005848:	08005897 	.word	0x08005897
 800584c:	08005897 	.word	0x08005897
 8005850:	08005875 	.word	0x08005875
 8005854:	08005859 	.word	0x08005859
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	885b      	ldrh	r3, [r3, #2]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	601a      	str	r2, [r3, #0]
          break;
 8005864:	e01e      	b.n	80058a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 fbe5 	bl	800703c <USBD_CtlSendData>
          break;
 8005872:	e017      	b.n	80058a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	885b      	ldrh	r3, [r3, #2]
 8005878:	0a1b      	lsrs	r3, r3, #8
 800587a:	b29b      	uxth	r3, r3
 800587c:	b2db      	uxtb	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	605a      	str	r2, [r3, #4]
          break;
 8005884:	e00e      	b.n	80058a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3304      	adds	r3, #4
 800588a:	2201      	movs	r2, #1
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 fbd4 	bl	800703c <USBD_CtlSendData>
          break;
 8005894:	e006      	b.n	80058a4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 fb52 	bl	8006f42 <USBD_CtlError>
          ret = USBD_FAIL;
 800589e:	2303      	movs	r3, #3
 80058a0:	75fb      	strb	r3, [r7, #23]
          break;
 80058a2:	bf00      	nop
      }
      break;
 80058a4:	e09a      	b.n	80059dc <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	2b0b      	cmp	r3, #11
 80058ac:	f200 8086 	bhi.w	80059bc <USBD_HID_Setup+0x1dc>
 80058b0:	a201      	add	r2, pc, #4	@ (adr r2, 80058b8 <USBD_HID_Setup+0xd8>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058e9 	.word	0x080058e9
 80058bc:	080059cb 	.word	0x080059cb
 80058c0:	080059bd 	.word	0x080059bd
 80058c4:	080059bd 	.word	0x080059bd
 80058c8:	080059bd 	.word	0x080059bd
 80058cc:	080059bd 	.word	0x080059bd
 80058d0:	08005913 	.word	0x08005913
 80058d4:	080059bd 	.word	0x080059bd
 80058d8:	080059bd 	.word	0x080059bd
 80058dc:	080059bd 	.word	0x080059bd
 80058e0:	0800596b 	.word	0x0800596b
 80058e4:	08005995 	.word	0x08005995
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d107      	bne.n	8005904 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058f4:	f107 030a 	add.w	r3, r7, #10
 80058f8:	2202      	movs	r2, #2
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f001 fb9d 	bl	800703c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005902:	e063      	b.n	80059cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f001 fb1b 	bl	8006f42 <USBD_CtlError>
            ret = USBD_FAIL;
 800590c:	2303      	movs	r3, #3
 800590e:	75fb      	strb	r3, [r7, #23]
          break;
 8005910:	e05c      	b.n	80059cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	885b      	ldrh	r3, [r3, #2]
 8005916:	0a1b      	lsrs	r3, r3, #8
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b22      	cmp	r3, #34	@ 0x22
 800591c:	d108      	bne.n	8005930 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	88db      	ldrh	r3, [r3, #6]
 8005922:	2b3f      	cmp	r3, #63	@ 0x3f
 8005924:	bf28      	it	cs
 8005926:	233f      	movcs	r3, #63	@ 0x3f
 8005928:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800592a:	4b2f      	ldr	r3, [pc, #188]	@ (80059e8 <USBD_HID_Setup+0x208>)
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e015      	b.n	800595c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	885b      	ldrh	r3, [r3, #2]
 8005934:	0a1b      	lsrs	r3, r3, #8
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b21      	cmp	r3, #33	@ 0x21
 800593a:	d108      	bne.n	800594e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800593c:	4b2b      	ldr	r3, [pc, #172]	@ (80059ec <USBD_HID_Setup+0x20c>)
 800593e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	88db      	ldrh	r3, [r3, #6]
 8005944:	2b09      	cmp	r3, #9
 8005946:	bf28      	it	cs
 8005948:	2309      	movcs	r3, #9
 800594a:	82bb      	strh	r3, [r7, #20]
 800594c:	e006      	b.n	800595c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f001 faf6 	bl	8006f42 <USBD_CtlError>
            ret = USBD_FAIL;
 8005956:	2303      	movs	r3, #3
 8005958:	75fb      	strb	r3, [r7, #23]
            break;
 800595a:	e037      	b.n	80059cc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800595c:	8abb      	ldrh	r3, [r7, #20]
 800595e:	461a      	mov	r2, r3
 8005960:	6939      	ldr	r1, [r7, #16]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 fb6a 	bl	800703c <USBD_CtlSendData>
          break;
 8005968:	e030      	b.n	80059cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b03      	cmp	r3, #3
 8005974:	d107      	bne.n	8005986 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3308      	adds	r3, #8
 800597a:	2201      	movs	r2, #1
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fb5c 	bl	800703c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005984:	e022      	b.n	80059cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fada 	bl	8006f42 <USBD_CtlError>
            ret = USBD_FAIL;
 800598e:	2303      	movs	r3, #3
 8005990:	75fb      	strb	r3, [r7, #23]
          break;
 8005992:	e01b      	b.n	80059cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b03      	cmp	r3, #3
 800599e:	d106      	bne.n	80059ae <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	885b      	ldrh	r3, [r3, #2]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059ac:	e00e      	b.n	80059cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 fac6 	bl	8006f42 <USBD_CtlError>
            ret = USBD_FAIL;
 80059b6:	2303      	movs	r3, #3
 80059b8:	75fb      	strb	r3, [r7, #23]
          break;
 80059ba:	e007      	b.n	80059cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059bc:	6839      	ldr	r1, [r7, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fabf 	bl	8006f42 <USBD_CtlError>
          ret = USBD_FAIL;
 80059c4:	2303      	movs	r3, #3
 80059c6:	75fb      	strb	r3, [r7, #23]
          break;
 80059c8:	e000      	b.n	80059cc <USBD_HID_Setup+0x1ec>
          break;
 80059ca:	bf00      	nop
      }
      break;
 80059cc:	e006      	b.n	80059dc <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 fab6 	bl	8006f42 <USBD_CtlError>
      ret = USBD_FAIL;
 80059d6:	2303      	movs	r3, #3
 80059d8:	75fb      	strb	r3, [r7, #23]
      break;
 80059da:	bf00      	nop
  }

  return (uint8_t)ret;
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000080 	.word	0x20000080
 80059ec:	20000068 	.word	0x20000068

080059f0 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	32b0      	adds	r2, #176	@ 0xb0
 8005a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e014      	b.n	8005a42 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d10d      	bne.n	8005a40 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	7b1b      	ldrb	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005a32:	4b06      	ldr	r3, [pc, #24]	@ (8005a4c <USBD_HID_SendReport+0x5c>)
 8005a34:	7819      	ldrb	r1, [r3, #0]
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f001 ff09 	bl	8007852 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	200000bf 	.word	0x200000bf

08005a50 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005a58:	2181      	movs	r1, #129	@ 0x81
 8005a5a:	4809      	ldr	r0, [pc, #36]	@ (8005a80 <USBD_HID_GetFSCfgDesc+0x30>)
 8005a5c:	f000 fc3b 	bl	80062d6 <USBD_GetEpDesc>
 8005a60:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	220a      	movs	r2, #10
 8005a6c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2222      	movs	r2, #34	@ 0x22
 8005a72:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005a74:	4b02      	ldr	r3, [pc, #8]	@ (8005a80 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000044 	.word	0x20000044

08005a84 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005a8c:	2181      	movs	r1, #129	@ 0x81
 8005a8e:	4809      	ldr	r0, [pc, #36]	@ (8005ab4 <USBD_HID_GetHSCfgDesc+0x30>)
 8005a90:	f000 fc21 	bl	80062d6 <USBD_GetEpDesc>
 8005a94:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2207      	movs	r2, #7
 8005aa0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2222      	movs	r2, #34	@ 0x22
 8005aa6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005aa8:	4b02      	ldr	r3, [pc, #8]	@ (8005ab4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000044 	.word	0x20000044

08005ab8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005ac0:	2181      	movs	r1, #129	@ 0x81
 8005ac2:	4809      	ldr	r0, [pc, #36]	@ (8005ae8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005ac4:	f000 fc07 	bl	80062d6 <USBD_GetEpDesc>
 8005ac8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	220a      	movs	r2, #10
 8005ad4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2222      	movs	r2, #34	@ 0x22
 8005ada:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005adc:	4b02      	ldr	r3, [pc, #8]	@ (8005ae8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000044 	.word	0x20000044

08005aec <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	32b0      	adds	r2, #176	@ 0xb0
 8005b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b06:	2200      	movs	r2, #0
 8005b08:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	220a      	movs	r2, #10
 8005b24:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005b26:	4b03      	ldr	r3, [pc, #12]	@ (8005b34 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	20000074 	.word	0x20000074

08005b38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e01f      	b.n	8005b90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	79fa      	ldrb	r2, [r7, #7]
 8005b82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f001 fd2f 	bl	80075e8 <USBD_LL_Init>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e025      	b.n	8005bfc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	32ae      	adds	r2, #174	@ 0xae
 8005bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00f      	beq.n	8005bec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	32ae      	adds	r2, #174	@ 0xae
 8005bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	f107 020e 	add.w	r2, r7, #14
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 fd37 	bl	8007680 <USBD_LL_Start>
 8005c12:	4603      	mov	r3, r0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	4611      	mov	r1, r2
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	4611      	mov	r1, r2
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 f90c 	bl	8006ece <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005cd2:	f003 031f 	and.w	r3, r3, #31
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d01a      	beq.n	8005d10 <USBD_LL_SetupStage+0x72>
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d822      	bhi.n	8005d24 <USBD_LL_SetupStage+0x86>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <USBD_LL_SetupStage+0x4a>
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d00a      	beq.n	8005cfc <USBD_LL_SetupStage+0x5e>
 8005ce6:	e01d      	b.n	8005d24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fb63 	bl	80063bc <USBD_StdDevReq>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfa:	e020      	b.n	8005d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fbcb 	bl	80064a0 <USBD_StdItfReq>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d0e:	e016      	b.n	8005d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fc2d 	bl	8006578 <USBD_StdEPReq>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]
      break;
 8005d22:	e00c      	b.n	8005d3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d2a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 fd04 	bl	8007740 <USBD_LL_StallEP>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	bf00      	nop
  }

  return ret;
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	460b      	mov	r3, r1
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d16e      	bne.n	8005e3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005d66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	f040 8098 	bne.w	8005ea4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d913      	bls.n	8005da8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	1ad2      	subs	r2, r2, r3
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	4293      	cmp	r3, r2
 8005d98:	bf28      	it	cs
 8005d9a:	4613      	movcs	r3, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f001 f977 	bl	8007094 <USBD_CtlContinueRx>
 8005da6:	e07d      	b.n	8005ea4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d014      	beq.n	8005de0 <USBD_LL_DataOutStage+0x98>
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d81d      	bhi.n	8005df6 <USBD_LL_DataOutStage+0xae>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <USBD_LL_DataOutStage+0x7c>
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d003      	beq.n	8005dca <USBD_LL_DataOutStage+0x82>
 8005dc2:	e018      	b.n	8005df6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	75bb      	strb	r3, [r7, #22]
            break;
 8005dc8:	e018      	b.n	8005dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fa64 	bl	80062a2 <USBD_CoreFindIF>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	75bb      	strb	r3, [r7, #22]
            break;
 8005dde:	e00d      	b.n	8005dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	4619      	mov	r1, r3
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fa66 	bl	80062bc <USBD_CoreFindEP>
 8005df0:	4603      	mov	r3, r0
 8005df2:	75bb      	strb	r3, [r7, #22]
            break;
 8005df4:	e002      	b.n	8005dfc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	75bb      	strb	r3, [r7, #22]
            break;
 8005dfa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005dfc:	7dbb      	ldrb	r3, [r7, #22]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d119      	bne.n	8005e36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d113      	bne.n	8005e36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e0e:	7dba      	ldrb	r2, [r7, #22]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	32ae      	adds	r2, #174	@ 0xae
 8005e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e1e:	7dba      	ldrb	r2, [r7, #22]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e26:	7dba      	ldrb	r2, [r7, #22]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	32ae      	adds	r2, #174	@ 0xae
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f001 f93d 	bl	80070b6 <USBD_CtlSendStatus>
 8005e3c:	e032      	b.n	8005ea4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	4619      	mov	r1, r3
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 fa37 	bl	80062bc <USBD_CoreFindEP>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e52:	7dbb      	ldrb	r3, [r7, #22]
 8005e54:	2bff      	cmp	r3, #255	@ 0xff
 8005e56:	d025      	beq.n	8005ea4 <USBD_LL_DataOutStage+0x15c>
 8005e58:	7dbb      	ldrb	r3, [r7, #22]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d122      	bne.n	8005ea4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d117      	bne.n	8005e9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e6a:	7dba      	ldrb	r2, [r7, #22]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	32ae      	adds	r2, #174	@ 0xae
 8005e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00f      	beq.n	8005e9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e7a:	7dba      	ldrb	r2, [r7, #22]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e82:	7dba      	ldrb	r2, [r7, #22]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	32ae      	adds	r2, #174	@ 0xae
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	7afa      	ldrb	r2, [r7, #11]
 8005e90:	4611      	mov	r1, r2
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	4798      	blx	r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	e000      	b.n	8005ea6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	607a      	str	r2, [r7, #4]
 8005eba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d16f      	bne.n	8005fa2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d15a      	bne.n	8005f88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d914      	bls.n	8005f08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	1ad2      	subs	r2, r2, r3
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f001 f8bc 	bl	8007072 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005efa:	2300      	movs	r3, #0
 8005efc:	2200      	movs	r2, #0
 8005efe:	2100      	movs	r1, #0
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f001 fcc7 	bl	8007894 <USBD_LL_PrepareReceive>
 8005f06:	e03f      	b.n	8005f88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d11c      	bne.n	8005f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d316      	bcc.n	8005f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d20f      	bcs.n	8005f4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2100      	movs	r1, #0
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f001 f89d 	bl	8007072 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f40:	2300      	movs	r3, #0
 8005f42:	2200      	movs	r2, #0
 8005f44:	2100      	movs	r1, #0
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f001 fca4 	bl	8007894 <USBD_LL_PrepareReceive>
 8005f4c:	e01c      	b.n	8005f88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d10f      	bne.n	8005f7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f7a:	2180      	movs	r1, #128	@ 0x80
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f001 fbdf 	bl	8007740 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f001 f8aa 	bl	80070dc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d03a      	beq.n	8006008 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff fe42 	bl	8005c1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005fa0:	e032      	b.n	8006008 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005fa2:	7afb      	ldrb	r3, [r7, #11]
 8005fa4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	4619      	mov	r1, r3
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f985 	bl	80062bc <USBD_CoreFindEP>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
 8005fb8:	2bff      	cmp	r3, #255	@ 0xff
 8005fba:	d025      	beq.n	8006008 <USBD_LL_DataInStage+0x15a>
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d122      	bne.n	8006008 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d11c      	bne.n	8006008 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005fce:	7dfa      	ldrb	r2, [r7, #23]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	32ae      	adds	r2, #174	@ 0xae
 8005fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d014      	beq.n	8006008 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005fde:	7dfa      	ldrb	r2, [r7, #23]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005fe6:	7dfa      	ldrb	r2, [r7, #23]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	32ae      	adds	r2, #174	@ 0xae
 8005fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	7afa      	ldrb	r2, [r7, #11]
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	4798      	blx	r3
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ffe:	7dbb      	ldrb	r3, [r7, #22]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006004:	7dbb      	ldrb	r3, [r7, #22]
 8006006:	e000      	b.n	800600a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d014      	beq.n	8006078 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6852      	ldr	r2, [r2, #4]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	4611      	mov	r1, r2
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006074:	2303      	movs	r3, #3
 8006076:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006078:	2340      	movs	r3, #64	@ 0x40
 800607a:	2200      	movs	r2, #0
 800607c:	2100      	movs	r1, #0
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f001 fb19 	bl	80076b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2240      	movs	r2, #64	@ 0x40
 8006090:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006094:	2340      	movs	r3, #64	@ 0x40
 8006096:	2200      	movs	r2, #0
 8006098:	2180      	movs	r1, #128	@ 0x80
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 fb0b 	bl	80076b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2240      	movs	r2, #64	@ 0x40
 80060aa:	621a      	str	r2, [r3, #32]

  return ret;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	460b      	mov	r3, r1
 80060c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d006      	beq.n	80060f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2204      	movs	r2, #4
 80060fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b04      	cmp	r3, #4
 8006120:	d106      	bne.n	8006130 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006128:	b2da      	uxtb	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b03      	cmp	r3, #3
 8006150:	d110      	bne.n	8006174 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	32ae      	adds	r2, #174	@ 0xae
 8006194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	e01c      	b.n	80061da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d115      	bne.n	80061d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	32ae      	adds	r2, #174	@ 0xae
 80061b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	32ae      	adds	r2, #174	@ 0xae
 80061ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	78fa      	ldrb	r2, [r7, #3]
 80061d2:	4611      	mov	r1, r2
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	460b      	mov	r3, r1
 80061ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	32ae      	adds	r2, #174	@ 0xae
 80061f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006200:	2303      	movs	r3, #3
 8006202:	e01c      	b.n	800623e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b03      	cmp	r3, #3
 800620e:	d115      	bne.n	800623c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	32ae      	adds	r2, #174	@ 0xae
 800621a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	32ae      	adds	r2, #174	@ 0xae
 800622e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	4611      	mov	r1, r2
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00e      	beq.n	8006298 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6852      	ldr	r2, [r2, #4]
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	4611      	mov	r1, r2
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	4798      	blx	r3
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006294:	2303      	movs	r3, #3
 8006296:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	460b      	mov	r3, r1
 80062ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b086      	sub	sp, #24
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	885b      	ldrh	r3, [r3, #2]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	7812      	ldrb	r2, [r2, #0]
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d91f      	bls.n	800633c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006302:	e013      	b.n	800632c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006304:	f107 030a 	add.w	r3, r7, #10
 8006308:	4619      	mov	r1, r3
 800630a:	6978      	ldr	r0, [r7, #20]
 800630c:	f000 f81b 	bl	8006346 <USBD_GetNextDesc>
 8006310:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	2b05      	cmp	r3, #5
 8006318:	d108      	bne.n	800632c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	789b      	ldrb	r3, [r3, #2]
 8006322:	78fa      	ldrb	r2, [r7, #3]
 8006324:	429a      	cmp	r2, r3
 8006326:	d008      	beq.n	800633a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	885b      	ldrh	r3, [r3, #2]
 8006330:	b29a      	uxth	r2, r3
 8006332:	897b      	ldrh	r3, [r7, #10]
 8006334:	429a      	cmp	r2, r3
 8006336:	d8e5      	bhi.n	8006304 <USBD_GetEpDesc+0x2e>
 8006338:	e000      	b.n	800633c <USBD_GetEpDesc+0x66>
          break;
 800633a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800633c:	693b      	ldr	r3, [r7, #16]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	7812      	ldrb	r2, [r2, #0]
 800635c:	4413      	add	r3, r2
 800635e:	b29a      	uxth	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	461a      	mov	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800637e:	b480      	push	{r7}
 8006380:	b087      	sub	sp, #28
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	3301      	adds	r3, #1
 8006394:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800639c:	8a3b      	ldrh	r3, [r7, #16]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	b21a      	sxth	r2, r3
 80063a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	b21b      	sxth	r3, r3
 80063aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063ac:	89fb      	ldrh	r3, [r7, #14]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063d2:	2b40      	cmp	r3, #64	@ 0x40
 80063d4:	d005      	beq.n	80063e2 <USBD_StdDevReq+0x26>
 80063d6:	2b40      	cmp	r3, #64	@ 0x40
 80063d8:	d857      	bhi.n	800648a <USBD_StdDevReq+0xce>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00f      	beq.n	80063fe <USBD_StdDevReq+0x42>
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d153      	bne.n	800648a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	32ae      	adds	r2, #174	@ 0xae
 80063ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	e04a      	b.n	8006494 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	2b09      	cmp	r3, #9
 8006404:	d83b      	bhi.n	800647e <USBD_StdDevReq+0xc2>
 8006406:	a201      	add	r2, pc, #4	@ (adr r2, 800640c <USBD_StdDevReq+0x50>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	08006461 	.word	0x08006461
 8006410:	08006475 	.word	0x08006475
 8006414:	0800647f 	.word	0x0800647f
 8006418:	0800646b 	.word	0x0800646b
 800641c:	0800647f 	.word	0x0800647f
 8006420:	0800643f 	.word	0x0800643f
 8006424:	08006435 	.word	0x08006435
 8006428:	0800647f 	.word	0x0800647f
 800642c:	08006457 	.word	0x08006457
 8006430:	08006449 	.word	0x08006449
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa3c 	bl	80068b4 <USBD_GetDescriptor>
          break;
 800643c:	e024      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fba1 	bl	8006b88 <USBD_SetAddress>
          break;
 8006446:	e01f      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fbe0 	bl	8006c10 <USBD_SetConfig>
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
          break;
 8006454:	e018      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fc83 	bl	8006d64 <USBD_GetConfig>
          break;
 800645e:	e013      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fcb4 	bl	8006dd0 <USBD_GetStatus>
          break;
 8006468:	e00e      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fce3 	bl	8006e38 <USBD_SetFeature>
          break;
 8006472:	e009      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fd07 	bl	8006e8a <USBD_ClrFeature>
          break;
 800647c:	e004      	b.n	8006488 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fd5e 	bl	8006f42 <USBD_CtlError>
          break;
 8006486:	bf00      	nop
      }
      break;
 8006488:	e004      	b.n	8006494 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fd58 	bl	8006f42 <USBD_CtlError>
      break;
 8006492:	bf00      	nop
  }

  return ret;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop

080064a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064b6:	2b40      	cmp	r3, #64	@ 0x40
 80064b8:	d005      	beq.n	80064c6 <USBD_StdItfReq+0x26>
 80064ba:	2b40      	cmp	r3, #64	@ 0x40
 80064bc:	d852      	bhi.n	8006564 <USBD_StdItfReq+0xc4>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <USBD_StdItfReq+0x26>
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d14e      	bne.n	8006564 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d840      	bhi.n	8006556 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	889b      	ldrh	r3, [r3, #4]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d836      	bhi.n	800654c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	889b      	ldrh	r3, [r3, #4]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fedb 	bl	80062a2 <USBD_CoreFindIF>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	2bff      	cmp	r3, #255	@ 0xff
 80064f4:	d01d      	beq.n	8006532 <USBD_StdItfReq+0x92>
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d11a      	bne.n	8006532 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80064fc:	7bba      	ldrb	r2, [r7, #14]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32ae      	adds	r2, #174	@ 0xae
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00f      	beq.n	800652c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800650c:	7bba      	ldrb	r2, [r7, #14]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006514:	7bba      	ldrb	r2, [r7, #14]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	32ae      	adds	r2, #174	@ 0xae
 800651a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
 8006526:	4603      	mov	r3, r0
 8006528:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800652a:	e004      	b.n	8006536 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800652c:	2303      	movs	r3, #3
 800652e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006530:	e001      	b.n	8006536 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006532:	2303      	movs	r3, #3
 8006534:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	88db      	ldrh	r3, [r3, #6]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d110      	bne.n	8006560 <USBD_StdItfReq+0xc0>
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10d      	bne.n	8006560 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fdb6 	bl	80070b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800654a:	e009      	b.n	8006560 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fcf7 	bl	8006f42 <USBD_CtlError>
          break;
 8006554:	e004      	b.n	8006560 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fcf2 	bl	8006f42 <USBD_CtlError>
          break;
 800655e:	e000      	b.n	8006562 <USBD_StdItfReq+0xc2>
          break;
 8006560:	bf00      	nop
      }
      break;
 8006562:	e004      	b.n	800656e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fceb 	bl	8006f42 <USBD_CtlError>
      break;
 800656c:	bf00      	nop
  }

  return ret;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	889b      	ldrh	r3, [r3, #4]
 800658a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006594:	2b40      	cmp	r3, #64	@ 0x40
 8006596:	d007      	beq.n	80065a8 <USBD_StdEPReq+0x30>
 8006598:	2b40      	cmp	r3, #64	@ 0x40
 800659a:	f200 817f 	bhi.w	800689c <USBD_StdEPReq+0x324>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d02a      	beq.n	80065f8 <USBD_StdEPReq+0x80>
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	f040 817a 	bne.w	800689c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff fe85 	bl	80062bc <USBD_CoreFindEP>
 80065b2:	4603      	mov	r3, r0
 80065b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065b6:	7b7b      	ldrb	r3, [r7, #13]
 80065b8:	2bff      	cmp	r3, #255	@ 0xff
 80065ba:	f000 8174 	beq.w	80068a6 <USBD_StdEPReq+0x32e>
 80065be:	7b7b      	ldrb	r3, [r7, #13]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f040 8170 	bne.w	80068a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80065c6:	7b7a      	ldrb	r2, [r7, #13]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80065ce:	7b7a      	ldrb	r2, [r7, #13]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	32ae      	adds	r2, #174	@ 0xae
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8163 	beq.w	80068a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80065e0:	7b7a      	ldrb	r2, [r7, #13]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	32ae      	adds	r2, #174	@ 0xae
 80065e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065f6:	e156      	b.n	80068a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d008      	beq.n	8006612 <USBD_StdEPReq+0x9a>
 8006600:	2b03      	cmp	r3, #3
 8006602:	f300 8145 	bgt.w	8006890 <USBD_StdEPReq+0x318>
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 809b 	beq.w	8006742 <USBD_StdEPReq+0x1ca>
 800660c:	2b01      	cmp	r3, #1
 800660e:	d03c      	beq.n	800668a <USBD_StdEPReq+0x112>
 8006610:	e13e      	b.n	8006890 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d002      	beq.n	8006624 <USBD_StdEPReq+0xac>
 800661e:	2b03      	cmp	r3, #3
 8006620:	d016      	beq.n	8006650 <USBD_StdEPReq+0xd8>
 8006622:	e02c      	b.n	800667e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00d      	beq.n	8006646 <USBD_StdEPReq+0xce>
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b80      	cmp	r3, #128	@ 0x80
 800662e:	d00a      	beq.n	8006646 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 f883 	bl	8007740 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800663a:	2180      	movs	r1, #128	@ 0x80
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 f87f 	bl	8007740 <USBD_LL_StallEP>
 8006642:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006644:	e020      	b.n	8006688 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fc7a 	bl	8006f42 <USBD_CtlError>
              break;
 800664e:	e01b      	b.n	8006688 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	885b      	ldrh	r3, [r3, #2]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10e      	bne.n	8006676 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <USBD_StdEPReq+0xfe>
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b80      	cmp	r3, #128	@ 0x80
 8006662:	d008      	beq.n	8006676 <USBD_StdEPReq+0xfe>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	88db      	ldrh	r3, [r3, #6]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 f865 	bl	8007740 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fd1d 	bl	80070b6 <USBD_CtlSendStatus>

              break;
 800667c:	e004      	b.n	8006688 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fc5e 	bl	8006f42 <USBD_CtlError>
              break;
 8006686:	bf00      	nop
          }
          break;
 8006688:	e107      	b.n	800689a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d002      	beq.n	800669c <USBD_StdEPReq+0x124>
 8006696:	2b03      	cmp	r3, #3
 8006698:	d016      	beq.n	80066c8 <USBD_StdEPReq+0x150>
 800669a:	e04b      	b.n	8006734 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800669c:	7bbb      	ldrb	r3, [r7, #14]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00d      	beq.n	80066be <USBD_StdEPReq+0x146>
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	2b80      	cmp	r3, #128	@ 0x80
 80066a6:	d00a      	beq.n	80066be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 f847 	bl	8007740 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066b2:	2180      	movs	r1, #128	@ 0x80
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 f843 	bl	8007740 <USBD_LL_StallEP>
 80066ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066bc:	e040      	b.n	8006740 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc3e 	bl	8006f42 <USBD_CtlError>
              break;
 80066c6:	e03b      	b.n	8006740 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	885b      	ldrh	r3, [r3, #2]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d136      	bne.n	800673e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 f84d 	bl	800777e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fce6 	bl	80070b6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fde4 	bl	80062bc <USBD_CoreFindEP>
 80066f4:	4603      	mov	r3, r0
 80066f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066f8:	7b7b      	ldrb	r3, [r7, #13]
 80066fa:	2bff      	cmp	r3, #255	@ 0xff
 80066fc:	d01f      	beq.n	800673e <USBD_StdEPReq+0x1c6>
 80066fe:	7b7b      	ldrb	r3, [r7, #13]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d11c      	bne.n	800673e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006704:	7b7a      	ldrb	r2, [r7, #13]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800670c:	7b7a      	ldrb	r2, [r7, #13]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32ae      	adds	r2, #174	@ 0xae
 8006712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d010      	beq.n	800673e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800671c:	7b7a      	ldrb	r2, [r7, #13]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	32ae      	adds	r2, #174	@ 0xae
 8006722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
 800672e:	4603      	mov	r3, r0
 8006730:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006732:	e004      	b.n	800673e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fc03 	bl	8006f42 <USBD_CtlError>
              break;
 800673c:	e000      	b.n	8006740 <USBD_StdEPReq+0x1c8>
              break;
 800673e:	bf00      	nop
          }
          break;
 8006740:	e0ab      	b.n	800689a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d002      	beq.n	8006754 <USBD_StdEPReq+0x1dc>
 800674e:	2b03      	cmp	r3, #3
 8006750:	d032      	beq.n	80067b8 <USBD_StdEPReq+0x240>
 8006752:	e097      	b.n	8006884 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006754:	7bbb      	ldrb	r3, [r7, #14]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <USBD_StdEPReq+0x1f2>
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	2b80      	cmp	r3, #128	@ 0x80
 800675e:	d004      	beq.n	800676a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fbed 	bl	8006f42 <USBD_CtlError>
                break;
 8006768:	e091      	b.n	800688e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800676a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800676e:	2b00      	cmp	r3, #0
 8006770:	da0b      	bge.n	800678a <USBD_StdEPReq+0x212>
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	3310      	adds	r3, #16
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	4413      	add	r3, r2
 8006786:	3304      	adds	r3, #4
 8006788:	e00b      	b.n	80067a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	3304      	adds	r3, #4
 80067a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2202      	movs	r2, #2
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fc43 	bl	800703c <USBD_CtlSendData>
              break;
 80067b6:	e06a      	b.n	800688e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	da11      	bge.n	80067e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	f003 020f 	and.w	r2, r3, #15
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	3324      	adds	r3, #36	@ 0x24
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d117      	bne.n	800680a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fbb0 	bl	8006f42 <USBD_CtlError>
                  break;
 80067e2:	e054      	b.n	800688e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	f003 020f 	and.w	r2, r3, #15
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fb9d 	bl	8006f42 <USBD_CtlError>
                  break;
 8006808:	e041      	b.n	800688e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800680a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800680e:	2b00      	cmp	r3, #0
 8006810:	da0b      	bge.n	800682a <USBD_StdEPReq+0x2b2>
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	3310      	adds	r3, #16
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	4413      	add	r3, r2
 8006826:	3304      	adds	r3, #4
 8006828:	e00b      	b.n	8006842 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	4413      	add	r3, r2
 8006840:	3304      	adds	r3, #4
 8006842:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <USBD_StdEPReq+0x2d8>
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b80      	cmp	r3, #128	@ 0x80
 800684e:	d103      	bne.n	8006858 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e00e      	b.n	8006876 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 ffad 	bl	80077bc <USBD_LL_IsStallEP>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e002      	b.n	8006876 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2202      	movs	r2, #2
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fbdd 	bl	800703c <USBD_CtlSendData>
              break;
 8006882:	e004      	b.n	800688e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fb5b 	bl	8006f42 <USBD_CtlError>
              break;
 800688c:	bf00      	nop
          }
          break;
 800688e:	e004      	b.n	800689a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fb55 	bl	8006f42 <USBD_CtlError>
          break;
 8006898:	bf00      	nop
      }
      break;
 800689a:	e005      	b.n	80068a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fb4f 	bl	8006f42 <USBD_CtlError>
      break;
 80068a4:	e000      	b.n	80068a8 <USBD_StdEPReq+0x330>
      break;
 80068a6:	bf00      	nop
  }

  return ret;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	885b      	ldrh	r3, [r3, #2]
 80068ce:	0a1b      	lsrs	r3, r3, #8
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	2b06      	cmp	r3, #6
 80068d6:	f200 8128 	bhi.w	8006b2a <USBD_GetDescriptor+0x276>
 80068da:	a201      	add	r2, pc, #4	@ (adr r2, 80068e0 <USBD_GetDescriptor+0x2c>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	080068fd 	.word	0x080068fd
 80068e4:	08006915 	.word	0x08006915
 80068e8:	08006955 	.word	0x08006955
 80068ec:	08006b2b 	.word	0x08006b2b
 80068f0:	08006b2b 	.word	0x08006b2b
 80068f4:	08006acb 	.word	0x08006acb
 80068f8:	08006af7 	.word	0x08006af7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	7c12      	ldrb	r2, [r2, #16]
 8006908:	f107 0108 	add.w	r1, r7, #8
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
 8006910:	60f8      	str	r0, [r7, #12]
      break;
 8006912:	e112      	b.n	8006b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7c1b      	ldrb	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10d      	bne.n	8006938 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006924:	f107 0208 	add.w	r2, r7, #8
 8006928:	4610      	mov	r0, r2
 800692a:	4798      	blx	r3
 800692c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3301      	adds	r3, #1
 8006932:	2202      	movs	r2, #2
 8006934:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006936:	e100      	b.n	8006b3a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800693e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006940:	f107 0208 	add.w	r2, r7, #8
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
 8006948:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	2202      	movs	r2, #2
 8006950:	701a      	strb	r2, [r3, #0]
      break;
 8006952:	e0f2      	b.n	8006b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	885b      	ldrh	r3, [r3, #2]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b05      	cmp	r3, #5
 800695c:	f200 80ac 	bhi.w	8006ab8 <USBD_GetDescriptor+0x204>
 8006960:	a201      	add	r2, pc, #4	@ (adr r2, 8006968 <USBD_GetDescriptor+0xb4>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	08006981 	.word	0x08006981
 800696c:	080069b5 	.word	0x080069b5
 8006970:	080069e9 	.word	0x080069e9
 8006974:	08006a1d 	.word	0x08006a1d
 8006978:	08006a51 	.word	0x08006a51
 800697c:	08006a85 	.word	0x08006a85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	7c12      	ldrb	r2, [r2, #16]
 8006998:	f107 0108 	add.w	r1, r7, #8
 800699c:	4610      	mov	r0, r2
 800699e:	4798      	blx	r3
 80069a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069a2:	e091      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 facb 	bl	8006f42 <USBD_CtlError>
            err++;
 80069ac:	7afb      	ldrb	r3, [r7, #11]
 80069ae:	3301      	adds	r3, #1
 80069b0:	72fb      	strb	r3, [r7, #11]
          break;
 80069b2:	e089      	b.n	8006ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	7c12      	ldrb	r2, [r2, #16]
 80069cc:	f107 0108 	add.w	r1, r7, #8
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
 80069d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069d6:	e077      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fab1 	bl	8006f42 <USBD_CtlError>
            err++;
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	3301      	adds	r3, #1
 80069e4:	72fb      	strb	r3, [r7, #11]
          break;
 80069e6:	e06f      	b.n	8006ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00b      	beq.n	8006a0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	7c12      	ldrb	r2, [r2, #16]
 8006a00:	f107 0108 	add.w	r1, r7, #8
 8006a04:	4610      	mov	r0, r2
 8006a06:	4798      	blx	r3
 8006a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a0a:	e05d      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa97 	bl	8006f42 <USBD_CtlError>
            err++;
 8006a14:	7afb      	ldrb	r3, [r7, #11]
 8006a16:	3301      	adds	r3, #1
 8006a18:	72fb      	strb	r3, [r7, #11]
          break;
 8006a1a:	e055      	b.n	8006ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00b      	beq.n	8006a40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	7c12      	ldrb	r2, [r2, #16]
 8006a34:	f107 0108 	add.w	r1, r7, #8
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a3e:	e043      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa7d 	bl	8006f42 <USBD_CtlError>
            err++;
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a4e:	e03b      	b.n	8006ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00b      	beq.n	8006a74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	7c12      	ldrb	r2, [r2, #16]
 8006a68:	f107 0108 	add.w	r1, r7, #8
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4798      	blx	r3
 8006a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a72:	e029      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fa63 	bl	8006f42 <USBD_CtlError>
            err++;
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	72fb      	strb	r3, [r7, #11]
          break;
 8006a82:	e021      	b.n	8006ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	7c12      	ldrb	r2, [r2, #16]
 8006a9c:	f107 0108 	add.w	r1, r7, #8
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4798      	blx	r3
 8006aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aa6:	e00f      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa49 	bl	8006f42 <USBD_CtlError>
            err++;
 8006ab0:	7afb      	ldrb	r3, [r7, #11]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ab6:	e007      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fa41 	bl	8006f42 <USBD_CtlError>
          err++;
 8006ac0:	7afb      	ldrb	r3, [r7, #11]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ac6:	bf00      	nop
      }
      break;
 8006ac8:	e037      	b.n	8006b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	7c1b      	ldrb	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ada:	f107 0208 	add.w	r2, r7, #8
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4798      	blx	r3
 8006ae2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ae4:	e029      	b.n	8006b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fa2a 	bl	8006f42 <USBD_CtlError>
        err++;
 8006aee:	7afb      	ldrb	r3, [r7, #11]
 8006af0:	3301      	adds	r3, #1
 8006af2:	72fb      	strb	r3, [r7, #11]
      break;
 8006af4:	e021      	b.n	8006b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	7c1b      	ldrb	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10d      	bne.n	8006b1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b06:	f107 0208 	add.w	r2, r7, #8
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4798      	blx	r3
 8006b0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3301      	adds	r3, #1
 8006b14:	2207      	movs	r2, #7
 8006b16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b18:	e00f      	b.n	8006b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fa10 	bl	8006f42 <USBD_CtlError>
        err++;
 8006b22:	7afb      	ldrb	r3, [r7, #11]
 8006b24:	3301      	adds	r3, #1
 8006b26:	72fb      	strb	r3, [r7, #11]
      break;
 8006b28:	e007      	b.n	8006b3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fa08 	bl	8006f42 <USBD_CtlError>
      err++;
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	3301      	adds	r3, #1
 8006b36:	72fb      	strb	r3, [r7, #11]
      break;
 8006b38:	bf00      	nop
  }

  if (err != 0U)
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11e      	bne.n	8006b7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	88db      	ldrh	r3, [r3, #6]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d016      	beq.n	8006b76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b48:	893b      	ldrh	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00e      	beq.n	8006b6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	88da      	ldrh	r2, [r3, #6]
 8006b52:	893b      	ldrh	r3, [r7, #8]
 8006b54:	4293      	cmp	r3, r2
 8006b56:	bf28      	it	cs
 8006b58:	4613      	movcs	r3, r2
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b5e:	893b      	ldrh	r3, [r7, #8]
 8006b60:	461a      	mov	r2, r3
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa69 	bl	800703c <USBD_CtlSendData>
 8006b6a:	e009      	b.n	8006b80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f9e7 	bl	8006f42 <USBD_CtlError>
 8006b74:	e004      	b.n	8006b80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fa9d 	bl	80070b6 <USBD_CtlSendStatus>
 8006b7c:	e000      	b.n	8006b80 <USBD_GetDescriptor+0x2cc>
    return;
 8006b7e:	bf00      	nop
  }
}
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop

08006b88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	889b      	ldrh	r3, [r3, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d131      	bne.n	8006bfe <USBD_SetAddress+0x76>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	88db      	ldrh	r3, [r3, #6]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d12d      	bne.n	8006bfe <USBD_SetAddress+0x76>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	885b      	ldrh	r3, [r3, #2]
 8006ba6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ba8:	d829      	bhi.n	8006bfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	885b      	ldrh	r3, [r3, #2]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d104      	bne.n	8006bcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f9bc 	bl	8006f42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bca:	e01d      	b.n	8006c08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	7bfa      	ldrb	r2, [r7, #15]
 8006bd0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fe1b 	bl	8007814 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa69 	bl	80070b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2202      	movs	r2, #2
 8006bee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf2:	e009      	b.n	8006c08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfc:	e004      	b.n	8006c08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f99e 	bl	8006f42 <USBD_CtlError>
  }
}
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	885b      	ldrh	r3, [r3, #2]
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	4b4e      	ldr	r3, [pc, #312]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006c26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c28:	4b4d      	ldr	r3, [pc, #308]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d905      	bls.n	8006c3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f985 	bl	8006f42 <USBD_CtlError>
    return USBD_FAIL;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e08c      	b.n	8006d56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d002      	beq.n	8006c4e <USBD_SetConfig+0x3e>
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d029      	beq.n	8006ca0 <USBD_SetConfig+0x90>
 8006c4c:	e075      	b.n	8006d3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c4e:	4b44      	ldr	r3, [pc, #272]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d020      	beq.n	8006c98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c56:	4b42      	ldr	r3, [pc, #264]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c60:	4b3f      	ldr	r3, [pc, #252]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fe ffe3 	bl	8005c32 <USBD_SetClassConfig>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f962 	bl	8006f42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2202      	movs	r2, #2
 8006c82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c86:	e065      	b.n	8006d54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fa14 	bl	80070b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2203      	movs	r2, #3
 8006c92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c96:	e05d      	b.n	8006d54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fa0c 	bl	80070b6 <USBD_CtlSendStatus>
      break;
 8006c9e:	e059      	b.n	8006d54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d112      	bne.n	8006cce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cba:	4b29      	ldr	r3, [pc, #164]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7fe ffd2 	bl	8005c6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f9f5 	bl	80070b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ccc:	e042      	b.n	8006d54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006cce:	4b24      	ldr	r3, [pc, #144]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d02a      	beq.n	8006d32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7fe ffc0 	bl	8005c6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006cea:	4b1d      	ldr	r3, [pc, #116]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fe ff99 	bl	8005c32 <USBD_SetClassConfig>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00f      	beq.n	8006d2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f918 	bl	8006f42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fe ffa5 	bl	8005c6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d28:	e014      	b.n	8006d54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9c3 	bl	80070b6 <USBD_CtlSendStatus>
      break;
 8006d30:	e010      	b.n	8006d54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f9bf 	bl	80070b6 <USBD_CtlSendStatus>
      break;
 8006d38:	e00c      	b.n	8006d54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f900 	bl	8006f42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d42:	4b07      	ldr	r3, [pc, #28]	@ (8006d60 <USBD_SetConfig+0x150>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fe ff8e 	bl	8005c6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	73fb      	strb	r3, [r7, #15]
      break;
 8006d52:	bf00      	nop
  }

  return ret;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000198 	.word	0x20000198

08006d64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	88db      	ldrh	r3, [r3, #6]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d004      	beq.n	8006d80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f8e2 	bl	8006f42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d7e:	e023      	b.n	8006dc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	dc02      	bgt.n	8006d92 <USBD_GetConfig+0x2e>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	dc03      	bgt.n	8006d98 <USBD_GetConfig+0x34>
 8006d90:	e015      	b.n	8006dbe <USBD_GetConfig+0x5a>
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d00b      	beq.n	8006dae <USBD_GetConfig+0x4a>
 8006d96:	e012      	b.n	8006dbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3308      	adds	r3, #8
 8006da2:	2201      	movs	r2, #1
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f948 	bl	800703c <USBD_CtlSendData>
        break;
 8006dac:	e00c      	b.n	8006dc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3304      	adds	r3, #4
 8006db2:	2201      	movs	r2, #1
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f940 	bl	800703c <USBD_CtlSendData>
        break;
 8006dbc:	e004      	b.n	8006dc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f8be 	bl	8006f42 <USBD_CtlError>
        break;
 8006dc6:	bf00      	nop
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d81e      	bhi.n	8006e26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	88db      	ldrh	r3, [r3, #6]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d004      	beq.n	8006dfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f8a5 	bl	8006f42 <USBD_CtlError>
        break;
 8006df8:	e01a      	b.n	8006e30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f043 0202 	orr.w	r2, r3, #2
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f90c 	bl	800703c <USBD_CtlSendData>
      break;
 8006e24:	e004      	b.n	8006e30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f88a 	bl	8006f42 <USBD_CtlError>
      break;
 8006e2e:	bf00      	nop
  }
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	885b      	ldrh	r3, [r3, #2]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d107      	bne.n	8006e5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f92f 	bl	80070b6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006e58:	e013      	b.n	8006e82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	885b      	ldrh	r3, [r3, #2]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d10b      	bne.n	8006e7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	889b      	ldrh	r3, [r3, #4]
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f91f 	bl	80070b6 <USBD_CtlSendStatus>
}
 8006e78:	e003      	b.n	8006e82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f860 	bl	8006f42 <USBD_CtlError>
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d80b      	bhi.n	8006eba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	885b      	ldrh	r3, [r3, #2]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d10c      	bne.n	8006ec4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f8ff 	bl	80070b6 <USBD_CtlSendStatus>
      }
      break;
 8006eb8:	e004      	b.n	8006ec4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f840 	bl	8006f42 <USBD_CtlError>
      break;
 8006ec2:	e000      	b.n	8006ec6 <USBD_ClrFeature+0x3c>
      break;
 8006ec4:	bf00      	nop
  }
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	781a      	ldrb	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff fa40 	bl	800637e <SWAPBYTE>
 8006efe:	4603      	mov	r3, r0
 8006f00:	461a      	mov	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff fa33 	bl	800637e <SWAPBYTE>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff fa26 	bl	800637e <SWAPBYTE>
 8006f32:	4603      	mov	r3, r0
 8006f34:	461a      	mov	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	80da      	strh	r2, [r3, #6]
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f4c:	2180      	movs	r1, #128	@ 0x80
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fbf6 	bl	8007740 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f54:	2100      	movs	r1, #0
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fbf2 	bl	8007740 <USBD_LL_StallEP>
}
 8006f5c:	bf00      	nop
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d042      	beq.n	8007000 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006f7e:	6938      	ldr	r0, [r7, #16]
 8006f80:	f000 f842 	bl	8007008 <USBD_GetLen>
 8006f84:	4603      	mov	r3, r0
 8006f86:	3301      	adds	r3, #1
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f8e:	d808      	bhi.n	8006fa2 <USBD_GetString+0x3e>
 8006f90:	6938      	ldr	r0, [r7, #16]
 8006f92:	f000 f839 	bl	8007008 <USBD_GetLen>
 8006f96:	4603      	mov	r3, r0
 8006f98:	3301      	adds	r3, #1
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	e001      	b.n	8006fa6 <USBD_GetString+0x42>
 8006fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	4413      	add	r3, r2
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fcc:	e013      	b.n	8006ff6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	7812      	ldrb	r2, [r2, #0]
 8006fd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	613b      	str	r3, [r7, #16]
    idx++;
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	4413      	add	r3, r2
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e7      	bne.n	8006fce <USBD_GetString+0x6a>
 8006ffe:	e000      	b.n	8007002 <USBD_GetString+0x9e>
    return;
 8007000:	bf00      	nop
  }
}
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007018:	e005      	b.n	8007026 <USBD_GetLen+0x1e>
  {
    len++;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	3301      	adds	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	3301      	adds	r3, #1
 8007024:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f5      	bne.n	800701a <USBD_GetLen+0x12>
  }

  return len;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2202      	movs	r2, #2
 800704c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	2100      	movs	r1, #0
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fbf5 	bl	8007852 <USBD_LL_Transmit>

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	2100      	movs	r1, #0
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 fbe4 	bl	8007852 <USBD_LL_Transmit>

  return USBD_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	2100      	movs	r1, #0
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 fbf4 	bl	8007894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2204      	movs	r2, #4
 80070c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070c6:	2300      	movs	r3, #0
 80070c8:	2200      	movs	r2, #0
 80070ca:	2100      	movs	r1, #0
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fbc0 	bl	8007852 <USBD_LL_Transmit>

  return USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2205      	movs	r2, #5
 80070e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ec:	2300      	movs	r3, #0
 80070ee:	2200      	movs	r2, #0
 80070f0:	2100      	movs	r1, #0
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fbce 	bl	8007894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007108:	2200      	movs	r2, #0
 800710a:	490e      	ldr	r1, [pc, #56]	@ (8007144 <MX_USB_DEVICE_Init+0x40>)
 800710c:	480e      	ldr	r0, [pc, #56]	@ (8007148 <MX_USB_DEVICE_Init+0x44>)
 800710e:	f7fe fd13 	bl	8005b38 <USBD_Init>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007118:	f7fa fc4e 	bl	80019b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800711c:	490b      	ldr	r1, [pc, #44]	@ (800714c <MX_USB_DEVICE_Init+0x48>)
 800711e:	480a      	ldr	r0, [pc, #40]	@ (8007148 <MX_USB_DEVICE_Init+0x44>)
 8007120:	f7fe fd3a 	bl	8005b98 <USBD_RegisterClass>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800712a:	f7fa fc45 	bl	80019b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800712e:	4806      	ldr	r0, [pc, #24]	@ (8007148 <MX_USB_DEVICE_Init+0x44>)
 8007130:	f7fe fd68 	bl	8005c04 <USBD_Start>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800713a:	f7fa fc3d 	bl	80019b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	200000c0 	.word	0x200000c0
 8007148:	2000019c 	.word	0x2000019c
 800714c:	2000000c 	.word	0x2000000c

08007150 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	6039      	str	r1, [r7, #0]
 800715a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2212      	movs	r2, #18
 8007160:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007162:	4b03      	ldr	r3, [pc, #12]	@ (8007170 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	200000dc 	.word	0x200000dc

08007174 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	6039      	str	r1, [r7, #0]
 800717e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2204      	movs	r2, #4
 8007184:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007186:	4b03      	ldr	r3, [pc, #12]	@ (8007194 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	200000f0 	.word	0x200000f0

08007198 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	4907      	ldr	r1, [pc, #28]	@ (80071cc <USBD_FS_ProductStrDescriptor+0x34>)
 80071ae:	4808      	ldr	r0, [pc, #32]	@ (80071d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80071b0:	f7ff fed8 	bl	8006f64 <USBD_GetString>
 80071b4:	e004      	b.n	80071c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	4904      	ldr	r1, [pc, #16]	@ (80071cc <USBD_FS_ProductStrDescriptor+0x34>)
 80071ba:	4805      	ldr	r0, [pc, #20]	@ (80071d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80071bc:	f7ff fed2 	bl	8006f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071c0:	4b02      	ldr	r3, [pc, #8]	@ (80071cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000478 	.word	0x20000478
 80071d0:	08008b74 	.word	0x08008b74

080071d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	6039      	str	r1, [r7, #0]
 80071de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	4904      	ldr	r1, [pc, #16]	@ (80071f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071e4:	4804      	ldr	r0, [pc, #16]	@ (80071f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071e6:	f7ff febd 	bl	8006f64 <USBD_GetString>
  return USBD_StrDesc;
 80071ea:	4b02      	ldr	r3, [pc, #8]	@ (80071f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20000478 	.word	0x20000478
 80071f8:	08008b8c 	.word	0x08008b8c

080071fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	6039      	str	r1, [r7, #0]
 8007206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	221a      	movs	r2, #26
 800720c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800720e:	f000 f843 	bl	8007298 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007212:	4b02      	ldr	r3, [pc, #8]	@ (800721c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	200000f4 	.word	0x200000f4

08007220 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	6039      	str	r1, [r7, #0]
 800722a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4907      	ldr	r1, [pc, #28]	@ (8007254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007236:	4808      	ldr	r0, [pc, #32]	@ (8007258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007238:	f7ff fe94 	bl	8006f64 <USBD_GetString>
 800723c:	e004      	b.n	8007248 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4904      	ldr	r1, [pc, #16]	@ (8007254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007242:	4805      	ldr	r0, [pc, #20]	@ (8007258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007244:	f7ff fe8e 	bl	8006f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007248:	4b02      	ldr	r3, [pc, #8]	@ (8007254 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000478 	.word	0x20000478
 8007258:	08008ba0 	.word	0x08008ba0

0800725c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	6039      	str	r1, [r7, #0]
 8007266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d105      	bne.n	800727a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	4907      	ldr	r1, [pc, #28]	@ (8007290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007272:	4808      	ldr	r0, [pc, #32]	@ (8007294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007274:	f7ff fe76 	bl	8006f64 <USBD_GetString>
 8007278:	e004      	b.n	8007284 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	4904      	ldr	r1, [pc, #16]	@ (8007290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800727e:	4805      	ldr	r0, [pc, #20]	@ (8007294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007280:	f7ff fe70 	bl	8006f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007284:	4b02      	ldr	r3, [pc, #8]	@ (8007290 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000478 	.word	0x20000478
 8007294:	08008bac 	.word	0x08008bac

08007298 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800729e:	4b0f      	ldr	r3, [pc, #60]	@ (80072dc <Get_SerialNum+0x44>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072a4:	4b0e      	ldr	r3, [pc, #56]	@ (80072e0 <Get_SerialNum+0x48>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072aa:	4b0e      	ldr	r3, [pc, #56]	@ (80072e4 <Get_SerialNum+0x4c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4413      	add	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072be:	2208      	movs	r2, #8
 80072c0:	4909      	ldr	r1, [pc, #36]	@ (80072e8 <Get_SerialNum+0x50>)
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f814 	bl	80072f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072c8:	2204      	movs	r2, #4
 80072ca:	4908      	ldr	r1, [pc, #32]	@ (80072ec <Get_SerialNum+0x54>)
 80072cc:	68b8      	ldr	r0, [r7, #8]
 80072ce:	f000 f80f 	bl	80072f0 <IntToUnicode>
  }
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	1fff7a10 	.word	0x1fff7a10
 80072e0:	1fff7a14 	.word	0x1fff7a14
 80072e4:	1fff7a18 	.word	0x1fff7a18
 80072e8:	200000f6 	.word	0x200000f6
 80072ec:	20000106 	.word	0x20000106

080072f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
 8007306:	e027      	b.n	8007358 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	0f1b      	lsrs	r3, r3, #28
 800730c:	2b09      	cmp	r3, #9
 800730e:	d80b      	bhi.n	8007328 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	0f1b      	lsrs	r3, r3, #28
 8007314:	b2da      	uxtb	r2, r3
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4619      	mov	r1, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	440b      	add	r3, r1
 8007320:	3230      	adds	r2, #48	@ 0x30
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	e00a      	b.n	800733e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	0f1b      	lsrs	r3, r3, #28
 800732c:	b2da      	uxtb	r2, r3
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4619      	mov	r1, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	440b      	add	r3, r1
 8007338:	3237      	adds	r2, #55	@ 0x37
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	3301      	adds	r3, #1
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	2200      	movs	r2, #0
 8007350:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	3301      	adds	r3, #1
 8007356:	75fb      	strb	r3, [r7, #23]
 8007358:	7dfa      	ldrb	r2, [r7, #23]
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	429a      	cmp	r2, r3
 800735e:	d3d3      	bcc.n	8007308 <IntToUnicode+0x18>
  }
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	@ 0x28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007378:	f107 0314 	add.w	r3, r7, #20
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	605a      	str	r2, [r3, #4]
 8007382:	609a      	str	r2, [r3, #8]
 8007384:	60da      	str	r2, [r3, #12]
 8007386:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007390:	d13a      	bne.n	8007408 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
 8007396:	4b1e      	ldr	r3, [pc, #120]	@ (8007410 <HAL_PCD_MspInit+0xa0>)
 8007398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800739a:	4a1d      	ldr	r2, [pc, #116]	@ (8007410 <HAL_PCD_MspInit+0xa0>)
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80073a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007410 <HAL_PCD_MspInit+0xa0>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80073ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80073b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b4:	2302      	movs	r3, #2
 80073b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073bc:	2303      	movs	r3, #3
 80073be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073c0:	230a      	movs	r3, #10
 80073c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	4619      	mov	r1, r3
 80073ca:	4812      	ldr	r0, [pc, #72]	@ (8007414 <HAL_PCD_MspInit+0xa4>)
 80073cc:	f7fa fdf2 	bl	8001fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007410 <HAL_PCD_MspInit+0xa0>)
 80073d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073d4:	4a0e      	ldr	r2, [pc, #56]	@ (8007410 <HAL_PCD_MspInit+0xa0>)
 80073d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073da:	6353      	str	r3, [r2, #52]	@ 0x34
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007410 <HAL_PCD_MspInit+0xa0>)
 80073e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e4:	4a0a      	ldr	r2, [pc, #40]	@ (8007410 <HAL_PCD_MspInit+0xa0>)
 80073e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80073ec:	4b08      	ldr	r3, [pc, #32]	@ (8007410 <HAL_PCD_MspInit+0xa0>)
 80073ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073f8:	2200      	movs	r2, #0
 80073fa:	2100      	movs	r1, #0
 80073fc:	2043      	movs	r0, #67	@ 0x43
 80073fe:	f7fa fda2 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007402:	2043      	movs	r0, #67	@ 0x43
 8007404:	f7fa fdbb 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007408:	bf00      	nop
 800740a:	3728      	adds	r7, #40	@ 0x28
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	40023800 	.word	0x40023800
 8007414:	40020000 	.word	0x40020000

08007418 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f7fe fc35 	bl	8005c9e <USBD_LL_SetupStage>
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800744e:	78fa      	ldrb	r2, [r7, #3]
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	4619      	mov	r1, r3
 8007466:	f7fe fc6f 	bl	8005d48 <USBD_LL_DataOutStage>
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007484:	78fa      	ldrb	r2, [r7, #3]
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	3320      	adds	r3, #32
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	4619      	mov	r1, r3
 800749a:	f7fe fd08 	bl	8005eae <USBD_LL_DataInStage>
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe fe42 	bl	800613e <USBD_LL_SOF>
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074ca:	2301      	movs	r3, #1
 80074cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	79db      	ldrb	r3, [r3, #7]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d001      	beq.n	80074da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80074d6:	f7fa fa6f 	bl	80019b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074e0:	7bfa      	ldrb	r2, [r7, #15]
 80074e2:	4611      	mov	r1, r2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe fde6 	bl	80060b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe fd8e 	bl	8006012 <USBD_LL_Reset>
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fde1 	bl	80060d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	7adb      	ldrb	r3, [r3, #11]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007534:	4b04      	ldr	r3, [pc, #16]	@ (8007548 <HAL_PCD_SuspendCallback+0x48>)
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	4a03      	ldr	r2, [pc, #12]	@ (8007548 <HAL_PCD_SuspendCallback+0x48>)
 800753a:	f043 0306 	orr.w	r3, r3, #6
 800753e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	e000ed00 	.word	0xe000ed00

0800754c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe fdd7 	bl	800610e <USBD_LL_Resume>
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800757a:	78fa      	ldrb	r2, [r7, #3]
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fe2f 	bl	80061e2 <USBD_LL_IsoOUTIncomplete>
}
 8007584:	bf00      	nop
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800759e:	78fa      	ldrb	r2, [r7, #3]
 80075a0:	4611      	mov	r1, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fdeb 	bl	800617e <USBD_LL_IsoINIncomplete>
}
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fe41 	bl	8006246 <USBD_LL_DevConnected>
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe fe3e 	bl	800625c <USBD_LL_DevDisconnected>
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d13c      	bne.n	8007672 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075f8:	4a20      	ldr	r2, [pc, #128]	@ (800767c <USBD_LL_Init+0x94>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a1e      	ldr	r2, [pc, #120]	@ (800767c <USBD_LL_Init+0x94>)
 8007604:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007608:	4b1c      	ldr	r3, [pc, #112]	@ (800767c <USBD_LL_Init+0x94>)
 800760a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800760e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007610:	4b1a      	ldr	r3, [pc, #104]	@ (800767c <USBD_LL_Init+0x94>)
 8007612:	2204      	movs	r2, #4
 8007614:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007616:	4b19      	ldr	r3, [pc, #100]	@ (800767c <USBD_LL_Init+0x94>)
 8007618:	2202      	movs	r2, #2
 800761a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800761c:	4b17      	ldr	r3, [pc, #92]	@ (800767c <USBD_LL_Init+0x94>)
 800761e:	2200      	movs	r2, #0
 8007620:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007622:	4b16      	ldr	r3, [pc, #88]	@ (800767c <USBD_LL_Init+0x94>)
 8007624:	2202      	movs	r2, #2
 8007626:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007628:	4b14      	ldr	r3, [pc, #80]	@ (800767c <USBD_LL_Init+0x94>)
 800762a:	2200      	movs	r2, #0
 800762c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800762e:	4b13      	ldr	r3, [pc, #76]	@ (800767c <USBD_LL_Init+0x94>)
 8007630:	2200      	movs	r2, #0
 8007632:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007634:	4b11      	ldr	r3, [pc, #68]	@ (800767c <USBD_LL_Init+0x94>)
 8007636:	2200      	movs	r2, #0
 8007638:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800763a:	4b10      	ldr	r3, [pc, #64]	@ (800767c <USBD_LL_Init+0x94>)
 800763c:	2200      	movs	r2, #0
 800763e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007640:	4b0e      	ldr	r3, [pc, #56]	@ (800767c <USBD_LL_Init+0x94>)
 8007642:	2200      	movs	r2, #0
 8007644:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007646:	480d      	ldr	r0, [pc, #52]	@ (800767c <USBD_LL_Init+0x94>)
 8007648:	f7fa fe69 	bl	800231e <HAL_PCD_Init>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007652:	f7fa f9b1 	bl	80019b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007656:	2180      	movs	r1, #128	@ 0x80
 8007658:	4808      	ldr	r0, [pc, #32]	@ (800767c <USBD_LL_Init+0x94>)
 800765a:	f7fc f87e 	bl	800375a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800765e:	2240      	movs	r2, #64	@ 0x40
 8007660:	2100      	movs	r1, #0
 8007662:	4806      	ldr	r0, [pc, #24]	@ (800767c <USBD_LL_Init+0x94>)
 8007664:	f7fc f832 	bl	80036cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007668:	2280      	movs	r2, #128	@ 0x80
 800766a:	2101      	movs	r1, #1
 800766c:	4803      	ldr	r0, [pc, #12]	@ (800767c <USBD_LL_Init+0x94>)
 800766e:	f7fc f82d 	bl	80036cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000678 	.word	0x20000678

08007680 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007696:	4618      	mov	r0, r3
 8007698:	f7fa ff50 	bl	800253c <HAL_PCD_Start>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f930 	bl	8007908 <USBD_Get_USB_Status>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	4608      	mov	r0, r1
 80076c0:	4611      	mov	r1, r2
 80076c2:	461a      	mov	r2, r3
 80076c4:	4603      	mov	r3, r0
 80076c6:	70fb      	strb	r3, [r7, #3]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70bb      	strb	r3, [r7, #2]
 80076cc:	4613      	mov	r3, r2
 80076ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80076de:	78bb      	ldrb	r3, [r7, #2]
 80076e0:	883a      	ldrh	r2, [r7, #0]
 80076e2:	78f9      	ldrb	r1, [r7, #3]
 80076e4:	f7fb fc24 	bl	8002f30 <HAL_PCD_EP_Open>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 f90a 	bl	8007908 <USBD_Get_USB_Status>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800771c:	78fa      	ldrb	r2, [r7, #3]
 800771e:	4611      	mov	r1, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f7fb fc6f 	bl	8003004 <HAL_PCD_EP_Close>
 8007726:	4603      	mov	r3, r0
 8007728:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f8eb 	bl	8007908 <USBD_Get_USB_Status>
 8007732:	4603      	mov	r3, r0
 8007734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007736:	7bbb      	ldrb	r3, [r7, #14]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	4611      	mov	r1, r2
 800775e:	4618      	mov	r0, r3
 8007760:	f7fb fd0f 	bl	8003182 <HAL_PCD_EP_SetStall>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f8cc 	bl	8007908 <USBD_Get_USB_Status>
 8007770:	4603      	mov	r3, r0
 8007772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007774:	7bbb      	ldrb	r3, [r7, #14]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	460b      	mov	r3, r1
 8007788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007798:	78fa      	ldrb	r2, [r7, #3]
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f7fb fd53 	bl	8003248 <HAL_PCD_EP_ClrStall>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 f8ad 	bl	8007908 <USBD_Get_USB_Status>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80077ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da0b      	bge.n	80077f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	4613      	mov	r3, r2
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	3316      	adds	r3, #22
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	e00b      	b.n	8007808 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077f6:	68f9      	ldr	r1, [r7, #12]
 80077f8:	4613      	mov	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007806:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	4611      	mov	r1, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f7fb fb58 	bl	8002ee8 <HAL_PCD_SetAddress>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	4618      	mov	r0, r3
 8007840:	f000 f862 	bl	8007908 <USBD_Get_USB_Status>
 8007844:	4603      	mov	r3, r0
 8007846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007848:	7bbb      	ldrb	r3, [r7, #14]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b086      	sub	sp, #24
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
 800785e:	460b      	mov	r3, r1
 8007860:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007870:	7af9      	ldrb	r1, [r7, #11]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	f7fb fc4a 	bl	800310e <HAL_PCD_EP_Transmit>
 800787a:	4603      	mov	r3, r0
 800787c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 f841 	bl	8007908 <USBD_Get_USB_Status>
 8007886:	4603      	mov	r3, r0
 8007888:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800788a:	7dbb      	ldrb	r3, [r7, #22]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	460b      	mov	r3, r1
 80078a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80078b2:	7af9      	ldrb	r1, [r7, #11]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	f7fb fbee 	bl	8003098 <HAL_PCD_EP_Receive>
 80078bc:	4603      	mov	r3, r0
 80078be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f820 	bl	8007908 <USBD_Get_USB_Status>
 80078c8:	4603      	mov	r3, r0
 80078ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078e0:	4b03      	ldr	r3, [pc, #12]	@ (80078f0 <USBD_static_malloc+0x18>)
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000b5c 	.word	0x20000b5c

080078f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]

}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d817      	bhi.n	800794c <USBD_Get_USB_Status+0x44>
 800791c:	a201      	add	r2, pc, #4	@ (adr r2, 8007924 <USBD_Get_USB_Status+0x1c>)
 800791e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007922:	bf00      	nop
 8007924:	08007935 	.word	0x08007935
 8007928:	0800793b 	.word	0x0800793b
 800792c:	08007941 	.word	0x08007941
 8007930:	08007947 	.word	0x08007947
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
    break;
 8007938:	e00b      	b.n	8007952 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800793a:	2303      	movs	r3, #3
 800793c:	73fb      	strb	r3, [r7, #15]
    break;
 800793e:	e008      	b.n	8007952 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007940:	2301      	movs	r3, #1
 8007942:	73fb      	strb	r3, [r7, #15]
    break;
 8007944:	e005      	b.n	8007952 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007946:	2303      	movs	r3, #3
 8007948:	73fb      	strb	r3, [r7, #15]
    break;
 800794a:	e002      	b.n	8007952 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	73fb      	strb	r3, [r7, #15]
    break;
 8007950:	bf00      	nop
  }
  return usb_status;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <_fgets_r>:
 8007960:	2a01      	cmp	r2, #1
 8007962:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007966:	4681      	mov	r9, r0
 8007968:	460e      	mov	r6, r1
 800796a:	4615      	mov	r5, r2
 800796c:	461c      	mov	r4, r3
 800796e:	dd21      	ble.n	80079b4 <_fgets_r+0x54>
 8007970:	b118      	cbz	r0, 800797a <_fgets_r+0x1a>
 8007972:	6a03      	ldr	r3, [r0, #32]
 8007974:	b90b      	cbnz	r3, 800797a <_fgets_r+0x1a>
 8007976:	f000 f941 	bl	8007bfc <__sinit>
 800797a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800797c:	07db      	lsls	r3, r3, #31
 800797e:	d405      	bmi.n	800798c <_fgets_r+0x2c>
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	059f      	lsls	r7, r3, #22
 8007984:	d402      	bmi.n	800798c <_fgets_r+0x2c>
 8007986:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007988:	f000 fe2a 	bl	80085e0 <__retarget_lock_acquire_recursive>
 800798c:	3d01      	subs	r5, #1
 800798e:	4637      	mov	r7, r6
 8007990:	6863      	ldr	r3, [r4, #4]
 8007992:	b99b      	cbnz	r3, 80079bc <_fgets_r+0x5c>
 8007994:	4621      	mov	r1, r4
 8007996:	4648      	mov	r0, r9
 8007998:	f000 fa60 	bl	8007e5c <__srefill_r>
 800799c:	b168      	cbz	r0, 80079ba <_fgets_r+0x5a>
 800799e:	42b7      	cmp	r7, r6
 80079a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079a2:	d139      	bne.n	8007a18 <_fgets_r+0xb8>
 80079a4:	07d8      	lsls	r0, r3, #31
 80079a6:	d405      	bmi.n	80079b4 <_fgets_r+0x54>
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	0599      	lsls	r1, r3, #22
 80079ac:	d402      	bmi.n	80079b4 <_fgets_r+0x54>
 80079ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079b0:	f000 fe17 	bl	80085e2 <__retarget_lock_release_recursive>
 80079b4:	2000      	movs	r0, #0
 80079b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ba:	6863      	ldr	r3, [r4, #4]
 80079bc:	f8d4 a000 	ldr.w	sl, [r4]
 80079c0:	42ab      	cmp	r3, r5
 80079c2:	bf28      	it	cs
 80079c4:	462b      	movcs	r3, r5
 80079c6:	461a      	mov	r2, r3
 80079c8:	210a      	movs	r1, #10
 80079ca:	4650      	mov	r0, sl
 80079cc:	4698      	mov	r8, r3
 80079ce:	f7f8 fc07 	bl	80001e0 <memchr>
 80079d2:	6863      	ldr	r3, [r4, #4]
 80079d4:	b188      	cbz	r0, 80079fa <_fgets_r+0x9a>
 80079d6:	3001      	adds	r0, #1
 80079d8:	eba0 050a 	sub.w	r5, r0, sl
 80079dc:	1b5b      	subs	r3, r3, r5
 80079de:	e9c4 0300 	strd	r0, r3, [r4]
 80079e2:	462a      	mov	r2, r5
 80079e4:	4651      	mov	r1, sl
 80079e6:	4638      	mov	r0, r7
 80079e8:	f000 fdfc 	bl	80085e4 <memcpy>
 80079ec:	2300      	movs	r3, #0
 80079ee:	557b      	strb	r3, [r7, r5]
 80079f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079f2:	07da      	lsls	r2, r3, #31
 80079f4:	d513      	bpl.n	8007a1e <_fgets_r+0xbe>
 80079f6:	4630      	mov	r0, r6
 80079f8:	e7dd      	b.n	80079b6 <_fgets_r+0x56>
 80079fa:	eba3 0308 	sub.w	r3, r3, r8
 80079fe:	6063      	str	r3, [r4, #4]
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	4443      	add	r3, r8
 8007a04:	4638      	mov	r0, r7
 8007a06:	6023      	str	r3, [r4, #0]
 8007a08:	4642      	mov	r2, r8
 8007a0a:	4651      	mov	r1, sl
 8007a0c:	f000 fdea 	bl	80085e4 <memcpy>
 8007a10:	ebb5 0508 	subs.w	r5, r5, r8
 8007a14:	4447      	add	r7, r8
 8007a16:	d1bb      	bne.n	8007990 <_fgets_r+0x30>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	703b      	strb	r3, [r7, #0]
 8007a1c:	e7e8      	b.n	80079f0 <_fgets_r+0x90>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	059b      	lsls	r3, r3, #22
 8007a22:	d4e8      	bmi.n	80079f6 <_fgets_r+0x96>
 8007a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a26:	f000 fddc 	bl	80085e2 <__retarget_lock_release_recursive>
 8007a2a:	e7e4      	b.n	80079f6 <_fgets_r+0x96>

08007a2c <fgets>:
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	460a      	mov	r2, r1
 8007a30:	4601      	mov	r1, r0
 8007a32:	4802      	ldr	r0, [pc, #8]	@ (8007a3c <fgets+0x10>)
 8007a34:	6800      	ldr	r0, [r0, #0]
 8007a36:	f7ff bf93 	b.w	8007960 <_fgets_r>
 8007a3a:	bf00      	nop
 8007a3c:	2000011c 	.word	0x2000011c

08007a40 <std>:
 8007a40:	2300      	movs	r3, #0
 8007a42:	b510      	push	{r4, lr}
 8007a44:	4604      	mov	r4, r0
 8007a46:	e9c0 3300 	strd	r3, r3, [r0]
 8007a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a4e:	6083      	str	r3, [r0, #8]
 8007a50:	8181      	strh	r1, [r0, #12]
 8007a52:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a54:	81c2      	strh	r2, [r0, #14]
 8007a56:	6183      	str	r3, [r0, #24]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	2208      	movs	r2, #8
 8007a5c:	305c      	adds	r0, #92	@ 0x5c
 8007a5e:	f000 fb4b 	bl	80080f8 <memset>
 8007a62:	4b0d      	ldr	r3, [pc, #52]	@ (8007a98 <std+0x58>)
 8007a64:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a66:	4b0d      	ldr	r3, [pc, #52]	@ (8007a9c <std+0x5c>)
 8007a68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa0 <std+0x60>)
 8007a6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa4 <std+0x64>)
 8007a70:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a72:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <std+0x68>)
 8007a74:	6224      	str	r4, [r4, #32]
 8007a76:	429c      	cmp	r4, r3
 8007a78:	d006      	beq.n	8007a88 <std+0x48>
 8007a7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a7e:	4294      	cmp	r4, r2
 8007a80:	d002      	beq.n	8007a88 <std+0x48>
 8007a82:	33d0      	adds	r3, #208	@ 0xd0
 8007a84:	429c      	cmp	r4, r3
 8007a86:	d105      	bne.n	8007a94 <std+0x54>
 8007a88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a90:	f000 bda4 	b.w	80085dc <__retarget_lock_init_recursive>
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	bf00      	nop
 8007a98:	08007f45 	.word	0x08007f45
 8007a9c:	08007f67 	.word	0x08007f67
 8007aa0:	08007f9f 	.word	0x08007f9f
 8007aa4:	08007fc3 	.word	0x08007fc3
 8007aa8:	20000b70 	.word	0x20000b70

08007aac <stdio_exit_handler>:
 8007aac:	4a02      	ldr	r2, [pc, #8]	@ (8007ab8 <stdio_exit_handler+0xc>)
 8007aae:	4903      	ldr	r1, [pc, #12]	@ (8007abc <stdio_exit_handler+0x10>)
 8007ab0:	4803      	ldr	r0, [pc, #12]	@ (8007ac0 <stdio_exit_handler+0x14>)
 8007ab2:	f000 b919 	b.w	8007ce8 <_fwalk_sglue>
 8007ab6:	bf00      	nop
 8007ab8:	20000110 	.word	0x20000110
 8007abc:	080088f9 	.word	0x080088f9
 8007ac0:	20000120 	.word	0x20000120

08007ac4 <cleanup_stdio>:
 8007ac4:	6841      	ldr	r1, [r0, #4]
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8007af8 <cleanup_stdio+0x34>)
 8007ac8:	4299      	cmp	r1, r3
 8007aca:	b510      	push	{r4, lr}
 8007acc:	4604      	mov	r4, r0
 8007ace:	d001      	beq.n	8007ad4 <cleanup_stdio+0x10>
 8007ad0:	f000 ff12 	bl	80088f8 <_fflush_r>
 8007ad4:	68a1      	ldr	r1, [r4, #8]
 8007ad6:	4b09      	ldr	r3, [pc, #36]	@ (8007afc <cleanup_stdio+0x38>)
 8007ad8:	4299      	cmp	r1, r3
 8007ada:	d002      	beq.n	8007ae2 <cleanup_stdio+0x1e>
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 ff0b 	bl	80088f8 <_fflush_r>
 8007ae2:	68e1      	ldr	r1, [r4, #12]
 8007ae4:	4b06      	ldr	r3, [pc, #24]	@ (8007b00 <cleanup_stdio+0x3c>)
 8007ae6:	4299      	cmp	r1, r3
 8007ae8:	d004      	beq.n	8007af4 <cleanup_stdio+0x30>
 8007aea:	4620      	mov	r0, r4
 8007aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af0:	f000 bf02 	b.w	80088f8 <_fflush_r>
 8007af4:	bd10      	pop	{r4, pc}
 8007af6:	bf00      	nop
 8007af8:	20000b70 	.word	0x20000b70
 8007afc:	20000bd8 	.word	0x20000bd8
 8007b00:	20000c40 	.word	0x20000c40

08007b04 <global_stdio_init.part.0>:
 8007b04:	b510      	push	{r4, lr}
 8007b06:	4b0b      	ldr	r3, [pc, #44]	@ (8007b34 <global_stdio_init.part.0+0x30>)
 8007b08:	4c0b      	ldr	r4, [pc, #44]	@ (8007b38 <global_stdio_init.part.0+0x34>)
 8007b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8007b3c <global_stdio_init.part.0+0x38>)
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	4620      	mov	r0, r4
 8007b10:	2200      	movs	r2, #0
 8007b12:	2104      	movs	r1, #4
 8007b14:	f7ff ff94 	bl	8007a40 <std>
 8007b18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	2109      	movs	r1, #9
 8007b20:	f7ff ff8e 	bl	8007a40 <std>
 8007b24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b28:	2202      	movs	r2, #2
 8007b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b2e:	2112      	movs	r1, #18
 8007b30:	f7ff bf86 	b.w	8007a40 <std>
 8007b34:	20000ca8 	.word	0x20000ca8
 8007b38:	20000b70 	.word	0x20000b70
 8007b3c:	08007aad 	.word	0x08007aad

08007b40 <__sfp_lock_acquire>:
 8007b40:	4801      	ldr	r0, [pc, #4]	@ (8007b48 <__sfp_lock_acquire+0x8>)
 8007b42:	f000 bd4d 	b.w	80085e0 <__retarget_lock_acquire_recursive>
 8007b46:	bf00      	nop
 8007b48:	20000cb1 	.word	0x20000cb1

08007b4c <__sfp_lock_release>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	@ (8007b54 <__sfp_lock_release+0x8>)
 8007b4e:	f000 bd48 	b.w	80085e2 <__retarget_lock_release_recursive>
 8007b52:	bf00      	nop
 8007b54:	20000cb1 	.word	0x20000cb1

08007b58 <__sfp>:
 8007b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	f7ff fff0 	bl	8007b40 <__sfp_lock_acquire>
 8007b60:	4b23      	ldr	r3, [pc, #140]	@ (8007bf0 <__sfp+0x98>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	b90b      	cbnz	r3, 8007b6a <__sfp+0x12>
 8007b66:	f7ff ffcd 	bl	8007b04 <global_stdio_init.part.0>
 8007b6a:	4e22      	ldr	r6, [pc, #136]	@ (8007bf4 <__sfp+0x9c>)
 8007b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	d50f      	bpl.n	8007b94 <__sfp+0x3c>
 8007b74:	6835      	ldr	r5, [r6, #0]
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	d137      	bne.n	8007bea <__sfp+0x92>
 8007b7a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f000 fdaa 	bl	80086d8 <_malloc_r>
 8007b84:	4604      	mov	r4, r0
 8007b86:	bb28      	cbnz	r0, 8007bd4 <__sfp+0x7c>
 8007b88:	6030      	str	r0, [r6, #0]
 8007b8a:	f7ff ffdf 	bl	8007b4c <__sfp_lock_release>
 8007b8e:	230c      	movs	r3, #12
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	e01b      	b.n	8007bcc <__sfp+0x74>
 8007b94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b98:	b9d5      	cbnz	r5, 8007bd0 <__sfp+0x78>
 8007b9a:	4b17      	ldr	r3, [pc, #92]	@ (8007bf8 <__sfp+0xa0>)
 8007b9c:	60e3      	str	r3, [r4, #12]
 8007b9e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ba2:	6665      	str	r5, [r4, #100]	@ 0x64
 8007ba4:	f000 fd1a 	bl	80085dc <__retarget_lock_init_recursive>
 8007ba8:	f7ff ffd0 	bl	8007b4c <__sfp_lock_release>
 8007bac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bb4:	6025      	str	r5, [r4, #0]
 8007bb6:	61a5      	str	r5, [r4, #24]
 8007bb8:	2208      	movs	r2, #8
 8007bba:	4629      	mov	r1, r5
 8007bbc:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8007bc0:	f000 fa9a 	bl	80080f8 <memset>
 8007bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8007bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8007bcc:	4620      	mov	r0, r4
 8007bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bd0:	3468      	adds	r4, #104	@ 0x68
 8007bd2:	e7cd      	b.n	8007b70 <__sfp+0x18>
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	6005      	str	r5, [r0, #0]
 8007bd8:	6043      	str	r3, [r0, #4]
 8007bda:	300c      	adds	r0, #12
 8007bdc:	60a0      	str	r0, [r4, #8]
 8007bde:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8007be2:	4629      	mov	r1, r5
 8007be4:	f000 fa88 	bl	80080f8 <memset>
 8007be8:	6034      	str	r4, [r6, #0]
 8007bea:	6836      	ldr	r6, [r6, #0]
 8007bec:	e7be      	b.n	8007b6c <__sfp+0x14>
 8007bee:	bf00      	nop
 8007bf0:	20000ca8 	.word	0x20000ca8
 8007bf4:	20000110 	.word	0x20000110
 8007bf8:	ffff0001 	.word	0xffff0001

08007bfc <__sinit>:
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	4604      	mov	r4, r0
 8007c00:	f7ff ff9e 	bl	8007b40 <__sfp_lock_acquire>
 8007c04:	6a23      	ldr	r3, [r4, #32]
 8007c06:	b11b      	cbz	r3, 8007c10 <__sinit+0x14>
 8007c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c0c:	f7ff bf9e 	b.w	8007b4c <__sfp_lock_release>
 8007c10:	4b04      	ldr	r3, [pc, #16]	@ (8007c24 <__sinit+0x28>)
 8007c12:	6223      	str	r3, [r4, #32]
 8007c14:	4b04      	ldr	r3, [pc, #16]	@ (8007c28 <__sinit+0x2c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1f5      	bne.n	8007c08 <__sinit+0xc>
 8007c1c:	f7ff ff72 	bl	8007b04 <global_stdio_init.part.0>
 8007c20:	e7f2      	b.n	8007c08 <__sinit+0xc>
 8007c22:	bf00      	nop
 8007c24:	08007ac5 	.word	0x08007ac5
 8007c28:	20000ca8 	.word	0x20000ca8

08007c2c <_fopen_r>:
 8007c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c2e:	460f      	mov	r7, r1
 8007c30:	4611      	mov	r1, r2
 8007c32:	aa01      	add	r2, sp, #4
 8007c34:	4606      	mov	r6, r0
 8007c36:	f000 feb1 	bl	800899c <__sflags>
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	b1b0      	cbz	r0, 8007c6c <_fopen_r+0x40>
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f7ff ff8a 	bl	8007b58 <__sfp>
 8007c44:	4604      	mov	r4, r0
 8007c46:	b188      	cbz	r0, 8007c6c <_fopen_r+0x40>
 8007c48:	4639      	mov	r1, r7
 8007c4a:	9a01      	ldr	r2, [sp, #4]
 8007c4c:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 8007c50:	4630      	mov	r0, r6
 8007c52:	f000 fc63 	bl	800851c <_open_r>
 8007c56:	1e07      	subs	r7, r0, #0
 8007c58:	da0c      	bge.n	8007c74 <_fopen_r+0x48>
 8007c5a:	f7ff ff71 	bl	8007b40 <__sfp_lock_acquire>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c62:	81a3      	strh	r3, [r4, #12]
 8007c64:	f000 fcbb 	bl	80085de <__retarget_lock_close_recursive>
 8007c68:	f7ff ff70 	bl	8007b4c <__sfp_lock_release>
 8007c6c:	2400      	movs	r4, #0
 8007c6e:	4620      	mov	r0, r4
 8007c70:	b003      	add	sp, #12
 8007c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c76:	07db      	lsls	r3, r3, #31
 8007c78:	d405      	bmi.n	8007c86 <_fopen_r+0x5a>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	0598      	lsls	r0, r3, #22
 8007c7e:	d402      	bmi.n	8007c86 <_fopen_r+0x5a>
 8007c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c82:	f000 fcad 	bl	80085e0 <__retarget_lock_acquire_recursive>
 8007c86:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc4 <_fopen_r+0x98>)
 8007c88:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc8 <_fopen_r+0x9c>)
 8007c8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c8e:	b22d      	sxth	r5, r5
 8007c90:	4b0e      	ldr	r3, [pc, #56]	@ (8007ccc <_fopen_r+0xa0>)
 8007c92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c94:	05e9      	lsls	r1, r5, #23
 8007c96:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd0 <_fopen_r+0xa4>)
 8007c98:	81e7      	strh	r7, [r4, #14]
 8007c9a:	81a5      	strh	r5, [r4, #12]
 8007c9c:	6224      	str	r4, [r4, #32]
 8007c9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ca0:	d505      	bpl.n	8007cae <_fopen_r+0x82>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f000 f81b 	bl	8007ce4 <_fseek_r>
 8007cae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cb0:	07da      	lsls	r2, r3, #31
 8007cb2:	d4dc      	bmi.n	8007c6e <_fopen_r+0x42>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	059b      	lsls	r3, r3, #22
 8007cb8:	d4d9      	bmi.n	8007c6e <_fopen_r+0x42>
 8007cba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cbc:	f000 fc91 	bl	80085e2 <__retarget_lock_release_recursive>
 8007cc0:	e7d5      	b.n	8007c6e <_fopen_r+0x42>
 8007cc2:	bf00      	nop
 8007cc4:	08007f45 	.word	0x08007f45
 8007cc8:	08007f67 	.word	0x08007f67
 8007ccc:	08007f9f 	.word	0x08007f9f
 8007cd0:	08007fc3 	.word	0x08007fc3

08007cd4 <fopen>:
 8007cd4:	4b02      	ldr	r3, [pc, #8]	@ (8007ce0 <fopen+0xc>)
 8007cd6:	460a      	mov	r2, r1
 8007cd8:	4601      	mov	r1, r0
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	f7ff bfa6 	b.w	8007c2c <_fopen_r>
 8007ce0:	2000011c 	.word	0x2000011c

08007ce4 <_fseek_r>:
 8007ce4:	f000 b971 	b.w	8007fca <_fseeko_r>

08007ce8 <_fwalk_sglue>:
 8007ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cec:	4607      	mov	r7, r0
 8007cee:	4688      	mov	r8, r1
 8007cf0:	4614      	mov	r4, r2
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8007cfc:	d505      	bpl.n	8007d0a <_fwalk_sglue+0x22>
 8007cfe:	6824      	ldr	r4, [r4, #0]
 8007d00:	2c00      	cmp	r4, #0
 8007d02:	d1f7      	bne.n	8007cf4 <_fwalk_sglue+0xc>
 8007d04:	4630      	mov	r0, r6
 8007d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d0a:	89ab      	ldrh	r3, [r5, #12]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d907      	bls.n	8007d20 <_fwalk_sglue+0x38>
 8007d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d14:	3301      	adds	r3, #1
 8007d16:	d003      	beq.n	8007d20 <_fwalk_sglue+0x38>
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4638      	mov	r0, r7
 8007d1c:	47c0      	blx	r8
 8007d1e:	4306      	orrs	r6, r0
 8007d20:	3568      	adds	r5, #104	@ 0x68
 8007d22:	e7e9      	b.n	8007cf8 <_fwalk_sglue+0x10>

08007d24 <_perror_r>:
 8007d24:	6a03      	ldr	r3, [r0, #32]
 8007d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d28:	68c4      	ldr	r4, [r0, #12]
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	460e      	mov	r6, r1
 8007d2e:	b90b      	cbnz	r3, 8007d34 <_perror_r+0x10>
 8007d30:	f7ff ff64 	bl	8007bfc <__sinit>
 8007d34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d36:	07d8      	lsls	r0, r3, #31
 8007d38:	d405      	bmi.n	8007d46 <_perror_r+0x22>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	0599      	lsls	r1, r3, #22
 8007d3e:	d402      	bmi.n	8007d46 <_perror_r+0x22>
 8007d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d42:	f000 fc4d 	bl	80085e0 <__retarget_lock_acquire_recursive>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f000 fdd5 	bl	80088f8 <_fflush_r>
 8007d4e:	bb1e      	cbnz	r6, 8007d98 <_perror_r+0x74>
 8007d50:	6829      	ldr	r1, [r5, #0]
 8007d52:	ab01      	add	r3, sp, #4
 8007d54:	2201      	movs	r2, #1
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 f9d6 	bl	8008108 <_strerror_r>
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d145      	bne.n	8007dee <_perror_r+0xca>
 8007d62:	4831      	ldr	r0, [pc, #196]	@ (8007e28 <_perror_r+0x104>)
 8007d64:	4f30      	ldr	r7, [pc, #192]	@ (8007e28 <_perror_r+0x104>)
 8007d66:	f7f8 fa8b 	bl	8000280 <strlen>
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	b156      	cbz	r6, 8007d84 <_perror_r+0x60>
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f000 fdea 	bl	8008948 <fileno>
 8007d74:	4633      	mov	r3, r6
 8007d76:	4601      	mov	r1, r0
 8007d78:	463a      	mov	r2, r7
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f000 fbf2 	bl	8008564 <_write_r>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	da47      	bge.n	8007e14 <_perror_r+0xf0>
 8007d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d8c:	81a2      	strh	r2, [r4, #12]
 8007d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d90:	07d2      	lsls	r2, r2, #31
 8007d92:	d542      	bpl.n	8007e1a <_perror_r+0xf6>
 8007d94:	b003      	add	sp, #12
 8007d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d98:	7833      	ldrb	r3, [r6, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0d8      	beq.n	8007d50 <_perror_r+0x2c>
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f7f8 fa6e 	bl	8000280 <strlen>
 8007da4:	4607      	mov	r7, r0
 8007da6:	b157      	cbz	r7, 8007dbe <_perror_r+0x9a>
 8007da8:	4620      	mov	r0, r4
 8007daa:	f000 fdcd 	bl	8008948 <fileno>
 8007dae:	463b      	mov	r3, r7
 8007db0:	4601      	mov	r1, r0
 8007db2:	4632      	mov	r2, r6
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 fbd5 	bl	8008564 <_write_r>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	da14      	bge.n	8007de8 <_perror_r+0xc4>
 8007dbe:	481b      	ldr	r0, [pc, #108]	@ (8007e2c <_perror_r+0x108>)
 8007dc0:	4f1a      	ldr	r7, [pc, #104]	@ (8007e2c <_perror_r+0x108>)
 8007dc2:	f7f8 fa5d 	bl	8000280 <strlen>
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	2e00      	cmp	r6, #0
 8007dca:	d0c1      	beq.n	8007d50 <_perror_r+0x2c>
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 fdbb 	bl	8008948 <fileno>
 8007dd2:	4633      	mov	r3, r6
 8007dd4:	4601      	mov	r1, r0
 8007dd6:	463a      	mov	r2, r7
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 fbc3 	bl	8008564 <_write_r>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	dbb6      	blt.n	8007d50 <_perror_r+0x2c>
 8007de2:	1a36      	subs	r6, r6, r0
 8007de4:	4407      	add	r7, r0
 8007de6:	e7ef      	b.n	8007dc8 <_perror_r+0xa4>
 8007de8:	1a3f      	subs	r7, r7, r0
 8007dea:	4406      	add	r6, r0
 8007dec:	e7db      	b.n	8007da6 <_perror_r+0x82>
 8007dee:	f7f8 fa47 	bl	8000280 <strlen>
 8007df2:	4606      	mov	r6, r0
 8007df4:	2e00      	cmp	r6, #0
 8007df6:	d0b4      	beq.n	8007d62 <_perror_r+0x3e>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fda5 	bl	8008948 <fileno>
 8007dfe:	4633      	mov	r3, r6
 8007e00:	4601      	mov	r1, r0
 8007e02:	463a      	mov	r2, r7
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 fbad 	bl	8008564 <_write_r>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	dba9      	blt.n	8007d62 <_perror_r+0x3e>
 8007e0e:	1a36      	subs	r6, r6, r0
 8007e10:	4407      	add	r7, r0
 8007e12:	e7ef      	b.n	8007df4 <_perror_r+0xd0>
 8007e14:	1a36      	subs	r6, r6, r0
 8007e16:	4407      	add	r7, r0
 8007e18:	e7a8      	b.n	8007d6c <_perror_r+0x48>
 8007e1a:	059b      	lsls	r3, r3, #22
 8007e1c:	d4ba      	bmi.n	8007d94 <_perror_r+0x70>
 8007e1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e20:	f000 fbdf 	bl	80085e2 <__retarget_lock_release_recursive>
 8007e24:	e7b6      	b.n	8007d94 <_perror_r+0x70>
 8007e26:	bf00      	nop
 8007e28:	08008bcf 	.word	0x08008bcf
 8007e2c:	08008bcc 	.word	0x08008bcc

08007e30 <perror>:
 8007e30:	4b02      	ldr	r3, [pc, #8]	@ (8007e3c <perror+0xc>)
 8007e32:	4601      	mov	r1, r0
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	f7ff bf75 	b.w	8007d24 <_perror_r>
 8007e3a:	bf00      	nop
 8007e3c:	2000011c 	.word	0x2000011c

08007e40 <lflush>:
 8007e40:	898b      	ldrh	r3, [r1, #12]
 8007e42:	f003 0309 	and.w	r3, r3, #9
 8007e46:	2b09      	cmp	r3, #9
 8007e48:	d103      	bne.n	8007e52 <lflush+0x12>
 8007e4a:	4b03      	ldr	r3, [pc, #12]	@ (8007e58 <lflush+0x18>)
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	f000 bd53 	b.w	80088f8 <_fflush_r>
 8007e52:	2000      	movs	r0, #0
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	2000011c 	.word	0x2000011c

08007e5c <__srefill_r>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	460c      	mov	r4, r1
 8007e60:	4605      	mov	r5, r0
 8007e62:	b118      	cbz	r0, 8007e6c <__srefill_r+0x10>
 8007e64:	6a03      	ldr	r3, [r0, #32]
 8007e66:	b90b      	cbnz	r3, 8007e6c <__srefill_r+0x10>
 8007e68:	f7ff fec8 	bl	8007bfc <__sinit>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	6063      	str	r3, [r4, #4]
 8007e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e74:	069e      	lsls	r6, r3, #26
 8007e76:	d408      	bmi.n	8007e8a <__srefill_r+0x2e>
 8007e78:	0758      	lsls	r0, r3, #29
 8007e7a:	d445      	bmi.n	8007f08 <__srefill_r+0xac>
 8007e7c:	06d9      	lsls	r1, r3, #27
 8007e7e:	d407      	bmi.n	8007e90 <__srefill_r+0x34>
 8007e80:	2209      	movs	r2, #9
 8007e82:	602a      	str	r2, [r5, #0]
 8007e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}
 8007e90:	071a      	lsls	r2, r3, #28
 8007e92:	d50b      	bpl.n	8007eac <__srefill_r+0x50>
 8007e94:	4621      	mov	r1, r4
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 fd2e 	bl	80088f8 <_fflush_r>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d1f4      	bne.n	8007e8a <__srefill_r+0x2e>
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	60a0      	str	r0, [r4, #8]
 8007ea4:	f023 0308 	bic.w	r3, r3, #8
 8007ea8:	81a3      	strh	r3, [r4, #12]
 8007eaa:	61a0      	str	r0, [r4, #24]
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	f043 0304 	orr.w	r3, r3, #4
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	6923      	ldr	r3, [r4, #16]
 8007eb6:	b91b      	cbnz	r3, 8007ec0 <__srefill_r+0x64>
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f000 fdca 	bl	8008a54 <__smakebuf_r>
 8007ec0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8007ec4:	07b3      	lsls	r3, r6, #30
 8007ec6:	d00f      	beq.n	8007ee8 <__srefill_r+0x8c>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	4a1b      	ldr	r2, [pc, #108]	@ (8007f38 <__srefill_r+0xdc>)
 8007ecc:	491b      	ldr	r1, [pc, #108]	@ (8007f3c <__srefill_r+0xe0>)
 8007ece:	481c      	ldr	r0, [pc, #112]	@ (8007f40 <__srefill_r+0xe4>)
 8007ed0:	81a3      	strh	r3, [r4, #12]
 8007ed2:	f7ff ff09 	bl	8007ce8 <_fwalk_sglue>
 8007ed6:	81a6      	strh	r6, [r4, #12]
 8007ed8:	f006 0609 	and.w	r6, r6, #9
 8007edc:	2e09      	cmp	r6, #9
 8007ede:	d103      	bne.n	8007ee8 <__srefill_r+0x8c>
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f000 fc84 	bl	80087f0 <__sflush_r>
 8007ee8:	6922      	ldr	r2, [r4, #16]
 8007eea:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8007eec:	6963      	ldr	r3, [r4, #20]
 8007eee:	6a21      	ldr	r1, [r4, #32]
 8007ef0:	6022      	str	r2, [r4, #0]
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	47b0      	blx	r6
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	6060      	str	r0, [r4, #4]
 8007efa:	dc17      	bgt.n	8007f2c <__srefill_r+0xd0>
 8007efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f00:	d116      	bne.n	8007f30 <__srefill_r+0xd4>
 8007f02:	f043 0320 	orr.w	r3, r3, #32
 8007f06:	e7bf      	b.n	8007e88 <__srefill_r+0x2c>
 8007f08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f0a:	2900      	cmp	r1, #0
 8007f0c:	d0d2      	beq.n	8007eb4 <__srefill_r+0x58>
 8007f0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f12:	4299      	cmp	r1, r3
 8007f14:	d002      	beq.n	8007f1c <__srefill_r+0xc0>
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 fb72 	bl	8008600 <_free_r>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f22:	6063      	str	r3, [r4, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0c5      	beq.n	8007eb4 <__srefill_r+0x58>
 8007f28:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007f2a:	6023      	str	r3, [r4, #0]
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e7ae      	b.n	8007e8e <__srefill_r+0x32>
 8007f30:	2200      	movs	r2, #0
 8007f32:	6062      	str	r2, [r4, #4]
 8007f34:	e7a6      	b.n	8007e84 <__srefill_r+0x28>
 8007f36:	bf00      	nop
 8007f38:	20000110 	.word	0x20000110
 8007f3c:	08007e41 	.word	0x08007e41
 8007f40:	20000120 	.word	0x20000120

08007f44 <__sread>:
 8007f44:	b510      	push	{r4, lr}
 8007f46:	460c      	mov	r4, r1
 8007f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4c:	f000 faf8 	bl	8008540 <_read_r>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	bfab      	itete	ge
 8007f54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f56:	89a3      	ldrhlt	r3, [r4, #12]
 8007f58:	181b      	addge	r3, r3, r0
 8007f5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f5e:	bfac      	ite	ge
 8007f60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f62:	81a3      	strhlt	r3, [r4, #12]
 8007f64:	bd10      	pop	{r4, pc}

08007f66 <__swrite>:
 8007f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6a:	461f      	mov	r7, r3
 8007f6c:	898b      	ldrh	r3, [r1, #12]
 8007f6e:	05db      	lsls	r3, r3, #23
 8007f70:	4605      	mov	r5, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	4616      	mov	r6, r2
 8007f76:	d505      	bpl.n	8007f84 <__swrite+0x1e>
 8007f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f000 faba 	bl	80084f8 <_lseek_r>
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f8e:	81a3      	strh	r3, [r4, #12]
 8007f90:	4632      	mov	r2, r6
 8007f92:	463b      	mov	r3, r7
 8007f94:	4628      	mov	r0, r5
 8007f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9a:	f000 bae3 	b.w	8008564 <_write_r>

08007f9e <__sseek>:
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa6:	f000 faa7 	bl	80084f8 <_lseek_r>
 8007faa:	1c43      	adds	r3, r0, #1
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	bf15      	itete	ne
 8007fb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fba:	81a3      	strheq	r3, [r4, #12]
 8007fbc:	bf18      	it	ne
 8007fbe:	81a3      	strhne	r3, [r4, #12]
 8007fc0:	bd10      	pop	{r4, pc}

08007fc2 <__sclose>:
 8007fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc6:	f000 ba87 	b.w	80084d8 <_close_r>

08007fca <_fseeko_r>:
 8007fca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fce:	460c      	mov	r4, r1
 8007fd0:	4690      	mov	r8, r2
 8007fd2:	461e      	mov	r6, r3
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	b118      	cbz	r0, 8007fe0 <_fseeko_r+0x16>
 8007fd8:	6a03      	ldr	r3, [r0, #32]
 8007fda:	b90b      	cbnz	r3, 8007fe0 <_fseeko_r+0x16>
 8007fdc:	f7ff fe0e 	bl	8007bfc <__sinit>
 8007fe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fe2:	07d9      	lsls	r1, r3, #31
 8007fe4:	d405      	bmi.n	8007ff2 <_fseeko_r+0x28>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	059a      	lsls	r2, r3, #22
 8007fea:	d402      	bmi.n	8007ff2 <_fseeko_r+0x28>
 8007fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fee:	f000 faf7 	bl	80085e0 <__retarget_lock_acquire_recursive>
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 8007ff8:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8007ffc:	d103      	bne.n	8008006 <_fseeko_r+0x3c>
 8007ffe:	4621      	mov	r1, r4
 8008000:	4628      	mov	r0, r5
 8008002:	f000 fc79 	bl	80088f8 <_fflush_r>
 8008006:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 800800a:	f1b9 0f00 	cmp.w	r9, #0
 800800e:	d102      	bne.n	8008016 <_fseeko_r+0x4c>
 8008010:	231d      	movs	r3, #29
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	e058      	b.n	80080c8 <_fseeko_r+0xfe>
 8008016:	2e01      	cmp	r6, #1
 8008018:	d03a      	beq.n	8008090 <_fseeko_r+0xc6>
 800801a:	f036 0302 	bics.w	r3, r6, #2
 800801e:	d162      	bne.n	80080e6 <_fseeko_r+0x11c>
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	b91b      	cbnz	r3, 800802c <_fseeko_r+0x62>
 8008024:	4621      	mov	r1, r4
 8008026:	4628      	mov	r0, r5
 8008028:	f000 fd14 	bl	8008a54 <__smakebuf_r>
 800802c:	4621      	mov	r1, r4
 800802e:	4628      	mov	r0, r5
 8008030:	f000 fc62 	bl	80088f8 <_fflush_r>
 8008034:	4607      	mov	r7, r0
 8008036:	2800      	cmp	r0, #0
 8008038:	d146      	bne.n	80080c8 <_fseeko_r+0xfe>
 800803a:	6a21      	ldr	r1, [r4, #32]
 800803c:	4633      	mov	r3, r6
 800803e:	4642      	mov	r2, r8
 8008040:	4628      	mov	r0, r5
 8008042:	47c8      	blx	r9
 8008044:	3001      	adds	r0, #1
 8008046:	d03f      	beq.n	80080c8 <_fseeko_r+0xfe>
 8008048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800804a:	b141      	cbz	r1, 800805e <_fseeko_r+0x94>
 800804c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008050:	4299      	cmp	r1, r3
 8008052:	d002      	beq.n	800805a <_fseeko_r+0x90>
 8008054:	4628      	mov	r0, r5
 8008056:	f000 fad3 	bl	8008600 <_free_r>
 800805a:	2300      	movs	r3, #0
 800805c:	6363      	str	r3, [r4, #52]	@ 0x34
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	2100      	movs	r1, #0
 8008066:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	2208      	movs	r2, #8
 800806e:	6061      	str	r1, [r4, #4]
 8008070:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8008074:	f000 f840 	bl	80080f8 <memset>
 8008078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800807a:	07da      	lsls	r2, r3, #31
 800807c:	d405      	bmi.n	800808a <_fseeko_r+0xc0>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	059b      	lsls	r3, r3, #22
 8008082:	d402      	bmi.n	800808a <_fseeko_r+0xc0>
 8008084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008086:	f000 faac 	bl	80085e2 <__retarget_lock_release_recursive>
 800808a:	4638      	mov	r0, r7
 800808c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008090:	4621      	mov	r1, r4
 8008092:	4628      	mov	r0, r5
 8008094:	f000 fc30 	bl	80088f8 <_fflush_r>
 8008098:	89a2      	ldrh	r2, [r4, #12]
 800809a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800809e:	d00d      	beq.n	80080bc <_fseeko_r+0xf2>
 80080a0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80080a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080a6:	075f      	lsls	r7, r3, #29
 80080a8:	d514      	bpl.n	80080d4 <_fseeko_r+0x10a>
 80080aa:	6863      	ldr	r3, [r4, #4]
 80080ac:	1ac0      	subs	r0, r0, r3
 80080ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080b0:	b10b      	cbz	r3, 80080b6 <_fseeko_r+0xec>
 80080b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080b4:	1ac0      	subs	r0, r0, r3
 80080b6:	4480      	add	r8, r0
 80080b8:	2600      	movs	r6, #0
 80080ba:	e7b1      	b.n	8008020 <_fseeko_r+0x56>
 80080bc:	4633      	mov	r3, r6
 80080be:	6a21      	ldr	r1, [r4, #32]
 80080c0:	4628      	mov	r0, r5
 80080c2:	47c8      	blx	r9
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d1ec      	bne.n	80080a2 <_fseeko_r+0xd8>
 80080c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080ca:	07d8      	lsls	r0, r3, #31
 80080cc:	d50d      	bpl.n	80080ea <_fseeko_r+0x120>
 80080ce:	f04f 37ff 	mov.w	r7, #4294967295
 80080d2:	e7da      	b.n	800808a <_fseeko_r+0xc0>
 80080d4:	071e      	lsls	r6, r3, #28
 80080d6:	d5ee      	bpl.n	80080b6 <_fseeko_r+0xec>
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0eb      	beq.n	80080b6 <_fseeko_r+0xec>
 80080de:	6922      	ldr	r2, [r4, #16]
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	4418      	add	r0, r3
 80080e4:	e7e7      	b.n	80080b6 <_fseeko_r+0xec>
 80080e6:	2316      	movs	r3, #22
 80080e8:	e793      	b.n	8008012 <_fseeko_r+0x48>
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	0599      	lsls	r1, r3, #22
 80080ee:	d4ee      	bmi.n	80080ce <_fseeko_r+0x104>
 80080f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080f2:	f000 fa76 	bl	80085e2 <__retarget_lock_release_recursive>
 80080f6:	e7ea      	b.n	80080ce <_fseeko_r+0x104>

080080f8 <memset>:
 80080f8:	4402      	add	r2, r0
 80080fa:	4603      	mov	r3, r0
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d100      	bne.n	8008102 <memset+0xa>
 8008100:	4770      	bx	lr
 8008102:	f803 1b01 	strb.w	r1, [r3], #1
 8008106:	e7f9      	b.n	80080fc <memset+0x4>

08008108 <_strerror_r>:
 8008108:	b510      	push	{r4, lr}
 800810a:	4604      	mov	r4, r0
 800810c:	4608      	mov	r0, r1
 800810e:	4611      	mov	r1, r2
 8008110:	461a      	mov	r2, r3
 8008112:	288e      	cmp	r0, #142	@ 0x8e
 8008114:	f200 8130 	bhi.w	8008378 <_strerror_r+0x270>
 8008118:	e8df f010 	tbh	[pc, r0, lsl #1]
 800811c:	0138008f 	.word	0x0138008f
 8008120:	00940092 	.word	0x00940092
 8008124:	00980096 	.word	0x00980096
 8008128:	009c009a 	.word	0x009c009a
 800812c:	00a2009e 	.word	0x00a2009e
 8008130:	00a800a4 	.word	0x00a800a4
 8008134:	00ac00aa 	.word	0x00ac00aa
 8008138:	012e00ae 	.word	0x012e00ae
 800813c:	00b200b0 	.word	0x00b200b0
 8008140:	00b600b4 	.word	0x00b600b4
 8008144:	00be00b8 	.word	0x00be00b8
 8008148:	00c600c0 	.word	0x00c600c0
 800814c:	00ca00c8 	.word	0x00ca00c8
 8008150:	00ce00cc 	.word	0x00ce00cc
 8008154:	00d600d2 	.word	0x00d600d2
 8008158:	00da00d8 	.word	0x00da00d8
 800815c:	00de00dc 	.word	0x00de00dc
 8008160:	00e200e0 	.word	0x00e200e0
 8008164:	012e00e4 	.word	0x012e00e4
 8008168:	012e012e 	.word	0x012e012e
 800816c:	012e012e 	.word	0x012e012e
 8008170:	012e012e 	.word	0x012e012e
 8008174:	00e8012e 	.word	0x00e8012e
 8008178:	012e00ec 	.word	0x012e00ec
 800817c:	012e012e 	.word	0x012e012e
 8008180:	012e012e 	.word	0x012e012e
 8008184:	012e012e 	.word	0x012e012e
 8008188:	012e012e 	.word	0x012e012e
 800818c:	012e012e 	.word	0x012e012e
 8008190:	012e012e 	.word	0x012e012e
 8008194:	010800ee 	.word	0x010800ee
 8008198:	00f200f0 	.word	0x00f200f0
 800819c:	012e012e 	.word	0x012e012e
 80081a0:	00f4012e 	.word	0x00f4012e
 80081a4:	012e012e 	.word	0x012e012e
 80081a8:	00f6012e 	.word	0x00f6012e
 80081ac:	012e012e 	.word	0x012e012e
 80081b0:	012e00fa 	.word	0x012e00fa
 80081b4:	00fc012e 	.word	0x00fc012e
 80081b8:	012e012e 	.word	0x012e012e
 80081bc:	012e012e 	.word	0x012e012e
 80081c0:	012e012e 	.word	0x012e012e
 80081c4:	012e012e 	.word	0x012e012e
 80081c8:	012e012e 	.word	0x012e012e
 80081cc:	012e00fe 	.word	0x012e00fe
 80081d0:	01020100 	.word	0x01020100
 80081d4:	012e0104 	.word	0x012e0104
 80081d8:	0126012e 	.word	0x0126012e
 80081dc:	012e012e 	.word	0x012e012e
 80081e0:	012e012e 	.word	0x012e012e
 80081e4:	012e012e 	.word	0x012e012e
 80081e8:	012e012e 	.word	0x012e012e
 80081ec:	01060114 	.word	0x01060114
 80081f0:	010c010a 	.word	0x010c010a
 80081f4:	0110010e 	.word	0x0110010e
 80081f8:	0112012e 	.word	0x0112012e
 80081fc:	011a0116 	.word	0x011a0116
 8008200:	00c200ea 	.word	0x00c200ea
 8008204:	00ba012c 	.word	0x00ba012c
 8008208:	00bc00d0 	.word	0x00bc00d0
 800820c:	00a600a0 	.word	0x00a600a0
 8008210:	00f8012a 	.word	0x00f8012a
 8008214:	0118012e 	.word	0x0118012e
 8008218:	011e00c4 	.word	0x011e00c4
 800821c:	012e011c 	.word	0x012e011c
 8008220:	012e012e 	.word	0x012e012e
 8008224:	012e012e 	.word	0x012e012e
 8008228:	012e00d4 	.word	0x012e00d4
 800822c:	012e012e 	.word	0x012e012e
 8008230:	012800e6 	.word	0x012800e6
 8008234:	01220120 	.word	0x01220120
 8008238:	0124      	.short	0x0124
 800823a:	4b55      	ldr	r3, [pc, #340]	@ (8008390 <_strerror_r+0x288>)
 800823c:	4618      	mov	r0, r3
 800823e:	bd10      	pop	{r4, pc}
 8008240:	4b54      	ldr	r3, [pc, #336]	@ (8008394 <_strerror_r+0x28c>)
 8008242:	e7fb      	b.n	800823c <_strerror_r+0x134>
 8008244:	4b54      	ldr	r3, [pc, #336]	@ (8008398 <_strerror_r+0x290>)
 8008246:	e7f9      	b.n	800823c <_strerror_r+0x134>
 8008248:	4b54      	ldr	r3, [pc, #336]	@ (800839c <_strerror_r+0x294>)
 800824a:	e7f7      	b.n	800823c <_strerror_r+0x134>
 800824c:	4b54      	ldr	r3, [pc, #336]	@ (80083a0 <_strerror_r+0x298>)
 800824e:	e7f5      	b.n	800823c <_strerror_r+0x134>
 8008250:	4b54      	ldr	r3, [pc, #336]	@ (80083a4 <_strerror_r+0x29c>)
 8008252:	e7f3      	b.n	800823c <_strerror_r+0x134>
 8008254:	4b54      	ldr	r3, [pc, #336]	@ (80083a8 <_strerror_r+0x2a0>)
 8008256:	e7f1      	b.n	800823c <_strerror_r+0x134>
 8008258:	4b54      	ldr	r3, [pc, #336]	@ (80083ac <_strerror_r+0x2a4>)
 800825a:	e7ef      	b.n	800823c <_strerror_r+0x134>
 800825c:	4b54      	ldr	r3, [pc, #336]	@ (80083b0 <_strerror_r+0x2a8>)
 800825e:	e7ed      	b.n	800823c <_strerror_r+0x134>
 8008260:	4b54      	ldr	r3, [pc, #336]	@ (80083b4 <_strerror_r+0x2ac>)
 8008262:	e7eb      	b.n	800823c <_strerror_r+0x134>
 8008264:	4b54      	ldr	r3, [pc, #336]	@ (80083b8 <_strerror_r+0x2b0>)
 8008266:	e7e9      	b.n	800823c <_strerror_r+0x134>
 8008268:	4b54      	ldr	r3, [pc, #336]	@ (80083bc <_strerror_r+0x2b4>)
 800826a:	e7e7      	b.n	800823c <_strerror_r+0x134>
 800826c:	4b54      	ldr	r3, [pc, #336]	@ (80083c0 <_strerror_r+0x2b8>)
 800826e:	e7e5      	b.n	800823c <_strerror_r+0x134>
 8008270:	4b54      	ldr	r3, [pc, #336]	@ (80083c4 <_strerror_r+0x2bc>)
 8008272:	e7e3      	b.n	800823c <_strerror_r+0x134>
 8008274:	4b54      	ldr	r3, [pc, #336]	@ (80083c8 <_strerror_r+0x2c0>)
 8008276:	e7e1      	b.n	800823c <_strerror_r+0x134>
 8008278:	4b54      	ldr	r3, [pc, #336]	@ (80083cc <_strerror_r+0x2c4>)
 800827a:	e7df      	b.n	800823c <_strerror_r+0x134>
 800827c:	4b54      	ldr	r3, [pc, #336]	@ (80083d0 <_strerror_r+0x2c8>)
 800827e:	e7dd      	b.n	800823c <_strerror_r+0x134>
 8008280:	4b54      	ldr	r3, [pc, #336]	@ (80083d4 <_strerror_r+0x2cc>)
 8008282:	e7db      	b.n	800823c <_strerror_r+0x134>
 8008284:	4b54      	ldr	r3, [pc, #336]	@ (80083d8 <_strerror_r+0x2d0>)
 8008286:	e7d9      	b.n	800823c <_strerror_r+0x134>
 8008288:	4b54      	ldr	r3, [pc, #336]	@ (80083dc <_strerror_r+0x2d4>)
 800828a:	e7d7      	b.n	800823c <_strerror_r+0x134>
 800828c:	4b54      	ldr	r3, [pc, #336]	@ (80083e0 <_strerror_r+0x2d8>)
 800828e:	e7d5      	b.n	800823c <_strerror_r+0x134>
 8008290:	4b54      	ldr	r3, [pc, #336]	@ (80083e4 <_strerror_r+0x2dc>)
 8008292:	e7d3      	b.n	800823c <_strerror_r+0x134>
 8008294:	4b54      	ldr	r3, [pc, #336]	@ (80083e8 <_strerror_r+0x2e0>)
 8008296:	e7d1      	b.n	800823c <_strerror_r+0x134>
 8008298:	4b54      	ldr	r3, [pc, #336]	@ (80083ec <_strerror_r+0x2e4>)
 800829a:	e7cf      	b.n	800823c <_strerror_r+0x134>
 800829c:	4b54      	ldr	r3, [pc, #336]	@ (80083f0 <_strerror_r+0x2e8>)
 800829e:	e7cd      	b.n	800823c <_strerror_r+0x134>
 80082a0:	4b54      	ldr	r3, [pc, #336]	@ (80083f4 <_strerror_r+0x2ec>)
 80082a2:	e7cb      	b.n	800823c <_strerror_r+0x134>
 80082a4:	4b54      	ldr	r3, [pc, #336]	@ (80083f8 <_strerror_r+0x2f0>)
 80082a6:	e7c9      	b.n	800823c <_strerror_r+0x134>
 80082a8:	4b54      	ldr	r3, [pc, #336]	@ (80083fc <_strerror_r+0x2f4>)
 80082aa:	e7c7      	b.n	800823c <_strerror_r+0x134>
 80082ac:	4b54      	ldr	r3, [pc, #336]	@ (8008400 <_strerror_r+0x2f8>)
 80082ae:	e7c5      	b.n	800823c <_strerror_r+0x134>
 80082b0:	4b54      	ldr	r3, [pc, #336]	@ (8008404 <_strerror_r+0x2fc>)
 80082b2:	e7c3      	b.n	800823c <_strerror_r+0x134>
 80082b4:	4b54      	ldr	r3, [pc, #336]	@ (8008408 <_strerror_r+0x300>)
 80082b6:	e7c1      	b.n	800823c <_strerror_r+0x134>
 80082b8:	4b54      	ldr	r3, [pc, #336]	@ (800840c <_strerror_r+0x304>)
 80082ba:	e7bf      	b.n	800823c <_strerror_r+0x134>
 80082bc:	4b54      	ldr	r3, [pc, #336]	@ (8008410 <_strerror_r+0x308>)
 80082be:	e7bd      	b.n	800823c <_strerror_r+0x134>
 80082c0:	4b54      	ldr	r3, [pc, #336]	@ (8008414 <_strerror_r+0x30c>)
 80082c2:	e7bb      	b.n	800823c <_strerror_r+0x134>
 80082c4:	4b54      	ldr	r3, [pc, #336]	@ (8008418 <_strerror_r+0x310>)
 80082c6:	e7b9      	b.n	800823c <_strerror_r+0x134>
 80082c8:	4b54      	ldr	r3, [pc, #336]	@ (800841c <_strerror_r+0x314>)
 80082ca:	e7b7      	b.n	800823c <_strerror_r+0x134>
 80082cc:	4b54      	ldr	r3, [pc, #336]	@ (8008420 <_strerror_r+0x318>)
 80082ce:	e7b5      	b.n	800823c <_strerror_r+0x134>
 80082d0:	4b54      	ldr	r3, [pc, #336]	@ (8008424 <_strerror_r+0x31c>)
 80082d2:	e7b3      	b.n	800823c <_strerror_r+0x134>
 80082d4:	4b54      	ldr	r3, [pc, #336]	@ (8008428 <_strerror_r+0x320>)
 80082d6:	e7b1      	b.n	800823c <_strerror_r+0x134>
 80082d8:	4b54      	ldr	r3, [pc, #336]	@ (800842c <_strerror_r+0x324>)
 80082da:	e7af      	b.n	800823c <_strerror_r+0x134>
 80082dc:	4b54      	ldr	r3, [pc, #336]	@ (8008430 <_strerror_r+0x328>)
 80082de:	e7ad      	b.n	800823c <_strerror_r+0x134>
 80082e0:	4b54      	ldr	r3, [pc, #336]	@ (8008434 <_strerror_r+0x32c>)
 80082e2:	e7ab      	b.n	800823c <_strerror_r+0x134>
 80082e4:	4b54      	ldr	r3, [pc, #336]	@ (8008438 <_strerror_r+0x330>)
 80082e6:	e7a9      	b.n	800823c <_strerror_r+0x134>
 80082e8:	4b54      	ldr	r3, [pc, #336]	@ (800843c <_strerror_r+0x334>)
 80082ea:	e7a7      	b.n	800823c <_strerror_r+0x134>
 80082ec:	4b54      	ldr	r3, [pc, #336]	@ (8008440 <_strerror_r+0x338>)
 80082ee:	e7a5      	b.n	800823c <_strerror_r+0x134>
 80082f0:	4b54      	ldr	r3, [pc, #336]	@ (8008444 <_strerror_r+0x33c>)
 80082f2:	e7a3      	b.n	800823c <_strerror_r+0x134>
 80082f4:	4b54      	ldr	r3, [pc, #336]	@ (8008448 <_strerror_r+0x340>)
 80082f6:	e7a1      	b.n	800823c <_strerror_r+0x134>
 80082f8:	4b54      	ldr	r3, [pc, #336]	@ (800844c <_strerror_r+0x344>)
 80082fa:	e79f      	b.n	800823c <_strerror_r+0x134>
 80082fc:	4b54      	ldr	r3, [pc, #336]	@ (8008450 <_strerror_r+0x348>)
 80082fe:	e79d      	b.n	800823c <_strerror_r+0x134>
 8008300:	4b54      	ldr	r3, [pc, #336]	@ (8008454 <_strerror_r+0x34c>)
 8008302:	e79b      	b.n	800823c <_strerror_r+0x134>
 8008304:	4b54      	ldr	r3, [pc, #336]	@ (8008458 <_strerror_r+0x350>)
 8008306:	e799      	b.n	800823c <_strerror_r+0x134>
 8008308:	4b54      	ldr	r3, [pc, #336]	@ (800845c <_strerror_r+0x354>)
 800830a:	e797      	b.n	800823c <_strerror_r+0x134>
 800830c:	4b54      	ldr	r3, [pc, #336]	@ (8008460 <_strerror_r+0x358>)
 800830e:	e795      	b.n	800823c <_strerror_r+0x134>
 8008310:	4b54      	ldr	r3, [pc, #336]	@ (8008464 <_strerror_r+0x35c>)
 8008312:	e793      	b.n	800823c <_strerror_r+0x134>
 8008314:	4b54      	ldr	r3, [pc, #336]	@ (8008468 <_strerror_r+0x360>)
 8008316:	e791      	b.n	800823c <_strerror_r+0x134>
 8008318:	4b54      	ldr	r3, [pc, #336]	@ (800846c <_strerror_r+0x364>)
 800831a:	e78f      	b.n	800823c <_strerror_r+0x134>
 800831c:	4b54      	ldr	r3, [pc, #336]	@ (8008470 <_strerror_r+0x368>)
 800831e:	e78d      	b.n	800823c <_strerror_r+0x134>
 8008320:	4b54      	ldr	r3, [pc, #336]	@ (8008474 <_strerror_r+0x36c>)
 8008322:	e78b      	b.n	800823c <_strerror_r+0x134>
 8008324:	4b54      	ldr	r3, [pc, #336]	@ (8008478 <_strerror_r+0x370>)
 8008326:	e789      	b.n	800823c <_strerror_r+0x134>
 8008328:	4b54      	ldr	r3, [pc, #336]	@ (800847c <_strerror_r+0x374>)
 800832a:	e787      	b.n	800823c <_strerror_r+0x134>
 800832c:	4b54      	ldr	r3, [pc, #336]	@ (8008480 <_strerror_r+0x378>)
 800832e:	e785      	b.n	800823c <_strerror_r+0x134>
 8008330:	4b54      	ldr	r3, [pc, #336]	@ (8008484 <_strerror_r+0x37c>)
 8008332:	e783      	b.n	800823c <_strerror_r+0x134>
 8008334:	4b54      	ldr	r3, [pc, #336]	@ (8008488 <_strerror_r+0x380>)
 8008336:	e781      	b.n	800823c <_strerror_r+0x134>
 8008338:	4b54      	ldr	r3, [pc, #336]	@ (800848c <_strerror_r+0x384>)
 800833a:	e77f      	b.n	800823c <_strerror_r+0x134>
 800833c:	4b54      	ldr	r3, [pc, #336]	@ (8008490 <_strerror_r+0x388>)
 800833e:	e77d      	b.n	800823c <_strerror_r+0x134>
 8008340:	4b54      	ldr	r3, [pc, #336]	@ (8008494 <_strerror_r+0x38c>)
 8008342:	e77b      	b.n	800823c <_strerror_r+0x134>
 8008344:	4b54      	ldr	r3, [pc, #336]	@ (8008498 <_strerror_r+0x390>)
 8008346:	e779      	b.n	800823c <_strerror_r+0x134>
 8008348:	4b54      	ldr	r3, [pc, #336]	@ (800849c <_strerror_r+0x394>)
 800834a:	e777      	b.n	800823c <_strerror_r+0x134>
 800834c:	4b54      	ldr	r3, [pc, #336]	@ (80084a0 <_strerror_r+0x398>)
 800834e:	e775      	b.n	800823c <_strerror_r+0x134>
 8008350:	4b54      	ldr	r3, [pc, #336]	@ (80084a4 <_strerror_r+0x39c>)
 8008352:	e773      	b.n	800823c <_strerror_r+0x134>
 8008354:	4b54      	ldr	r3, [pc, #336]	@ (80084a8 <_strerror_r+0x3a0>)
 8008356:	e771      	b.n	800823c <_strerror_r+0x134>
 8008358:	4b54      	ldr	r3, [pc, #336]	@ (80084ac <_strerror_r+0x3a4>)
 800835a:	e76f      	b.n	800823c <_strerror_r+0x134>
 800835c:	4b54      	ldr	r3, [pc, #336]	@ (80084b0 <_strerror_r+0x3a8>)
 800835e:	e76d      	b.n	800823c <_strerror_r+0x134>
 8008360:	4b54      	ldr	r3, [pc, #336]	@ (80084b4 <_strerror_r+0x3ac>)
 8008362:	e76b      	b.n	800823c <_strerror_r+0x134>
 8008364:	4b54      	ldr	r3, [pc, #336]	@ (80084b8 <_strerror_r+0x3b0>)
 8008366:	e769      	b.n	800823c <_strerror_r+0x134>
 8008368:	4b54      	ldr	r3, [pc, #336]	@ (80084bc <_strerror_r+0x3b4>)
 800836a:	e767      	b.n	800823c <_strerror_r+0x134>
 800836c:	4b54      	ldr	r3, [pc, #336]	@ (80084c0 <_strerror_r+0x3b8>)
 800836e:	e765      	b.n	800823c <_strerror_r+0x134>
 8008370:	4b54      	ldr	r3, [pc, #336]	@ (80084c4 <_strerror_r+0x3bc>)
 8008372:	e763      	b.n	800823c <_strerror_r+0x134>
 8008374:	4b54      	ldr	r3, [pc, #336]	@ (80084c8 <_strerror_r+0x3c0>)
 8008376:	e761      	b.n	800823c <_strerror_r+0x134>
 8008378:	2a00      	cmp	r2, #0
 800837a:	bf08      	it	eq
 800837c:	4622      	moveq	r2, r4
 800837e:	f000 f8a9 	bl	80084d4 <_user_strerror>
 8008382:	4b52      	ldr	r3, [pc, #328]	@ (80084cc <_strerror_r+0x3c4>)
 8008384:	2800      	cmp	r0, #0
 8008386:	bf18      	it	ne
 8008388:	4603      	movne	r3, r0
 800838a:	e757      	b.n	800823c <_strerror_r+0x134>
 800838c:	4b50      	ldr	r3, [pc, #320]	@ (80084d0 <_strerror_r+0x3c8>)
 800838e:	e755      	b.n	800823c <_strerror_r+0x134>
 8008390:	08008bd1 	.word	0x08008bd1
 8008394:	08008be3 	.word	0x08008be3
 8008398:	08008bfd 	.word	0x08008bfd
 800839c:	08008c0d 	.word	0x08008c0d
 80083a0:	08008c25 	.word	0x08008c25
 80083a4:	08008c2f 	.word	0x08008c2f
 80083a8:	08008c49 	.word	0x08008c49
 80083ac:	08008c5b 	.word	0x08008c5b
 80083b0:	08008c6d 	.word	0x08008c6d
 80083b4:	08008c86 	.word	0x08008c86
 80083b8:	08008c96 	.word	0x08008c96
 80083bc:	08008ca2 	.word	0x08008ca2
 80083c0:	08008cbf 	.word	0x08008cbf
 80083c4:	08008cd1 	.word	0x08008cd1
 80083c8:	08008ce2 	.word	0x08008ce2
 80083cc:	08008cf4 	.word	0x08008cf4
 80083d0:	08008d00 	.word	0x08008d00
 80083d4:	08008d18 	.word	0x08008d18
 80083d8:	08008d24 	.word	0x08008d24
 80083dc:	08008d36 	.word	0x08008d36
 80083e0:	08008d45 	.word	0x08008d45
 80083e4:	08008d55 	.word	0x08008d55
 80083e8:	08008d62 	.word	0x08008d62
 80083ec:	08008d81 	.word	0x08008d81
 80083f0:	08008d90 	.word	0x08008d90
 80083f4:	08008da1 	.word	0x08008da1
 80083f8:	08008dc5 	.word	0x08008dc5
 80083fc:	08008de3 	.word	0x08008de3
 8008400:	08008e01 	.word	0x08008e01
 8008404:	08008e21 	.word	0x08008e21
 8008408:	08008e38 	.word	0x08008e38
 800840c:	08008e47 	.word	0x08008e47
 8008410:	08008e56 	.word	0x08008e56
 8008414:	08008e6a 	.word	0x08008e6a
 8008418:	08008e82 	.word	0x08008e82
 800841c:	08008e90 	.word	0x08008e90
 8008420:	08008e9d 	.word	0x08008e9d
 8008424:	08008eb3 	.word	0x08008eb3
 8008428:	08008ec2 	.word	0x08008ec2
 800842c:	08008ece 	.word	0x08008ece
 8008430:	08008efd 	.word	0x08008efd
 8008434:	08008f0e 	.word	0x08008f0e
 8008438:	08008f29 	.word	0x08008f29
 800843c:	08008f3c 	.word	0x08008f3c
 8008440:	08008f52 	.word	0x08008f52
 8008444:	08008f5b 	.word	0x08008f5b
 8008448:	08008f72 	.word	0x08008f72
 800844c:	08008f7a 	.word	0x08008f7a
 8008450:	08008f87 	.word	0x08008f87
 8008454:	08008f9c 	.word	0x08008f9c
 8008458:	08008fb0 	.word	0x08008fb0
 800845c:	08008fc8 	.word	0x08008fc8
 8008460:	08008fd7 	.word	0x08008fd7
 8008464:	08008fe8 	.word	0x08008fe8
 8008468:	08008ffb 	.word	0x08008ffb
 800846c:	08009007 	.word	0x08009007
 8008470:	08009020 	.word	0x08009020
 8008474:	08009034 	.word	0x08009034
 8008478:	0800904f 	.word	0x0800904f
 800847c:	08009067 	.word	0x08009067
 8008480:	08009081 	.word	0x08009081
 8008484:	08009089 	.word	0x08009089
 8008488:	080090b9 	.word	0x080090b9
 800848c:	080090d8 	.word	0x080090d8
 8008490:	080090f7 	.word	0x080090f7
 8008494:	0800910e 	.word	0x0800910e
 8008498:	08009121 	.word	0x08009121
 800849c:	0800913a 	.word	0x0800913a
 80084a0:	08009151 	.word	0x08009151
 80084a4:	08009167 	.word	0x08009167
 80084a8:	08009188 	.word	0x08009188
 80084ac:	080091a0 	.word	0x080091a0
 80084b0:	080091bc 	.word	0x080091bc
 80084b4:	080091cf 	.word	0x080091cf
 80084b8:	080091e5 	.word	0x080091e5
 80084bc:	080091f9 	.word	0x080091f9
 80084c0:	0800921b 	.word	0x0800921b
 80084c4:	08009241 	.word	0x08009241
 80084c8:	08009252 	.word	0x08009252
 80084cc:	08008bd0 	.word	0x08008bd0
 80084d0:	08008bd9 	.word	0x08008bd9

080084d4 <_user_strerror>:
 80084d4:	2000      	movs	r0, #0
 80084d6:	4770      	bx	lr

080084d8 <_close_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d06      	ldr	r5, [pc, #24]	@ (80084f4 <_close_r+0x1c>)
 80084dc:	2300      	movs	r3, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	f7f9 fb09 	bl	8001afa <_close>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d102      	bne.n	80084f2 <_close_r+0x1a>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	b103      	cbz	r3, 80084f2 <_close_r+0x1a>
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	20000cac 	.word	0x20000cac

080084f8 <_lseek_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	4d07      	ldr	r5, [pc, #28]	@ (8008518 <_lseek_r+0x20>)
 80084fc:	4604      	mov	r4, r0
 80084fe:	4608      	mov	r0, r1
 8008500:	4611      	mov	r1, r2
 8008502:	2200      	movs	r2, #0
 8008504:	602a      	str	r2, [r5, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	f7f9 fb1e 	bl	8001b48 <_lseek>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d102      	bne.n	8008516 <_lseek_r+0x1e>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	b103      	cbz	r3, 8008516 <_lseek_r+0x1e>
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	20000cac 	.word	0x20000cac

0800851c <_open_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	4d07      	ldr	r5, [pc, #28]	@ (800853c <_open_r+0x20>)
 8008520:	4604      	mov	r4, r0
 8008522:	4608      	mov	r0, r1
 8008524:	4611      	mov	r1, r2
 8008526:	2200      	movs	r2, #0
 8008528:	602a      	str	r2, [r5, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	f7f9 fb19 	bl	8001b62 <_open>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d102      	bne.n	800853a <_open_r+0x1e>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	b103      	cbz	r3, 800853a <_open_r+0x1e>
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	20000cac 	.word	0x20000cac

08008540 <_read_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d07      	ldr	r5, [pc, #28]	@ (8008560 <_read_r+0x20>)
 8008544:	4604      	mov	r4, r0
 8008546:	4608      	mov	r0, r1
 8008548:	4611      	mov	r1, r2
 800854a:	2200      	movs	r2, #0
 800854c:	602a      	str	r2, [r5, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	f7f9 fa9a 	bl	8001a88 <_read>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d102      	bne.n	800855e <_read_r+0x1e>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	b103      	cbz	r3, 800855e <_read_r+0x1e>
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	20000cac 	.word	0x20000cac

08008564 <_write_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4d07      	ldr	r5, [pc, #28]	@ (8008584 <_write_r+0x20>)
 8008568:	4604      	mov	r4, r0
 800856a:	4608      	mov	r0, r1
 800856c:	4611      	mov	r1, r2
 800856e:	2200      	movs	r2, #0
 8008570:	602a      	str	r2, [r5, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	f7f9 faa5 	bl	8001ac2 <_write>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_write_r+0x1e>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b103      	cbz	r3, 8008582 <_write_r+0x1e>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	20000cac 	.word	0x20000cac

08008588 <__errno>:
 8008588:	4b01      	ldr	r3, [pc, #4]	@ (8008590 <__errno+0x8>)
 800858a:	6818      	ldr	r0, [r3, #0]
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	2000011c 	.word	0x2000011c

08008594 <__libc_init_array>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	4d0d      	ldr	r5, [pc, #52]	@ (80085cc <__libc_init_array+0x38>)
 8008598:	4c0d      	ldr	r4, [pc, #52]	@ (80085d0 <__libc_init_array+0x3c>)
 800859a:	1b64      	subs	r4, r4, r5
 800859c:	10a4      	asrs	r4, r4, #2
 800859e:	2600      	movs	r6, #0
 80085a0:	42a6      	cmp	r6, r4
 80085a2:	d109      	bne.n	80085b8 <__libc_init_array+0x24>
 80085a4:	4d0b      	ldr	r5, [pc, #44]	@ (80085d4 <__libc_init_array+0x40>)
 80085a6:	4c0c      	ldr	r4, [pc, #48]	@ (80085d8 <__libc_init_array+0x44>)
 80085a8:	f000 fac2 	bl	8008b30 <_init>
 80085ac:	1b64      	subs	r4, r4, r5
 80085ae:	10a4      	asrs	r4, r4, #2
 80085b0:	2600      	movs	r6, #0
 80085b2:	42a6      	cmp	r6, r4
 80085b4:	d105      	bne.n	80085c2 <__libc_init_array+0x2e>
 80085b6:	bd70      	pop	{r4, r5, r6, pc}
 80085b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085bc:	4798      	blx	r3
 80085be:	3601      	adds	r6, #1
 80085c0:	e7ee      	b.n	80085a0 <__libc_init_array+0xc>
 80085c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c6:	4798      	blx	r3
 80085c8:	3601      	adds	r6, #1
 80085ca:	e7f2      	b.n	80085b2 <__libc_init_array+0x1e>
 80085cc:	08009270 	.word	0x08009270
 80085d0:	08009270 	.word	0x08009270
 80085d4:	08009270 	.word	0x08009270
 80085d8:	08009274 	.word	0x08009274

080085dc <__retarget_lock_init_recursive>:
 80085dc:	4770      	bx	lr

080085de <__retarget_lock_close_recursive>:
 80085de:	4770      	bx	lr

080085e0 <__retarget_lock_acquire_recursive>:
 80085e0:	4770      	bx	lr

080085e2 <__retarget_lock_release_recursive>:
 80085e2:	4770      	bx	lr

080085e4 <memcpy>:
 80085e4:	440a      	add	r2, r1
 80085e6:	4291      	cmp	r1, r2
 80085e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085ec:	d100      	bne.n	80085f0 <memcpy+0xc>
 80085ee:	4770      	bx	lr
 80085f0:	b510      	push	{r4, lr}
 80085f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085fa:	4291      	cmp	r1, r2
 80085fc:	d1f9      	bne.n	80085f2 <memcpy+0xe>
 80085fe:	bd10      	pop	{r4, pc}

08008600 <_free_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4605      	mov	r5, r0
 8008604:	2900      	cmp	r1, #0
 8008606:	d041      	beq.n	800868c <_free_r+0x8c>
 8008608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800860c:	1f0c      	subs	r4, r1, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	bfb8      	it	lt
 8008612:	18e4      	addlt	r4, r4, r3
 8008614:	f000 f8e0 	bl	80087d8 <__malloc_lock>
 8008618:	4a1d      	ldr	r2, [pc, #116]	@ (8008690 <_free_r+0x90>)
 800861a:	6813      	ldr	r3, [r2, #0]
 800861c:	b933      	cbnz	r3, 800862c <_free_r+0x2c>
 800861e:	6063      	str	r3, [r4, #4]
 8008620:	6014      	str	r4, [r2, #0]
 8008622:	4628      	mov	r0, r5
 8008624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008628:	f000 b8dc 	b.w	80087e4 <__malloc_unlock>
 800862c:	42a3      	cmp	r3, r4
 800862e:	d908      	bls.n	8008642 <_free_r+0x42>
 8008630:	6820      	ldr	r0, [r4, #0]
 8008632:	1821      	adds	r1, r4, r0
 8008634:	428b      	cmp	r3, r1
 8008636:	bf01      	itttt	eq
 8008638:	6819      	ldreq	r1, [r3, #0]
 800863a:	685b      	ldreq	r3, [r3, #4]
 800863c:	1809      	addeq	r1, r1, r0
 800863e:	6021      	streq	r1, [r4, #0]
 8008640:	e7ed      	b.n	800861e <_free_r+0x1e>
 8008642:	461a      	mov	r2, r3
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	b10b      	cbz	r3, 800864c <_free_r+0x4c>
 8008648:	42a3      	cmp	r3, r4
 800864a:	d9fa      	bls.n	8008642 <_free_r+0x42>
 800864c:	6811      	ldr	r1, [r2, #0]
 800864e:	1850      	adds	r0, r2, r1
 8008650:	42a0      	cmp	r0, r4
 8008652:	d10b      	bne.n	800866c <_free_r+0x6c>
 8008654:	6820      	ldr	r0, [r4, #0]
 8008656:	4401      	add	r1, r0
 8008658:	1850      	adds	r0, r2, r1
 800865a:	4283      	cmp	r3, r0
 800865c:	6011      	str	r1, [r2, #0]
 800865e:	d1e0      	bne.n	8008622 <_free_r+0x22>
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	6053      	str	r3, [r2, #4]
 8008666:	4408      	add	r0, r1
 8008668:	6010      	str	r0, [r2, #0]
 800866a:	e7da      	b.n	8008622 <_free_r+0x22>
 800866c:	d902      	bls.n	8008674 <_free_r+0x74>
 800866e:	230c      	movs	r3, #12
 8008670:	602b      	str	r3, [r5, #0]
 8008672:	e7d6      	b.n	8008622 <_free_r+0x22>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	1821      	adds	r1, r4, r0
 8008678:	428b      	cmp	r3, r1
 800867a:	bf04      	itt	eq
 800867c:	6819      	ldreq	r1, [r3, #0]
 800867e:	685b      	ldreq	r3, [r3, #4]
 8008680:	6063      	str	r3, [r4, #4]
 8008682:	bf04      	itt	eq
 8008684:	1809      	addeq	r1, r1, r0
 8008686:	6021      	streq	r1, [r4, #0]
 8008688:	6054      	str	r4, [r2, #4]
 800868a:	e7ca      	b.n	8008622 <_free_r+0x22>
 800868c:	bd38      	pop	{r3, r4, r5, pc}
 800868e:	bf00      	nop
 8008690:	20000cb8 	.word	0x20000cb8

08008694 <sbrk_aligned>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	4e0f      	ldr	r6, [pc, #60]	@ (80086d4 <sbrk_aligned+0x40>)
 8008698:	460c      	mov	r4, r1
 800869a:	6831      	ldr	r1, [r6, #0]
 800869c:	4605      	mov	r5, r0
 800869e:	b911      	cbnz	r1, 80086a6 <sbrk_aligned+0x12>
 80086a0:	f000 fa36 	bl	8008b10 <_sbrk_r>
 80086a4:	6030      	str	r0, [r6, #0]
 80086a6:	4621      	mov	r1, r4
 80086a8:	4628      	mov	r0, r5
 80086aa:	f000 fa31 	bl	8008b10 <_sbrk_r>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d103      	bne.n	80086ba <sbrk_aligned+0x26>
 80086b2:	f04f 34ff 	mov.w	r4, #4294967295
 80086b6:	4620      	mov	r0, r4
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
 80086ba:	1cc4      	adds	r4, r0, #3
 80086bc:	f024 0403 	bic.w	r4, r4, #3
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d0f8      	beq.n	80086b6 <sbrk_aligned+0x22>
 80086c4:	1a21      	subs	r1, r4, r0
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 fa22 	bl	8008b10 <_sbrk_r>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d1f2      	bne.n	80086b6 <sbrk_aligned+0x22>
 80086d0:	e7ef      	b.n	80086b2 <sbrk_aligned+0x1e>
 80086d2:	bf00      	nop
 80086d4:	20000cb4 	.word	0x20000cb4

080086d8 <_malloc_r>:
 80086d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086dc:	1ccd      	adds	r5, r1, #3
 80086de:	f025 0503 	bic.w	r5, r5, #3
 80086e2:	3508      	adds	r5, #8
 80086e4:	2d0c      	cmp	r5, #12
 80086e6:	bf38      	it	cc
 80086e8:	250c      	movcc	r5, #12
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	4606      	mov	r6, r0
 80086ee:	db01      	blt.n	80086f4 <_malloc_r+0x1c>
 80086f0:	42a9      	cmp	r1, r5
 80086f2:	d904      	bls.n	80086fe <_malloc_r+0x26>
 80086f4:	230c      	movs	r3, #12
 80086f6:	6033      	str	r3, [r6, #0]
 80086f8:	2000      	movs	r0, #0
 80086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087d4 <_malloc_r+0xfc>
 8008702:	f000 f869 	bl	80087d8 <__malloc_lock>
 8008706:	f8d8 3000 	ldr.w	r3, [r8]
 800870a:	461c      	mov	r4, r3
 800870c:	bb44      	cbnz	r4, 8008760 <_malloc_r+0x88>
 800870e:	4629      	mov	r1, r5
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ffbf 	bl	8008694 <sbrk_aligned>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	4604      	mov	r4, r0
 800871a:	d158      	bne.n	80087ce <_malloc_r+0xf6>
 800871c:	f8d8 4000 	ldr.w	r4, [r8]
 8008720:	4627      	mov	r7, r4
 8008722:	2f00      	cmp	r7, #0
 8008724:	d143      	bne.n	80087ae <_malloc_r+0xd6>
 8008726:	2c00      	cmp	r4, #0
 8008728:	d04b      	beq.n	80087c2 <_malloc_r+0xea>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	4639      	mov	r1, r7
 800872e:	4630      	mov	r0, r6
 8008730:	eb04 0903 	add.w	r9, r4, r3
 8008734:	f000 f9ec 	bl	8008b10 <_sbrk_r>
 8008738:	4581      	cmp	r9, r0
 800873a:	d142      	bne.n	80087c2 <_malloc_r+0xea>
 800873c:	6821      	ldr	r1, [r4, #0]
 800873e:	1a6d      	subs	r5, r5, r1
 8008740:	4629      	mov	r1, r5
 8008742:	4630      	mov	r0, r6
 8008744:	f7ff ffa6 	bl	8008694 <sbrk_aligned>
 8008748:	3001      	adds	r0, #1
 800874a:	d03a      	beq.n	80087c2 <_malloc_r+0xea>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	442b      	add	r3, r5
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	f8d8 3000 	ldr.w	r3, [r8]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	bb62      	cbnz	r2, 80087b4 <_malloc_r+0xdc>
 800875a:	f8c8 7000 	str.w	r7, [r8]
 800875e:	e00f      	b.n	8008780 <_malloc_r+0xa8>
 8008760:	6822      	ldr	r2, [r4, #0]
 8008762:	1b52      	subs	r2, r2, r5
 8008764:	d420      	bmi.n	80087a8 <_malloc_r+0xd0>
 8008766:	2a0b      	cmp	r2, #11
 8008768:	d917      	bls.n	800879a <_malloc_r+0xc2>
 800876a:	1961      	adds	r1, r4, r5
 800876c:	42a3      	cmp	r3, r4
 800876e:	6025      	str	r5, [r4, #0]
 8008770:	bf18      	it	ne
 8008772:	6059      	strne	r1, [r3, #4]
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	bf08      	it	eq
 8008778:	f8c8 1000 	streq.w	r1, [r8]
 800877c:	5162      	str	r2, [r4, r5]
 800877e:	604b      	str	r3, [r1, #4]
 8008780:	4630      	mov	r0, r6
 8008782:	f000 f82f 	bl	80087e4 <__malloc_unlock>
 8008786:	f104 000b 	add.w	r0, r4, #11
 800878a:	1d23      	adds	r3, r4, #4
 800878c:	f020 0007 	bic.w	r0, r0, #7
 8008790:	1ac2      	subs	r2, r0, r3
 8008792:	bf1c      	itt	ne
 8008794:	1a1b      	subne	r3, r3, r0
 8008796:	50a3      	strne	r3, [r4, r2]
 8008798:	e7af      	b.n	80086fa <_malloc_r+0x22>
 800879a:	6862      	ldr	r2, [r4, #4]
 800879c:	42a3      	cmp	r3, r4
 800879e:	bf0c      	ite	eq
 80087a0:	f8c8 2000 	streq.w	r2, [r8]
 80087a4:	605a      	strne	r2, [r3, #4]
 80087a6:	e7eb      	b.n	8008780 <_malloc_r+0xa8>
 80087a8:	4623      	mov	r3, r4
 80087aa:	6864      	ldr	r4, [r4, #4]
 80087ac:	e7ae      	b.n	800870c <_malloc_r+0x34>
 80087ae:	463c      	mov	r4, r7
 80087b0:	687f      	ldr	r7, [r7, #4]
 80087b2:	e7b6      	b.n	8008722 <_malloc_r+0x4a>
 80087b4:	461a      	mov	r2, r3
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	d1fb      	bne.n	80087b4 <_malloc_r+0xdc>
 80087bc:	2300      	movs	r3, #0
 80087be:	6053      	str	r3, [r2, #4]
 80087c0:	e7de      	b.n	8008780 <_malloc_r+0xa8>
 80087c2:	230c      	movs	r3, #12
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 f80c 	bl	80087e4 <__malloc_unlock>
 80087cc:	e794      	b.n	80086f8 <_malloc_r+0x20>
 80087ce:	6005      	str	r5, [r0, #0]
 80087d0:	e7d6      	b.n	8008780 <_malloc_r+0xa8>
 80087d2:	bf00      	nop
 80087d4:	20000cb8 	.word	0x20000cb8

080087d8 <__malloc_lock>:
 80087d8:	4801      	ldr	r0, [pc, #4]	@ (80087e0 <__malloc_lock+0x8>)
 80087da:	f7ff bf01 	b.w	80085e0 <__retarget_lock_acquire_recursive>
 80087de:	bf00      	nop
 80087e0:	20000cb0 	.word	0x20000cb0

080087e4 <__malloc_unlock>:
 80087e4:	4801      	ldr	r0, [pc, #4]	@ (80087ec <__malloc_unlock+0x8>)
 80087e6:	f7ff befc 	b.w	80085e2 <__retarget_lock_release_recursive>
 80087ea:	bf00      	nop
 80087ec:	20000cb0 	.word	0x20000cb0

080087f0 <__sflush_r>:
 80087f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f8:	0716      	lsls	r6, r2, #28
 80087fa:	4605      	mov	r5, r0
 80087fc:	460c      	mov	r4, r1
 80087fe:	d454      	bmi.n	80088aa <__sflush_r+0xba>
 8008800:	684b      	ldr	r3, [r1, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	dc02      	bgt.n	800880c <__sflush_r+0x1c>
 8008806:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	dd48      	ble.n	800889e <__sflush_r+0xae>
 800880c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800880e:	2e00      	cmp	r6, #0
 8008810:	d045      	beq.n	800889e <__sflush_r+0xae>
 8008812:	2300      	movs	r3, #0
 8008814:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008818:	682f      	ldr	r7, [r5, #0]
 800881a:	6a21      	ldr	r1, [r4, #32]
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	d030      	beq.n	8008882 <__sflush_r+0x92>
 8008820:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	0759      	lsls	r1, r3, #29
 8008826:	d505      	bpl.n	8008834 <__sflush_r+0x44>
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	1ad2      	subs	r2, r2, r3
 800882c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800882e:	b10b      	cbz	r3, 8008834 <__sflush_r+0x44>
 8008830:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008832:	1ad2      	subs	r2, r2, r3
 8008834:	2300      	movs	r3, #0
 8008836:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008838:	6a21      	ldr	r1, [r4, #32]
 800883a:	4628      	mov	r0, r5
 800883c:	47b0      	blx	r6
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	d106      	bne.n	8008852 <__sflush_r+0x62>
 8008844:	6829      	ldr	r1, [r5, #0]
 8008846:	291d      	cmp	r1, #29
 8008848:	d82b      	bhi.n	80088a2 <__sflush_r+0xb2>
 800884a:	4a2a      	ldr	r2, [pc, #168]	@ (80088f4 <__sflush_r+0x104>)
 800884c:	410a      	asrs	r2, r1
 800884e:	07d6      	lsls	r6, r2, #31
 8008850:	d427      	bmi.n	80088a2 <__sflush_r+0xb2>
 8008852:	2200      	movs	r2, #0
 8008854:	6062      	str	r2, [r4, #4]
 8008856:	04d9      	lsls	r1, r3, #19
 8008858:	6922      	ldr	r2, [r4, #16]
 800885a:	6022      	str	r2, [r4, #0]
 800885c:	d504      	bpl.n	8008868 <__sflush_r+0x78>
 800885e:	1c42      	adds	r2, r0, #1
 8008860:	d101      	bne.n	8008866 <__sflush_r+0x76>
 8008862:	682b      	ldr	r3, [r5, #0]
 8008864:	b903      	cbnz	r3, 8008868 <__sflush_r+0x78>
 8008866:	6560      	str	r0, [r4, #84]	@ 0x54
 8008868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800886a:	602f      	str	r7, [r5, #0]
 800886c:	b1b9      	cbz	r1, 800889e <__sflush_r+0xae>
 800886e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008872:	4299      	cmp	r1, r3
 8008874:	d002      	beq.n	800887c <__sflush_r+0x8c>
 8008876:	4628      	mov	r0, r5
 8008878:	f7ff fec2 	bl	8008600 <_free_r>
 800887c:	2300      	movs	r3, #0
 800887e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008880:	e00d      	b.n	800889e <__sflush_r+0xae>
 8008882:	2301      	movs	r3, #1
 8008884:	4628      	mov	r0, r5
 8008886:	47b0      	blx	r6
 8008888:	4602      	mov	r2, r0
 800888a:	1c50      	adds	r0, r2, #1
 800888c:	d1c9      	bne.n	8008822 <__sflush_r+0x32>
 800888e:	682b      	ldr	r3, [r5, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0c6      	beq.n	8008822 <__sflush_r+0x32>
 8008894:	2b1d      	cmp	r3, #29
 8008896:	d001      	beq.n	800889c <__sflush_r+0xac>
 8008898:	2b16      	cmp	r3, #22
 800889a:	d11e      	bne.n	80088da <__sflush_r+0xea>
 800889c:	602f      	str	r7, [r5, #0]
 800889e:	2000      	movs	r0, #0
 80088a0:	e022      	b.n	80088e8 <__sflush_r+0xf8>
 80088a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088a6:	b21b      	sxth	r3, r3
 80088a8:	e01b      	b.n	80088e2 <__sflush_r+0xf2>
 80088aa:	690f      	ldr	r7, [r1, #16]
 80088ac:	2f00      	cmp	r7, #0
 80088ae:	d0f6      	beq.n	800889e <__sflush_r+0xae>
 80088b0:	0793      	lsls	r3, r2, #30
 80088b2:	680e      	ldr	r6, [r1, #0]
 80088b4:	bf08      	it	eq
 80088b6:	694b      	ldreq	r3, [r1, #20]
 80088b8:	600f      	str	r7, [r1, #0]
 80088ba:	bf18      	it	ne
 80088bc:	2300      	movne	r3, #0
 80088be:	eba6 0807 	sub.w	r8, r6, r7
 80088c2:	608b      	str	r3, [r1, #8]
 80088c4:	f1b8 0f00 	cmp.w	r8, #0
 80088c8:	dde9      	ble.n	800889e <__sflush_r+0xae>
 80088ca:	6a21      	ldr	r1, [r4, #32]
 80088cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088ce:	4643      	mov	r3, r8
 80088d0:	463a      	mov	r2, r7
 80088d2:	4628      	mov	r0, r5
 80088d4:	47b0      	blx	r6
 80088d6:	2800      	cmp	r0, #0
 80088d8:	dc08      	bgt.n	80088ec <__sflush_r+0xfc>
 80088da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e2:	81a3      	strh	r3, [r4, #12]
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ec:	4407      	add	r7, r0
 80088ee:	eba8 0800 	sub.w	r8, r8, r0
 80088f2:	e7e7      	b.n	80088c4 <__sflush_r+0xd4>
 80088f4:	dfbffffe 	.word	0xdfbffffe

080088f8 <_fflush_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	690b      	ldr	r3, [r1, #16]
 80088fc:	4605      	mov	r5, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	b913      	cbnz	r3, 8008908 <_fflush_r+0x10>
 8008902:	2500      	movs	r5, #0
 8008904:	4628      	mov	r0, r5
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	b118      	cbz	r0, 8008912 <_fflush_r+0x1a>
 800890a:	6a03      	ldr	r3, [r0, #32]
 800890c:	b90b      	cbnz	r3, 8008912 <_fflush_r+0x1a>
 800890e:	f7ff f975 	bl	8007bfc <__sinit>
 8008912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0f3      	beq.n	8008902 <_fflush_r+0xa>
 800891a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800891c:	07d0      	lsls	r0, r2, #31
 800891e:	d404      	bmi.n	800892a <_fflush_r+0x32>
 8008920:	0599      	lsls	r1, r3, #22
 8008922:	d402      	bmi.n	800892a <_fflush_r+0x32>
 8008924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008926:	f7ff fe5b 	bl	80085e0 <__retarget_lock_acquire_recursive>
 800892a:	4628      	mov	r0, r5
 800892c:	4621      	mov	r1, r4
 800892e:	f7ff ff5f 	bl	80087f0 <__sflush_r>
 8008932:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008934:	07da      	lsls	r2, r3, #31
 8008936:	4605      	mov	r5, r0
 8008938:	d4e4      	bmi.n	8008904 <_fflush_r+0xc>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	059b      	lsls	r3, r3, #22
 800893e:	d4e1      	bmi.n	8008904 <_fflush_r+0xc>
 8008940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008942:	f7ff fe4e 	bl	80085e2 <__retarget_lock_release_recursive>
 8008946:	e7dd      	b.n	8008904 <_fflush_r+0xc>

08008948 <fileno>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d13      	ldr	r5, [pc, #76]	@ (8008998 <fileno+0x50>)
 800894c:	4604      	mov	r4, r0
 800894e:	6828      	ldr	r0, [r5, #0]
 8008950:	b118      	cbz	r0, 800895a <fileno+0x12>
 8008952:	6a03      	ldr	r3, [r0, #32]
 8008954:	b90b      	cbnz	r3, 800895a <fileno+0x12>
 8008956:	f7ff f951 	bl	8007bfc <__sinit>
 800895a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800895c:	07d8      	lsls	r0, r3, #31
 800895e:	d405      	bmi.n	800896c <fileno+0x24>
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	0599      	lsls	r1, r3, #22
 8008964:	d402      	bmi.n	800896c <fileno+0x24>
 8008966:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008968:	f7ff fe3a 	bl	80085e0 <__retarget_lock_acquire_recursive>
 800896c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008970:	b15b      	cbz	r3, 800898a <fileno+0x42>
 8008972:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8008976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008978:	07d2      	lsls	r2, r2, #31
 800897a:	d404      	bmi.n	8008986 <fileno+0x3e>
 800897c:	059b      	lsls	r3, r3, #22
 800897e:	d402      	bmi.n	8008986 <fileno+0x3e>
 8008980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008982:	f7ff fe2e 	bl	80085e2 <__retarget_lock_release_recursive>
 8008986:	4628      	mov	r0, r5
 8008988:	bd38      	pop	{r3, r4, r5, pc}
 800898a:	682a      	ldr	r2, [r5, #0]
 800898c:	2109      	movs	r1, #9
 800898e:	6011      	str	r1, [r2, #0]
 8008990:	f04f 35ff 	mov.w	r5, #4294967295
 8008994:	e7ef      	b.n	8008976 <fileno+0x2e>
 8008996:	bf00      	nop
 8008998:	2000011c 	.word	0x2000011c

0800899c <__sflags>:
 800899c:	780b      	ldrb	r3, [r1, #0]
 800899e:	2b72      	cmp	r3, #114	@ 0x72
 80089a0:	b530      	push	{r4, r5, lr}
 80089a2:	d022      	beq.n	80089ea <__sflags+0x4e>
 80089a4:	2b77      	cmp	r3, #119	@ 0x77
 80089a6:	d024      	beq.n	80089f2 <__sflags+0x56>
 80089a8:	2b61      	cmp	r3, #97	@ 0x61
 80089aa:	d027      	beq.n	80089fc <__sflags+0x60>
 80089ac:	2316      	movs	r3, #22
 80089ae:	6003      	str	r3, [r0, #0]
 80089b0:	2000      	movs	r0, #0
 80089b2:	bd30      	pop	{r4, r5, pc}
 80089b4:	2d62      	cmp	r5, #98	@ 0x62
 80089b6:	d012      	beq.n	80089de <__sflags+0x42>
 80089b8:	2d78      	cmp	r5, #120	@ 0x78
 80089ba:	d013      	beq.n	80089e4 <__sflags+0x48>
 80089bc:	2d2b      	cmp	r5, #43	@ 0x2b
 80089be:	d107      	bne.n	80089d0 <__sflags+0x34>
 80089c0:	f020 001c 	bic.w	r0, r0, #28
 80089c4:	f023 0303 	bic.w	r3, r3, #3
 80089c8:	f040 0010 	orr.w	r0, r0, #16
 80089cc:	f043 0302 	orr.w	r3, r3, #2
 80089d0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80089d4:	2d00      	cmp	r5, #0
 80089d6:	d1ed      	bne.n	80089b4 <__sflags+0x18>
 80089d8:	4323      	orrs	r3, r4
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	e7e9      	b.n	80089b2 <__sflags+0x16>
 80089de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089e2:	e7f5      	b.n	80089d0 <__sflags+0x34>
 80089e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80089e8:	e7f2      	b.n	80089d0 <__sflags+0x34>
 80089ea:	2400      	movs	r4, #0
 80089ec:	4623      	mov	r3, r4
 80089ee:	2004      	movs	r0, #4
 80089f0:	e7ee      	b.n	80089d0 <__sflags+0x34>
 80089f2:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 80089f6:	2301      	movs	r3, #1
 80089f8:	2008      	movs	r0, #8
 80089fa:	e7e9      	b.n	80089d0 <__sflags+0x34>
 80089fc:	f44f 7402 	mov.w	r4, #520	@ 0x208
 8008a00:	2301      	movs	r3, #1
 8008a02:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8008a06:	e7e3      	b.n	80089d0 <__sflags+0x34>

08008a08 <__swhatbuf_r>:
 8008a08:	b570      	push	{r4, r5, r6, lr}
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a10:	2900      	cmp	r1, #0
 8008a12:	b096      	sub	sp, #88	@ 0x58
 8008a14:	4615      	mov	r5, r2
 8008a16:	461e      	mov	r6, r3
 8008a18:	da0d      	bge.n	8008a36 <__swhatbuf_r+0x2e>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a20:	f04f 0100 	mov.w	r1, #0
 8008a24:	bf14      	ite	ne
 8008a26:	2340      	movne	r3, #64	@ 0x40
 8008a28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	6031      	str	r1, [r6, #0]
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	b016      	add	sp, #88	@ 0x58
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
 8008a36:	466a      	mov	r2, sp
 8008a38:	f000 f848 	bl	8008acc <_fstat_r>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	dbec      	blt.n	8008a1a <__swhatbuf_r+0x12>
 8008a40:	9901      	ldr	r1, [sp, #4]
 8008a42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a4a:	4259      	negs	r1, r3
 8008a4c:	4159      	adcs	r1, r3
 8008a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a52:	e7eb      	b.n	8008a2c <__swhatbuf_r+0x24>

08008a54 <__smakebuf_r>:
 8008a54:	898b      	ldrh	r3, [r1, #12]
 8008a56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a58:	079d      	lsls	r5, r3, #30
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	d507      	bpl.n	8008a70 <__smakebuf_r+0x1c>
 8008a60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	6123      	str	r3, [r4, #16]
 8008a68:	2301      	movs	r3, #1
 8008a6a:	6163      	str	r3, [r4, #20]
 8008a6c:	b003      	add	sp, #12
 8008a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a70:	ab01      	add	r3, sp, #4
 8008a72:	466a      	mov	r2, sp
 8008a74:	f7ff ffc8 	bl	8008a08 <__swhatbuf_r>
 8008a78:	9f00      	ldr	r7, [sp, #0]
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f7ff fe2a 	bl	80086d8 <_malloc_r>
 8008a84:	b948      	cbnz	r0, 8008a9a <__smakebuf_r+0x46>
 8008a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a8a:	059a      	lsls	r2, r3, #22
 8008a8c:	d4ee      	bmi.n	8008a6c <__smakebuf_r+0x18>
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	f043 0302 	orr.w	r3, r3, #2
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	e7e2      	b.n	8008a60 <__smakebuf_r+0xc>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	6020      	str	r0, [r4, #0]
 8008a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aa2:	81a3      	strh	r3, [r4, #12]
 8008aa4:	9b01      	ldr	r3, [sp, #4]
 8008aa6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008aaa:	b15b      	cbz	r3, 8008ac4 <__smakebuf_r+0x70>
 8008aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f000 f81d 	bl	8008af0 <_isatty_r>
 8008ab6:	b128      	cbz	r0, 8008ac4 <__smakebuf_r+0x70>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	f043 0301 	orr.w	r3, r3, #1
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	431d      	orrs	r5, r3
 8008ac8:	81a5      	strh	r5, [r4, #12]
 8008aca:	e7cf      	b.n	8008a6c <__smakebuf_r+0x18>

08008acc <_fstat_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d07      	ldr	r5, [pc, #28]	@ (8008aec <_fstat_r+0x20>)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	f7f9 f81a 	bl	8001b12 <_fstat>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	d102      	bne.n	8008ae8 <_fstat_r+0x1c>
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	b103      	cbz	r3, 8008ae8 <_fstat_r+0x1c>
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	bd38      	pop	{r3, r4, r5, pc}
 8008aea:	bf00      	nop
 8008aec:	20000cac 	.word	0x20000cac

08008af0 <_isatty_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d06      	ldr	r5, [pc, #24]	@ (8008b0c <_isatty_r+0x1c>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	f7f9 f819 	bl	8001b32 <_isatty>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_isatty_r+0x1a>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_isatty_r+0x1a>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	20000cac 	.word	0x20000cac

08008b10 <_sbrk_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d06      	ldr	r5, [pc, #24]	@ (8008b2c <_sbrk_r+0x1c>)
 8008b14:	2300      	movs	r3, #0
 8008b16:	4604      	mov	r4, r0
 8008b18:	4608      	mov	r0, r1
 8008b1a:	602b      	str	r3, [r5, #0]
 8008b1c:	f7f9 f830 	bl	8001b80 <_sbrk>
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	d102      	bne.n	8008b2a <_sbrk_r+0x1a>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	b103      	cbz	r3, 8008b2a <_sbrk_r+0x1a>
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	20000cac 	.word	0x20000cac

08008b30 <_init>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	bf00      	nop
 8008b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b36:	bc08      	pop	{r3}
 8008b38:	469e      	mov	lr, r3
 8008b3a:	4770      	bx	lr

08008b3c <_fini>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr
