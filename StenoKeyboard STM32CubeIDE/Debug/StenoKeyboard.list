
StenoKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d31c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004064  0800d4b4  0800d4b4  0000e4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011518  08011518  0001316c  2**0
                  CONTENTS
  4 .ARM          00000008  08011518  08011518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011520  08011520  0001316c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011520  08011520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011524  08011524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08011528  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d40  2000016c  08011694  0001316c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eac  08011694  00013eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001316c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e50  00000000  00000000  0001319c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003200  00000000  00000000  00025fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  000291f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d40  00000000  00000000  0002a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019919  00000000  00000000  0002b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015570  00000000  00000000  000449b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920db  00000000  00000000  00059f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc0  00000000  00000000  000ec048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f1008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000016c 	.word	0x2000016c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d49c 	.word	0x0800d49c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000170 	.word	0x20000170
 80001d4:	0800d49c 	.word	0x0800d49c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <Scan_KeyMatrix.3>:
  char result[22] = {};
  int activeTimeLimit = TIME_LIMIT;
  int activeTimer = 0;


  uint8_t Scan_KeyMatrix(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	f8c7 c004 	str.w	ip, [r7, #4]
        uint8_t key = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	73fb      	strb	r3, [r7, #15]

  		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2110      	movs	r1, #16
 80004fe:	48cf      	ldr	r0, [pc, #828]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000500:	f006 fd1a 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2120      	movs	r1, #32
 8000508:	48cc      	ldr	r0, [pc, #816]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800050a:	f006 fd15 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2140      	movs	r1, #64	@ 0x40
 8000512:	48ca      	ldr	r0, [pc, #808]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000514:	f006 fd10 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2180      	movs	r1, #128	@ 0x80
 800051c:	48c7      	ldr	r0, [pc, #796]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800051e:	f006 fd0b 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	48c6      	ldr	r0, [pc, #792]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000528:	f006 fd06 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	48c3      	ldr	r0, [pc, #780]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000532:	f006 fd01 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2104      	movs	r1, #4
 800053a:	48c1      	ldr	r0, [pc, #772]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800053c:	f006 fcfc 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000546:	48be      	ldr	r0, [pc, #760]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000548:	f006 fcf6 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000552:	48bb      	ldr	r0, [pc, #748]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000554:	f006 fcf0 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055e:	48b8      	ldr	r0, [pc, #736]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000560:	f006 fcea 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800056a:	48b5      	ldr	r0, [pc, #724]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800056c:	f006 fce4 	bl	8006f38 <HAL_GPIO_WritePin>


        if (HAL_GPIO_ReadPin(Row1_GPIO_Port, Row1_Pin) == 1) {
 8000570:	2101      	movs	r1, #1
 8000572:	48b2      	ldr	r0, [pc, #712]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000574:	f006 fcc8 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b01      	cmp	r3, #1
 800057c:	d101      	bne.n	8000582 <Scan_KeyMatrix.3+0x96>
            key = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000582:	2102      	movs	r1, #2
 8000584:	48ad      	ldr	r0, [pc, #692]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000586:	f006 fcbf 	bl	8006f08 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d101      	bne.n	8000594 <Scan_KeyMatrix.3+0xa8>
            key = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000594:	2104      	movs	r1, #4
 8000596:	48a9      	ldr	r0, [pc, #676]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000598:	f006 fcb6 	bl	8006f08 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d101      	bne.n	80005a6 <Scan_KeyMatrix.3+0xba>
			key = 24;
 80005a2:	2318      	movs	r3, #24
 80005a4:	73fb      	strb	r3, [r7, #15]
        }

  		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2110      	movs	r1, #16
 80005aa:	48a4      	ldr	r0, [pc, #656]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005ac:	f006 fcc4 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2120      	movs	r1, #32
 80005b4:	48a1      	ldr	r0, [pc, #644]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005b6:	f006 fcbf 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	489f      	ldr	r0, [pc, #636]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005c0:	f006 fcba 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2180      	movs	r1, #128	@ 0x80
 80005c8:	489c      	ldr	r0, [pc, #624]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005ca:	f006 fcb5 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	489b      	ldr	r0, [pc, #620]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005d4:	f006 fcb0 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	4898      	ldr	r0, [pc, #608]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005de:	f006 fcab 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2104      	movs	r1, #4
 80005e6:	4896      	ldr	r0, [pc, #600]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005e8:	f006 fca6 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f2:	4893      	ldr	r0, [pc, #588]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005f4:	f006 fca0 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fe:	4890      	ldr	r0, [pc, #576]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000600:	f006 fc9a 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060a:	488d      	ldr	r0, [pc, #564]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800060c:	f006 fc94 	bl	8006f38 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000616:	488a      	ldr	r0, [pc, #552]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000618:	f006 fc8e 	bl	8006f38 <HAL_GPIO_WritePin>


        if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 800061c:	2102      	movs	r1, #2
 800061e:	4887      	ldr	r0, [pc, #540]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000620:	f006 fc72 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d101      	bne.n	800062e <Scan_KeyMatrix.3+0x142>
            key = 3;
 800062a:	2303      	movs	r3, #3
 800062c:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 800062e:	2104      	movs	r1, #4
 8000630:	4882      	ldr	r0, [pc, #520]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000632:	f006 fc69 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d101      	bne.n	8000640 <Scan_KeyMatrix.3+0x154>
			key = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	73fb      	strb	r3, [r7, #15]
        }

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	487d      	ldr	r0, [pc, #500]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000646:	f006 fc77 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	487b      	ldr	r0, [pc, #492]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000650:	f006 fc72 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	2140      	movs	r1, #64	@ 0x40
 8000658:	4878      	ldr	r0, [pc, #480]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800065a:	f006 fc6d 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	4876      	ldr	r0, [pc, #472]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000664:	f006 fc68 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2101      	movs	r1, #1
 800066c:	4874      	ldr	r0, [pc, #464]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800066e:	f006 fc63 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2102      	movs	r1, #2
 8000676:	4872      	ldr	r0, [pc, #456]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000678:	f006 fc5e 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	486f      	ldr	r0, [pc, #444]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000682:	f006 fc59 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068c:	486c      	ldr	r0, [pc, #432]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800068e:	f006 fc53 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000698:	4869      	ldr	r0, [pc, #420]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800069a:	f006 fc4d 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a4:	4866      	ldr	r0, [pc, #408]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80006a6:	f006 fc47 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b0:	4863      	ldr	r0, [pc, #396]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80006b2:	f006 fc41 	bl	8006f38 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80006b6:	2102      	movs	r1, #2
 80006b8:	4860      	ldr	r0, [pc, #384]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006ba:	f006 fc25 	bl	8006f08 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d101      	bne.n	80006c8 <Scan_KeyMatrix.3+0x1dc>
			key = 5;
 80006c4:	2305      	movs	r3, #5
 80006c6:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80006c8:	2104      	movs	r1, #4
 80006ca:	485c      	ldr	r0, [pc, #368]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006cc:	f006 fc1c 	bl	8006f08 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d101      	bne.n	80006da <Scan_KeyMatrix.3+0x1ee>
			key = 6;
 80006d6:	2306      	movs	r3, #6
 80006d8:	73fb      	strb	r3, [r7, #15]
		}
		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	4857      	ldr	r0, [pc, #348]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006e0:	f006 fc2a 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	4854      	ldr	r0, [pc, #336]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006ea:	f006 fc25 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	@ 0x40
 80006f2:	4852      	ldr	r0, [pc, #328]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006f4:	f006 fc20 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	484f      	ldr	r0, [pc, #316]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006fe:	f006 fc1b 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2101      	movs	r1, #1
 8000706:	484e      	ldr	r0, [pc, #312]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000708:	f006 fc16 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	484b      	ldr	r0, [pc, #300]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000712:	f006 fc11 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2104      	movs	r1, #4
 800071a:	4849      	ldr	r0, [pc, #292]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800071c:	f006 fc0c 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000726:	4846      	ldr	r0, [pc, #280]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000728:	f006 fc06 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000732:	4843      	ldr	r0, [pc, #268]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000734:	f006 fc00 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073e:	4840      	ldr	r0, [pc, #256]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000740:	f006 fbfa 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800074a:	483d      	ldr	r0, [pc, #244]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800074c:	f006 fbf4 	bl	8006f38 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000750:	2102      	movs	r1, #2
 8000752:	483a      	ldr	r0, [pc, #232]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000754:	f006 fbd8 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d101      	bne.n	8000762 <Scan_KeyMatrix.3+0x276>
			key = 7;
 800075e:	2307      	movs	r3, #7
 8000760:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000762:	2104      	movs	r1, #4
 8000764:	4835      	ldr	r0, [pc, #212]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000766:	f006 fbcf 	bl	8006f08 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d101      	bne.n	8000774 <Scan_KeyMatrix.3+0x288>
			key = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 8000774:	2108      	movs	r1, #8
 8000776:	4831      	ldr	r0, [pc, #196]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000778:	f006 fbc6 	bl	8006f08 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d101      	bne.n	8000786 <Scan_KeyMatrix.3+0x29a>
			key = 9;
 8000782:	2309      	movs	r3, #9
 8000784:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	482c      	ldr	r0, [pc, #176]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800078c:	f006 fbd4 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2120      	movs	r1, #32
 8000794:	4829      	ldr	r0, [pc, #164]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000796:	f006 fbcf 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	@ 0x40
 800079e:	4827      	ldr	r0, [pc, #156]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80007a0:	f006 fbca 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2180      	movs	r1, #128	@ 0x80
 80007a8:	4824      	ldr	r0, [pc, #144]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80007aa:	f006 fbc5 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2101      	movs	r1, #1
 80007b2:	4823      	ldr	r0, [pc, #140]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007b4:	f006 fbc0 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2102      	movs	r1, #2
 80007bc:	4820      	ldr	r0, [pc, #128]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007be:	f006 fbbb 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2104      	movs	r1, #4
 80007c6:	481e      	ldr	r0, [pc, #120]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007c8:	f006 fbb6 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007d2:	481b      	ldr	r0, [pc, #108]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007d4:	f006 fbb0 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007de:	4818      	ldr	r0, [pc, #96]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007e0:	f006 fbaa 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ea:	4815      	ldr	r0, [pc, #84]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007ec:	f006 fba4 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007f6:	4812      	ldr	r0, [pc, #72]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007f8:	f006 fb9e 	bl	8006f38 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80007fc:	2104      	movs	r1, #4
 80007fe:	480f      	ldr	r0, [pc, #60]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000800:	f006 fb82 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d101      	bne.n	800080e <Scan_KeyMatrix.3+0x322>
			key = 11;
 800080a:	230b      	movs	r3, #11
 800080c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 800080e:	2108      	movs	r1, #8
 8000810:	480a      	ldr	r0, [pc, #40]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000812:	f006 fb79 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	d101      	bne.n	8000820 <Scan_KeyMatrix.3+0x334>
			key = 10;
 800081c:	230a      	movs	r3, #10
 800081e:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2110      	movs	r1, #16
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000826:	f006 fb87 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2120      	movs	r1, #32
 800082e:	4803      	ldr	r0, [pc, #12]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000830:	f006 fb82 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2140      	movs	r1, #64	@ 0x40
 8000838:	e004      	b.n	8000844 <Scan_KeyMatrix.3+0x358>
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020400 	.word	0x40020400
 8000844:	48cf      	ldr	r0, [pc, #828]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000846:	f006 fb77 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	48cd      	ldr	r0, [pc, #820]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000850:	f006 fb72 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	48cb      	ldr	r0, [pc, #812]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800085a:	f006 fb6d 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	48c9      	ldr	r0, [pc, #804]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000864:	f006 fb68 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	48c6      	ldr	r0, [pc, #792]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800086e:	f006 fb63 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000878:	48c3      	ldr	r0, [pc, #780]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800087a:	f006 fb5d 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000884:	48c0      	ldr	r0, [pc, #768]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000886:	f006 fb57 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000890:	48bd      	ldr	r0, [pc, #756]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000892:	f006 fb51 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800089c:	48ba      	ldr	r0, [pc, #744]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800089e:	f006 fb4b 	bl	8006f38 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80008a2:	2104      	movs	r1, #4
 80008a4:	48b7      	ldr	r0, [pc, #732]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008a6:	f006 fb2f 	bl	8006f08 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d101      	bne.n	80008b4 <Scan_KeyMatrix.3+0x3c8>
			key = 11;
 80008b0:	230b      	movs	r3, #11
 80008b2:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 80008b4:	2108      	movs	r1, #8
 80008b6:	48b3      	ldr	r0, [pc, #716]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008b8:	f006 fb26 	bl	8006f08 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d101      	bne.n	80008c6 <Scan_KeyMatrix.3+0x3da>
			key = 12;
 80008c2:	230c      	movs	r3, #12
 80008c4:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2110      	movs	r1, #16
 80008ca:	48ae      	ldr	r0, [pc, #696]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008cc:	f006 fb34 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2120      	movs	r1, #32
 80008d4:	48ab      	ldr	r0, [pc, #684]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008d6:	f006 fb2f 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	48a9      	ldr	r0, [pc, #676]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008e0:	f006 fb2a 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	@ 0x80
 80008e8:	48a6      	ldr	r0, [pc, #664]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008ea:	f006 fb25 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2101      	movs	r1, #1
 80008f2:	48a5      	ldr	r0, [pc, #660]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80008f4:	f006 fb20 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2102      	movs	r1, #2
 80008fc:	48a2      	ldr	r0, [pc, #648]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80008fe:	f006 fb1b 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	2104      	movs	r1, #4
 8000906:	48a0      	ldr	r0, [pc, #640]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000908:	f006 fb16 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000912:	489d      	ldr	r0, [pc, #628]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000914:	f006 fb10 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	489a      	ldr	r0, [pc, #616]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000920:	f006 fb0a 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092a:	4897      	ldr	r0, [pc, #604]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800092c:	f006 fb04 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000936:	4894      	ldr	r0, [pc, #592]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000938:	f006 fafe 	bl	8006f38 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 800093c:	2102      	movs	r1, #2
 800093e:	4891      	ldr	r0, [pc, #580]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000940:	f006 fae2 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <Scan_KeyMatrix.3+0x462>
			key = 14;
 800094a:	230e      	movs	r3, #14
 800094c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 800094e:	2104      	movs	r1, #4
 8000950:	488c      	ldr	r0, [pc, #560]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000952:	f006 fad9 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <Scan_KeyMatrix.3+0x474>
			key = 15;
 800095c:	230f      	movs	r3, #15
 800095e:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 8000960:	2108      	movs	r1, #8
 8000962:	4888      	ldr	r0, [pc, #544]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000964:	f006 fad0 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d101      	bne.n	8000972 <Scan_KeyMatrix.3+0x486>
			key = 13;
 800096e:	230d      	movs	r3, #13
 8000970:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2110      	movs	r1, #16
 8000976:	4883      	ldr	r0, [pc, #524]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000978:	f006 fade 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2120      	movs	r1, #32
 8000980:	4880      	ldr	r0, [pc, #512]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000982:	f006 fad9 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	@ 0x40
 800098a:	487e      	ldr	r0, [pc, #504]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 800098c:	f006 fad4 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	487b      	ldr	r0, [pc, #492]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000996:	f006 facf 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2101      	movs	r1, #1
 800099e:	487a      	ldr	r0, [pc, #488]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009a0:	f006 faca 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2102      	movs	r1, #2
 80009a8:	4877      	ldr	r0, [pc, #476]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009aa:	f006 fac5 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2104      	movs	r1, #4
 80009b2:	4875      	ldr	r0, [pc, #468]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009b4:	f006 fac0 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009be:	4872      	ldr	r0, [pc, #456]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009c0:	f006 faba 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ca:	486f      	ldr	r0, [pc, #444]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009cc:	f006 fab4 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d6:	486c      	ldr	r0, [pc, #432]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009d8:	f006 faae 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e2:	4869      	ldr	r0, [pc, #420]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009e4:	f006 faa8 	bl	8006f38 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80009e8:	2102      	movs	r1, #2
 80009ea:	4866      	ldr	r0, [pc, #408]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80009ec:	f006 fa8c 	bl	8006f08 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d101      	bne.n	80009fa <Scan_KeyMatrix.3+0x50e>
			key = 16;
 80009f6:	2310      	movs	r3, #16
 80009f8:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80009fa:	2104      	movs	r1, #4
 80009fc:	4861      	ldr	r0, [pc, #388]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80009fe:	f006 fa83 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d101      	bne.n	8000a0c <Scan_KeyMatrix.3+0x520>
			key = 17;
 8000a08:	2311      	movs	r3, #17
 8000a0a:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2110      	movs	r1, #16
 8000a10:	485c      	ldr	r0, [pc, #368]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a12:	f006 fa91 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	485a      	ldr	r0, [pc, #360]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a1c:	f006 fa8c 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2140      	movs	r1, #64	@ 0x40
 8000a24:	4857      	ldr	r0, [pc, #348]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a26:	f006 fa87 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	4855      	ldr	r0, [pc, #340]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a30:	f006 fa82 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	4853      	ldr	r0, [pc, #332]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a3a:	f006 fa7d 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2102      	movs	r1, #2
 8000a42:	4851      	ldr	r0, [pc, #324]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a44:	f006 fa78 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	484e      	ldr	r0, [pc, #312]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a4e:	f006 fa73 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a58:	484b      	ldr	r0, [pc, #300]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a5a:	f006 fa6d 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 1);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a64:	4848      	ldr	r0, [pc, #288]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a66:	f006 fa67 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a70:	4845      	ldr	r0, [pc, #276]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a72:	f006 fa61 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a7c:	4842      	ldr	r0, [pc, #264]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a7e:	f006 fa5b 	bl	8006f38 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000a82:	2102      	movs	r1, #2
 8000a84:	483f      	ldr	r0, [pc, #252]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a86:	f006 fa3f 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <Scan_KeyMatrix.3+0x5a8>
			key = 18;
 8000a90:	2312      	movs	r3, #18
 8000a92:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000a94:	2104      	movs	r1, #4
 8000a96:	483b      	ldr	r0, [pc, #236]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a98:	f006 fa36 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d101      	bne.n	8000aa6 <Scan_KeyMatrix.3+0x5ba>
			key = 19;
 8000aa2:	2313      	movs	r3, #19
 8000aa4:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	4836      	ldr	r0, [pc, #216]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000aac:	f006 fa44 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4833      	ldr	r0, [pc, #204]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000ab6:	f006 fa3f 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2140      	movs	r1, #64	@ 0x40
 8000abe:	4831      	ldr	r0, [pc, #196]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000ac0:	f006 fa3a 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	@ 0x80
 8000ac8:	482e      	ldr	r0, [pc, #184]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000aca:	f006 fa35 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	482d      	ldr	r0, [pc, #180]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ad4:	f006 fa30 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	482a      	ldr	r0, [pc, #168]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ade:	f006 fa2b 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4828      	ldr	r0, [pc, #160]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ae8:	f006 fa26 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af2:	4825      	ldr	r0, [pc, #148]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000af4:	f006 fa20 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000afe:	4822      	ldr	r0, [pc, #136]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b00:	f006 fa1a 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b0a:	481f      	ldr	r0, [pc, #124]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b0c:	f006 fa14 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b16:	481c      	ldr	r0, [pc, #112]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b18:	f006 fa0e 	bl	8006f38 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b20:	f006 f9f2 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <Scan_KeyMatrix.3+0x642>
			key = 20;
 8000b2a:	2314      	movs	r3, #20
 8000b2c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000b2e:	2104      	movs	r1, #4
 8000b30:	4814      	ldr	r0, [pc, #80]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b32:	f006 f9e9 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d101      	bne.n	8000b40 <Scan_KeyMatrix.3+0x654>
			key = 21;
 8000b3c:	2315      	movs	r3, #21
 8000b3e:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2110      	movs	r1, #16
 8000b44:	480f      	ldr	r0, [pc, #60]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b46:	f006 f9f7 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b50:	f006 f9f2 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2140      	movs	r1, #64	@ 0x40
 8000b58:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b5a:	f006 f9ed 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b64:	f006 f9e8 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b6e:	f006 f9e3 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2102      	movs	r1, #2
 8000b76:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b78:	f006 f9de 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2104      	movs	r1, #4
 8000b80:	e004      	b.n	8000b8c <Scan_KeyMatrix.3+0x6a0>
 8000b82:	bf00      	nop
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	481d      	ldr	r0, [pc, #116]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000b8e:	f006 f9d3 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b98:	481a      	ldr	r0, [pc, #104]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000b9a:	f006 f9cd 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba4:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000ba6:	f006 f9c7 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb0:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000bb2:	f006 f9c1 	bl	8006f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 1);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bbc:	4811      	ldr	r0, [pc, #68]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000bbe:	f006 f9bb 	bl	8006f38 <HAL_GPIO_WritePin>



        if (HAL_GPIO_ReadPin(Row1_GPIO_Port, Row1_Pin) == 1) {
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4810      	ldr	r0, [pc, #64]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bc6:	f006 f99f 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d101      	bne.n	8000bd4 <Scan_KeyMatrix.3+0x6e8>
            key = 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
        }
		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bd8:	f006 f996 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d101      	bne.n	8000be6 <Scan_KeyMatrix.3+0x6fa>
			key = 22;
 8000be2:	2316      	movs	r3, #22
 8000be4:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000be6:	2104      	movs	r1, #4
 8000be8:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bea:	f006 f98d 	bl	8006f08 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d101      	bne.n	8000bf8 <Scan_KeyMatrix.3+0x70c>
			key = 23;
 8000bf4:	2317      	movs	r3, #23
 8000bf6:	73fb      	strb	r3, [r7, #15]
		}

        return key;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
    }
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40020000 	.word	0x40020000

08000c0c <main>:
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ac      	sub	sp, #176	@ 0xb0
 8000c10:	af00      	add	r7, sp, #0
int main(void)
 8000c12:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000c16:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_Init();
 8000c18:	f005 fe4a 	bl	80068b0 <HAL_Init>
  SystemClock_Config();
 8000c1c:	f005 fb78 	bl	8006310 <SystemClock_Config>
  MX_GPIO_Init();
 8000c20:	f005 fc02 	bl	8006428 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c24:	f00b fb2e 	bl	800c284 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 8000c28:	f005 fbda 	bl	80063e0 <MX_TIM10_Init>
  int counter1 = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int counter2 = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  int counter3 = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int counter4 = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int counter5 = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int counter6 = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  int counter7 = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int counter8 = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  int counter9 = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int counter10 = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int counter11 = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int counter12 = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int counter13 = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  int counter14 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  int counter15 = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
  int counter16 = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	677b      	str	r3, [r7, #116]	@ 0x74
  int counter17 = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	673b      	str	r3, [r7, #112]	@ 0x70
  int counter18 = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int counter19 = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  int counter20 = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	667b      	str	r3, [r7, #100]	@ 0x64
  int counter21 = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	663b      	str	r3, [r7, #96]	@ 0x60
  int counter22 = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int counter23 = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int counter24 = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	657b      	str	r3, [r7, #84]	@ 0x54
  int lastPress = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  int timeout = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
  int timeoutB = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]
  int previousChar = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  char charbuffer[22] = {};
 8000cb4:	4bd0      	ldr	r3, [pc, #832]	@ (8000ff8 <main+0x3ec>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000cbc:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	751a      	strb	r2, [r3, #20]
  int bufferItemsNumber = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  char result[22] = {};
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	f107 0318 	add.w	r3, r7, #24
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	821a      	strh	r2, [r3, #16]
  int activeTimeLimit = TIME_LIMIT;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  int activeTimer = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	653b      	str	r3, [r7, #80]	@ 0x50
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint8_t pressed_key;
    hashInit();
 8000cee:	463b      	mov	r3, r7
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	f000 fdc1 	bl	8001878 <hashInit.0>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  // Initialize GPIOs for keyboard matrix
    pressed_key = Scan_KeyMatrix();
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	469c      	mov	ip, r3
 8000cfa:	f7ff fbf7 	bl	80004ec <Scan_KeyMatrix.3>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  	if(pressed_key != 0 && activeTimer == 0){
 8000d04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d007      	beq.n	8000d1c <main+0x110>
 8000d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <main+0x110>
  		HAL_TIM_Base_Start_IT(&htim10);
 8000d12:	48ba      	ldr	r0, [pc, #744]	@ (8000ffc <main+0x3f0>)
 8000d14:	f007 ffe4 	bl	8008ce0 <HAL_TIM_Base_Start_IT>
  		activeTimer = 1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	653b      	str	r3, [r7, #80]	@ 0x50
  	}
  	if(elapsedTime >= activeTimeLimit){
 8000d1c:	4bb8      	ldr	r3, [pc, #736]	@ (8001000 <main+0x3f4>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d30f      	bcc.n	8000d46 <main+0x13a>
  		HAL_TIM_Base_Stop_IT(&htim10);
 8000d26:	48b5      	ldr	r0, [pc, #724]	@ (8000ffc <main+0x3f0>)
 8000d28:	f008 f83c 	bl	8008da4 <HAL_TIM_Base_Stop_IT>
  		activeTimer = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	653b      	str	r3, [r7, #80]	@ 0x50
  		elapsedTime = 0;
 8000d30:	4bb3      	ldr	r3, [pc, #716]	@ (8001000 <main+0x3f4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]

		Send_Gate(1, ' ');
 8000d36:	463b      	mov	r3, r7
 8000d38:	469c      	mov	ip, r3
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f005 fa83 	bl	8006248 <Send_Gate.7>
		lastPress = 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
  	}
  	switch (pressed_key) {
 8000d46:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	2b17      	cmp	r3, #23
 8000d4e:	f200 8208 	bhi.w	8001162 <main+0x556>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <main+0x14c>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000db9 	.word	0x08000db9
 8000d5c:	08000dc3 	.word	0x08000dc3
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000e1b 	.word	0x08000e1b
 8000d68:	08000e47 	.word	0x08000e47
 8000d6c:	08000e73 	.word	0x08000e73
 8000d70:	08000e9f 	.word	0x08000e9f
 8000d74:	08000ecb 	.word	0x08000ecb
 8000d78:	08000ef7 	.word	0x08000ef7
 8000d7c:	08000f23 	.word	0x08000f23
 8000d80:	08000f4f 	.word	0x08000f4f
 8000d84:	08000f7b 	.word	0x08000f7b
 8000d88:	08000fa7 	.word	0x08000fa7
 8000d8c:	08000fd3 	.word	0x08000fd3
 8000d90:	08001005 	.word	0x08001005
 8000d94:	08001029 	.word	0x08001029
 8000d98:	0800104d 	.word	0x0800104d
 8000d9c:	08001071 	.word	0x08001071
 8000da0:	08001095 	.word	0x08001095
 8000da4:	080010b9 	.word	0x080010b9
 8000da8:	080010db 	.word	0x080010db
 8000dac:	080010fd 	.word	0x080010fd
 8000db0:	0800111f 	.word	0x0800111f
 8000db4:	08001141 	.word	0x08001141
  	    case 1:
  	    	BackSpace();
 8000db8:	463b      	mov	r3, r7
 8000dba:	469c      	mov	ip, r3
 8000dbc:	f005 fa83 	bl	80062c6 <BackSpace.4>
			break;
 8000dc0:	e1fe      	b.n	80011c0 <main+0x5b4>
  	    case 2:
		  counter2 += 1;
 8000dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  if (counter2 >= 3) {
 8000dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	f340 81c8 	ble.w	8001166 <main+0x55a>
			Send_Gate(2, 'S');
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	469c      	mov	ip, r3
 8000dda:	2153      	movs	r1, #83	@ 0x53
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f005 fa33 	bl	8006248 <Send_Gate.7>
			lastPress = 2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	60bb      	str	r3, [r7, #8]
			  counter2 = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  }
  	        break;
 8000dec:	e1bb      	b.n	8001166 <main+0x55a>
  	    case 3:
  		  counter3 += 1;
 8000dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000df2:	3301      	adds	r3, #1
 8000df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  		  if (counter3 >= 3) {
 8000df8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	f340 81b4 	ble.w	800116a <main+0x55e>
  			Send_Gate(3, 'T');
 8000e02:	463b      	mov	r3, r7
 8000e04:	469c      	mov	ip, r3
 8000e06:	2154      	movs	r1, #84	@ 0x54
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f005 fa1d 	bl	8006248 <Send_Gate.7>
  			lastPress = 3;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	60bb      	str	r3, [r7, #8]
  			  counter3 = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  		  }
  	        break;
 8000e18:	e1a7      	b.n	800116a <main+0x55e>
  	    case 4:
		  counter4 += 1;
 8000e1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  if (counter4 >= 3) {
 8000e24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	f340 81a0 	ble.w	800116e <main+0x562>
			Send_Gate(4, 'K');
 8000e2e:	463b      	mov	r3, r7
 8000e30:	469c      	mov	ip, r3
 8000e32:	214b      	movs	r1, #75	@ 0x4b
 8000e34:	2004      	movs	r0, #4
 8000e36:	f005 fa07 	bl	8006248 <Send_Gate.7>
			lastPress = 4;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	60bb      	str	r3, [r7, #8]
			  counter4 = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  }
  	        break;
 8000e44:	e193      	b.n	800116e <main+0x562>
  	    case 5:
		  counter5 += 1;
 8000e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		  if (counter5 >= 3) {
 8000e50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	f340 818c 	ble.w	8001172 <main+0x566>
			Send_Gate(5, 'P');
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	2150      	movs	r1, #80	@ 0x50
 8000e60:	2005      	movs	r0, #5
 8000e62:	f005 f9f1 	bl	8006248 <Send_Gate.7>
			lastPress = 5;
 8000e66:	2305      	movs	r3, #5
 8000e68:	60bb      	str	r3, [r7, #8]
			  counter5 = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    		  }
  	        break;
 8000e70:	e17f      	b.n	8001172 <main+0x566>
  	    case 6:
		  counter6 += 1;
 8000e72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e76:	3301      	adds	r3, #1
 8000e78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		if (counter6 >= 3) {
 8000e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	f340 8178 	ble.w	8001176 <main+0x56a>
			Send_Gate(6, 'W');
 8000e86:	463b      	mov	r3, r7
 8000e88:	469c      	mov	ip, r3
 8000e8a:	2157      	movs	r1, #87	@ 0x57
 8000e8c:	2006      	movs	r0, #6
 8000e8e:	f005 f9db 	bl	8006248 <Send_Gate.7>
			lastPress = 6;
 8000e92:	2306      	movs	r3, #6
 8000e94:	60bb      	str	r3, [r7, #8]
			  counter6 = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    		  }
  	        break;
 8000e9c:	e16b      	b.n	8001176 <main+0x56a>
  	    case 7:
		  counter7 += 1;
 8000e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  if (counter7 >= 3) {
 8000ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	f340 8164 	ble.w	800117a <main+0x56e>
			Send_Gate(7, 'H');
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	469c      	mov	ip, r3
 8000eb6:	2148      	movs	r1, #72	@ 0x48
 8000eb8:	2007      	movs	r0, #7
 8000eba:	f005 f9c5 	bl	8006248 <Send_Gate.7>
			lastPress = 7;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	60bb      	str	r3, [r7, #8]
			  counter7 = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    		  }
  	        break;
 8000ec8:	e157      	b.n	800117a <main+0x56e>
  	    case 8:
		  counter8 += 1;
 8000eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		  if (counter8 >= 3) {
 8000ed4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	f340 8150 	ble.w	800117e <main+0x572>
			Send_Gate(8, 'R');
 8000ede:	463b      	mov	r3, r7
 8000ee0:	469c      	mov	ip, r3
 8000ee2:	2152      	movs	r1, #82	@ 0x52
 8000ee4:	2008      	movs	r0, #8
 8000ee6:	f005 f9af 	bl	8006248 <Send_Gate.7>
			lastPress = 8;
 8000eea:	2308      	movs	r3, #8
 8000eec:	60bb      	str	r3, [r7, #8]
			  counter8 = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    		  }
  	        break;
 8000ef4:	e143      	b.n	800117e <main+0x572>
  	    case 9:
		  counter9 += 1;
 8000ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000efa:	3301      	adds	r3, #1
 8000efc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  if (counter9 >= 3) {
 8000f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	f340 813c 	ble.w	8001182 <main+0x576>
			Send_Gate(9, 'A');
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	469c      	mov	ip, r3
 8000f0e:	2141      	movs	r1, #65	@ 0x41
 8000f10:	2009      	movs	r0, #9
 8000f12:	f005 f999 	bl	8006248 <Send_Gate.7>
			lastPress = 9;
 8000f16:	2309      	movs	r3, #9
 8000f18:	60bb      	str	r3, [r7, #8]
			  counter9 = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    		  }
  	        break;
 8000f20:	e12f      	b.n	8001182 <main+0x576>
  	    case 10:
		  counter10 += 1;
 8000f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f26:	3301      	adds	r3, #1
 8000f28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  if (counter10 >= 3) {
 8000f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	f340 8128 	ble.w	8001186 <main+0x57a>
			Send_Gate(10, 'O');
 8000f36:	463b      	mov	r3, r7
 8000f38:	469c      	mov	ip, r3
 8000f3a:	214f      	movs	r1, #79	@ 0x4f
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f005 f983 	bl	8006248 <Send_Gate.7>
			lastPress = 10;
 8000f42:	230a      	movs	r3, #10
 8000f44:	60bb      	str	r3, [r7, #8]
			  counter10 = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    		  }
  	        break;
 8000f4c:	e11b      	b.n	8001186 <main+0x57a>
  	    case 11:
		  counter11 += 1;
 8000f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f52:	3301      	adds	r3, #1
 8000f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		  if (counter11 >= 3) {
 8000f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	f340 8114 	ble.w	800118a <main+0x57e>
			Send_Gate(11, '*');
 8000f62:	463b      	mov	r3, r7
 8000f64:	469c      	mov	ip, r3
 8000f66:	212a      	movs	r1, #42	@ 0x2a
 8000f68:	200b      	movs	r0, #11
 8000f6a:	f005 f96d 	bl	8006248 <Send_Gate.7>
			lastPress = 11;
 8000f6e:	230b      	movs	r3, #11
 8000f70:	60bb      	str	r3, [r7, #8]
			  counter11 = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    		  }
  	        break;
 8000f78:	e107      	b.n	800118a <main+0x57e>
  	    case 12:
		  counter12 += 1;
 8000f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  if (counter12 >= 3) {
 8000f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	f340 8100 	ble.w	800118e <main+0x582>
			Send_Gate(12, 'E');
 8000f8e:	463b      	mov	r3, r7
 8000f90:	469c      	mov	ip, r3
 8000f92:	2145      	movs	r1, #69	@ 0x45
 8000f94:	200c      	movs	r0, #12
 8000f96:	f005 f957 	bl	8006248 <Send_Gate.7>
			lastPress = 12;
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	60bb      	str	r3, [r7, #8]
			  counter12 = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    		  }
  	        break;
 8000fa4:	e0f3      	b.n	800118e <main+0x582>
  	    case 13:
		  counter13 += 1;
 8000fa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  if (counter13 >= 3) {
 8000fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	f340 80ec 	ble.w	8001192 <main+0x586>
			Send_Gate(13, 'U');
 8000fba:	463b      	mov	r3, r7
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	2155      	movs	r1, #85	@ 0x55
 8000fc0:	200d      	movs	r0, #13
 8000fc2:	f005 f941 	bl	8006248 <Send_Gate.7>
			lastPress = 13;
 8000fc6:	230d      	movs	r3, #13
 8000fc8:	60bb      	str	r3, [r7, #8]
			  counter13 = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  }
  	        break;
 8000fd0:	e0df      	b.n	8001192 <main+0x586>
  	    case 14:
		  counter14 += 1;
 8000fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  if (counter14 >= 3) {
 8000fd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	f340 80db 	ble.w	8001196 <main+0x58a>
			Send_Gate(14, 'F');
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	469c      	mov	ip, r3
 8000fe4:	2146      	movs	r1, #70	@ 0x46
 8000fe6:	200e      	movs	r0, #14
 8000fe8:	f005 f92e 	bl	8006248 <Send_Gate.7>
			lastPress = 14;
 8000fec:	230e      	movs	r3, #14
 8000fee:	60bb      	str	r3, [r7, #8]
			  counter14 = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  }
  	        break;
 8000ff4:	e0cf      	b.n	8001196 <main+0x58a>
 8000ff6:	bf00      	nop
 8000ff8:	0800d4b4 	.word	0x0800d4b4
 8000ffc:	20000188 	.word	0x20000188
 8001000:	2000137c 	.word	0x2000137c
  	    case 15:
		  counter15 += 1;
 8001004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001006:	3301      	adds	r3, #1
 8001008:	67bb      	str	r3, [r7, #120]	@ 0x78
		  if (counter15 >= 3) {
 800100a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800100c:	2b02      	cmp	r3, #2
 800100e:	f340 80c4 	ble.w	800119a <main+0x58e>
			Send_Gate(15, 'R');
 8001012:	463b      	mov	r3, r7
 8001014:	469c      	mov	ip, r3
 8001016:	2152      	movs	r1, #82	@ 0x52
 8001018:	200f      	movs	r0, #15
 800101a:	f005 f915 	bl	8006248 <Send_Gate.7>
			lastPress = 15;
 800101e:	230f      	movs	r3, #15
 8001020:	60bb      	str	r3, [r7, #8]
			  counter15 = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	67bb      	str	r3, [r7, #120]	@ 0x78
		  }
  	        break;
 8001026:	e0b8      	b.n	800119a <main+0x58e>
  	    case 16:
		  counter16 += 1;
 8001028:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800102a:	3301      	adds	r3, #1
 800102c:	677b      	str	r3, [r7, #116]	@ 0x74
		  if (counter16 >= 3) {
 800102e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001030:	2b02      	cmp	r3, #2
 8001032:	f340 80b4 	ble.w	800119e <main+0x592>
			Send_Gate(16, 'P');
 8001036:	463b      	mov	r3, r7
 8001038:	469c      	mov	ip, r3
 800103a:	2150      	movs	r1, #80	@ 0x50
 800103c:	2010      	movs	r0, #16
 800103e:	f005 f903 	bl	8006248 <Send_Gate.7>
			lastPress = 16;
 8001042:	2310      	movs	r3, #16
 8001044:	60bb      	str	r3, [r7, #8]
			  counter16 = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	677b      	str	r3, [r7, #116]	@ 0x74
		  }
  	        break;
 800104a:	e0a8      	b.n	800119e <main+0x592>
  	    case 17:
		  counter17 += 1;
 800104c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800104e:	3301      	adds	r3, #1
 8001050:	673b      	str	r3, [r7, #112]	@ 0x70
		  if (counter17 >= 3) {
 8001052:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001054:	2b02      	cmp	r3, #2
 8001056:	f340 80a4 	ble.w	80011a2 <main+0x596>
			Send_Gate(17, 'B');
 800105a:	463b      	mov	r3, r7
 800105c:	469c      	mov	ip, r3
 800105e:	2142      	movs	r1, #66	@ 0x42
 8001060:	2011      	movs	r0, #17
 8001062:	f005 f8f1 	bl	8006248 <Send_Gate.7>
			lastPress = 17;
 8001066:	2311      	movs	r3, #17
 8001068:	60bb      	str	r3, [r7, #8]
			  counter17 = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	673b      	str	r3, [r7, #112]	@ 0x70
		  }
  	        break;
 800106e:	e098      	b.n	80011a2 <main+0x596>
  	    case 18:
		  counter18 += 1;
 8001070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001072:	3301      	adds	r3, #1
 8001074:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  if (counter18 >= 3) {
 8001076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001078:	2b02      	cmp	r3, #2
 800107a:	f340 8094 	ble.w	80011a6 <main+0x59a>
			Send_Gate(18, 'L');
 800107e:	463b      	mov	r3, r7
 8001080:	469c      	mov	ip, r3
 8001082:	214c      	movs	r1, #76	@ 0x4c
 8001084:	2012      	movs	r0, #18
 8001086:	f005 f8df 	bl	8006248 <Send_Gate.7>
			lastPress = 18;
 800108a:	2312      	movs	r3, #18
 800108c:	60bb      	str	r3, [r7, #8]
			  counter18 = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  }
  	        break;
 8001092:	e088      	b.n	80011a6 <main+0x59a>
  	    case 19:
		  counter19 += 1;
 8001094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001096:	3301      	adds	r3, #1
 8001098:	66bb      	str	r3, [r7, #104]	@ 0x68
		  if (counter19 >= 3) {
 800109a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800109c:	2b02      	cmp	r3, #2
 800109e:	f340 8084 	ble.w	80011aa <main+0x59e>
			Send_Gate(19, 'G');
 80010a2:	463b      	mov	r3, r7
 80010a4:	469c      	mov	ip, r3
 80010a6:	2147      	movs	r1, #71	@ 0x47
 80010a8:	2013      	movs	r0, #19
 80010aa:	f005 f8cd 	bl	8006248 <Send_Gate.7>
			lastPress = 19;
 80010ae:	2313      	movs	r3, #19
 80010b0:	60bb      	str	r3, [r7, #8]
			  counter19 = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	66bb      	str	r3, [r7, #104]	@ 0x68
		  }
  	        break;
 80010b6:	e078      	b.n	80011aa <main+0x59e>
  	    case 20:
		  counter20 += 1;
 80010b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010ba:	3301      	adds	r3, #1
 80010bc:	667b      	str	r3, [r7, #100]	@ 0x64
		  if (counter20 >= 3) {
 80010be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	dd74      	ble.n	80011ae <main+0x5a2>
			Send_Gate(20, 'T');
 80010c4:	463b      	mov	r3, r7
 80010c6:	469c      	mov	ip, r3
 80010c8:	2154      	movs	r1, #84	@ 0x54
 80010ca:	2014      	movs	r0, #20
 80010cc:	f005 f8bc 	bl	8006248 <Send_Gate.7>
			lastPress = 20;
 80010d0:	2314      	movs	r3, #20
 80010d2:	60bb      	str	r3, [r7, #8]
			  counter20 = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	667b      	str	r3, [r7, #100]	@ 0x64
		  }
  	        break;
 80010d8:	e069      	b.n	80011ae <main+0x5a2>
  	    case 21:
		  counter21 += 1;
 80010da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010dc:	3301      	adds	r3, #1
 80010de:	663b      	str	r3, [r7, #96]	@ 0x60
		  if (counter21 >= 3) {
 80010e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	dd65      	ble.n	80011b2 <main+0x5a6>
			Send_Gate(21, 'S');
 80010e6:	463b      	mov	r3, r7
 80010e8:	469c      	mov	ip, r3
 80010ea:	2153      	movs	r1, #83	@ 0x53
 80010ec:	2015      	movs	r0, #21
 80010ee:	f005 f8ab 	bl	8006248 <Send_Gate.7>
			lastPress = 21;
 80010f2:	2315      	movs	r3, #21
 80010f4:	60bb      	str	r3, [r7, #8]
			  counter21 = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	663b      	str	r3, [r7, #96]	@ 0x60
		  }
  	        break;
 80010fa:	e05a      	b.n	80011b2 <main+0x5a6>
  	    case 22:
		  counter22 += 1;
 80010fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010fe:	3301      	adds	r3, #1
 8001100:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  if (counter22 >= 3) {
 8001102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001104:	2b02      	cmp	r3, #2
 8001106:	dd56      	ble.n	80011b6 <main+0x5aa>
			Send_Gate(22, 'D');
 8001108:	463b      	mov	r3, r7
 800110a:	469c      	mov	ip, r3
 800110c:	2144      	movs	r1, #68	@ 0x44
 800110e:	2016      	movs	r0, #22
 8001110:	f005 f89a 	bl	8006248 <Send_Gate.7>
			lastPress = 22;
 8001114:	2316      	movs	r3, #22
 8001116:	60bb      	str	r3, [r7, #8]
			  counter22 = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  }
  	        break;
 800111c:	e04b      	b.n	80011b6 <main+0x5aa>
  	    case 23:
		  counter23 += 1;
 800111e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001120:	3301      	adds	r3, #1
 8001122:	65bb      	str	r3, [r7, #88]	@ 0x58
		  if (counter23 >= 3) {
 8001124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001126:	2b02      	cmp	r3, #2
 8001128:	dd47      	ble.n	80011ba <main+0x5ae>
			Send_Gate(23, 'Z');
 800112a:	463b      	mov	r3, r7
 800112c:	469c      	mov	ip, r3
 800112e:	215a      	movs	r1, #90	@ 0x5a
 8001130:	2017      	movs	r0, #23
 8001132:	f005 f889 	bl	8006248 <Send_Gate.7>
			lastPress = 23;
 8001136:	2317      	movs	r3, #23
 8001138:	60bb      	str	r3, [r7, #8]
			  counter23 = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	65bb      	str	r3, [r7, #88]	@ 0x58
		  }
  	        break;
 800113e:	e03c      	b.n	80011ba <main+0x5ae>
  	    case 24:
		  counter24 += 1;
 8001140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001142:	3301      	adds	r3, #1
 8001144:	657b      	str	r3, [r7, #84]	@ 0x54
		  if (counter24 >= 3) {
 8001146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001148:	2b02      	cmp	r3, #2
 800114a:	dd38      	ble.n	80011be <main+0x5b2>
			Send_Gate(24, '/');
 800114c:	463b      	mov	r3, r7
 800114e:	469c      	mov	ip, r3
 8001150:	212f      	movs	r1, #47	@ 0x2f
 8001152:	2018      	movs	r0, #24
 8001154:	f005 f878 	bl	8006248 <Send_Gate.7>
			lastPress = 24;
 8001158:	2318      	movs	r3, #24
 800115a:	60bb      	str	r3, [r7, #8]
			  counter24 = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	657b      	str	r3, [r7, #84]	@ 0x54
		  }
				break;
 8001160:	e02d      	b.n	80011be <main+0x5b2>
  	    default:
  	        break;
 8001162:	bf00      	nop
 8001164:	e5c7      	b.n	8000cf6 <main+0xea>
  	        break;
 8001166:	bf00      	nop
 8001168:	e5c5      	b.n	8000cf6 <main+0xea>
  	        break;
 800116a:	bf00      	nop
 800116c:	e5c3      	b.n	8000cf6 <main+0xea>
  	        break;
 800116e:	bf00      	nop
 8001170:	e5c1      	b.n	8000cf6 <main+0xea>
  	        break;
 8001172:	bf00      	nop
 8001174:	e5bf      	b.n	8000cf6 <main+0xea>
  	        break;
 8001176:	bf00      	nop
 8001178:	e5bd      	b.n	8000cf6 <main+0xea>
  	        break;
 800117a:	bf00      	nop
 800117c:	e5bb      	b.n	8000cf6 <main+0xea>
  	        break;
 800117e:	bf00      	nop
 8001180:	e5b9      	b.n	8000cf6 <main+0xea>
  	        break;
 8001182:	bf00      	nop
 8001184:	e5b7      	b.n	8000cf6 <main+0xea>
  	        break;
 8001186:	bf00      	nop
 8001188:	e5b5      	b.n	8000cf6 <main+0xea>
  	        break;
 800118a:	bf00      	nop
 800118c:	e5b3      	b.n	8000cf6 <main+0xea>
  	        break;
 800118e:	bf00      	nop
 8001190:	e5b1      	b.n	8000cf6 <main+0xea>
  	        break;
 8001192:	bf00      	nop
 8001194:	e5af      	b.n	8000cf6 <main+0xea>
  	        break;
 8001196:	bf00      	nop
 8001198:	e5ad      	b.n	8000cf6 <main+0xea>
  	        break;
 800119a:	bf00      	nop
 800119c:	e5ab      	b.n	8000cf6 <main+0xea>
  	        break;
 800119e:	bf00      	nop
 80011a0:	e5a9      	b.n	8000cf6 <main+0xea>
  	        break;
 80011a2:	bf00      	nop
 80011a4:	e5a7      	b.n	8000cf6 <main+0xea>
  	        break;
 80011a6:	bf00      	nop
 80011a8:	e5a5      	b.n	8000cf6 <main+0xea>
  	        break;
 80011aa:	bf00      	nop
 80011ac:	e5a3      	b.n	8000cf6 <main+0xea>
  	        break;
 80011ae:	bf00      	nop
 80011b0:	e5a1      	b.n	8000cf6 <main+0xea>
  	        break;
 80011b2:	bf00      	nop
 80011b4:	e59f      	b.n	8000cf6 <main+0xea>
  	        break;
 80011b6:	bf00      	nop
 80011b8:	e59d      	b.n	8000cf6 <main+0xea>
  	        break;
 80011ba:	bf00      	nop
 80011bc:	e59b      	b.n	8000cf6 <main+0xea>
				break;
 80011be:	bf00      	nop
    pressed_key = Scan_KeyMatrix();
 80011c0:	e599      	b.n	8000cf6 <main+0xea>
 80011c2:	bf00      	nop

080011c4 <Clear_Buffer.11>:
  void Clear_Buffer(){
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4662      	mov	r2, ip
 80011cc:	f8c7 c004 	str.w	ip, [r7, #4]
  	  for (int i = 0; i < 22; i++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e007      	b.n	80011e6 <Clear_Buffer.11+0x22>
  	  		          charbuffer[i] = '\0';
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	332a      	adds	r3, #42	@ 0x2a
 80011dc:	2100      	movs	r1, #0
 80011de:	7019      	strb	r1, [r3, #0]
  	  for (int i = 0; i < 22; i++) {
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b15      	cmp	r3, #21
 80011ea:	ddf4      	ble.n	80011d6 <Clear_Buffer.11+0x12>
    }
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <Send_Character.6>:
  void Send_Character(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	f8c7 c004 	str.w	ip, [r7, #4]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8001206:	2208      	movs	r2, #8
 8001208:	490c      	ldr	r1, [pc, #48]	@ (800123c <Send_Character.6+0x40>)
 800120a:	480d      	ldr	r0, [pc, #52]	@ (8001240 <Send_Character.6+0x44>)
 800120c:	f009 fcb0 	bl	800ab70 <USBD_HID_SendReport>
	  HAL_Delay(20);
 8001210:	2014      	movs	r0, #20
 8001212:	f005 fbbf 	bl	8006994 <HAL_Delay>
	  keyBoardHIDsub.MODIFIER=0x00;
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <Send_Character.6+0x40>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
	  keyBoardHIDsub.KEYCODE2=0x00;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <Send_Character.6+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8001222:	2208      	movs	r2, #8
 8001224:	4905      	ldr	r1, [pc, #20]	@ (800123c <Send_Character.6+0x40>)
 8001226:	4806      	ldr	r0, [pc, #24]	@ (8001240 <Send_Character.6+0x44>)
 8001228:	f009 fca2 	bl	800ab70 <USBD_HID_SendReport>
	  HAL_Delay(20);
 800122c:	2014      	movs	r0, #20
 800122e:	f005 fbb1 	bl	8006994 <HAL_Delay>
	  }
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200001d0 	.word	0x200001d0
 8001240:	2000138c 	.word	0x2000138c

08001244 <Set_Character.5>:
  void Set_Character(char i){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	f8c7 c000 	str.w	ip, [r7]
	  switch(i){
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	3b20      	subs	r3, #32
 8001256:	2b5a      	cmp	r3, #90	@ 0x5a
 8001258:	f200 8228 	bhi.w	80016ac <Set_Character.5+0x468>
 800125c:	a201      	add	r2, pc, #4	@ (adr r2, 8001264 <Set_Character.5+0x20>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001663 	.word	0x08001663
 8001268:	080015c9 	.word	0x080015c9
 800126c:	080016ad 	.word	0x080016ad
 8001270:	080015e5 	.word	0x080015e5
 8001274:	080015f3 	.word	0x080015f3
 8001278:	08001601 	.word	0x08001601
 800127c:	0800161d 	.word	0x0800161d
 8001280:	08001671 	.word	0x08001671
 8001284:	08001639 	.word	0x08001639
 8001288:	08001647 	.word	0x08001647
 800128c:	0800162b 	.word	0x0800162b
 8001290:	08001655 	.word	0x08001655
 8001294:	08001691 	.word	0x08001691
 8001298:	080016ad 	.word	0x080016ad
 800129c:	0800167f 	.word	0x0800167f
 80012a0:	080016ad 	.word	0x080016ad
 80012a4:	080015bb 	.word	0x080015bb
 80012a8:	0800153d 	.word	0x0800153d
 80012ac:	0800154b 	.word	0x0800154b
 80012b0:	08001559 	.word	0x08001559
 80012b4:	08001567 	.word	0x08001567
 80012b8:	08001575 	.word	0x08001575
 80012bc:	08001583 	.word	0x08001583
 80012c0:	08001591 	.word	0x08001591
 80012c4:	0800159f 	.word	0x0800159f
 80012c8:	080015ad 	.word	0x080015ad
 80012cc:	080016ad 	.word	0x080016ad
 80012d0:	080016ad 	.word	0x080016ad
 80012d4:	080016ad 	.word	0x080016ad
 80012d8:	080016ad 	.word	0x080016ad
 80012dc:	080016ad 	.word	0x080016ad
 80012e0:	0800169f 	.word	0x0800169f
 80012e4:	080015d7 	.word	0x080015d7
 80012e8:	080016ad 	.word	0x080016ad
 80012ec:	080016ad 	.word	0x080016ad
 80012f0:	080016ad 	.word	0x080016ad
 80012f4:	080016ad 	.word	0x080016ad
 80012f8:	080016ad 	.word	0x080016ad
 80012fc:	080016ad 	.word	0x080016ad
 8001300:	080016ad 	.word	0x080016ad
 8001304:	080016ad 	.word	0x080016ad
 8001308:	080016ad 	.word	0x080016ad
 800130c:	080016ad 	.word	0x080016ad
 8001310:	080016ad 	.word	0x080016ad
 8001314:	080016ad 	.word	0x080016ad
 8001318:	080016ad 	.word	0x080016ad
 800131c:	080016ad 	.word	0x080016ad
 8001320:	080016ad 	.word	0x080016ad
 8001324:	080016ad 	.word	0x080016ad
 8001328:	080016ad 	.word	0x080016ad
 800132c:	080016ad 	.word	0x080016ad
 8001330:	080016ad 	.word	0x080016ad
 8001334:	080016ad 	.word	0x080016ad
 8001338:	080016ad 	.word	0x080016ad
 800133c:	080016ad 	.word	0x080016ad
 8001340:	080016ad 	.word	0x080016ad
 8001344:	080016ad 	.word	0x080016ad
 8001348:	080016ad 	.word	0x080016ad
 800134c:	080016ad 	.word	0x080016ad
 8001350:	080016ad 	.word	0x080016ad
 8001354:	080016ad 	.word	0x080016ad
 8001358:	080016ad 	.word	0x080016ad
 800135c:	0800160f 	.word	0x0800160f
 8001360:	080016ad 	.word	0x080016ad
 8001364:	080016ad 	.word	0x080016ad
 8001368:	080013d1 	.word	0x080013d1
 800136c:	080013df 	.word	0x080013df
 8001370:	080013ed 	.word	0x080013ed
 8001374:	080013fb 	.word	0x080013fb
 8001378:	08001409 	.word	0x08001409
 800137c:	08001417 	.word	0x08001417
 8001380:	08001425 	.word	0x08001425
 8001384:	08001433 	.word	0x08001433
 8001388:	08001441 	.word	0x08001441
 800138c:	0800144f 	.word	0x0800144f
 8001390:	0800145d 	.word	0x0800145d
 8001394:	0800146b 	.word	0x0800146b
 8001398:	08001479 	.word	0x08001479
 800139c:	08001487 	.word	0x08001487
 80013a0:	08001495 	.word	0x08001495
 80013a4:	080014a3 	.word	0x080014a3
 80013a8:	080014b1 	.word	0x080014b1
 80013ac:	080014bf 	.word	0x080014bf
 80013b0:	080014cd 	.word	0x080014cd
 80013b4:	080014db 	.word	0x080014db
 80013b8:	080014e9 	.word	0x080014e9
 80013bc:	080014f7 	.word	0x080014f7
 80013c0:	08001505 	.word	0x08001505
 80013c4:	08001513 	.word	0x08001513
 80013c8:	08001521 	.word	0x08001521
 80013cc:	0800152f 	.word	0x0800152f
					keyBoardHIDsub.MODIFIER=0x00;
 80013d0:	4bae      	ldr	r3, [pc, #696]	@ (800168c <Set_Character.5+0x448>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
	  			    keyBoardHIDsub.KEYCODE2=KEY_A;
 80013d6:	4bad      	ldr	r3, [pc, #692]	@ (800168c <Set_Character.5+0x448>)
 80013d8:	2204      	movs	r2, #4
 80013da:	70da      	strb	r2, [r3, #3]
	  			    break;
 80013dc:	e16d      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 80013de:	4bab      	ldr	r3, [pc, #684]	@ (800168c <Set_Character.5+0x448>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	  	  		  	keyBoardHIDsub.KEYCODE2=KEY_B;
 80013e4:	4ba9      	ldr	r3, [pc, #676]	@ (800168c <Set_Character.5+0x448>)
 80013e6:	2205      	movs	r2, #5
 80013e8:	70da      	strb	r2, [r3, #3]
	  	  		  	break;
 80013ea:	e166      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80013ec:	4ba7      	ldr	r3, [pc, #668]	@ (800168c <Set_Character.5+0x448>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_C;
 80013f2:	4ba6      	ldr	r3, [pc, #664]	@ (800168c <Set_Character.5+0x448>)
 80013f4:	2206      	movs	r2, #6
 80013f6:	70da      	strb	r2, [r3, #3]
	    			break;
 80013f8:	e15f      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80013fa:	4ba4      	ldr	r3, [pc, #656]	@ (800168c <Set_Character.5+0x448>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_D;
 8001400:	4ba2      	ldr	r3, [pc, #648]	@ (800168c <Set_Character.5+0x448>)
 8001402:	2207      	movs	r2, #7
 8001404:	70da      	strb	r2, [r3, #3]
	  			break;
 8001406:	e158      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001408:	4ba0      	ldr	r3, [pc, #640]	@ (800168c <Set_Character.5+0x448>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_E;
 800140e:	4b9f      	ldr	r3, [pc, #636]	@ (800168c <Set_Character.5+0x448>)
 8001410:	2208      	movs	r2, #8
 8001412:	70da      	strb	r2, [r3, #3]
	  			break;
 8001414:	e151      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001416:	4b9d      	ldr	r3, [pc, #628]	@ (800168c <Set_Character.5+0x448>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_F;
 800141c:	4b9b      	ldr	r3, [pc, #620]	@ (800168c <Set_Character.5+0x448>)
 800141e:	2209      	movs	r2, #9
 8001420:	70da      	strb	r2, [r3, #3]
	  			break;
 8001422:	e14a      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001424:	4b99      	ldr	r3, [pc, #612]	@ (800168c <Set_Character.5+0x448>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_G;
 800142a:	4b98      	ldr	r3, [pc, #608]	@ (800168c <Set_Character.5+0x448>)
 800142c:	220a      	movs	r2, #10
 800142e:	70da      	strb	r2, [r3, #3]
	  			break;
 8001430:	e143      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001432:	4b96      	ldr	r3, [pc, #600]	@ (800168c <Set_Character.5+0x448>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_H;
 8001438:	4b94      	ldr	r3, [pc, #592]	@ (800168c <Set_Character.5+0x448>)
 800143a:	220b      	movs	r2, #11
 800143c:	70da      	strb	r2, [r3, #3]
	  			break;
 800143e:	e13c      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001440:	4b92      	ldr	r3, [pc, #584]	@ (800168c <Set_Character.5+0x448>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_I;
 8001446:	4b91      	ldr	r3, [pc, #580]	@ (800168c <Set_Character.5+0x448>)
 8001448:	220c      	movs	r2, #12
 800144a:	70da      	strb	r2, [r3, #3]
	  			break;
 800144c:	e135      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800144e:	4b8f      	ldr	r3, [pc, #572]	@ (800168c <Set_Character.5+0x448>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_J;
 8001454:	4b8d      	ldr	r3, [pc, #564]	@ (800168c <Set_Character.5+0x448>)
 8001456:	220d      	movs	r2, #13
 8001458:	70da      	strb	r2, [r3, #3]
					break;
 800145a:	e12e      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800145c:	4b8b      	ldr	r3, [pc, #556]	@ (800168c <Set_Character.5+0x448>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_K;
 8001462:	4b8a      	ldr	r3, [pc, #552]	@ (800168c <Set_Character.5+0x448>)
 8001464:	220e      	movs	r2, #14
 8001466:	70da      	strb	r2, [r3, #3]
	  			break;
 8001468:	e127      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800146a:	4b88      	ldr	r3, [pc, #544]	@ (800168c <Set_Character.5+0x448>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_L;
 8001470:	4b86      	ldr	r3, [pc, #536]	@ (800168c <Set_Character.5+0x448>)
 8001472:	220f      	movs	r2, #15
 8001474:	70da      	strb	r2, [r3, #3]
	  			break;
 8001476:	e120      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001478:	4b84      	ldr	r3, [pc, #528]	@ (800168c <Set_Character.5+0x448>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_M;
 800147e:	4b83      	ldr	r3, [pc, #524]	@ (800168c <Set_Character.5+0x448>)
 8001480:	2210      	movs	r2, #16
 8001482:	70da      	strb	r2, [r3, #3]
	  			break;
 8001484:	e119      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001486:	4b81      	ldr	r3, [pc, #516]	@ (800168c <Set_Character.5+0x448>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_N;
 800148c:	4b7f      	ldr	r3, [pc, #508]	@ (800168c <Set_Character.5+0x448>)
 800148e:	2211      	movs	r2, #17
 8001490:	70da      	strb	r2, [r3, #3]
	  			break;
 8001492:	e112      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001494:	4b7d      	ldr	r3, [pc, #500]	@ (800168c <Set_Character.5+0x448>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_O;
 800149a:	4b7c      	ldr	r3, [pc, #496]	@ (800168c <Set_Character.5+0x448>)
 800149c:	2212      	movs	r2, #18
 800149e:	70da      	strb	r2, [r3, #3]
	  			break;
 80014a0:	e10b      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014a2:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <Set_Character.5+0x448>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_P;
 80014a8:	4b78      	ldr	r3, [pc, #480]	@ (800168c <Set_Character.5+0x448>)
 80014aa:	2213      	movs	r2, #19
 80014ac:	70da      	strb	r2, [r3, #3]
	  			break;
 80014ae:	e104      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014b0:	4b76      	ldr	r3, [pc, #472]	@ (800168c <Set_Character.5+0x448>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_Q;
 80014b6:	4b75      	ldr	r3, [pc, #468]	@ (800168c <Set_Character.5+0x448>)
 80014b8:	2214      	movs	r2, #20
 80014ba:	70da      	strb	r2, [r3, #3]
	  			break;
 80014bc:	e0fd      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014be:	4b73      	ldr	r3, [pc, #460]	@ (800168c <Set_Character.5+0x448>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_R;
 80014c4:	4b71      	ldr	r3, [pc, #452]	@ (800168c <Set_Character.5+0x448>)
 80014c6:	2215      	movs	r2, #21
 80014c8:	70da      	strb	r2, [r3, #3]
	  			break;
 80014ca:	e0f6      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014cc:	4b6f      	ldr	r3, [pc, #444]	@ (800168c <Set_Character.5+0x448>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_S;
 80014d2:	4b6e      	ldr	r3, [pc, #440]	@ (800168c <Set_Character.5+0x448>)
 80014d4:	2216      	movs	r2, #22
 80014d6:	70da      	strb	r2, [r3, #3]
	  			break;
 80014d8:	e0ef      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014da:	4b6c      	ldr	r3, [pc, #432]	@ (800168c <Set_Character.5+0x448>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_T;
 80014e0:	4b6a      	ldr	r3, [pc, #424]	@ (800168c <Set_Character.5+0x448>)
 80014e2:	2217      	movs	r2, #23
 80014e4:	70da      	strb	r2, [r3, #3]
	  			break;
 80014e6:	e0e8      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014e8:	4b68      	ldr	r3, [pc, #416]	@ (800168c <Set_Character.5+0x448>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_U;
 80014ee:	4b67      	ldr	r3, [pc, #412]	@ (800168c <Set_Character.5+0x448>)
 80014f0:	2218      	movs	r2, #24
 80014f2:	70da      	strb	r2, [r3, #3]
	  			break;
 80014f4:	e0e1      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014f6:	4b65      	ldr	r3, [pc, #404]	@ (800168c <Set_Character.5+0x448>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_V;
 80014fc:	4b63      	ldr	r3, [pc, #396]	@ (800168c <Set_Character.5+0x448>)
 80014fe:	2219      	movs	r2, #25
 8001500:	70da      	strb	r2, [r3, #3]
	  			break;
 8001502:	e0da      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001504:	4b61      	ldr	r3, [pc, #388]	@ (800168c <Set_Character.5+0x448>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_W;
 800150a:	4b60      	ldr	r3, [pc, #384]	@ (800168c <Set_Character.5+0x448>)
 800150c:	221a      	movs	r2, #26
 800150e:	70da      	strb	r2, [r3, #3]
				break;
 8001510:	e0d3      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001512:	4b5e      	ldr	r3, [pc, #376]	@ (800168c <Set_Character.5+0x448>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_X;
 8001518:	4b5c      	ldr	r3, [pc, #368]	@ (800168c <Set_Character.5+0x448>)
 800151a:	221b      	movs	r2, #27
 800151c:	70da      	strb	r2, [r3, #3]
				break;
 800151e:	e0cc      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001520:	4b5a      	ldr	r3, [pc, #360]	@ (800168c <Set_Character.5+0x448>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_Y;
 8001526:	4b59      	ldr	r3, [pc, #356]	@ (800168c <Set_Character.5+0x448>)
 8001528:	221c      	movs	r2, #28
 800152a:	70da      	strb	r2, [r3, #3]
				break;
 800152c:	e0c5      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800152e:	4b57      	ldr	r3, [pc, #348]	@ (800168c <Set_Character.5+0x448>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_Z;
 8001534:	4b55      	ldr	r3, [pc, #340]	@ (800168c <Set_Character.5+0x448>)
 8001536:	221d      	movs	r2, #29
 8001538:	70da      	strb	r2, [r3, #3]
				break;
 800153a:	e0be      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800153c:	4b53      	ldr	r3, [pc, #332]	@ (800168c <Set_Character.5+0x448>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_1;
 8001542:	4b52      	ldr	r3, [pc, #328]	@ (800168c <Set_Character.5+0x448>)
 8001544:	221e      	movs	r2, #30
 8001546:	70da      	strb	r2, [r3, #3]
				break;
 8001548:	e0b7      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800154a:	4b50      	ldr	r3, [pc, #320]	@ (800168c <Set_Character.5+0x448>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_2;
 8001550:	4b4e      	ldr	r3, [pc, #312]	@ (800168c <Set_Character.5+0x448>)
 8001552:	221f      	movs	r2, #31
 8001554:	70da      	strb	r2, [r3, #3]
				break;
 8001556:	e0b0      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001558:	4b4c      	ldr	r3, [pc, #304]	@ (800168c <Set_Character.5+0x448>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_3;
 800155e:	4b4b      	ldr	r3, [pc, #300]	@ (800168c <Set_Character.5+0x448>)
 8001560:	2220      	movs	r2, #32
 8001562:	70da      	strb	r2, [r3, #3]
				break;
 8001564:	e0a9      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001566:	4b49      	ldr	r3, [pc, #292]	@ (800168c <Set_Character.5+0x448>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_4;
 800156c:	4b47      	ldr	r3, [pc, #284]	@ (800168c <Set_Character.5+0x448>)
 800156e:	2221      	movs	r2, #33	@ 0x21
 8001570:	70da      	strb	r2, [r3, #3]
				break;
 8001572:	e0a2      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001574:	4b45      	ldr	r3, [pc, #276]	@ (800168c <Set_Character.5+0x448>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_5;
 800157a:	4b44      	ldr	r3, [pc, #272]	@ (800168c <Set_Character.5+0x448>)
 800157c:	2222      	movs	r2, #34	@ 0x22
 800157e:	70da      	strb	r2, [r3, #3]
				break;
 8001580:	e09b      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001582:	4b42      	ldr	r3, [pc, #264]	@ (800168c <Set_Character.5+0x448>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_6;
 8001588:	4b40      	ldr	r3, [pc, #256]	@ (800168c <Set_Character.5+0x448>)
 800158a:	2223      	movs	r2, #35	@ 0x23
 800158c:	70da      	strb	r2, [r3, #3]
				break;
 800158e:	e094      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001590:	4b3e      	ldr	r3, [pc, #248]	@ (800168c <Set_Character.5+0x448>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_7;
 8001596:	4b3d      	ldr	r3, [pc, #244]	@ (800168c <Set_Character.5+0x448>)
 8001598:	2224      	movs	r2, #36	@ 0x24
 800159a:	70da      	strb	r2, [r3, #3]
				break;
 800159c:	e08d      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800159e:	4b3b      	ldr	r3, [pc, #236]	@ (800168c <Set_Character.5+0x448>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_8;
 80015a4:	4b39      	ldr	r3, [pc, #228]	@ (800168c <Set_Character.5+0x448>)
 80015a6:	2225      	movs	r2, #37	@ 0x25
 80015a8:	70da      	strb	r2, [r3, #3]
				break;
 80015aa:	e086      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80015ac:	4b37      	ldr	r3, [pc, #220]	@ (800168c <Set_Character.5+0x448>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_9;
 80015b2:	4b36      	ldr	r3, [pc, #216]	@ (800168c <Set_Character.5+0x448>)
 80015b4:	2226      	movs	r2, #38	@ 0x26
 80015b6:	70da      	strb	r2, [r3, #3]
				break;
 80015b8:	e07f      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 80015ba:	4b34      	ldr	r3, [pc, #208]	@ (800168c <Set_Character.5+0x448>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_0;
 80015c0:	4b32      	ldr	r3, [pc, #200]	@ (800168c <Set_Character.5+0x448>)
 80015c2:	2227      	movs	r2, #39	@ 0x27
 80015c4:	70da      	strb	r2, [r3, #3]
				break;
 80015c6:	e078      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 80015c8:	4b30      	ldr	r3, [pc, #192]	@ (800168c <Set_Character.5+0x448>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_1;
 80015ce:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <Set_Character.5+0x448>)
 80015d0:	221e      	movs	r2, #30
 80015d2:	70da      	strb	r2, [r3, #3]
				break;
 80015d4:	e071      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <Set_Character.5+0x448>)
 80015d8:	2202      	movs	r2, #2
 80015da:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_2;
 80015dc:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <Set_Character.5+0x448>)
 80015de:	221f      	movs	r2, #31
 80015e0:	70da      	strb	r2, [r3, #3]
				break;
 80015e2:	e06a      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <Set_Character.5+0x448>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_BACKSPACE;
 80015ea:	4b28      	ldr	r3, [pc, #160]	@ (800168c <Set_Character.5+0x448>)
 80015ec:	222a      	movs	r2, #42	@ 0x2a
 80015ee:	70da      	strb	r2, [r3, #3]
				break;
 80015f0:	e063      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 80015f2:	4b26      	ldr	r3, [pc, #152]	@ (800168c <Set_Character.5+0x448>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_4;
 80015f8:	4b24      	ldr	r3, [pc, #144]	@ (800168c <Set_Character.5+0x448>)
 80015fa:	2221      	movs	r2, #33	@ 0x21
 80015fc:	70da      	strb	r2, [r3, #3]
				break;
 80015fe:	e05c      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 8001600:	4b22      	ldr	r3, [pc, #136]	@ (800168c <Set_Character.5+0x448>)
 8001602:	2202      	movs	r2, #2
 8001604:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_5;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <Set_Character.5+0x448>)
 8001608:	2222      	movs	r2, #34	@ 0x22
 800160a:	70da      	strb	r2, [r3, #3]
				break;
 800160c:	e055      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <Set_Character.5+0x448>)
 8001610:	2202      	movs	r2, #2
 8001612:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_6;
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <Set_Character.5+0x448>)
 8001616:	2223      	movs	r2, #35	@ 0x23
 8001618:	70da      	strb	r2, [r3, #3]
				break;
 800161a:	e04e      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 800161c:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <Set_Character.5+0x448>)
 800161e:	2202      	movs	r2, #2
 8001620:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_7;
 8001622:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <Set_Character.5+0x448>)
 8001624:	2224      	movs	r2, #36	@ 0x24
 8001626:	70da      	strb	r2, [r3, #3]
				break;
 8001628:	e047      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 800162a:	4b18      	ldr	r3, [pc, #96]	@ (800168c <Set_Character.5+0x448>)
 800162c:	2202      	movs	r2, #2
 800162e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_8;
 8001630:	4b16      	ldr	r3, [pc, #88]	@ (800168c <Set_Character.5+0x448>)
 8001632:	2225      	movs	r2, #37	@ 0x25
 8001634:	70da      	strb	r2, [r3, #3]
				break;
 8001636:	e040      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <Set_Character.5+0x448>)
 800163a:	2202      	movs	r2, #2
 800163c:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_9;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <Set_Character.5+0x448>)
 8001640:	2226      	movs	r2, #38	@ 0x26
 8001642:	70da      	strb	r2, [r3, #3]
				break;
 8001644:	e039      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <Set_Character.5+0x448>)
 8001648:	2202      	movs	r2, #2
 800164a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_0;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <Set_Character.5+0x448>)
 800164e:	2227      	movs	r2, #39	@ 0x27
 8001650:	70da      	strb	r2, [r3, #3]
				break;
 8001652:	e032      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 8001654:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <Set_Character.5+0x448>)
 8001656:	2202      	movs	r2, #2
 8001658:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_SPACE;
 800165a:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <Set_Character.5+0x448>)
 800165c:	222c      	movs	r2, #44	@ 0x2c
 800165e:	70da      	strb	r2, [r3, #3]
				break;
 8001660:	e02b      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <Set_Character.5+0x448>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_SPACE;
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <Set_Character.5+0x448>)
 800166a:	222c      	movs	r2, #44	@ 0x2c
 800166c:	70da      	strb	r2, [r3, #3]
				break;
 800166e:	e024      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <Set_Character.5+0x448>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_APOSTROPHE;
 8001676:	4b05      	ldr	r3, [pc, #20]	@ (800168c <Set_Character.5+0x448>)
 8001678:	2234      	movs	r2, #52	@ 0x34
 800167a:	70da      	strb	r2, [r3, #3]
				break;
 800167c:	e01d      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 800167e:	4b03      	ldr	r3, [pc, #12]	@ (800168c <Set_Character.5+0x448>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_DOT;
 8001684:	4b01      	ldr	r3, [pc, #4]	@ (800168c <Set_Character.5+0x448>)
 8001686:	2237      	movs	r2, #55	@ 0x37
 8001688:	70da      	strb	r2, [r3, #3]
				break;
 800168a:	e016      	b.n	80016ba <Set_Character.5+0x476>
 800168c:	200001d0 	.word	0x200001d0
					keyBoardHIDsub.MODIFIER=0x00;
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <Set_Character.5+0x484>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_COMMA;
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <Set_Character.5+0x484>)
 8001698:	2236      	movs	r2, #54	@ 0x36
 800169a:	70da      	strb	r2, [r3, #3]
				break;
 800169c:	e00d      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <Set_Character.5+0x484>)
 80016a0:	2202      	movs	r2, #2
 80016a2:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_SLASH;
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <Set_Character.5+0x484>)
 80016a6:	2238      	movs	r2, #56	@ 0x38
 80016a8:	70da      	strb	r2, [r3, #3]
				break;
 80016aa:	e006      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <Set_Character.5+0x484>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=0x00;
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <Set_Character.5+0x484>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	70da      	strb	r2, [r3, #3]
				break;
 80016b8:	bf00      	nop
  }
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	200001d0 	.word	0x200001d0

080016cc <hashFunction.2>:
  unsigned int hashFunction(const char *key) {
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	f8c7 c000 	str.w	ip, [r7]
      unsigned int hash = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
      while (*key) {
 80016dc:	e007      	b.n	80016ee <hashFunction.2+0x22>
          hash = (hash << 5) + *key++;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	015a      	lsls	r2, r3, #5
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	1c59      	adds	r1, r3, #1
 80016e6:	6079      	str	r1, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
      while (*key) {
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f3      	bne.n	80016de <hashFunction.2+0x12>
      return hash % TABLE_SIZE;
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <hashFunction.2+0x4c>)
 80016fa:	fba3 1302 	umull	r1, r3, r3, r2
 80016fe:	0a9b      	lsrs	r3, r3, #10
 8001700:	f240 4169 	movw	r1, #1129	@ 0x469
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	1ad3      	subs	r3, r2, r3
  }
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e830fa55 	.word	0xe830fa55

0800171c <insert.1>:
  void insert(const char *key, const char *value) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	4663      	mov	r3, ip
 8001728:	f8c7 c004 	str.w	ip, [r7, #4]
      unsigned int index = hashFunction(key);
 800172c:	469c      	mov	ip, r3
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff ffcc 	bl	80016cc <hashFunction.2>
 8001734:	6178      	str	r0, [r7, #20]
      while (hashTable[index] != NULL) {
 8001736:	e028      	b.n	800178a <insert.1+0x6e>
          if (strcmp(hashTable[index]->key, key) == 0) {
 8001738:	4a2e      	ldr	r2, [pc, #184]	@ (80017f4 <insert.1+0xd8>)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fd48 	bl	80001d8 <strcmp>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d111      	bne.n	8001772 <insert.1+0x56>
              strncpy(hashTable[index]->value, value, MAX_VALUE_SIZE - 1);
 800174e:	4a29      	ldr	r2, [pc, #164]	@ (80017f4 <insert.1+0xd8>)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	3314      	adds	r3, #20
 8001758:	221d      	movs	r2, #29
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	4618      	mov	r0, r3
 800175e:	f00b fc83 	bl	800d068 <strncpy>
              hashTable[index]->value[MAX_VALUE_SIZE - 1] = '\0';
 8001762:	4a24      	ldr	r2, [pc, #144]	@ (80017f4 <insert.1+0xd8>)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
              return;
 8001770:	e03d      	b.n	80017ee <insert.1+0xd2>
          index = (index + 1) % TABLE_SIZE;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	4a20      	ldr	r2, [pc, #128]	@ (80017f8 <insert.1+0xdc>)
 8001778:	fba2 1203 	umull	r1, r2, r2, r3
 800177c:	0a92      	lsrs	r2, r2, #10
 800177e:	f240 4169 	movw	r1, #1129	@ 0x469
 8001782:	fb01 f202 	mul.w	r2, r1, r2
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	617b      	str	r3, [r7, #20]
      while (hashTable[index] != NULL) {
 800178a:	4a1a      	ldr	r2, [pc, #104]	@ (80017f4 <insert.1+0xd8>)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1d0      	bne.n	8001738 <insert.1+0x1c>
      HashEntry *newEntry = (HashEntry *)malloc(sizeof(HashEntry));
 8001796:	2032      	movs	r0, #50	@ 0x32
 8001798:	f00b f9b4 	bl	800cb04 <malloc>
 800179c:	4603      	mov	r3, r0
 800179e:	613b      	str	r3, [r7, #16]
      if (newEntry == NULL) {
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10a      	bne.n	80017bc <insert.1+0xa0>
          fprintf(stderr, "Memory allocation failed\n");
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <insert.1+0xe0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2219      	movs	r2, #25
 80017ae:	2101      	movs	r1, #1
 80017b0:	4813      	ldr	r0, [pc, #76]	@ (8001800 <insert.1+0xe4>)
 80017b2:	f00b fb6b 	bl	800ce8c <fwrite>
          exit(EXIT_FAILURE);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f00b f992 	bl	800cae0 <exit>
      strncpy(newEntry->key, key, MAX_KEY_SIZE - 1);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2213      	movs	r2, #19
 80017c0:	68f9      	ldr	r1, [r7, #12]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00b fc50 	bl	800d068 <strncpy>
      newEntry->key[MAX_KEY_SIZE - 1] = '\0';
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2200      	movs	r2, #0
 80017cc:	74da      	strb	r2, [r3, #19]
      strncpy(newEntry->value, value, MAX_VALUE_SIZE - 1);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	3314      	adds	r3, #20
 80017d2:	221d      	movs	r2, #29
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00b fc46 	bl	800d068 <strncpy>
      newEntry->value[MAX_VALUE_SIZE - 1] = '\0';
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      hashTable[index] = newEntry;
 80017e4:	4903      	ldr	r1, [pc, #12]	@ (80017f4 <insert.1+0xd8>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200001d8 	.word	0x200001d8
 80017f8:	e830fa55 	.word	0xe830fa55
 80017fc:	2000011c 	.word	0x2000011c
 8001800:	0800d4cc 	.word	0x0800d4cc

08001804 <search.10>:
  const char *search(const char *key) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	4663      	mov	r3, ip
 800180e:	f8c7 c000 	str.w	ip, [r7]
      unsigned int index = hashFunction(key);
 8001812:	469c      	mov	ip, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff59 	bl	80016cc <hashFunction.2>
 800181a:	60f8      	str	r0, [r7, #12]
      while (hashTable[index] != NULL) {
 800181c:	e01c      	b.n	8001858 <search.10+0x54>
          if (strcmp(hashTable[index]->key, key) == 0) {
 800181e:	4a14      	ldr	r2, [pc, #80]	@ (8001870 <search.10+0x6c>)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fcd5 	bl	80001d8 <strcmp>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <search.10+0x3c>
              return hashTable[index]->value;
 8001834:	4a0e      	ldr	r2, [pc, #56]	@ (8001870 <search.10+0x6c>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	3314      	adds	r3, #20
 800183e:	e012      	b.n	8001866 <search.10+0x62>
          index = (index + 1) % TABLE_SIZE; // Linear probing
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3301      	adds	r3, #1
 8001844:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <search.10+0x70>)
 8001846:	fba2 1203 	umull	r1, r2, r2, r3
 800184a:	0a92      	lsrs	r2, r2, #10
 800184c:	f240 4169 	movw	r1, #1129	@ 0x469
 8001850:	fb01 f202 	mul.w	r2, r1, r2
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
      while (hashTable[index] != NULL) {
 8001858:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <search.10+0x6c>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1dc      	bne.n	800181e <search.10+0x1a>
      return NULL; // Key not found
 8001864:	2300      	movs	r3, #0
  }
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001d8 	.word	0x200001d8
 8001874:	e830fa55 	.word	0xe830fa55

08001878 <hashInit.0>:
  void hashInit(){
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	4664      	mov	r4, ip
 8001880:	f8c7 c004 	str.w	ip, [r7, #4]
	    for (int i = 0; i < TABLE_SIZE; i++) {
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e007      	b.n	800189a <hashInit.0+0x22>
	        hashTable[i] = NULL;
 800188a:	4ab4      	ldr	r2, [pc, #720]	@ (8001b5c <hashInit.0+0x2e4>)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2100      	movs	r1, #0
 8001890:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    for (int i = 0; i < TABLE_SIZE; i++) {
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f5b3 6f8d 	cmp.w	r3, #1128	@ 0x468
 80018a0:	ddf3      	ble.n	800188a <hashInit.0+0x12>
	    insert("S", "is");
 80018a2:	46a4      	mov	ip, r4
 80018a4:	49ae      	ldr	r1, [pc, #696]	@ (8001b60 <hashInit.0+0x2e8>)
 80018a6:	48af      	ldr	r0, [pc, #700]	@ (8001b64 <hashInit.0+0x2ec>)
 80018a8:	f7ff ff38 	bl	800171c <insert.1>
	    insert("ST", "is it");
 80018ac:	46a4      	mov	ip, r4
 80018ae:	49ae      	ldr	r1, [pc, #696]	@ (8001b68 <hashInit.0+0x2f0>)
 80018b0:	48ae      	ldr	r0, [pc, #696]	@ (8001b6c <hashInit.0+0x2f4>)
 80018b2:	f7ff ff33 	bl	800171c <insert.1>
	    insert("STK", "and");
 80018b6:	46a4      	mov	ip, r4
 80018b8:	49ad      	ldr	r1, [pc, #692]	@ (8001b70 <hashInit.0+0x2f8>)
 80018ba:	48ae      	ldr	r0, [pc, #696]	@ (8001b74 <hashInit.0+0x2fc>)
 80018bc:	f7ff ff2e 	bl	800171c <insert.1>
	    insert("SAOU", "sue");
 80018c0:	46a4      	mov	ip, r4
 80018c2:	49ad      	ldr	r1, [pc, #692]	@ (8001b78 <hashInit.0+0x300>)
 80018c4:	48ad      	ldr	r0, [pc, #692]	@ (8001b7c <hashInit.0+0x304>)
 80018c6:	f7ff ff29 	bl	800171c <insert.1>
	    insert("SAOPB", "soon");
 80018ca:	46a4      	mov	ip, r4
 80018cc:	49ac      	ldr	r1, [pc, #688]	@ (8001b80 <hashInit.0+0x308>)
 80018ce:	48ad      	ldr	r0, [pc, #692]	@ (8001b84 <hashInit.0+0x30c>)
 80018d0:	f7ff ff24 	bl	800171c <insert.1>
	    insert("P", "about");
 80018d4:	46a4      	mov	ip, r4
 80018d6:	49ac      	ldr	r1, [pc, #688]	@ (8001b88 <hashInit.0+0x310>)
 80018d8:	48ac      	ldr	r0, [pc, #688]	@ (8001b8c <hashInit.0+0x314>)
 80018da:	f7ff ff1f 	bl	800171c <insert.1>
	    insert("KOD", "cod");
 80018de:	46a4      	mov	ip, r4
 80018e0:	49ab      	ldr	r1, [pc, #684]	@ (8001b90 <hashInit.0+0x318>)
 80018e2:	48ac      	ldr	r0, [pc, #688]	@ (8001b94 <hashInit.0+0x31c>)
 80018e4:	f7ff ff1a 	bl	800171c <insert.1>
	    insert("TAO*E", "ty");
 80018e8:	46a4      	mov	ip, r4
 80018ea:	49ab      	ldr	r1, [pc, #684]	@ (8001b98 <hashInit.0+0x320>)
 80018ec:	48ab      	ldr	r0, [pc, #684]	@ (8001b9c <hashInit.0+0x324>)
 80018ee:	f7ff ff15 	bl	800171c <insert.1>
	    insert("STRA/TA", "strata");
 80018f2:	46a4      	mov	ip, r4
 80018f4:	49aa      	ldr	r1, [pc, #680]	@ (8001ba0 <hashInit.0+0x328>)
 80018f6:	48ab      	ldr	r0, [pc, #684]	@ (8001ba4 <hashInit.0+0x32c>)
 80018f8:	f7ff ff10 	bl	800171c <insert.1>
	    insert("STA/TAOU/KWOE", "status quo");
 80018fc:	46a4      	mov	ip, r4
 80018fe:	49aa      	ldr	r1, [pc, #680]	@ (8001ba8 <hashInit.0+0x330>)
 8001900:	48aa      	ldr	r0, [pc, #680]	@ (8001bac <hashInit.0+0x334>)
 8001902:	f7ff ff0b 	bl	800171c <insert.1>
	    insert("STA/TAOU", "statue");
 8001906:	46a4      	mov	ip, r4
 8001908:	49a9      	ldr	r1, [pc, #676]	@ (8001bb0 <hashInit.0+0x338>)
 800190a:	48aa      	ldr	r0, [pc, #680]	@ (8001bb4 <hashInit.0+0x33c>)
 800190c:	f7ff ff06 	bl	800171c <insert.1>
	    insert("STAT/WET", "statuette");
 8001910:	46a4      	mov	ip, r4
 8001912:	49a9      	ldr	r1, [pc, #676]	@ (8001bb8 <hashInit.0+0x340>)
 8001914:	48a9      	ldr	r0, [pc, #676]	@ (8001bbc <hashInit.0+0x344>)
 8001916:	f7ff ff01 	bl	800171c <insert.1>
		insert("TKO*FG", "doing");
 800191a:	46a4      	mov	ip, r4
 800191c:	49a8      	ldr	r1, [pc, #672]	@ (8001bc0 <hashInit.0+0x348>)
 800191e:	48a9      	ldr	r0, [pc, #676]	@ (8001bc4 <hashInit.0+0x34c>)
 8001920:	f7ff fefc 	bl	800171c <insert.1>
		insert("TKO", "do");
 8001924:	46a4      	mov	ip, r4
 8001926:	49a8      	ldr	r1, [pc, #672]	@ (8001bc8 <hashInit.0+0x350>)
 8001928:	48a8      	ldr	r0, [pc, #672]	@ (8001bcc <hashInit.0+0x354>)
 800192a:	f7ff fef7 	bl	800171c <insert.1>
		insert("TKAUS", "cause");
 800192e:	46a4      	mov	ip, r4
 8001930:	49a7      	ldr	r1, [pc, #668]	@ (8001bd0 <hashInit.0+0x358>)
 8001932:	48a8      	ldr	r0, [pc, #672]	@ (8001bd4 <hashInit.0+0x35c>)
 8001934:	f7ff fef2 	bl	800171c <insert.1>
		insert("TKAET", "data");
 8001938:	46a4      	mov	ip, r4
 800193a:	49a7      	ldr	r1, [pc, #668]	@ (8001bd8 <hashInit.0+0x360>)
 800193c:	48a7      	ldr	r0, [pc, #668]	@ (8001bdc <hashInit.0+0x364>)
 800193e:	f7ff feed 	bl	800171c <insert.1>
		insert("TKAEUPBT", "didn't"),
 8001942:	46a4      	mov	ip, r4
 8001944:	49a6      	ldr	r1, [pc, #664]	@ (8001be0 <hashInit.0+0x368>)
 8001946:	48a7      	ldr	r0, [pc, #668]	@ (8001be4 <hashInit.0+0x36c>)
 8001948:	f7ff fee8 	bl	800171c <insert.1>
		insert("TKAEU", "day");
 800194c:	46a4      	mov	ip, r4
 800194e:	49a6      	ldr	r1, [pc, #664]	@ (8001be8 <hashInit.0+0x370>)
 8001950:	48a6      	ldr	r0, [pc, #664]	@ (8001bec <hashInit.0+0x374>)
 8001952:	f7ff fee3 	bl	800171c <insert.1>
		insert("TKAOS", "does");
 8001956:	46a4      	mov	ip, r4
 8001958:	49a5      	ldr	r1, [pc, #660]	@ (8001bf0 <hashInit.0+0x378>)
 800195a:	48a6      	ldr	r0, [pc, #664]	@ (8001bf4 <hashInit.0+0x37c>)
 800195c:	f7ff fede 	bl	800171c <insert.1>
		insert("TKAOUT", "duty");
 8001960:	46a4      	mov	ip, r4
 8001962:	49a5      	ldr	r1, [pc, #660]	@ (8001bf8 <hashInit.0+0x380>)
 8001964:	48a5      	ldr	r0, [pc, #660]	@ (8001bfc <hashInit.0+0x384>)
 8001966:	f7ff fed9 	bl	800171c <insert.1>
		insert("TKAOU", "due");
 800196a:	46a4      	mov	ip, r4
 800196c:	49a4      	ldr	r1, [pc, #656]	@ (8001c00 <hashInit.0+0x388>)
 800196e:	48a5      	ldr	r0, [pc, #660]	@ (8001c04 <hashInit.0+0x38c>)
 8001970:	f7ff fed4 	bl	800171c <insert.1>
		insert("TKAOE/TPAULT", "default");
 8001974:	46a4      	mov	ip, r4
 8001976:	49a4      	ldr	r1, [pc, #656]	@ (8001c08 <hashInit.0+0x390>)
 8001978:	48a4      	ldr	r0, [pc, #656]	@ (8001c0c <hashInit.0+0x394>)
 800197a:	f7ff fecf 	bl	800171c <insert.1>
		insert("LT", "#ing");
 800197e:	46a4      	mov	ip, r4
 8001980:	49a3      	ldr	r1, [pc, #652]	@ (8001c10 <hashInit.0+0x398>)
 8001982:	48a4      	ldr	r0, [pc, #656]	@ (8001c14 <hashInit.0+0x39c>)
 8001984:	f7ff feca 	bl	800171c <insert.1>
		insert("LG", "#n't");
 8001988:	46a4      	mov	ip, r4
 800198a:	49a3      	ldr	r1, [pc, #652]	@ (8001c18 <hashInit.0+0x3a0>)
 800198c:	48a3      	ldr	r0, [pc, #652]	@ (8001c1c <hashInit.0+0x3a4>)
 800198e:	f7ff fec5 	bl	800171c <insert.1>
		insert("*F", "#.");
 8001992:	46a4      	mov	ip, r4
 8001994:	49a2      	ldr	r1, [pc, #648]	@ (8001c20 <hashInit.0+0x3a8>)
 8001996:	48a3      	ldr	r0, [pc, #652]	@ (8001c24 <hashInit.0+0x3ac>)
 8001998:	f7ff fec0 	bl	800171c <insert.1>
		insert("*FP", "#,");
 800199c:	46a4      	mov	ip, r4
 800199e:	49a2      	ldr	r1, [pc, #648]	@ (8001c28 <hashInit.0+0x3b0>)
 80019a0:	48a2      	ldr	r0, [pc, #648]	@ (8001c2c <hashInit.0+0x3b4>)
 80019a2:	f7ff febb 	bl	800171c <insert.1>
		insert("HFP", "#?");
 80019a6:	46a4      	mov	ip, r4
 80019a8:	49a1      	ldr	r1, [pc, #644]	@ (8001c30 <hashInit.0+0x3b8>)
 80019aa:	48a2      	ldr	r0, [pc, #648]	@ (8001c34 <hashInit.0+0x3bc>)
 80019ac:	f7ff feb6 	bl	800171c <insert.1>
		insert("HFPL", "#!");
 80019b0:	46a4      	mov	ip, r4
 80019b2:	49a1      	ldr	r1, [pc, #644]	@ (8001c38 <hashInit.0+0x3c0>)
 80019b4:	48a1      	ldr	r0, [pc, #644]	@ (8001c3c <hashInit.0+0x3c4>)
 80019b6:	f7ff feb1 	bl	800171c <insert.1>
		insert("TPHROETS", "floats");
 80019ba:	46a4      	mov	ip, r4
 80019bc:	49a0      	ldr	r1, [pc, #640]	@ (8001c40 <hashInit.0+0x3c8>)
 80019be:	48a1      	ldr	r0, [pc, #644]	@ (8001c44 <hashInit.0+0x3cc>)
 80019c0:	f7ff feac 	bl	800171c <insert.1>
		insert("TPHROES", "flows");
 80019c4:	46a4      	mov	ip, r4
 80019c6:	49a0      	ldr	r1, [pc, #640]	@ (8001c48 <hashInit.0+0x3d0>)
 80019c8:	48a0      	ldr	r0, [pc, #640]	@ (8001c4c <hashInit.0+0x3d4>)
 80019ca:	f7ff fea7 	bl	800171c <insert.1>
		insert("TPHROED", "flowed");
 80019ce:	46a4      	mov	ip, r4
 80019d0:	499f      	ldr	r1, [pc, #636]	@ (8001c50 <hashInit.0+0x3d8>)
 80019d2:	48a0      	ldr	r0, [pc, #640]	@ (8001c54 <hashInit.0+0x3dc>)
 80019d4:	f7ff fea2 	bl	800171c <insert.1>
		insert("-T", "the");
 80019d8:	46a4      	mov	ip, r4
 80019da:	499f      	ldr	r1, [pc, #636]	@ (8001c58 <hashInit.0+0x3e0>)
 80019dc:	489f      	ldr	r0, [pc, #636]	@ (8001c5c <hashInit.0+0x3e4>)
 80019de:	f7ff fe9d 	bl	800171c <insert.1>
		insert("-F", "of");
 80019e2:	46a4      	mov	ip, r4
 80019e4:	499e      	ldr	r1, [pc, #632]	@ (8001c60 <hashInit.0+0x3e8>)
 80019e6:	489f      	ldr	r0, [pc, #636]	@ (8001c64 <hashInit.0+0x3ec>)
 80019e8:	f7ff fe98 	bl	800171c <insert.1>
		insert("SKP", "and");
 80019ec:	46a4      	mov	ip, r4
 80019ee:	4960      	ldr	r1, [pc, #384]	@ (8001b70 <hashInit.0+0x2f8>)
 80019f0:	489d      	ldr	r0, [pc, #628]	@ (8001c68 <hashInit.0+0x3f0>)
 80019f2:	f7ff fe93 	bl	800171c <insert.1>
		insert("TO", "to");
 80019f6:	46a4      	mov	ip, r4
 80019f8:	499c      	ldr	r1, [pc, #624]	@ (8001c6c <hashInit.0+0x3f4>)
 80019fa:	489d      	ldr	r0, [pc, #628]	@ (8001c70 <hashInit.0+0x3f8>)
 80019fc:	f7ff fe8e 	bl	800171c <insert.1>
		insert("TPH", "in");
 8001a00:	46a4      	mov	ip, r4
 8001a02:	499c      	ldr	r1, [pc, #624]	@ (8001c74 <hashInit.0+0x3fc>)
 8001a04:	489c      	ldr	r0, [pc, #624]	@ (8001c78 <hashInit.0+0x400>)
 8001a06:	f7ff fe89 	bl	800171c <insert.1>
		insert("EU", "I");
 8001a0a:	46a4      	mov	ip, r4
 8001a0c:	499b      	ldr	r1, [pc, #620]	@ (8001c7c <hashInit.0+0x404>)
 8001a0e:	489c      	ldr	r0, [pc, #624]	@ (8001c80 <hashInit.0+0x408>)
 8001a10:	f7ff fe84 	bl	800171c <insert.1>
		insert("THA", "that");
 8001a14:	46a4      	mov	ip, r4
 8001a16:	499b      	ldr	r1, [pc, #620]	@ (8001c84 <hashInit.0+0x40c>)
 8001a18:	489b      	ldr	r0, [pc, #620]	@ (8001c88 <hashInit.0+0x410>)
 8001a1a:	f7ff fe7f 	bl	800171c <insert.1>
		insert("WAS", "was");
 8001a1e:	46a4      	mov	ip, r4
 8001a20:	499a      	ldr	r1, [pc, #616]	@ (8001c8c <hashInit.0+0x414>)
 8001a22:	489b      	ldr	r0, [pc, #620]	@ (8001c90 <hashInit.0+0x418>)
 8001a24:	f7ff fe7a 	bl	800171c <insert.1>
		insert("HEUS", "his");
 8001a28:	46a4      	mov	ip, r4
 8001a2a:	499a      	ldr	r1, [pc, #616]	@ (8001c94 <hashInit.0+0x41c>)
 8001a2c:	489a      	ldr	r0, [pc, #616]	@ (8001c98 <hashInit.0+0x420>)
 8001a2e:	f7ff fe75 	bl	800171c <insert.1>
		insert("HE", "he");
 8001a32:	46a4      	mov	ip, r4
 8001a34:	4999      	ldr	r1, [pc, #612]	@ (8001c9c <hashInit.0+0x424>)
 8001a36:	489a      	ldr	r0, [pc, #616]	@ (8001ca0 <hashInit.0+0x428>)
 8001a38:	f7ff fe70 	bl	800171c <insert.1>
		insert("T", "it");
 8001a3c:	46a4      	mov	ip, r4
 8001a3e:	4999      	ldr	r1, [pc, #612]	@ (8001ca4 <hashInit.0+0x42c>)
 8001a40:	4899      	ldr	r0, [pc, #612]	@ (8001ca8 <hashInit.0+0x430>)
 8001a42:	f7ff fe6b 	bl	800171c <insert.1>
		insert("W", "with");
 8001a46:	46a4      	mov	ip, r4
 8001a48:	4998      	ldr	r1, [pc, #608]	@ (8001cac <hashInit.0+0x434>)
 8001a4a:	4899      	ldr	r0, [pc, #612]	@ (8001cb0 <hashInit.0+0x438>)
 8001a4c:	f7ff fe66 	bl	800171c <insert.1>
		insert("S", "is");
 8001a50:	46a4      	mov	ip, r4
 8001a52:	4943      	ldr	r1, [pc, #268]	@ (8001b60 <hashInit.0+0x2e8>)
 8001a54:	4843      	ldr	r0, [pc, #268]	@ (8001b64 <hashInit.0+0x2ec>)
 8001a56:	f7ff fe61 	bl	800171c <insert.1>
		insert("TPOR", "for");
 8001a5a:	46a4      	mov	ip, r4
 8001a5c:	4995      	ldr	r1, [pc, #596]	@ (8001cb4 <hashInit.0+0x43c>)
 8001a5e:	4896      	ldr	r0, [pc, #600]	@ (8001cb8 <hashInit.0+0x440>)
 8001a60:	f7ff fe5c 	bl	800171c <insert.1>
		insert("AS", "as");
 8001a64:	46a4      	mov	ip, r4
 8001a66:	4995      	ldr	r1, [pc, #596]	@ (8001cbc <hashInit.0+0x444>)
 8001a68:	4895      	ldr	r0, [pc, #596]	@ (8001cc0 <hashInit.0+0x448>)
 8001a6a:	f7ff fe57 	bl	800171c <insert.1>
		insert("H", "had");
 8001a6e:	46a4      	mov	ip, r4
 8001a70:	4994      	ldr	r1, [pc, #592]	@ (8001cc4 <hashInit.0+0x44c>)
 8001a72:	4895      	ldr	r0, [pc, #596]	@ (8001cc8 <hashInit.0+0x450>)
 8001a74:	f7ff fe52 	bl	800171c <insert.1>
		insert("U", "you");
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	4994      	ldr	r1, [pc, #592]	@ (8001ccc <hashInit.0+0x454>)
 8001a7c:	4894      	ldr	r0, [pc, #592]	@ (8001cd0 <hashInit.0+0x458>)
 8001a7e:	f7ff fe4d 	bl	800171c <insert.1>
		insert("TPHOT", "not");
 8001a82:	46a4      	mov	ip, r4
 8001a84:	4993      	ldr	r1, [pc, #588]	@ (8001cd4 <hashInit.0+0x45c>)
 8001a86:	4894      	ldr	r0, [pc, #592]	@ (8001cd8 <hashInit.0+0x460>)
 8001a88:	f7ff fe48 	bl	800171c <insert.1>
		insert("-B", "be");
 8001a8c:	46a4      	mov	ip, r4
 8001a8e:	4993      	ldr	r1, [pc, #588]	@ (8001cdc <hashInit.0+0x464>)
 8001a90:	4893      	ldr	r0, [pc, #588]	@ (8001ce0 <hashInit.0+0x468>)
 8001a92:	f7ff fe43 	bl	800171c <insert.1>
		insert("HER", "her");
 8001a96:	46a4      	mov	ip, r4
 8001a98:	4992      	ldr	r1, [pc, #584]	@ (8001ce4 <hashInit.0+0x46c>)
 8001a9a:	4893      	ldr	r0, [pc, #588]	@ (8001ce8 <hashInit.0+0x470>)
 8001a9c:	f7ff fe3e 	bl	800171c <insert.1>
		insert("OPB", "on");
 8001aa0:	46a4      	mov	ip, r4
 8001aa2:	4992      	ldr	r1, [pc, #584]	@ (8001cec <hashInit.0+0x474>)
 8001aa4:	4892      	ldr	r0, [pc, #584]	@ (8001cf0 <hashInit.0+0x478>)
 8001aa6:	f7ff fe39 	bl	800171c <insert.1>
		insert("AT", "at");
 8001aaa:	46a4      	mov	ip, r4
 8001aac:	4991      	ldr	r1, [pc, #580]	@ (8001cf4 <hashInit.0+0x47c>)
 8001aae:	4892      	ldr	r0, [pc, #584]	@ (8001cf8 <hashInit.0+0x480>)
 8001ab0:	f7ff fe34 	bl	800171c <insert.1>
		insert("PWEU", "by");
 8001ab4:	46a4      	mov	ip, r4
 8001ab6:	4991      	ldr	r1, [pc, #580]	@ (8001cfc <hashInit.0+0x484>)
 8001ab8:	4891      	ldr	r0, [pc, #580]	@ (8001d00 <hashInit.0+0x488>)
 8001aba:	f7ff fe2f 	bl	800171c <insert.1>
		insert("WEU", "which");
 8001abe:	46a4      	mov	ip, r4
 8001ac0:	4990      	ldr	r1, [pc, #576]	@ (8001d04 <hashInit.0+0x48c>)
 8001ac2:	4891      	ldr	r0, [pc, #580]	@ (8001d08 <hashInit.0+0x490>)
 8001ac4:	f7ff fe2a 	bl	800171c <insert.1>
		insert("SR", "have");
 8001ac8:	46a4      	mov	ip, r4
 8001aca:	4990      	ldr	r1, [pc, #576]	@ (8001d0c <hashInit.0+0x494>)
 8001acc:	4890      	ldr	r0, [pc, #576]	@ (8001d10 <hashInit.0+0x498>)
 8001ace:	f7ff fe25 	bl	800171c <insert.1>
		insert("OR", "or");
 8001ad2:	46a4      	mov	ip, r4
 8001ad4:	498f      	ldr	r1, [pc, #572]	@ (8001d14 <hashInit.0+0x49c>)
 8001ad6:	4890      	ldr	r0, [pc, #576]	@ (8001d18 <hashInit.0+0x4a0>)
 8001ad8:	f7ff fe20 	bl	800171c <insert.1>
		insert("TPR", "from");
 8001adc:	46a4      	mov	ip, r4
 8001ade:	498f      	ldr	r1, [pc, #572]	@ (8001d1c <hashInit.0+0x4a4>)
 8001ae0:	488f      	ldr	r0, [pc, #572]	@ (8001d20 <hashInit.0+0x4a8>)
 8001ae2:	f7ff fe1b 	bl	800171c <insert.1>
		insert("TH", "this");
 8001ae6:	46a4      	mov	ip, r4
 8001ae8:	498e      	ldr	r1, [pc, #568]	@ (8001d24 <hashInit.0+0x4ac>)
 8001aea:	488f      	ldr	r0, [pc, #572]	@ (8001d28 <hashInit.0+0x4b0>)
 8001aec:	f7ff fe16 	bl	800171c <insert.1>
		insert("HEUPL", "him");
 8001af0:	46a4      	mov	ip, r4
 8001af2:	498e      	ldr	r1, [pc, #568]	@ (8001d2c <hashInit.0+0x4b4>)
 8001af4:	488e      	ldr	r0, [pc, #568]	@ (8001d30 <hashInit.0+0x4b8>)
 8001af6:	f7ff fe11 	bl	800171c <insert.1>
		insert("PWUT", "but");
 8001afa:	46a4      	mov	ip, r4
 8001afc:	498d      	ldr	r1, [pc, #564]	@ (8001d34 <hashInit.0+0x4bc>)
 8001afe:	488e      	ldr	r0, [pc, #568]	@ (8001d38 <hashInit.0+0x4c0>)
 8001b00:	f7ff fe0c 	bl	800171c <insert.1>
		insert("AUL", "all");
 8001b04:	46a4      	mov	ip, r4
 8001b06:	498d      	ldr	r1, [pc, #564]	@ (8001d3c <hashInit.0+0x4c4>)
 8001b08:	488d      	ldr	r0, [pc, #564]	@ (8001d40 <hashInit.0+0x4c8>)
 8001b0a:	f7ff fe07 	bl	800171c <insert.1>
		insert("SHE", "she");
 8001b0e:	46a4      	mov	ip, r4
 8001b10:	498c      	ldr	r1, [pc, #560]	@ (8001d44 <hashInit.0+0x4cc>)
 8001b12:	488d      	ldr	r0, [pc, #564]	@ (8001d48 <hashInit.0+0x4d0>)
 8001b14:	f7ff fe02 	bl	800171c <insert.1>
		insert("THE", "they");
 8001b18:	46a4      	mov	ip, r4
 8001b1a:	498c      	ldr	r1, [pc, #560]	@ (8001d4c <hashInit.0+0x4d4>)
 8001b1c:	488c      	ldr	r0, [pc, #560]	@ (8001d50 <hashInit.0+0x4d8>)
 8001b1e:	f7ff fdfd 	bl	800171c <insert.1>
		insert("WR", "were");
 8001b22:	46a4      	mov	ip, r4
 8001b24:	498b      	ldr	r1, [pc, #556]	@ (8001d54 <hashInit.0+0x4dc>)
 8001b26:	488c      	ldr	r0, [pc, #560]	@ (8001d58 <hashInit.0+0x4e0>)
 8001b28:	f7ff fdf8 	bl	800171c <insert.1>
		insert("PHEU", "my");
 8001b2c:	46a4      	mov	ip, r4
 8001b2e:	498b      	ldr	r1, [pc, #556]	@ (8001d5c <hashInit.0+0x4e4>)
 8001b30:	488b      	ldr	r0, [pc, #556]	@ (8001d60 <hashInit.0+0x4e8>)
 8001b32:	f7ff fdf3 	bl	800171c <insert.1>
		insert("R", "are");
 8001b36:	46a4      	mov	ip, r4
 8001b38:	498a      	ldr	r1, [pc, #552]	@ (8001d64 <hashInit.0+0x4ec>)
 8001b3a:	488b      	ldr	r0, [pc, #556]	@ (8001d68 <hashInit.0+0x4f0>)
 8001b3c:	f7ff fdee 	bl	800171c <insert.1>
		insert("PHE", "me");
 8001b40:	46a4      	mov	ip, r4
 8001b42:	498a      	ldr	r1, [pc, #552]	@ (8001d6c <hashInit.0+0x4f4>)
 8001b44:	488a      	ldr	r0, [pc, #552]	@ (8001d70 <hashInit.0+0x4f8>)
 8001b46:	f7ff fde9 	bl	800171c <insert.1>
		insert("WUPB", "one");
 8001b4a:	46a4      	mov	ip, r4
 8001b4c:	4989      	ldr	r1, [pc, #548]	@ (8001d74 <hashInit.0+0x4fc>)
 8001b4e:	488a      	ldr	r0, [pc, #552]	@ (8001d78 <hashInit.0+0x500>)
 8001b50:	f7ff fde4 	bl	800171c <insert.1>
		insert("THAEUR", "their");
 8001b54:	46a4      	mov	ip, r4
 8001b56:	4989      	ldr	r1, [pc, #548]	@ (8001d7c <hashInit.0+0x504>)
 8001b58:	e112      	b.n	8001d80 <hashInit.0+0x508>
 8001b5a:	bf00      	nop
 8001b5c:	200001d8 	.word	0x200001d8
 8001b60:	0800d4e8 	.word	0x0800d4e8
 8001b64:	0800d4ec 	.word	0x0800d4ec
 8001b68:	0800d4f0 	.word	0x0800d4f0
 8001b6c:	0800d4f8 	.word	0x0800d4f8
 8001b70:	0800d4fc 	.word	0x0800d4fc
 8001b74:	0800d500 	.word	0x0800d500
 8001b78:	0800d504 	.word	0x0800d504
 8001b7c:	0800d508 	.word	0x0800d508
 8001b80:	0800d510 	.word	0x0800d510
 8001b84:	0800d518 	.word	0x0800d518
 8001b88:	0800d520 	.word	0x0800d520
 8001b8c:	0800d528 	.word	0x0800d528
 8001b90:	0800d52c 	.word	0x0800d52c
 8001b94:	0800d530 	.word	0x0800d530
 8001b98:	0800d534 	.word	0x0800d534
 8001b9c:	0800d538 	.word	0x0800d538
 8001ba0:	0800d540 	.word	0x0800d540
 8001ba4:	0800d548 	.word	0x0800d548
 8001ba8:	0800d550 	.word	0x0800d550
 8001bac:	0800d55c 	.word	0x0800d55c
 8001bb0:	0800d56c 	.word	0x0800d56c
 8001bb4:	0800d574 	.word	0x0800d574
 8001bb8:	0800d580 	.word	0x0800d580
 8001bbc:	0800d58c 	.word	0x0800d58c
 8001bc0:	0800d598 	.word	0x0800d598
 8001bc4:	0800d5a0 	.word	0x0800d5a0
 8001bc8:	0800d5a8 	.word	0x0800d5a8
 8001bcc:	0800d5ac 	.word	0x0800d5ac
 8001bd0:	0800d5b0 	.word	0x0800d5b0
 8001bd4:	0800d5b8 	.word	0x0800d5b8
 8001bd8:	0800d5c0 	.word	0x0800d5c0
 8001bdc:	0800d5c8 	.word	0x0800d5c8
 8001be0:	0800d5d0 	.word	0x0800d5d0
 8001be4:	0800d5d8 	.word	0x0800d5d8
 8001be8:	0800d5e4 	.word	0x0800d5e4
 8001bec:	0800d5e8 	.word	0x0800d5e8
 8001bf0:	0800d5f0 	.word	0x0800d5f0
 8001bf4:	0800d5f8 	.word	0x0800d5f8
 8001bf8:	0800d600 	.word	0x0800d600
 8001bfc:	0800d608 	.word	0x0800d608
 8001c00:	0800d610 	.word	0x0800d610
 8001c04:	0800d614 	.word	0x0800d614
 8001c08:	0800d61c 	.word	0x0800d61c
 8001c0c:	0800d624 	.word	0x0800d624
 8001c10:	0800d634 	.word	0x0800d634
 8001c14:	0800d63c 	.word	0x0800d63c
 8001c18:	0800d640 	.word	0x0800d640
 8001c1c:	0800d648 	.word	0x0800d648
 8001c20:	0800d64c 	.word	0x0800d64c
 8001c24:	0800d650 	.word	0x0800d650
 8001c28:	0800d654 	.word	0x0800d654
 8001c2c:	0800d658 	.word	0x0800d658
 8001c30:	0800d65c 	.word	0x0800d65c
 8001c34:	0800d660 	.word	0x0800d660
 8001c38:	0800d664 	.word	0x0800d664
 8001c3c:	0800d668 	.word	0x0800d668
 8001c40:	0800d670 	.word	0x0800d670
 8001c44:	0800d678 	.word	0x0800d678
 8001c48:	0800d684 	.word	0x0800d684
 8001c4c:	0800d68c 	.word	0x0800d68c
 8001c50:	0800d694 	.word	0x0800d694
 8001c54:	0800d69c 	.word	0x0800d69c
 8001c58:	0800d6a4 	.word	0x0800d6a4
 8001c5c:	0800d6a8 	.word	0x0800d6a8
 8001c60:	0800d6ac 	.word	0x0800d6ac
 8001c64:	0800d6b0 	.word	0x0800d6b0
 8001c68:	0800d6b4 	.word	0x0800d6b4
 8001c6c:	0800d6b8 	.word	0x0800d6b8
 8001c70:	0800d6bc 	.word	0x0800d6bc
 8001c74:	0800d6c0 	.word	0x0800d6c0
 8001c78:	0800d6c4 	.word	0x0800d6c4
 8001c7c:	0800d6c8 	.word	0x0800d6c8
 8001c80:	0800d6cc 	.word	0x0800d6cc
 8001c84:	0800d6d0 	.word	0x0800d6d0
 8001c88:	0800d6d8 	.word	0x0800d6d8
 8001c8c:	0800d6dc 	.word	0x0800d6dc
 8001c90:	0800d6e0 	.word	0x0800d6e0
 8001c94:	0800d6e4 	.word	0x0800d6e4
 8001c98:	0800d6e8 	.word	0x0800d6e8
 8001c9c:	0800d6f0 	.word	0x0800d6f0
 8001ca0:	0800d6f4 	.word	0x0800d6f4
 8001ca4:	0800d6f8 	.word	0x0800d6f8
 8001ca8:	0800d6fc 	.word	0x0800d6fc
 8001cac:	0800d700 	.word	0x0800d700
 8001cb0:	0800d708 	.word	0x0800d708
 8001cb4:	0800d70c 	.word	0x0800d70c
 8001cb8:	0800d710 	.word	0x0800d710
 8001cbc:	0800d718 	.word	0x0800d718
 8001cc0:	0800d71c 	.word	0x0800d71c
 8001cc4:	0800d720 	.word	0x0800d720
 8001cc8:	0800d724 	.word	0x0800d724
 8001ccc:	0800d728 	.word	0x0800d728
 8001cd0:	0800d72c 	.word	0x0800d72c
 8001cd4:	0800d730 	.word	0x0800d730
 8001cd8:	0800d734 	.word	0x0800d734
 8001cdc:	0800d73c 	.word	0x0800d73c
 8001ce0:	0800d740 	.word	0x0800d740
 8001ce4:	0800d744 	.word	0x0800d744
 8001ce8:	0800d748 	.word	0x0800d748
 8001cec:	0800d74c 	.word	0x0800d74c
 8001cf0:	0800d750 	.word	0x0800d750
 8001cf4:	0800d754 	.word	0x0800d754
 8001cf8:	0800d758 	.word	0x0800d758
 8001cfc:	0800d75c 	.word	0x0800d75c
 8001d00:	0800d760 	.word	0x0800d760
 8001d04:	0800d768 	.word	0x0800d768
 8001d08:	0800d770 	.word	0x0800d770
 8001d0c:	0800d774 	.word	0x0800d774
 8001d10:	0800d77c 	.word	0x0800d77c
 8001d14:	0800d780 	.word	0x0800d780
 8001d18:	0800d784 	.word	0x0800d784
 8001d1c:	0800d788 	.word	0x0800d788
 8001d20:	0800d790 	.word	0x0800d790
 8001d24:	0800d794 	.word	0x0800d794
 8001d28:	0800d79c 	.word	0x0800d79c
 8001d2c:	0800d7a0 	.word	0x0800d7a0
 8001d30:	0800d7a4 	.word	0x0800d7a4
 8001d34:	0800d7ac 	.word	0x0800d7ac
 8001d38:	0800d7b0 	.word	0x0800d7b0
 8001d3c:	0800d7b8 	.word	0x0800d7b8
 8001d40:	0800d7bc 	.word	0x0800d7bc
 8001d44:	0800d7c0 	.word	0x0800d7c0
 8001d48:	0800d7c4 	.word	0x0800d7c4
 8001d4c:	0800d7c8 	.word	0x0800d7c8
 8001d50:	0800d7d0 	.word	0x0800d7d0
 8001d54:	0800d7d4 	.word	0x0800d7d4
 8001d58:	0800d7dc 	.word	0x0800d7dc
 8001d5c:	0800d7e0 	.word	0x0800d7e0
 8001d60:	0800d7e4 	.word	0x0800d7e4
 8001d64:	0800d7ec 	.word	0x0800d7ec
 8001d68:	0800d7f0 	.word	0x0800d7f0
 8001d6c:	0800d7f4 	.word	0x0800d7f4
 8001d70:	0800d7f8 	.word	0x0800d7f8
 8001d74:	0800d7fc 	.word	0x0800d7fc
 8001d78:	0800d800 	.word	0x0800d800
 8001d7c:	0800d808 	.word	0x0800d808
 8001d80:	48b5      	ldr	r0, [pc, #724]	@ (8002058 <hashInit.0+0x7e0>)
 8001d82:	f7ff fccb 	bl	800171c <insert.1>
		insert("SO", "so");
 8001d86:	46a4      	mov	ip, r4
 8001d88:	49b4      	ldr	r1, [pc, #720]	@ (800205c <hashInit.0+0x7e4>)
 8001d8a:	48b5      	ldr	r0, [pc, #724]	@ (8002060 <hashInit.0+0x7e8>)
 8001d8c:	f7ff fcc6 	bl	800171c <insert.1>
		insert("APB", "an");
 8001d90:	46a4      	mov	ip, r4
 8001d92:	49b4      	ldr	r1, [pc, #720]	@ (8002064 <hashInit.0+0x7ec>)
 8001d94:	48b4      	ldr	r0, [pc, #720]	@ (8002068 <hashInit.0+0x7f0>)
 8001d96:	f7ff fcc1 	bl	800171c <insert.1>
		insert("SED", "said");
 8001d9a:	46a4      	mov	ip, r4
 8001d9c:	49b3      	ldr	r1, [pc, #716]	@ (800206c <hashInit.0+0x7f4>)
 8001d9e:	48b4      	ldr	r0, [pc, #720]	@ (8002070 <hashInit.0+0x7f8>)
 8001da0:	f7ff fcbc 	bl	800171c <insert.1>
		insert("THEPL", "them");
 8001da4:	46a4      	mov	ip, r4
 8001da6:	49b3      	ldr	r1, [pc, #716]	@ (8002074 <hashInit.0+0x7fc>)
 8001da8:	48b3      	ldr	r0, [pc, #716]	@ (8002078 <hashInit.0+0x800>)
 8001daa:	f7ff fcb7 	bl	800171c <insert.1>
		insert("WE", "we");
 8001dae:	46a4      	mov	ip, r4
 8001db0:	49b2      	ldr	r1, [pc, #712]	@ (800207c <hashInit.0+0x804>)
 8001db2:	48b3      	ldr	r0, [pc, #716]	@ (8002080 <hashInit.0+0x808>)
 8001db4:	f7ff fcb2 	bl	800171c <insert.1>
		insert("WHO", "who");
 8001db8:	46a4      	mov	ip, r4
 8001dba:	49b2      	ldr	r1, [pc, #712]	@ (8002084 <hashInit.0+0x80c>)
 8001dbc:	48b2      	ldr	r0, [pc, #712]	@ (8002088 <hashInit.0+0x810>)
 8001dbe:	f7ff fcad 	bl	800171c <insert.1>
		insert("WO", "would");
 8001dc2:	46a4      	mov	ip, r4
 8001dc4:	49b1      	ldr	r1, [pc, #708]	@ (800208c <hashInit.0+0x814>)
 8001dc6:	48b2      	ldr	r0, [pc, #712]	@ (8002090 <hashInit.0+0x818>)
 8001dc8:	f7ff fca8 	bl	800171c <insert.1>
		insert("PW-PB", "been");
 8001dcc:	46a4      	mov	ip, r4
 8001dce:	49b1      	ldr	r1, [pc, #708]	@ (8002094 <hashInit.0+0x81c>)
 8001dd0:	48b1      	ldr	r0, [pc, #708]	@ (8002098 <hashInit.0+0x820>)
 8001dd2:	f7ff fca3 	bl	800171c <insert.1>
		insert("HR", "will");
 8001dd6:	46a4      	mov	ip, r4
 8001dd8:	49b0      	ldr	r1, [pc, #704]	@ (800209c <hashInit.0+0x824>)
 8001dda:	48b1      	ldr	r0, [pc, #708]	@ (80020a0 <hashInit.0+0x828>)
 8001ddc:	f7ff fc9e 	bl	800171c <insert.1>
		insert("TPHO", "no");
 8001de0:	46a4      	mov	ip, r4
 8001de2:	49b0      	ldr	r1, [pc, #704]	@ (80020a4 <hashInit.0+0x82c>)
 8001de4:	48b0      	ldr	r0, [pc, #704]	@ (80020a8 <hashInit.0+0x830>)
 8001de6:	f7ff fc99 	bl	800171c <insert.1>
		insert("WHEPB", "when");
 8001dea:	46a4      	mov	ip, r4
 8001dec:	49af      	ldr	r1, [pc, #700]	@ (80020ac <hashInit.0+0x834>)
 8001dee:	48b0      	ldr	r0, [pc, #704]	@ (80020b0 <hashInit.0+0x838>)
 8001df0:	f7ff fc94 	bl	800171c <insert.1>
		insert("THR", "there");
 8001df4:	46a4      	mov	ip, r4
 8001df6:	49af      	ldr	r1, [pc, #700]	@ (80020b4 <hashInit.0+0x83c>)
 8001df8:	48af      	ldr	r0, [pc, #700]	@ (80020b8 <hashInit.0+0x840>)
 8001dfa:	f7ff fc8f 	bl	800171c <insert.1>
		insert("TP", "if");
 8001dfe:	46a4      	mov	ip, r4
 8001e00:	49ae      	ldr	r1, [pc, #696]	@ (80020bc <hashInit.0+0x844>)
 8001e02:	48af      	ldr	r0, [pc, #700]	@ (80020c0 <hashInit.0+0x848>)
 8001e04:	f7ff fc8a 	bl	800171c <insert.1>
		insert("PHOR", "more");
 8001e08:	46a4      	mov	ip, r4
 8001e0a:	49ae      	ldr	r1, [pc, #696]	@ (80020c4 <hashInit.0+0x84c>)
 8001e0c:	48ae      	ldr	r0, [pc, #696]	@ (80020c8 <hashInit.0+0x850>)
 8001e0e:	f7ff fc85 	bl	800171c <insert.1>
		insert("OUT", "out");
 8001e12:	46a4      	mov	ip, r4
 8001e14:	49ad      	ldr	r1, [pc, #692]	@ (80020cc <hashInit.0+0x854>)
 8001e16:	48ae      	ldr	r0, [pc, #696]	@ (80020d0 <hashInit.0+0x858>)
 8001e18:	f7ff fc80 	bl	800171c <insert.1>
		insert("UP", "up");
 8001e1c:	46a4      	mov	ip, r4
 8001e1e:	49ad      	ldr	r1, [pc, #692]	@ (80020d4 <hashInit.0+0x85c>)
 8001e20:	48ad      	ldr	r0, [pc, #692]	@ (80020d8 <hashInit.0+0x860>)
 8001e22:	f7ff fc7b 	bl	800171c <insert.1>
		insert("TPHAO", "into");
 8001e26:	46a4      	mov	ip, r4
 8001e28:	49ac      	ldr	r1, [pc, #688]	@ (80020dc <hashInit.0+0x864>)
 8001e2a:	48ad      	ldr	r0, [pc, #692]	@ (80020e0 <hashInit.0+0x868>)
 8001e2c:	f7ff fc76 	bl	800171c <insert.1>
		insert("TKO", "do");
 8001e30:	46a4      	mov	ip, r4
 8001e32:	49ac      	ldr	r1, [pc, #688]	@ (80020e4 <hashInit.0+0x86c>)
 8001e34:	48ac      	ldr	r0, [pc, #688]	@ (80020e8 <hashInit.0+0x870>)
 8001e36:	f7ff fc71 	bl	800171c <insert.1>
		insert("TPHEU", "any");
 8001e3a:	46a4      	mov	ip, r4
 8001e3c:	49ab      	ldr	r1, [pc, #684]	@ (80020ec <hashInit.0+0x874>)
 8001e3e:	48ac      	ldr	r0, [pc, #688]	@ (80020f0 <hashInit.0+0x878>)
 8001e40:	f7ff fc6c 	bl	800171c <insert.1>
		insert("KWROUR", "your");
 8001e44:	46a4      	mov	ip, r4
 8001e46:	49ab      	ldr	r1, [pc, #684]	@ (80020f4 <hashInit.0+0x87c>)
 8001e48:	48ab      	ldr	r0, [pc, #684]	@ (80020f8 <hashInit.0+0x880>)
 8001e4a:	f7ff fc67 	bl	800171c <insert.1>
		insert("WHA", "what");
 8001e4e:	46a4      	mov	ip, r4
 8001e50:	49aa      	ldr	r1, [pc, #680]	@ (80020fc <hashInit.0+0x884>)
 8001e52:	48ab      	ldr	r0, [pc, #684]	@ (8002100 <hashInit.0+0x888>)
 8001e54:	f7ff fc62 	bl	800171c <insert.1>
		insert("HAS", "has");
 8001e58:	46a4      	mov	ip, r4
 8001e5a:	49aa      	ldr	r1, [pc, #680]	@ (8002104 <hashInit.0+0x88c>)
 8001e5c:	48aa      	ldr	r0, [pc, #680]	@ (8002108 <hashInit.0+0x890>)
 8001e5e:	f7ff fc5d 	bl	800171c <insert.1>
		insert("PHAPB", "man");
 8001e62:	46a4      	mov	ip, r4
 8001e64:	49a9      	ldr	r1, [pc, #676]	@ (800210c <hashInit.0+0x894>)
 8001e66:	48aa      	ldr	r0, [pc, #680]	@ (8002110 <hashInit.0+0x898>)
 8001e68:	f7ff fc58 	bl	800171c <insert.1>
		insert("KO", "could");
 8001e6c:	46a4      	mov	ip, r4
 8001e6e:	49a9      	ldr	r1, [pc, #676]	@ (8002114 <hashInit.0+0x89c>)
 8001e70:	48a9      	ldr	r0, [pc, #676]	@ (8002118 <hashInit.0+0x8a0>)
 8001e72:	f7ff fc53 	bl	800171c <insert.1>
		insert("OER", "other");
 8001e76:	46a4      	mov	ip, r4
 8001e78:	49a8      	ldr	r1, [pc, #672]	@ (800211c <hashInit.0+0x8a4>)
 8001e7a:	48a9      	ldr	r0, [pc, #676]	@ (8002120 <hashInit.0+0x8a8>)
 8001e7c:	f7ff fc4e 	bl	800171c <insert.1>
		insert("THAPB", "than");
 8001e80:	46a4      	mov	ip, r4
 8001e82:	49a8      	ldr	r1, [pc, #672]	@ (8002124 <hashInit.0+0x8ac>)
 8001e84:	48a8      	ldr	r0, [pc, #672]	@ (8002128 <hashInit.0+0x8b0>)
 8001e86:	f7ff fc49 	bl	800171c <insert.1>
		insert("OUR", "our");
 8001e8a:	46a4      	mov	ip, r4
 8001e8c:	49a7      	ldr	r1, [pc, #668]	@ (800212c <hashInit.0+0x8b4>)
 8001e8e:	48a8      	ldr	r0, [pc, #672]	@ (8002130 <hashInit.0+0x8b8>)
 8001e90:	f7ff fc44 	bl	800171c <insert.1>
		insert("SOPL", "some");
 8001e94:	46a4      	mov	ip, r4
 8001e96:	49a7      	ldr	r1, [pc, #668]	@ (8002134 <hashInit.0+0x8bc>)
 8001e98:	48a7      	ldr	r0, [pc, #668]	@ (8002138 <hashInit.0+0x8c0>)
 8001e9a:	f7ff fc3f 	bl	800171c <insert.1>
		insert("SRE", "very");
 8001e9e:	46a4      	mov	ip, r4
 8001ea0:	49a6      	ldr	r1, [pc, #664]	@ (800213c <hashInit.0+0x8c4>)
 8001ea2:	48a7      	ldr	r0, [pc, #668]	@ (8002140 <hashInit.0+0x8c8>)
 8001ea4:	f7ff fc3a 	bl	800171c <insert.1>
		insert("TAOEUPL", "time");
 8001ea8:	46a4      	mov	ip, r4
 8001eaa:	49a6      	ldr	r1, [pc, #664]	@ (8002144 <hashInit.0+0x8cc>)
 8001eac:	48a6      	ldr	r0, [pc, #664]	@ (8002148 <hashInit.0+0x8d0>)
 8001eae:	f7ff fc35 	bl	800171c <insert.1>
		insert("POPB", "upon");
 8001eb2:	46a4      	mov	ip, r4
 8001eb4:	49a5      	ldr	r1, [pc, #660]	@ (800214c <hashInit.0+0x8d4>)
 8001eb6:	48a6      	ldr	r0, [pc, #664]	@ (8002150 <hashInit.0+0x8d8>)
 8001eb8:	f7ff fc30 	bl	800171c <insert.1>
		insert("PW", "about");
 8001ebc:	46a4      	mov	ip, r4
 8001ebe:	49a5      	ldr	r1, [pc, #660]	@ (8002154 <hashInit.0+0x8dc>)
 8001ec0:	48a5      	ldr	r0, [pc, #660]	@ (8002158 <hashInit.0+0x8e0>)
 8001ec2:	f7ff fc2b 	bl	800171c <insert.1>
		insert("PHAE", "may");
 8001ec6:	46a4      	mov	ip, r4
 8001ec8:	49a4      	ldr	r1, [pc, #656]	@ (800215c <hashInit.0+0x8e4>)
 8001eca:	48a5      	ldr	r0, [pc, #660]	@ (8002160 <hashInit.0+0x8e8>)
 8001ecc:	f7ff fc26 	bl	800171c <insert.1>
		insert("EUTS", "its");
 8001ed0:	46a4      	mov	ip, r4
 8001ed2:	49a4      	ldr	r1, [pc, #656]	@ (8002164 <hashInit.0+0x8ec>)
 8001ed4:	48a4      	ldr	r0, [pc, #656]	@ (8002168 <hashInit.0+0x8f0>)
 8001ed6:	f7ff fc21 	bl	800171c <insert.1>
		insert("OEPBL", "only");
 8001eda:	46a4      	mov	ip, r4
 8001edc:	49a3      	ldr	r1, [pc, #652]	@ (800216c <hashInit.0+0x8f4>)
 8001ede:	48a4      	ldr	r0, [pc, #656]	@ (8002170 <hashInit.0+0x8f8>)
 8001ee0:	f7ff fc1c 	bl	800171c <insert.1>
		insert("TPHOU", "now");
 8001ee4:	46a4      	mov	ip, r4
 8001ee6:	49a3      	ldr	r1, [pc, #652]	@ (8002174 <hashInit.0+0x8fc>)
 8001ee8:	48a3      	ldr	r0, [pc, #652]	@ (8002178 <hashInit.0+0x900>)
 8001eea:	f7ff fc17 	bl	800171c <insert.1>
		insert("HRAOEUBG", "like");
 8001eee:	46a4      	mov	ip, r4
 8001ef0:	49a2      	ldr	r1, [pc, #648]	@ (800217c <hashInit.0+0x904>)
 8001ef2:	48a3      	ldr	r0, [pc, #652]	@ (8002180 <hashInit.0+0x908>)
 8001ef4:	f7ff fc12 	bl	800171c <insert.1>
		insert("HREUL", "little");
 8001ef8:	46a4      	mov	ip, r4
 8001efa:	49a2      	ldr	r1, [pc, #648]	@ (8002184 <hashInit.0+0x90c>)
 8001efc:	48a2      	ldr	r0, [pc, #648]	@ (8002188 <hashInit.0+0x910>)
 8001efe:	f7ff fc0d 	bl	800171c <insert.1>
		insert("THEPB", "then");
 8001f02:	46a4      	mov	ip, r4
 8001f04:	49a1      	ldr	r1, [pc, #644]	@ (800218c <hashInit.0+0x914>)
 8001f06:	48a2      	ldr	r0, [pc, #648]	@ (8002190 <hashInit.0+0x918>)
 8001f08:	f7ff fc08 	bl	800171c <insert.1>
		insert("K", "can");
 8001f0c:	46a4      	mov	ip, r4
 8001f0e:	49a1      	ldr	r1, [pc, #644]	@ (8002194 <hashInit.0+0x91c>)
 8001f10:	48a1      	ldr	r0, [pc, #644]	@ (8002198 <hashInit.0+0x920>)
 8001f12:	f7ff fc03 	bl	800171c <insert.1>
		insert("SHO", "should");
 8001f16:	46a4      	mov	ip, r4
 8001f18:	49a0      	ldr	r1, [pc, #640]	@ (800219c <hashInit.0+0x924>)
 8001f1a:	48a1      	ldr	r0, [pc, #644]	@ (80021a0 <hashInit.0+0x928>)
 8001f1c:	f7ff fbfe 	bl	800171c <insert.1>
		insert("PHAED", "made");
 8001f20:	46a4      	mov	ip, r4
 8001f22:	49a0      	ldr	r1, [pc, #640]	@ (80021a4 <hashInit.0+0x92c>)
 8001f24:	48a0      	ldr	r0, [pc, #640]	@ (80021a8 <hashInit.0+0x930>)
 8001f26:	f7ff fbf9 	bl	800171c <insert.1>
		insert("TK", "did");
 8001f2a:	46a4      	mov	ip, r4
 8001f2c:	499f      	ldr	r1, [pc, #636]	@ (80021ac <hashInit.0+0x934>)
 8001f2e:	48a0      	ldr	r0, [pc, #640]	@ (80021b0 <hashInit.0+0x938>)
 8001f30:	f7ff fbf4 	bl	800171c <insert.1>
		insert("US", "us");
 8001f34:	46a4      	mov	ip, r4
 8001f36:	499f      	ldr	r1, [pc, #636]	@ (80021b4 <hashInit.0+0x93c>)
 8001f38:	489f      	ldr	r0, [pc, #636]	@ (80021b8 <hashInit.0+0x940>)
 8001f3a:	f7ff fbef 	bl	800171c <insert.1>
		insert("SUFP", "such");
 8001f3e:	46a4      	mov	ip, r4
 8001f40:	499e      	ldr	r1, [pc, #632]	@ (80021bc <hashInit.0+0x944>)
 8001f42:	489f      	ldr	r0, [pc, #636]	@ (80021c0 <hashInit.0+0x948>)
 8001f44:	f7ff fbea 	bl	800171c <insert.1>
		insert("AEU", "a");
 8001f48:	46a4      	mov	ip, r4
 8001f4a:	499e      	ldr	r1, [pc, #632]	@ (80021c4 <hashInit.0+0x94c>)
 8001f4c:	489e      	ldr	r0, [pc, #632]	@ (80021c8 <hashInit.0+0x950>)
 8001f4e:	f7ff fbe5 	bl	800171c <insert.1>
		insert("TKPWRAET", "great");
 8001f52:	46a4      	mov	ip, r4
 8001f54:	499d      	ldr	r1, [pc, #628]	@ (80021cc <hashInit.0+0x954>)
 8001f56:	489e      	ldr	r0, [pc, #632]	@ (80021d0 <hashInit.0+0x958>)
 8001f58:	f7ff fbe0 	bl	800171c <insert.1>
		insert("PW-FR", "before");
 8001f5c:	46a4      	mov	ip, r4
 8001f5e:	499d      	ldr	r1, [pc, #628]	@ (80021d4 <hashInit.0+0x95c>)
 8001f60:	489d      	ldr	r0, [pc, #628]	@ (80021d8 <hashInit.0+0x960>)
 8001f62:	f7ff fbdb 	bl	800171c <insert.1>
		insert("PHUFT", "must");
 8001f66:	46a4      	mov	ip, r4
 8001f68:	499c      	ldr	r1, [pc, #624]	@ (80021dc <hashInit.0+0x964>)
 8001f6a:	489d      	ldr	r0, [pc, #628]	@ (80021e0 <hashInit.0+0x968>)
 8001f6c:	f7ff fbd6 	bl	800171c <insert.1>
		insert("TWO", "two");
 8001f70:	46a4      	mov	ip, r4
 8001f72:	499c      	ldr	r1, [pc, #624]	@ (80021e4 <hashInit.0+0x96c>)
 8001f74:	489c      	ldr	r0, [pc, #624]	@ (80021e8 <hashInit.0+0x970>)
 8001f76:	f7ff fbd1 	bl	800171c <insert.1>
		insert("THEZ", "these");
 8001f7a:	46a4      	mov	ip, r4
 8001f7c:	499b      	ldr	r1, [pc, #620]	@ (80021ec <hashInit.0+0x974>)
 8001f7e:	489c      	ldr	r0, [pc, #624]	@ (80021f0 <hashInit.0+0x978>)
 8001f80:	f7ff fbcc 	bl	800171c <insert.1>
		insert("SAOE", "see");
 8001f84:	46a4      	mov	ip, r4
 8001f86:	499b      	ldr	r1, [pc, #620]	@ (80021f4 <hashInit.0+0x97c>)
 8001f88:	489b      	ldr	r0, [pc, #620]	@ (80021f8 <hashInit.0+0x980>)
 8001f8a:	f7ff fbc7 	bl	800171c <insert.1>
		insert("TPHOE", "know");
 8001f8e:	46a4      	mov	ip, r4
 8001f90:	499a      	ldr	r1, [pc, #616]	@ (80021fc <hashInit.0+0x984>)
 8001f92:	489b      	ldr	r0, [pc, #620]	@ (8002200 <hashInit.0+0x988>)
 8001f94:	f7ff fbc2 	bl	800171c <insert.1>
		insert("OEFR", "over");
 8001f98:	46a4      	mov	ip, r4
 8001f9a:	499a      	ldr	r1, [pc, #616]	@ (8002204 <hashInit.0+0x98c>)
 8001f9c:	489a      	ldr	r0, [pc, #616]	@ (8002208 <hashInit.0+0x990>)
 8001f9e:	f7ff fbbd 	bl	800171c <insert.1>
		insert("PHUFP", "much");
 8001fa2:	46a4      	mov	ip, r4
 8001fa4:	4999      	ldr	r1, [pc, #612]	@ (800220c <hashInit.0+0x994>)
 8001fa6:	489a      	ldr	r0, [pc, #616]	@ (8002210 <hashInit.0+0x998>)
 8001fa8:	f7ff fbb8 	bl	800171c <insert.1>
		insert("TKOUPB", "down");
 8001fac:	46a4      	mov	ip, r4
 8001fae:	4999      	ldr	r1, [pc, #612]	@ (8002214 <hashInit.0+0x99c>)
 8001fb0:	4899      	ldr	r0, [pc, #612]	@ (8002218 <hashInit.0+0x9a0>)
 8001fb2:	f7ff fbb3 	bl	800171c <insert.1>
		insert("AF", "after");
 8001fb6:	46a4      	mov	ip, r4
 8001fb8:	4998      	ldr	r1, [pc, #608]	@ (800221c <hashInit.0+0x9a4>)
 8001fba:	4899      	ldr	r0, [pc, #612]	@ (8002220 <hashInit.0+0x9a8>)
 8001fbc:	f7ff fbae 	bl	800171c <insert.1>
		insert("TPEUFRT", "first");
 8001fc0:	46a4      	mov	ip, r4
 8001fc2:	4998      	ldr	r1, [pc, #608]	@ (8002224 <hashInit.0+0x9ac>)
 8001fc4:	4898      	ldr	r0, [pc, #608]	@ (8002228 <hashInit.0+0x9b0>)
 8001fc6:	f7ff fba9 	bl	800171c <insert.1>
		insert("PHR-FPLT", "Mr.");
 8001fca:	46a4      	mov	ip, r4
 8001fcc:	4997      	ldr	r1, [pc, #604]	@ (800222c <hashInit.0+0x9b4>)
 8001fce:	4898      	ldr	r0, [pc, #608]	@ (8002230 <hashInit.0+0x9b8>)
 8001fd0:	f7ff fba4 	bl	800171c <insert.1>
		insert("TKPWAOD", "good");
 8001fd4:	46a4      	mov	ip, r4
 8001fd6:	4997      	ldr	r1, [pc, #604]	@ (8002234 <hashInit.0+0x9bc>)
 8001fd8:	4897      	ldr	r0, [pc, #604]	@ (8002238 <hashInit.0+0x9c0>)
 8001fda:	f7ff fb9f 	bl	800171c <insert.1>
		insert("PHEPB", "men");
 8001fde:	46a4      	mov	ip, r4
 8001fe0:	4996      	ldr	r1, [pc, #600]	@ (800223c <hashInit.0+0x9c4>)
 8001fe2:	4897      	ldr	r0, [pc, #604]	@ (8002240 <hashInit.0+0x9c8>)
 8001fe4:	f7ff fb9a 	bl	800171c <insert.1>
		insert("OEPB", "own");
 8001fe8:	46a4      	mov	ip, r4
 8001fea:	4996      	ldr	r1, [pc, #600]	@ (8002244 <hashInit.0+0x9cc>)
 8001fec:	4896      	ldr	r0, [pc, #600]	@ (8002248 <hashInit.0+0x9d0>)
 8001fee:	f7ff fb95 	bl	800171c <insert.1>
		insert("TPHEFR", "never");
 8001ff2:	46a4      	mov	ip, r4
 8001ff4:	4995      	ldr	r1, [pc, #596]	@ (800224c <hashInit.0+0x9d4>)
 8001ff6:	4896      	ldr	r0, [pc, #600]	@ (8002250 <hashInit.0+0x9d8>)
 8001ff8:	f7ff fb90 	bl	800171c <insert.1>
		insert("PHOFT", "most");
 8001ffc:	46a4      	mov	ip, r4
 8001ffe:	4995      	ldr	r1, [pc, #596]	@ (8002254 <hashInit.0+0x9dc>)
 8002000:	4895      	ldr	r0, [pc, #596]	@ (8002258 <hashInit.0+0x9e0>)
 8002002:	f7ff fb8b 	bl	800171c <insert.1>
		insert("OLD", "old");
 8002006:	46a4      	mov	ip, r4
 8002008:	4994      	ldr	r1, [pc, #592]	@ (800225c <hashInit.0+0x9e4>)
 800200a:	4895      	ldr	r0, [pc, #596]	@ (8002260 <hashInit.0+0x9e8>)
 800200c:	f7ff fb86 	bl	800171c <insert.1>
		insert("SHAL", "shall");
 8002010:	46a4      	mov	ip, r4
 8002012:	4994      	ldr	r1, [pc, #592]	@ (8002264 <hashInit.0+0x9ec>)
 8002014:	4894      	ldr	r0, [pc, #592]	@ (8002268 <hashInit.0+0x9f0>)
 8002016:	f7ff fb81 	bl	800171c <insert.1>
		insert("TKAEU", "day");
 800201a:	46a4      	mov	ip, r4
 800201c:	4993      	ldr	r1, [pc, #588]	@ (800226c <hashInit.0+0x9f4>)
 800201e:	4894      	ldr	r0, [pc, #592]	@ (8002270 <hashInit.0+0x9f8>)
 8002020:	f7ff fb7c 	bl	800171c <insert.1>
		insert("W-R", "where");
 8002024:	46a4      	mov	ip, r4
 8002026:	4993      	ldr	r1, [pc, #588]	@ (8002274 <hashInit.0+0x9fc>)
 8002028:	4893      	ldr	r0, [pc, #588]	@ (8002278 <hashInit.0+0xa00>)
 800202a:	f7ff fb77 	bl	800171c <insert.1>
		insert("THOZ", "those");
 800202e:	46a4      	mov	ip, r4
 8002030:	4992      	ldr	r1, [pc, #584]	@ (800227c <hashInit.0+0xa04>)
 8002032:	4893      	ldr	r0, [pc, #588]	@ (8002280 <hashInit.0+0xa08>)
 8002034:	f7ff fb72 	bl	800171c <insert.1>
		insert("KAEUPL", "came");
 8002038:	46a4      	mov	ip, r4
 800203a:	4992      	ldr	r1, [pc, #584]	@ (8002284 <hashInit.0+0xa0c>)
 800203c:	4892      	ldr	r0, [pc, #584]	@ (8002288 <hashInit.0+0xa10>)
 800203e:	f7ff fb6d 	bl	800171c <insert.1>
		insert("KOPL", "come");
 8002042:	46a4      	mov	ip, r4
 8002044:	4991      	ldr	r1, [pc, #580]	@ (800228c <hashInit.0+0xa14>)
 8002046:	4892      	ldr	r0, [pc, #584]	@ (8002290 <hashInit.0+0xa18>)
 8002048:	f7ff fb68 	bl	800171c <insert.1>
		insert("HEUPLS", "himself");
 800204c:	46a4      	mov	ip, r4
 800204e:	4991      	ldr	r1, [pc, #580]	@ (8002294 <hashInit.0+0xa1c>)
 8002050:	4891      	ldr	r0, [pc, #580]	@ (8002298 <hashInit.0+0xa20>)
 8002052:	f7ff fb63 	bl	800171c <insert.1>
 8002056:	e121      	b.n	800229c <hashInit.0+0xa24>
 8002058:	0800d810 	.word	0x0800d810
 800205c:	0800d818 	.word	0x0800d818
 8002060:	0800d81c 	.word	0x0800d81c
 8002064:	0800d820 	.word	0x0800d820
 8002068:	0800d824 	.word	0x0800d824
 800206c:	0800d828 	.word	0x0800d828
 8002070:	0800d830 	.word	0x0800d830
 8002074:	0800d834 	.word	0x0800d834
 8002078:	0800d83c 	.word	0x0800d83c
 800207c:	0800d844 	.word	0x0800d844
 8002080:	0800d848 	.word	0x0800d848
 8002084:	0800d84c 	.word	0x0800d84c
 8002088:	0800d850 	.word	0x0800d850
 800208c:	0800d854 	.word	0x0800d854
 8002090:	0800d85c 	.word	0x0800d85c
 8002094:	0800d860 	.word	0x0800d860
 8002098:	0800d868 	.word	0x0800d868
 800209c:	0800d870 	.word	0x0800d870
 80020a0:	0800d878 	.word	0x0800d878
 80020a4:	0800d87c 	.word	0x0800d87c
 80020a8:	0800d880 	.word	0x0800d880
 80020ac:	0800d888 	.word	0x0800d888
 80020b0:	0800d890 	.word	0x0800d890
 80020b4:	0800d898 	.word	0x0800d898
 80020b8:	0800d8a0 	.word	0x0800d8a0
 80020bc:	0800d8a4 	.word	0x0800d8a4
 80020c0:	0800d8a8 	.word	0x0800d8a8
 80020c4:	0800d8ac 	.word	0x0800d8ac
 80020c8:	0800d8b4 	.word	0x0800d8b4
 80020cc:	0800d8bc 	.word	0x0800d8bc
 80020d0:	0800d8c0 	.word	0x0800d8c0
 80020d4:	0800d8c4 	.word	0x0800d8c4
 80020d8:	0800d8c8 	.word	0x0800d8c8
 80020dc:	0800d8cc 	.word	0x0800d8cc
 80020e0:	0800d8d4 	.word	0x0800d8d4
 80020e4:	0800d5a8 	.word	0x0800d5a8
 80020e8:	0800d5ac 	.word	0x0800d5ac
 80020ec:	0800d8dc 	.word	0x0800d8dc
 80020f0:	0800d8e0 	.word	0x0800d8e0
 80020f4:	0800d8e8 	.word	0x0800d8e8
 80020f8:	0800d8f0 	.word	0x0800d8f0
 80020fc:	0800d8f8 	.word	0x0800d8f8
 8002100:	0800d900 	.word	0x0800d900
 8002104:	0800d904 	.word	0x0800d904
 8002108:	0800d908 	.word	0x0800d908
 800210c:	0800d90c 	.word	0x0800d90c
 8002110:	0800d910 	.word	0x0800d910
 8002114:	0800d918 	.word	0x0800d918
 8002118:	0800d920 	.word	0x0800d920
 800211c:	0800d924 	.word	0x0800d924
 8002120:	0800d92c 	.word	0x0800d92c
 8002124:	0800d930 	.word	0x0800d930
 8002128:	0800d938 	.word	0x0800d938
 800212c:	0800d940 	.word	0x0800d940
 8002130:	0800d944 	.word	0x0800d944
 8002134:	0800d948 	.word	0x0800d948
 8002138:	0800d950 	.word	0x0800d950
 800213c:	0800d958 	.word	0x0800d958
 8002140:	0800d960 	.word	0x0800d960
 8002144:	0800d964 	.word	0x0800d964
 8002148:	0800d96c 	.word	0x0800d96c
 800214c:	0800d974 	.word	0x0800d974
 8002150:	0800d97c 	.word	0x0800d97c
 8002154:	0800d520 	.word	0x0800d520
 8002158:	0800d984 	.word	0x0800d984
 800215c:	0800d988 	.word	0x0800d988
 8002160:	0800d98c 	.word	0x0800d98c
 8002164:	0800d994 	.word	0x0800d994
 8002168:	0800d998 	.word	0x0800d998
 800216c:	0800d9a0 	.word	0x0800d9a0
 8002170:	0800d9a8 	.word	0x0800d9a8
 8002174:	0800d9b0 	.word	0x0800d9b0
 8002178:	0800d9b4 	.word	0x0800d9b4
 800217c:	0800d9bc 	.word	0x0800d9bc
 8002180:	0800d9c4 	.word	0x0800d9c4
 8002184:	0800d9d0 	.word	0x0800d9d0
 8002188:	0800d9d8 	.word	0x0800d9d8
 800218c:	0800d9e0 	.word	0x0800d9e0
 8002190:	0800d9e8 	.word	0x0800d9e8
 8002194:	0800d9f0 	.word	0x0800d9f0
 8002198:	0800d9f4 	.word	0x0800d9f4
 800219c:	0800d9f8 	.word	0x0800d9f8
 80021a0:	0800da00 	.word	0x0800da00
 80021a4:	0800da04 	.word	0x0800da04
 80021a8:	0800da0c 	.word	0x0800da0c
 80021ac:	0800da14 	.word	0x0800da14
 80021b0:	0800da18 	.word	0x0800da18
 80021b4:	0800da1c 	.word	0x0800da1c
 80021b8:	0800da20 	.word	0x0800da20
 80021bc:	0800da24 	.word	0x0800da24
 80021c0:	0800da2c 	.word	0x0800da2c
 80021c4:	0800da34 	.word	0x0800da34
 80021c8:	0800da38 	.word	0x0800da38
 80021cc:	0800da3c 	.word	0x0800da3c
 80021d0:	0800da44 	.word	0x0800da44
 80021d4:	0800da50 	.word	0x0800da50
 80021d8:	0800da58 	.word	0x0800da58
 80021dc:	0800da60 	.word	0x0800da60
 80021e0:	0800da68 	.word	0x0800da68
 80021e4:	0800da70 	.word	0x0800da70
 80021e8:	0800da74 	.word	0x0800da74
 80021ec:	0800da78 	.word	0x0800da78
 80021f0:	0800da80 	.word	0x0800da80
 80021f4:	0800da88 	.word	0x0800da88
 80021f8:	0800da8c 	.word	0x0800da8c
 80021fc:	0800da94 	.word	0x0800da94
 8002200:	0800da9c 	.word	0x0800da9c
 8002204:	0800daa4 	.word	0x0800daa4
 8002208:	0800daac 	.word	0x0800daac
 800220c:	0800dab4 	.word	0x0800dab4
 8002210:	0800dabc 	.word	0x0800dabc
 8002214:	0800dac4 	.word	0x0800dac4
 8002218:	0800dacc 	.word	0x0800dacc
 800221c:	0800dad4 	.word	0x0800dad4
 8002220:	0800dadc 	.word	0x0800dadc
 8002224:	0800dae0 	.word	0x0800dae0
 8002228:	0800dae8 	.word	0x0800dae8
 800222c:	0800daf0 	.word	0x0800daf0
 8002230:	0800daf4 	.word	0x0800daf4
 8002234:	0800db00 	.word	0x0800db00
 8002238:	0800db08 	.word	0x0800db08
 800223c:	0800db10 	.word	0x0800db10
 8002240:	0800db14 	.word	0x0800db14
 8002244:	0800db1c 	.word	0x0800db1c
 8002248:	0800db20 	.word	0x0800db20
 800224c:	0800db28 	.word	0x0800db28
 8002250:	0800db30 	.word	0x0800db30
 8002254:	0800db38 	.word	0x0800db38
 8002258:	0800db40 	.word	0x0800db40
 800225c:	0800db48 	.word	0x0800db48
 8002260:	0800db4c 	.word	0x0800db4c
 8002264:	0800db50 	.word	0x0800db50
 8002268:	0800db58 	.word	0x0800db58
 800226c:	0800d5e4 	.word	0x0800d5e4
 8002270:	0800d5e8 	.word	0x0800d5e8
 8002274:	0800db60 	.word	0x0800db60
 8002278:	0800db68 	.word	0x0800db68
 800227c:	0800db6c 	.word	0x0800db6c
 8002280:	0800db74 	.word	0x0800db74
 8002284:	0800db7c 	.word	0x0800db7c
 8002288:	0800db84 	.word	0x0800db84
 800228c:	0800db8c 	.word	0x0800db8c
 8002290:	0800db94 	.word	0x0800db94
 8002294:	0800db9c 	.word	0x0800db9c
 8002298:	0800dba4 	.word	0x0800dba4
		insert("WAEU", "way");
 800229c:	46a4      	mov	ip, r4
 800229e:	49b5      	ldr	r1, [pc, #724]	@ (8002574 <hashInit.0+0xcfc>)
 80022a0:	48b5      	ldr	r0, [pc, #724]	@ (8002578 <hashInit.0+0xd00>)
 80022a2:	f7ff fa3b 	bl	800171c <insert.1>
		insert("WORBG", "work");
 80022a6:	46a4      	mov	ip, r4
 80022a8:	49b4      	ldr	r1, [pc, #720]	@ (800257c <hashInit.0+0xd04>)
 80022aa:	48b5      	ldr	r0, [pc, #724]	@ (8002580 <hashInit.0+0xd08>)
 80022ac:	f7ff fa36 	bl	800171c <insert.1>
		insert("HRAOEUF", "life");
 80022b0:	46a4      	mov	ip, r4
 80022b2:	49b4      	ldr	r1, [pc, #720]	@ (8002584 <hashInit.0+0xd0c>)
 80022b4:	48b4      	ldr	r0, [pc, #720]	@ (8002588 <hashInit.0+0xd10>)
 80022b6:	f7ff fa31 	bl	800171c <insert.1>
		insert("WOUT", "without");
 80022ba:	46a4      	mov	ip, r4
 80022bc:	49b3      	ldr	r1, [pc, #716]	@ (800258c <hashInit.0+0xd14>)
 80022be:	48b4      	ldr	r0, [pc, #720]	@ (8002590 <hashInit.0+0xd18>)
 80022c0:	f7ff fa2c 	bl	800171c <insert.1>
		insert("TKPW", "go");
 80022c4:	46a4      	mov	ip, r4
 80022c6:	49b3      	ldr	r1, [pc, #716]	@ (8002594 <hashInit.0+0xd1c>)
 80022c8:	48b3      	ldr	r0, [pc, #716]	@ (8002598 <hashInit.0+0xd20>)
 80022ca:	f7ff fa27 	bl	800171c <insert.1>
		insert("PHAEUBG", "make");
 80022ce:	46a4      	mov	ip, r4
 80022d0:	49b2      	ldr	r1, [pc, #712]	@ (800259c <hashInit.0+0xd24>)
 80022d2:	48b3      	ldr	r0, [pc, #716]	@ (80025a0 <hashInit.0+0xd28>)
 80022d4:	f7ff fa22 	bl	800171c <insert.1>
		insert("WEL", "well");
 80022d8:	46a4      	mov	ip, r4
 80022da:	49b2      	ldr	r1, [pc, #712]	@ (80025a4 <hashInit.0+0xd2c>)
 80022dc:	48b2      	ldr	r0, [pc, #712]	@ (80025a8 <hashInit.0+0xd30>)
 80022de:	f7ff fa1d 	bl	800171c <insert.1>
		insert("THRU", "through");
 80022e2:	46a4      	mov	ip, r4
 80022e4:	49b1      	ldr	r1, [pc, #708]	@ (80025ac <hashInit.0+0xd34>)
 80022e6:	48b2      	ldr	r0, [pc, #712]	@ (80025b0 <hashInit.0+0xd38>)
 80022e8:	f7ff fa18 	bl	800171c <insert.1>
		insert("-BG", "being");
 80022ec:	46a4      	mov	ip, r4
 80022ee:	49b1      	ldr	r1, [pc, #708]	@ (80025b4 <hashInit.0+0xd3c>)
 80022f0:	48b1      	ldr	r0, [pc, #708]	@ (80025b8 <hashInit.0+0xd40>)
 80022f2:	f7ff fa13 	bl	800171c <insert.1>
		insert("HROPBG", "long");
 80022f6:	46a4      	mov	ip, r4
 80022f8:	49b0      	ldr	r1, [pc, #704]	@ (80025bc <hashInit.0+0xd44>)
 80022fa:	48b1      	ldr	r0, [pc, #708]	@ (80025c0 <hashInit.0+0xd48>)
 80022fc:	f7ff fa0e 	bl	800171c <insert.1>
		insert("SAEU", "say");
 8002300:	46a4      	mov	ip, r4
 8002302:	49b0      	ldr	r1, [pc, #704]	@ (80025c4 <hashInit.0+0xd4c>)
 8002304:	48b0      	ldr	r0, [pc, #704]	@ (80025c8 <hashInit.0+0xd50>)
 8002306:	f7ff fa09 	bl	800171c <insert.1>
		insert("PHAOEUT", "might");
 800230a:	46a4      	mov	ip, r4
 800230c:	49af      	ldr	r1, [pc, #700]	@ (80025cc <hashInit.0+0xd54>)
 800230e:	48b0      	ldr	r0, [pc, #704]	@ (80025d0 <hashInit.0+0xd58>)
 8002310:	f7ff fa04 	bl	800171c <insert.1>
		insert("HOU", "how");
 8002314:	46a4      	mov	ip, r4
 8002316:	49af      	ldr	r1, [pc, #700]	@ (80025d4 <hashInit.0+0xd5c>)
 8002318:	48af      	ldr	r0, [pc, #700]	@ (80025d8 <hashInit.0+0xd60>)
 800231a:	f7ff f9ff 	bl	800171c <insert.1>
		insert("APL", "am");
 800231e:	46a4      	mov	ip, r4
 8002320:	49ae      	ldr	r1, [pc, #696]	@ (80025dc <hashInit.0+0xd64>)
 8002322:	48af      	ldr	r0, [pc, #700]	@ (80025e0 <hashInit.0+0xd68>)
 8002324:	f7ff f9fa 	bl	800171c <insert.1>
		insert("TAO", "too");
 8002328:	46a4      	mov	ip, r4
 800232a:	49ae      	ldr	r1, [pc, #696]	@ (80025e4 <hashInit.0+0xd6c>)
 800232c:	48ae      	ldr	r0, [pc, #696]	@ (80025e8 <hashInit.0+0xd70>)
 800232e:	f7ff f9f5 	bl	800171c <insert.1>
		insert("AOEPB", "even");
 8002332:	46a4      	mov	ip, r4
 8002334:	49ad      	ldr	r1, [pc, #692]	@ (80025ec <hashInit.0+0xd74>)
 8002336:	48ae      	ldr	r0, [pc, #696]	@ (80025f0 <hashInit.0+0xd78>)
 8002338:	f7ff f9f0 	bl	800171c <insert.1>
		insert("TK-F", "def");
 800233c:	46a4      	mov	ip, r4
 800233e:	49ad      	ldr	r1, [pc, #692]	@ (80025f4 <hashInit.0+0xd7c>)
 8002340:	48ad      	ldr	r0, [pc, #692]	@ (80025f8 <hashInit.0+0xd80>)
 8002342:	f7ff f9eb 	bl	800171c <insert.1>
		insert("TKPWEPB", "again");
 8002346:	46a4      	mov	ip, r4
 8002348:	49ac      	ldr	r1, [pc, #688]	@ (80025fc <hashInit.0+0xd84>)
 800234a:	48ad      	ldr	r0, [pc, #692]	@ (8002600 <hashInit.0+0xd88>)
 800234c:	f7ff f9e6 	bl	800171c <insert.1>
		insert("PHAEPB", "many");
 8002350:	46a4      	mov	ip, r4
 8002352:	49ac      	ldr	r1, [pc, #688]	@ (8002604 <hashInit.0+0xd8c>)
 8002354:	48ac      	ldr	r0, [pc, #688]	@ (8002608 <hashInit.0+0xd90>)
 8002356:	f7ff f9e1 	bl	800171c <insert.1>
		insert("PWABG", "back");
 800235a:	46a4      	mov	ip, r4
 800235c:	49ab      	ldr	r1, [pc, #684]	@ (800260c <hashInit.0+0xd94>)
 800235e:	48ac      	ldr	r0, [pc, #688]	@ (8002610 <hashInit.0+0xd98>)
 8002360:	f7ff f9dc 	bl	800171c <insert.1>
		insert("HAOER", "here");
 8002364:	46a4      	mov	ip, r4
 8002366:	49ab      	ldr	r1, [pc, #684]	@ (8002614 <hashInit.0+0xd9c>)
 8002368:	48ab      	ldr	r0, [pc, #684]	@ (8002618 <hashInit.0+0xda0>)
 800236a:	f7ff f9d7 	bl	800171c <insert.1>
		insert("THEU", "think");
 800236e:	46a4      	mov	ip, r4
 8002370:	49aa      	ldr	r1, [pc, #680]	@ (800261c <hashInit.0+0xda4>)
 8002372:	48ab      	ldr	r0, [pc, #684]	@ (8002620 <hashInit.0+0xda8>)
 8002374:	f7ff f9d2 	bl	800171c <insert.1>
		insert("EF", "every");
 8002378:	46a4      	mov	ip, r4
 800237a:	49aa      	ldr	r1, [pc, #680]	@ (8002624 <hashInit.0+0xdac>)
 800237c:	48aa      	ldr	r0, [pc, #680]	@ (8002628 <hashInit.0+0xdb0>)
 800237e:	f7ff f9cd 	bl	800171c <insert.1>
		insert("PAOEPL", "people");
 8002382:	46a4      	mov	ip, r4
 8002384:	49a9      	ldr	r1, [pc, #676]	@ (800262c <hashInit.0+0xdb4>)
 8002386:	48aa      	ldr	r0, [pc, #680]	@ (8002630 <hashInit.0+0xdb8>)
 8002388:	f7ff f9c8 	bl	800171c <insert.1>
		insert("WEPBT", "went");
 800238c:	46a4      	mov	ip, r4
 800238e:	49a9      	ldr	r1, [pc, #676]	@ (8002634 <hashInit.0+0xdbc>)
 8002390:	48a9      	ldr	r0, [pc, #676]	@ (8002638 <hashInit.0+0xdc0>)
 8002392:	f7ff f9c3 	bl	800171c <insert.1>
		insert("SAEUPL", "same");
 8002396:	46a4      	mov	ip, r4
 8002398:	49a8      	ldr	r1, [pc, #672]	@ (800263c <hashInit.0+0xdc4>)
 800239a:	48a9      	ldr	r0, [pc, #676]	@ (8002640 <hashInit.0+0xdc8>)
 800239c:	f7ff f9be 	bl	800171c <insert.1>
		insert("HRAFT", "last");
 80023a0:	46a4      	mov	ip, r4
 80023a2:	49a8      	ldr	r1, [pc, #672]	@ (8002644 <hashInit.0+0xdcc>)
 80023a4:	48a8      	ldr	r0, [pc, #672]	@ (8002648 <hashInit.0+0xdd0>)
 80023a6:	f7ff f9b9 	bl	800171c <insert.1>
		insert("THAUT", "thought");
 80023aa:	46a4      	mov	ip, r4
 80023ac:	49a7      	ldr	r1, [pc, #668]	@ (800264c <hashInit.0+0xdd4>)
 80023ae:	48a8      	ldr	r0, [pc, #672]	@ (8002650 <hashInit.0+0xdd8>)
 80023b0:	f7ff f9b4 	bl	800171c <insert.1>
		insert("A/WAEU", "away");
 80023b4:	46a4      	mov	ip, r4
 80023b6:	49a7      	ldr	r1, [pc, #668]	@ (8002654 <hashInit.0+0xddc>)
 80023b8:	48a7      	ldr	r0, [pc, #668]	@ (8002658 <hashInit.0+0xde0>)
 80023ba:	f7ff f9af 	bl	800171c <insert.1>
		insert("TPH-PB", "under");
 80023be:	46a4      	mov	ip, r4
 80023c0:	49a6      	ldr	r1, [pc, #664]	@ (800265c <hashInit.0+0xde4>)
 80023c2:	48a7      	ldr	r0, [pc, #668]	@ (8002660 <hashInit.0+0xde8>)
 80023c4:	f7ff f9aa 	bl	800171c <insert.1>
		insert("TAEUBG", "take");
 80023c8:	46a4      	mov	ip, r4
 80023ca:	49a6      	ldr	r1, [pc, #664]	@ (8002664 <hashInit.0+0xdec>)
 80023cc:	48a6      	ldr	r0, [pc, #664]	@ (8002668 <hashInit.0+0xdf0>)
 80023ce:	f7ff f9a5 	bl	800171c <insert.1>
		insert("TPOUPBD", "found");
 80023d2:	46a4      	mov	ip, r4
 80023d4:	49a5      	ldr	r1, [pc, #660]	@ (800266c <hashInit.0+0xdf4>)
 80023d6:	48a6      	ldr	r0, [pc, #664]	@ (8002670 <hashInit.0+0xdf8>)
 80023d8:	f7ff f9a0 	bl	800171c <insert.1>
		insert("HAPBD", "hand");
 80023dc:	46a4      	mov	ip, r4
 80023de:	49a5      	ldr	r1, [pc, #660]	@ (8002674 <hashInit.0+0xdfc>)
 80023e0:	48a5      	ldr	r0, [pc, #660]	@ (8002678 <hashInit.0+0xe00>)
 80023e2:	f7ff f99b 	bl	800171c <insert.1>
		insert("AO*EUS", "eyes");
 80023e6:	46a4      	mov	ip, r4
 80023e8:	49a4      	ldr	r1, [pc, #656]	@ (800267c <hashInit.0+0xe04>)
 80023ea:	48a5      	ldr	r0, [pc, #660]	@ (8002680 <hashInit.0+0xe08>)
 80023ec:	f7ff f996 	bl	800171c <insert.1>
		insert("STEUL", "still");
 80023f0:	46a4      	mov	ip, r4
 80023f2:	49a4      	ldr	r1, [pc, #656]	@ (8002684 <hashInit.0+0xe0c>)
 80023f4:	48a4      	ldr	r0, [pc, #656]	@ (8002688 <hashInit.0+0xe10>)
 80023f6:	f7ff f991 	bl	800171c <insert.1>
		insert("PHRAEUS", "place");
 80023fa:	46a4      	mov	ip, r4
 80023fc:	49a3      	ldr	r1, [pc, #652]	@ (800268c <hashInit.0+0xe14>)
 80023fe:	48a4      	ldr	r0, [pc, #656]	@ (8002690 <hashInit.0+0xe18>)
 8002400:	f7ff f98c 	bl	800171c <insert.1>
		insert("WHAOEUL", "while");
 8002404:	46a4      	mov	ip, r4
 8002406:	49a3      	ldr	r1, [pc, #652]	@ (8002694 <hashInit.0+0xe1c>)
 8002408:	48a3      	ldr	r0, [pc, #652]	@ (8002698 <hashInit.0+0xe20>)
 800240a:	f7ff f987 	bl	800171c <insert.1>
		insert("SKWRUFT", "just");
 800240e:	46a4      	mov	ip, r4
 8002410:	49a2      	ldr	r1, [pc, #648]	@ (800269c <hashInit.0+0xe24>)
 8002412:	48a3      	ldr	r0, [pc, #652]	@ (80026a0 <hashInit.0+0xe28>)
 8002414:	f7ff f982 	bl	800171c <insert.1>
		insert("HR-S", "also");
 8002418:	46a4      	mov	ip, r4
 800241a:	49a2      	ldr	r1, [pc, #648]	@ (80026a4 <hashInit.0+0xe2c>)
 800241c:	48a2      	ldr	r0, [pc, #648]	@ (80026a8 <hashInit.0+0xe30>)
 800241e:	f7ff f97d 	bl	800171c <insert.1>
		insert("KWRUPBG", "young");
 8002422:	46a4      	mov	ip, r4
 8002424:	49a1      	ldr	r1, [pc, #644]	@ (80026ac <hashInit.0+0xe34>)
 8002426:	48a2      	ldr	r0, [pc, #648]	@ (80026b0 <hashInit.0+0xe38>)
 8002428:	f7ff f978 	bl	800171c <insert.1>
		insert("KWRET", "yet");
 800242c:	46a4      	mov	ip, r4
 800242e:	49a1      	ldr	r1, [pc, #644]	@ (80026b4 <hashInit.0+0xe3c>)
 8002430:	48a1      	ldr	r0, [pc, #644]	@ (80026b8 <hashInit.0+0xe40>)
 8002432:	f7ff f973 	bl	800171c <insert.1>
		insert("THOE", "though");
 8002436:	46a4      	mov	ip, r4
 8002438:	49a0      	ldr	r1, [pc, #640]	@ (80026bc <hashInit.0+0xe44>)
 800243a:	48a1      	ldr	r0, [pc, #644]	@ (80026c0 <hashInit.0+0xe48>)
 800243c:	f7ff f96e 	bl	800171c <insert.1>
		insert("TKPWEPBS", "against");
 8002440:	46a4      	mov	ip, r4
 8002442:	49a0      	ldr	r1, [pc, #640]	@ (80026c4 <hashInit.0+0xe4c>)
 8002444:	48a0      	ldr	r0, [pc, #640]	@ (80026c8 <hashInit.0+0xe50>)
 8002446:	f7ff f969 	bl	800171c <insert.1>
		insert("THEUPBGS", "things");
 800244a:	46a4      	mov	ip, r4
 800244c:	499f      	ldr	r1, [pc, #636]	@ (80026cc <hashInit.0+0xe54>)
 800244e:	48a0      	ldr	r0, [pc, #640]	@ (80026d0 <hashInit.0+0xe58>)
 8002450:	f7ff f964 	bl	800171c <insert.1>
		insert("TKPWET", "get");
 8002454:	46a4      	mov	ip, r4
 8002456:	499f      	ldr	r1, [pc, #636]	@ (80026d4 <hashInit.0+0xe5c>)
 8002458:	489f      	ldr	r0, [pc, #636]	@ (80026d8 <hashInit.0+0xe60>)
 800245a:	f7ff f95f 	bl	800171c <insert.1>
		insert("-FR", "ever");
 800245e:	46a4      	mov	ip, r4
 8002460:	499e      	ldr	r1, [pc, #632]	@ (80026dc <hashInit.0+0xe64>)
 8002462:	489f      	ldr	r0, [pc, #636]	@ (80026e0 <hashInit.0+0xe68>)
 8002464:	f7ff f95a 	bl	800171c <insert.1>
		insert("TKPWEUF", "give");
 8002468:	46a4      	mov	ip, r4
 800246a:	499e      	ldr	r1, [pc, #632]	@ (80026e4 <hashInit.0+0xe6c>)
 800246c:	489e      	ldr	r0, [pc, #632]	@ (80026e8 <hashInit.0+0xe70>)
 800246e:	f7ff f955 	bl	800171c <insert.1>
		insert("TKPWOD", "god");
 8002472:	46a4      	mov	ip, r4
 8002474:	499d      	ldr	r1, [pc, #628]	@ (80026ec <hashInit.0+0xe74>)
 8002476:	489e      	ldr	r0, [pc, #632]	@ (80026f0 <hashInit.0+0xe78>)
 8002478:	f7ff f950 	bl	800171c <insert.1>
		insert("KWRAOERS", "years");
 800247c:	46a4      	mov	ip, r4
 800247e:	499d      	ldr	r1, [pc, #628]	@ (80026f4 <hashInit.0+0xe7c>)
 8002480:	489d      	ldr	r0, [pc, #628]	@ (80026f8 <hashInit.0+0xe80>)
 8002482:	f7ff f94b 	bl	800171c <insert.1>
		insert("OF", "off");
 8002486:	46a4      	mov	ip, r4
 8002488:	499c      	ldr	r1, [pc, #624]	@ (80026fc <hashInit.0+0xe84>)
 800248a:	489d      	ldr	r0, [pc, #628]	@ (8002700 <hashInit.0+0xe88>)
 800248c:	f7ff f946 	bl	800171c <insert.1>
		insert("TPAEUS", "face");
 8002490:	46a4      	mov	ip, r4
 8002492:	499c      	ldr	r1, [pc, #624]	@ (8002704 <hashInit.0+0xe8c>)
 8002494:	489c      	ldr	r0, [pc, #624]	@ (8002708 <hashInit.0+0xe90>)
 8002496:	f7ff f941 	bl	800171c <insert.1>
		insert("TPHOG", "nothing");
 800249a:	46a4      	mov	ip, r4
 800249c:	499b      	ldr	r1, [pc, #620]	@ (800270c <hashInit.0+0xe94>)
 800249e:	489c      	ldr	r0, [pc, #624]	@ (8002710 <hashInit.0+0xe98>)
 80024a0:	f7ff f93c 	bl	800171c <insert.1>
		insert("RAOEUT", "right");
 80024a4:	46a4      	mov	ip, r4
 80024a6:	499b      	ldr	r1, [pc, #620]	@ (8002714 <hashInit.0+0xe9c>)
 80024a8:	489b      	ldr	r0, [pc, #620]	@ (8002718 <hashInit.0+0xea0>)
 80024aa:	f7ff f937 	bl	800171c <insert.1>
		insert("WUPBS", "once");
 80024ae:	46a4      	mov	ip, r4
 80024b0:	499a      	ldr	r1, [pc, #616]	@ (800271c <hashInit.0+0xea4>)
 80024b2:	489b      	ldr	r0, [pc, #620]	@ (8002720 <hashInit.0+0xea8>)
 80024b4:	f7ff f932 	bl	800171c <insert.1>
		insert("TPHOER", "another");
 80024b8:	46a4      	mov	ip, r4
 80024ba:	499a      	ldr	r1, [pc, #616]	@ (8002724 <hashInit.0+0xeac>)
 80024bc:	489a      	ldr	r0, [pc, #616]	@ (8002728 <hashInit.0+0xeb0>)
 80024be:	f7ff f92d 	bl	800171c <insert.1>
		insert("HREFT", "left");
 80024c2:	46a4      	mov	ip, r4
 80024c4:	4999      	ldr	r1, [pc, #612]	@ (800272c <hashInit.0+0xeb4>)
 80024c6:	489a      	ldr	r0, [pc, #616]	@ (8002730 <hashInit.0+0xeb8>)
 80024c8:	f7ff f928 	bl	800171c <insert.1>
		insert("PART", "part");
 80024cc:	46a4      	mov	ip, r4
 80024ce:	4999      	ldr	r1, [pc, #612]	@ (8002734 <hashInit.0+0xebc>)
 80024d0:	4899      	ldr	r0, [pc, #612]	@ (8002738 <hashInit.0+0xec0>)
 80024d2:	f7ff f923 	bl	800171c <insert.1>
		insert("SAU", "saw");
 80024d6:	46a4      	mov	ip, r4
 80024d8:	4998      	ldr	r1, [pc, #608]	@ (800273c <hashInit.0+0xec4>)
 80024da:	4899      	ldr	r0, [pc, #612]	@ (8002740 <hashInit.0+0xec8>)
 80024dc:	f7ff f91e 	bl	800171c <insert.1>
		insert("HOUS", "house");
 80024e0:	46a4      	mov	ip, r4
 80024e2:	4998      	ldr	r1, [pc, #608]	@ (8002744 <hashInit.0+0xecc>)
 80024e4:	4898      	ldr	r0, [pc, #608]	@ (8002748 <hashInit.0+0xed0>)
 80024e6:	f7ff f919 	bl	800171c <insert.1>
		insert("WORLD", "world");
 80024ea:	46a4      	mov	ip, r4
 80024ec:	4997      	ldr	r1, [pc, #604]	@ (800274c <hashInit.0+0xed4>)
 80024ee:	4898      	ldr	r0, [pc, #608]	@ (8002750 <hashInit.0+0xed8>)
 80024f0:	f7ff f914 	bl	800171c <insert.1>
		insert("HED", "head");
 80024f4:	46a4      	mov	ip, r4
 80024f6:	4997      	ldr	r1, [pc, #604]	@ (8002754 <hashInit.0+0xedc>)
 80024f8:	4897      	ldr	r0, [pc, #604]	@ (8002758 <hashInit.0+0xee0>)
 80024fa:	f7ff f90f 	bl	800171c <insert.1>
		insert("THRAOE", "three");
 80024fe:	46a4      	mov	ip, r4
 8002500:	4996      	ldr	r1, [pc, #600]	@ (800275c <hashInit.0+0xee4>)
 8002502:	4897      	ldr	r0, [pc, #604]	@ (8002760 <hashInit.0+0xee8>)
 8002504:	f7ff f90a 	bl	800171c <insert.1>
		insert("TAOBG", "took");
 8002508:	46a4      	mov	ip, r4
 800250a:	4996      	ldr	r1, [pc, #600]	@ (8002764 <hashInit.0+0xeec>)
 800250c:	4896      	ldr	r0, [pc, #600]	@ (8002768 <hashInit.0+0xef0>)
 800250e:	f7ff f905 	bl	800171c <insert.1>
		insert("TPHU", "new");
 8002512:	46a4      	mov	ip, r4
 8002514:	4995      	ldr	r1, [pc, #596]	@ (800276c <hashInit.0+0xef4>)
 8002516:	4896      	ldr	r0, [pc, #600]	@ (8002770 <hashInit.0+0xef8>)
 8002518:	f7ff f900 	bl	800171c <insert.1>
		insert("HRUF", "love");
 800251c:	46a4      	mov	ip, r4
 800251e:	4995      	ldr	r1, [pc, #596]	@ (8002774 <hashInit.0+0xefc>)
 8002520:	4895      	ldr	r0, [pc, #596]	@ (8002778 <hashInit.0+0xf00>)
 8002522:	f7ff f8fb 	bl	800171c <insert.1>
		insert("AULS", "always");
 8002526:	46a4      	mov	ip, r4
 8002528:	4994      	ldr	r1, [pc, #592]	@ (800277c <hashInit.0+0xf04>)
 800252a:	4895      	ldr	r0, [pc, #596]	@ (8002780 <hashInit.0+0xf08>)
 800252c:	f7ff f8f6 	bl	800171c <insert.1>
		insert("PHR-S", "Mrs.");
 8002530:	46a4      	mov	ip, r4
 8002532:	4994      	ldr	r1, [pc, #592]	@ (8002784 <hashInit.0+0xf0c>)
 8002534:	4894      	ldr	r0, [pc, #592]	@ (8002788 <hashInit.0+0xf10>)
 8002536:	f7ff f8f1 	bl	800171c <insert.1>
		insert("PUT", "put");
 800253a:	46a4      	mov	ip, r4
 800253c:	4993      	ldr	r1, [pc, #588]	@ (800278c <hashInit.0+0xf14>)
 800253e:	4894      	ldr	r0, [pc, #592]	@ (8002790 <hashInit.0+0xf18>)
 8002540:	f7ff f8ec 	bl	800171c <insert.1>
		insert("TPHAOEUT", "night");
 8002544:	46a4      	mov	ip, r4
 8002546:	4993      	ldr	r1, [pc, #588]	@ (8002794 <hashInit.0+0xf1c>)
 8002548:	4893      	ldr	r0, [pc, #588]	@ (8002798 <hashInit.0+0xf20>)
 800254a:	f7ff f8e7 	bl	800171c <insert.1>
		insert("AOEFP", "each");
 800254e:	46a4      	mov	ip, r4
 8002550:	4992      	ldr	r1, [pc, #584]	@ (800279c <hashInit.0+0xf24>)
 8002552:	4893      	ldr	r0, [pc, #588]	@ (80027a0 <hashInit.0+0xf28>)
 8002554:	f7ff f8e2 	bl	800171c <insert.1>
		insert("KEUPBG", "king");
 8002558:	46a4      	mov	ip, r4
 800255a:	4992      	ldr	r1, [pc, #584]	@ (80027a4 <hashInit.0+0xf2c>)
 800255c:	4892      	ldr	r0, [pc, #584]	@ (80027a8 <hashInit.0+0xf30>)
 800255e:	f7ff f8dd 	bl	800171c <insert.1>
		insert("TWAOEPB", "between");
 8002562:	46a4      	mov	ip, r4
 8002564:	4991      	ldr	r1, [pc, #580]	@ (80027ac <hashInit.0+0xf34>)
 8002566:	4892      	ldr	r0, [pc, #584]	@ (80027b0 <hashInit.0+0xf38>)
 8002568:	f7ff f8d8 	bl	800171c <insert.1>
		insert("TEL", "tell");
 800256c:	46a4      	mov	ip, r4
 800256e:	4991      	ldr	r1, [pc, #580]	@ (80027b4 <hashInit.0+0xf3c>)
 8002570:	e122      	b.n	80027b8 <hashInit.0+0xf40>
 8002572:	bf00      	nop
 8002574:	0800dbac 	.word	0x0800dbac
 8002578:	0800dbb0 	.word	0x0800dbb0
 800257c:	0800dbb8 	.word	0x0800dbb8
 8002580:	0800dbc0 	.word	0x0800dbc0
 8002584:	0800dbc8 	.word	0x0800dbc8
 8002588:	0800dbd0 	.word	0x0800dbd0
 800258c:	0800dbd8 	.word	0x0800dbd8
 8002590:	0800dbe0 	.word	0x0800dbe0
 8002594:	0800dbe8 	.word	0x0800dbe8
 8002598:	0800dbec 	.word	0x0800dbec
 800259c:	0800dbf4 	.word	0x0800dbf4
 80025a0:	0800dbfc 	.word	0x0800dbfc
 80025a4:	0800dc04 	.word	0x0800dc04
 80025a8:	0800dc0c 	.word	0x0800dc0c
 80025ac:	0800dc10 	.word	0x0800dc10
 80025b0:	0800dc18 	.word	0x0800dc18
 80025b4:	0800dc20 	.word	0x0800dc20
 80025b8:	0800dc28 	.word	0x0800dc28
 80025bc:	0800dc2c 	.word	0x0800dc2c
 80025c0:	0800dc34 	.word	0x0800dc34
 80025c4:	0800dc3c 	.word	0x0800dc3c
 80025c8:	0800dc40 	.word	0x0800dc40
 80025cc:	0800dc48 	.word	0x0800dc48
 80025d0:	0800dc50 	.word	0x0800dc50
 80025d4:	0800dc58 	.word	0x0800dc58
 80025d8:	0800dc5c 	.word	0x0800dc5c
 80025dc:	0800dc60 	.word	0x0800dc60
 80025e0:	0800dc64 	.word	0x0800dc64
 80025e4:	0800dc68 	.word	0x0800dc68
 80025e8:	0800dc6c 	.word	0x0800dc6c
 80025ec:	0800dc70 	.word	0x0800dc70
 80025f0:	0800dc78 	.word	0x0800dc78
 80025f4:	0800dc80 	.word	0x0800dc80
 80025f8:	0800dc84 	.word	0x0800dc84
 80025fc:	0800dc8c 	.word	0x0800dc8c
 8002600:	0800dc94 	.word	0x0800dc94
 8002604:	0800dc9c 	.word	0x0800dc9c
 8002608:	0800dca4 	.word	0x0800dca4
 800260c:	0800dcac 	.word	0x0800dcac
 8002610:	0800dcb4 	.word	0x0800dcb4
 8002614:	0800dcbc 	.word	0x0800dcbc
 8002618:	0800dcc4 	.word	0x0800dcc4
 800261c:	0800dccc 	.word	0x0800dccc
 8002620:	0800dcd4 	.word	0x0800dcd4
 8002624:	0800dcdc 	.word	0x0800dcdc
 8002628:	0800dce4 	.word	0x0800dce4
 800262c:	0800dce8 	.word	0x0800dce8
 8002630:	0800dcf0 	.word	0x0800dcf0
 8002634:	0800dcf8 	.word	0x0800dcf8
 8002638:	0800dd00 	.word	0x0800dd00
 800263c:	0800dd08 	.word	0x0800dd08
 8002640:	0800dd10 	.word	0x0800dd10
 8002644:	0800dd18 	.word	0x0800dd18
 8002648:	0800dd20 	.word	0x0800dd20
 800264c:	0800dd28 	.word	0x0800dd28
 8002650:	0800dd30 	.word	0x0800dd30
 8002654:	0800dd38 	.word	0x0800dd38
 8002658:	0800dd40 	.word	0x0800dd40
 800265c:	0800dd48 	.word	0x0800dd48
 8002660:	0800dd50 	.word	0x0800dd50
 8002664:	0800dd58 	.word	0x0800dd58
 8002668:	0800dd60 	.word	0x0800dd60
 800266c:	0800dd68 	.word	0x0800dd68
 8002670:	0800dd70 	.word	0x0800dd70
 8002674:	0800dd78 	.word	0x0800dd78
 8002678:	0800dd80 	.word	0x0800dd80
 800267c:	0800dd88 	.word	0x0800dd88
 8002680:	0800dd90 	.word	0x0800dd90
 8002684:	0800dd98 	.word	0x0800dd98
 8002688:	0800dda0 	.word	0x0800dda0
 800268c:	0800dda8 	.word	0x0800dda8
 8002690:	0800ddb0 	.word	0x0800ddb0
 8002694:	0800ddb8 	.word	0x0800ddb8
 8002698:	0800ddc0 	.word	0x0800ddc0
 800269c:	0800ddc8 	.word	0x0800ddc8
 80026a0:	0800ddd0 	.word	0x0800ddd0
 80026a4:	0800ddd8 	.word	0x0800ddd8
 80026a8:	0800dde0 	.word	0x0800dde0
 80026ac:	0800dde8 	.word	0x0800dde8
 80026b0:	0800ddf0 	.word	0x0800ddf0
 80026b4:	0800ddf8 	.word	0x0800ddf8
 80026b8:	0800ddfc 	.word	0x0800ddfc
 80026bc:	0800de04 	.word	0x0800de04
 80026c0:	0800de0c 	.word	0x0800de0c
 80026c4:	0800de14 	.word	0x0800de14
 80026c8:	0800de1c 	.word	0x0800de1c
 80026cc:	0800de28 	.word	0x0800de28
 80026d0:	0800de30 	.word	0x0800de30
 80026d4:	0800de3c 	.word	0x0800de3c
 80026d8:	0800de40 	.word	0x0800de40
 80026dc:	0800de48 	.word	0x0800de48
 80026e0:	0800de50 	.word	0x0800de50
 80026e4:	0800de54 	.word	0x0800de54
 80026e8:	0800de5c 	.word	0x0800de5c
 80026ec:	0800de64 	.word	0x0800de64
 80026f0:	0800de68 	.word	0x0800de68
 80026f4:	0800de70 	.word	0x0800de70
 80026f8:	0800de78 	.word	0x0800de78
 80026fc:	0800de84 	.word	0x0800de84
 8002700:	0800de88 	.word	0x0800de88
 8002704:	0800de8c 	.word	0x0800de8c
 8002708:	0800de94 	.word	0x0800de94
 800270c:	0800de9c 	.word	0x0800de9c
 8002710:	0800dea4 	.word	0x0800dea4
 8002714:	0800deac 	.word	0x0800deac
 8002718:	0800deb4 	.word	0x0800deb4
 800271c:	0800debc 	.word	0x0800debc
 8002720:	0800dec4 	.word	0x0800dec4
 8002724:	0800decc 	.word	0x0800decc
 8002728:	0800ded4 	.word	0x0800ded4
 800272c:	0800dedc 	.word	0x0800dedc
 8002730:	0800dee4 	.word	0x0800dee4
 8002734:	0800deec 	.word	0x0800deec
 8002738:	0800def4 	.word	0x0800def4
 800273c:	0800defc 	.word	0x0800defc
 8002740:	0800df00 	.word	0x0800df00
 8002744:	0800df04 	.word	0x0800df04
 8002748:	0800df0c 	.word	0x0800df0c
 800274c:	0800df14 	.word	0x0800df14
 8002750:	0800df1c 	.word	0x0800df1c
 8002754:	0800df24 	.word	0x0800df24
 8002758:	0800df2c 	.word	0x0800df2c
 800275c:	0800df30 	.word	0x0800df30
 8002760:	0800df38 	.word	0x0800df38
 8002764:	0800df40 	.word	0x0800df40
 8002768:	0800df48 	.word	0x0800df48
 800276c:	0800df50 	.word	0x0800df50
 8002770:	0800df54 	.word	0x0800df54
 8002774:	0800df5c 	.word	0x0800df5c
 8002778:	0800df64 	.word	0x0800df64
 800277c:	0800df6c 	.word	0x0800df6c
 8002780:	0800df74 	.word	0x0800df74
 8002784:	0800df7c 	.word	0x0800df7c
 8002788:	0800df84 	.word	0x0800df84
 800278c:	0800df8c 	.word	0x0800df8c
 8002790:	0800df90 	.word	0x0800df90
 8002794:	0800df94 	.word	0x0800df94
 8002798:	0800df9c 	.word	0x0800df9c
 800279c:	0800dfa8 	.word	0x0800dfa8
 80027a0:	0800dfb0 	.word	0x0800dfb0
 80027a4:	0800dfb8 	.word	0x0800dfb8
 80027a8:	0800dfc0 	.word	0x0800dfc0
 80027ac:	0800dfc8 	.word	0x0800dfc8
 80027b0:	0800dfd0 	.word	0x0800dfd0
 80027b4:	0800dfd8 	.word	0x0800dfd8
 80027b8:	48b5      	ldr	r0, [pc, #724]	@ (8002a90 <hashInit.0+0x1218>)
 80027ba:	f7fe ffaf 	bl	800171c <insert.1>
		insert("PHAOEUPBD", "mind");
 80027be:	46a4      	mov	ip, r4
 80027c0:	49b4      	ldr	r1, [pc, #720]	@ (8002a94 <hashInit.0+0x121c>)
 80027c2:	48b5      	ldr	r0, [pc, #724]	@ (8002a98 <hashInit.0+0x1220>)
 80027c4:	f7fe ffaa 	bl	800171c <insert.1>
		insert("HART", "heart");
 80027c8:	46a4      	mov	ip, r4
 80027ca:	49b4      	ldr	r1, [pc, #720]	@ (8002a9c <hashInit.0+0x1224>)
 80027cc:	48b4      	ldr	r0, [pc, #720]	@ (8002aa0 <hashInit.0+0x1228>)
 80027ce:	f7fe ffa5 	bl	800171c <insert.1>
		insert("TPAOU", "few");
 80027d2:	46a4      	mov	ip, r4
 80027d4:	49b3      	ldr	r1, [pc, #716]	@ (8002aa4 <hashInit.0+0x122c>)
 80027d6:	48b4      	ldr	r0, [pc, #720]	@ (8002aa8 <hashInit.0+0x1230>)
 80027d8:	f7fe ffa0 	bl	800171c <insert.1>
		insert("PWAU", "because");
 80027dc:	46a4      	mov	ip, r4
 80027de:	49b3      	ldr	r1, [pc, #716]	@ (8002aac <hashInit.0+0x1234>)
 80027e0:	48b3      	ldr	r0, [pc, #716]	@ (8002ab0 <hashInit.0+0x1238>)
 80027e2:	f7fe ff9b 	bl	800171c <insert.1>
		insert("THEUPBG", "thing");
 80027e6:	46a4      	mov	ip, r4
 80027e8:	49b2      	ldr	r1, [pc, #712]	@ (8002ab4 <hashInit.0+0x123c>)
 80027ea:	48b3      	ldr	r0, [pc, #716]	@ (8002ab8 <hashInit.0+0x1240>)
 80027ec:	f7fe ff96 	bl	800171c <insert.1>
		insert("WHOPL", "whom");
 80027f0:	46a4      	mov	ip, r4
 80027f2:	49b2      	ldr	r1, [pc, #712]	@ (8002abc <hashInit.0+0x1244>)
 80027f4:	48b2      	ldr	r0, [pc, #712]	@ (8002ac0 <hashInit.0+0x1248>)
 80027f6:	f7fe ff91 	bl	800171c <insert.1>
		insert("TPAR", "far");
 80027fa:	46a4      	mov	ip, r4
 80027fc:	49b1      	ldr	r1, [pc, #708]	@ (8002ac4 <hashInit.0+0x124c>)
 80027fe:	48b2      	ldr	r0, [pc, #712]	@ (8002ac8 <hashInit.0+0x1250>)
 8002800:	f7fe ff8c 	bl	800171c <insert.1>
		insert("SAOEPLD", "seemed");
 8002804:	46a4      	mov	ip, r4
 8002806:	49b1      	ldr	r1, [pc, #708]	@ (8002acc <hashInit.0+0x1254>)
 8002808:	48b1      	ldr	r0, [pc, #708]	@ (8002ad0 <hashInit.0+0x1258>)
 800280a:	f7fe ff87 	bl	800171c <insert.1>
		insert("HRAOBGD", "looked");
 800280e:	46a4      	mov	ip, r4
 8002810:	49b0      	ldr	r1, [pc, #704]	@ (8002ad4 <hashInit.0+0x125c>)
 8002812:	48b1      	ldr	r0, [pc, #708]	@ (8002ad8 <hashInit.0+0x1260>)
 8002814:	f7fe ff82 	bl	800171c <insert.1>
		insert("KAULD", "called");
 8002818:	46a4      	mov	ip, r4
 800281a:	49b0      	ldr	r1, [pc, #704]	@ (8002adc <hashInit.0+0x1264>)
 800281c:	48b0      	ldr	r0, [pc, #704]	@ (8002ae0 <hashInit.0+0x1268>)
 800281e:	f7fe ff7d 	bl	800171c <insert.1>
		insert("WHOEL", "whole");
 8002822:	46a4      	mov	ip, r4
 8002824:	49af      	ldr	r1, [pc, #700]	@ (8002ae4 <hashInit.0+0x126c>)
 8002826:	48b0      	ldr	r0, [pc, #704]	@ (8002ae8 <hashInit.0+0x1270>)
 8002828:	f7fe ff78 	bl	800171c <insert.1>
		insert("TK*E", "de");
 800282c:	46a4      	mov	ip, r4
 800282e:	49af      	ldr	r1, [pc, #700]	@ (8002aec <hashInit.0+0x1274>)
 8002830:	48af      	ldr	r0, [pc, #700]	@ (8002af0 <hashInit.0+0x1278>)
 8002832:	f7fe ff73 	bl	800171c <insert.1>
		insert("SET", "set");
 8002836:	46a4      	mov	ip, r4
 8002838:	49ae      	ldr	r1, [pc, #696]	@ (8002af4 <hashInit.0+0x127c>)
 800283a:	48af      	ldr	r0, [pc, #700]	@ (8002af8 <hashInit.0+0x1280>)
 800283c:	f7fe ff6e 	bl	800171c <insert.1>
		insert("PWO*T", "both");
 8002840:	46a4      	mov	ip, r4
 8002842:	49ae      	ldr	r1, [pc, #696]	@ (8002afc <hashInit.0+0x1284>)
 8002844:	48ae      	ldr	r0, [pc, #696]	@ (8002b00 <hashInit.0+0x1288>)
 8002846:	f7fe ff69 	bl	800171c <insert.1>
		insert("TKPWOT", "got");
 800284a:	46a4      	mov	ip, r4
 800284c:	49ad      	ldr	r1, [pc, #692]	@ (8002b04 <hashInit.0+0x128c>)
 800284e:	48ae      	ldr	r0, [pc, #696]	@ (8002b08 <hashInit.0+0x1290>)
 8002850:	f7fe ff64 	bl	800171c <insert.1>
		insert("TPAOEUPBD", "find");
 8002854:	46a4      	mov	ip, r4
 8002856:	49ad      	ldr	r1, [pc, #692]	@ (8002b0c <hashInit.0+0x1294>)
 8002858:	48ad      	ldr	r0, [pc, #692]	@ (8002b10 <hashInit.0+0x1298>)
 800285a:	f7fe ff5f 	bl	800171c <insert.1>
		insert("TKOPB", "done");
 800285e:	46a4      	mov	ip, r4
 8002860:	49ac      	ldr	r1, [pc, #688]	@ (8002b14 <hashInit.0+0x129c>)
 8002862:	48ad      	ldr	r0, [pc, #692]	@ (8002b18 <hashInit.0+0x12a0>)
 8002864:	f7fe ff5a 	bl	800171c <insert.1>
		insert("HAERD", "heard");
 8002868:	46a4      	mov	ip, r4
 800286a:	49ac      	ldr	r1, [pc, #688]	@ (8002b1c <hashInit.0+0x12a4>)
 800286c:	48ac      	ldr	r0, [pc, #688]	@ (8002b20 <hashInit.0+0x12a8>)
 800286e:	f7fe ff55 	bl	800171c <insert.1>
		insert("HRAOBG", "look");
 8002872:	46a4      	mov	ip, r4
 8002874:	49ab      	ldr	r1, [pc, #684]	@ (8002b24 <hashInit.0+0x12ac>)
 8002876:	48ac      	ldr	r0, [pc, #688]	@ (8002b28 <hashInit.0+0x12b0>)
 8002878:	f7fe ff50 	bl	800171c <insert.1>
		insert("TPHAEUPL", "name");
 800287c:	46a4      	mov	ip, r4
 800287e:	49ab      	ldr	r1, [pc, #684]	@ (8002b2c <hashInit.0+0x12b4>)
 8002880:	48ab      	ldr	r0, [pc, #684]	@ (8002b30 <hashInit.0+0x12b8>)
 8002882:	f7fe ff4b 	bl	800171c <insert.1>
		insert("TKAEUS", "days");
 8002886:	46a4      	mov	ip, r4
 8002888:	49aa      	ldr	r1, [pc, #680]	@ (8002b34 <hashInit.0+0x12bc>)
 800288a:	48ab      	ldr	r0, [pc, #684]	@ (8002b38 <hashInit.0+0x12c0>)
 800288c:	f7fe ff46 	bl	800171c <insert.1>
		insert("TOLD", "told");
 8002890:	46a4      	mov	ip, r4
 8002892:	49aa      	ldr	r1, [pc, #680]	@ (8002b3c <hashInit.0+0x12c4>)
 8002894:	48aa      	ldr	r0, [pc, #680]	@ (8002b40 <hashInit.0+0x12c8>)
 8002896:	f7fe ff41 	bl	800171c <insert.1>
		insert("HRET", "let");
 800289a:	46a4      	mov	ip, r4
 800289c:	49a9      	ldr	r1, [pc, #676]	@ (8002b44 <hashInit.0+0x12cc>)
 800289e:	48aa      	ldr	r0, [pc, #680]	@ (8002b48 <hashInit.0+0x12d0>)
 80028a0:	f7fe ff3c 	bl	800171c <insert.1>
		insert("HRORD", "lord");
 80028a4:	46a4      	mov	ip, r4
 80028a6:	49a9      	ldr	r1, [pc, #676]	@ (8002b4c <hashInit.0+0x12d4>)
 80028a8:	48a9      	ldr	r0, [pc, #676]	@ (8002b50 <hashInit.0+0x12d8>)
 80028aa:	f7fe ff37 	bl	800171c <insert.1>
		insert("KREU", "country");
 80028ae:	46a4      	mov	ip, r4
 80028b0:	49a8      	ldr	r1, [pc, #672]	@ (8002b54 <hashInit.0+0x12dc>)
 80028b2:	48a9      	ldr	r0, [pc, #676]	@ (8002b58 <hashInit.0+0x12e0>)
 80028b4:	f7fe ff32 	bl	800171c <insert.1>
		insert("SK-D", "asked");
 80028b8:	46a4      	mov	ip, r4
 80028ba:	49a8      	ldr	r1, [pc, #672]	@ (8002b5c <hashInit.0+0x12e4>)
 80028bc:	48a8      	ldr	r0, [pc, #672]	@ (8002b60 <hashInit.0+0x12e8>)
 80028be:	f7fe ff2d 	bl	800171c <insert.1>
		insert("TKPW-G", "going");
 80028c2:	46a4      	mov	ip, r4
 80028c4:	49a7      	ldr	r1, [pc, #668]	@ (8002b64 <hashInit.0+0x12ec>)
 80028c6:	48a8      	ldr	r0, [pc, #672]	@ (8002b68 <hashInit.0+0x12f0>)
 80028c8:	f7fe ff28 	bl	800171c <insert.1>
		insert("SAOEPB", "seen");
 80028cc:	46a4      	mov	ip, r4
 80028ce:	49a7      	ldr	r1, [pc, #668]	@ (8002b6c <hashInit.0+0x12f4>)
 80028d0:	48a7      	ldr	r0, [pc, #668]	@ (8002b70 <hashInit.0+0x12f8>)
 80028d2:	f7fe ff23 	bl	800171c <insert.1>
		insert("PWOERT", "better");
 80028d6:	46a4      	mov	ip, r4
 80028d8:	49a6      	ldr	r1, [pc, #664]	@ (8002b74 <hashInit.0+0x12fc>)
 80028da:	48a7      	ldr	r0, [pc, #668]	@ (8002b78 <hashInit.0+0x1300>)
 80028dc:	f7fe ff1e 	bl	800171c <insert.1>
		insert("P*", "p");
 80028e0:	46a4      	mov	ip, r4
 80028e2:	49a6      	ldr	r1, [pc, #664]	@ (8002b7c <hashInit.0+0x1304>)
 80028e4:	48a6      	ldr	r0, [pc, #664]	@ (8002b80 <hashInit.0+0x1308>)
 80028e6:	f7fe ff19 	bl	800171c <insert.1>
		insert("SR-G", "having");
 80028ea:	46a4      	mov	ip, r4
 80028ec:	49a5      	ldr	r1, [pc, #660]	@ (8002b84 <hashInit.0+0x130c>)
 80028ee:	48a6      	ldr	r0, [pc, #664]	@ (8002b88 <hashInit.0+0x1310>)
 80028f0:	f7fe ff14 	bl	800171c <insert.1>
		insert("HOEPL", "home");
 80028f4:	46a4      	mov	ip, r4
 80028f6:	49a5      	ldr	r1, [pc, #660]	@ (8002b8c <hashInit.0+0x1314>)
 80028f8:	48a5      	ldr	r0, [pc, #660]	@ (8002b90 <hashInit.0+0x1318>)
 80028fa:	f7fe ff0f 	bl	800171c <insert.1>
		insert("TPHAOU", "knew");
 80028fe:	46a4      	mov	ip, r4
 8002900:	49a4      	ldr	r1, [pc, #656]	@ (8002b94 <hashInit.0+0x131c>)
 8002902:	48a5      	ldr	r0, [pc, #660]	@ (8002b98 <hashInit.0+0x1320>)
 8002904:	f7fe ff0a 	bl	800171c <insert.1>
		insert("SAOEUD", "side");
 8002908:	46a4      	mov	ip, r4
 800290a:	49a4      	ldr	r1, [pc, #656]	@ (8002b9c <hashInit.0+0x1324>)
 800290c:	48a4      	ldr	r0, [pc, #656]	@ (8002ba0 <hashInit.0+0x1328>)
 800290e:	f7fe ff05 	bl	800171c <insert.1>
		insert("S-G", "something");
 8002912:	46a4      	mov	ip, r4
 8002914:	49a3      	ldr	r1, [pc, #652]	@ (8002ba4 <hashInit.0+0x132c>)
 8002916:	48a4      	ldr	r0, [pc, #656]	@ (8002ba8 <hashInit.0+0x1330>)
 8002918:	f7fe ff00 	bl	800171c <insert.1>
		insert("PHOEPLT", "moment");
 800291c:	46a4      	mov	ip, r4
 800291e:	49a3      	ldr	r1, [pc, #652]	@ (8002bac <hashInit.0+0x1334>)
 8002920:	48a3      	ldr	r0, [pc, #652]	@ (8002bb0 <hashInit.0+0x1338>)
 8002922:	f7fe fefb 	bl	800171c <insert.1>
		insert("TPAER", "father");
 8002926:	46a4      	mov	ip, r4
 8002928:	49a2      	ldr	r1, [pc, #648]	@ (8002bb4 <hashInit.0+0x133c>)
 800292a:	48a3      	ldr	r0, [pc, #652]	@ (8002bb8 <hashInit.0+0x1340>)
 800292c:	f7fe fef6 	bl	800171c <insert.1>
		insert("PHOPBG", "among");
 8002930:	46a4      	mov	ip, r4
 8002932:	49a2      	ldr	r1, [pc, #648]	@ (8002bbc <hashInit.0+0x1344>)
 8002934:	48a2      	ldr	r0, [pc, #648]	@ (8002bc0 <hashInit.0+0x1348>)
 8002936:	f7fe fef1 	bl	800171c <insert.1>
		insert("KORS", "course");
 800293a:	46a4      	mov	ip, r4
 800293c:	49a1      	ldr	r1, [pc, #644]	@ (8002bc4 <hashInit.0+0x134c>)
 800293e:	48a2      	ldr	r0, [pc, #648]	@ (8002bc8 <hashInit.0+0x1350>)
 8002940:	f7fe feec 	bl	800171c <insert.1>
		insert("HAPBDZ", "hands");
 8002944:	46a4      	mov	ip, r4
 8002946:	49a1      	ldr	r1, [pc, #644]	@ (8002bcc <hashInit.0+0x1354>)
 8002948:	48a1      	ldr	r0, [pc, #644]	@ (8002bd0 <hashInit.0+0x1358>)
 800294a:	f7fe fee7 	bl	800171c <insert.1>
		insert("WOPL", "woman");
 800294e:	46a4      	mov	ip, r4
 8002950:	49a0      	ldr	r1, [pc, #640]	@ (8002bd4 <hashInit.0+0x135c>)
 8002952:	48a1      	ldr	r0, [pc, #644]	@ (8002bd8 <hashInit.0+0x1360>)
 8002954:	f7fe fee2 	bl	800171c <insert.1>
		insert("TPHUF", "enough");
 8002958:	46a4      	mov	ip, r4
 800295a:	49a0      	ldr	r1, [pc, #640]	@ (8002bdc <hashInit.0+0x1364>)
 800295c:	48a0      	ldr	r0, [pc, #640]	@ (8002be0 <hashInit.0+0x1368>)
 800295e:	f7fe fedd 	bl	800171c <insert.1>
		insert("WORDZ", "words");
 8002962:	46a4      	mov	ip, r4
 8002964:	499f      	ldr	r1, [pc, #636]	@ (8002be4 <hashInit.0+0x136c>)
 8002966:	48a0      	ldr	r0, [pc, #640]	@ (8002be8 <hashInit.0+0x1370>)
 8002968:	f7fe fed8 	bl	800171c <insert.1>
		insert("PHOER", "mother");
 800296c:	46a4      	mov	ip, r4
 800296e:	499f      	ldr	r1, [pc, #636]	@ (8002bec <hashInit.0+0x1374>)
 8002970:	489f      	ldr	r0, [pc, #636]	@ (8002bf0 <hashInit.0+0x1378>)
 8002972:	f7fe fed3 	bl	800171c <insert.1>
		insert("SAOPB", "soon");
 8002976:	46a4      	mov	ip, r4
 8002978:	499e      	ldr	r1, [pc, #632]	@ (8002bf4 <hashInit.0+0x137c>)
 800297a:	489f      	ldr	r0, [pc, #636]	@ (8002bf8 <hashInit.0+0x1380>)
 800297c:	f7fe fece 	bl	800171c <insert.1>
		insert("TPUL", "full");
 8002980:	46a4      	mov	ip, r4
 8002982:	499e      	ldr	r1, [pc, #632]	@ (8002bfc <hashInit.0+0x1384>)
 8002984:	489e      	ldr	r0, [pc, #632]	@ (8002c00 <hashInit.0+0x1388>)
 8002986:	f7fe fec9 	bl	800171c <insert.1>
		insert("EPBD", "end");
 800298a:	46a4      	mov	ip, r4
 800298c:	499d      	ldr	r1, [pc, #628]	@ (8002c04 <hashInit.0+0x138c>)
 800298e:	489e      	ldr	r0, [pc, #632]	@ (8002c08 <hashInit.0+0x1390>)
 8002990:	f7fe fec4 	bl	800171c <insert.1>
		insert("TKPWAEUF", "gave");
 8002994:	46a4      	mov	ip, r4
 8002996:	499d      	ldr	r1, [pc, #628]	@ (8002c0c <hashInit.0+0x1394>)
 8002998:	489d      	ldr	r0, [pc, #628]	@ (8002c10 <hashInit.0+0x1398>)
 800299a:	f7fe febf 	bl	800171c <insert.1>
		insert("RAOPL", "room");
 800299e:	46a4      	mov	ip, r4
 80029a0:	499c      	ldr	r1, [pc, #624]	@ (8002c14 <hashInit.0+0x139c>)
 80029a2:	489d      	ldr	r0, [pc, #628]	@ (8002c18 <hashInit.0+0x13a0>)
 80029a4:	f7fe feba 	bl	800171c <insert.1>
		insert("HR-PL", "almost");
 80029a8:	46a4      	mov	ip, r4
 80029aa:	499c      	ldr	r1, [pc, #624]	@ (8002c1c <hashInit.0+0x13a4>)
 80029ac:	489c      	ldr	r0, [pc, #624]	@ (8002c20 <hashInit.0+0x13a8>)
 80029ae:	f7fe feb5 	bl	800171c <insert.1>
		insert("SPHAL", "small");
 80029b2:	46a4      	mov	ip, r4
 80029b4:	499b      	ldr	r1, [pc, #620]	@ (8002c24 <hashInit.0+0x13ac>)
 80029b6:	489c      	ldr	r0, [pc, #624]	@ (8002c28 <hashInit.0+0x13b0>)
 80029b8:	f7fe feb0 	bl	800171c <insert.1>
		insert("THO*U", "thou");
 80029bc:	46a4      	mov	ip, r4
 80029be:	499b      	ldr	r1, [pc, #620]	@ (8002c2c <hashInit.0+0x13b4>)
 80029c0:	489b      	ldr	r0, [pc, #620]	@ (8002c30 <hashInit.0+0x13b8>)
 80029c2:	f7fe feab 	bl	800171c <insert.1>
		insert("SK-PBT", "cannot");
 80029c6:	46a4      	mov	ip, r4
 80029c8:	499a      	ldr	r1, [pc, #616]	@ (8002c34 <hashInit.0+0x13bc>)
 80029ca:	489b      	ldr	r0, [pc, #620]	@ (8002c38 <hashInit.0+0x13c0>)
 80029cc:	f7fe fea6 	bl	800171c <insert.1>
		insert("WAUR", "water");
 80029d0:	46a4      	mov	ip, r4
 80029d2:	499a      	ldr	r1, [pc, #616]	@ (8002c3c <hashInit.0+0x13c4>)
 80029d4:	489a      	ldr	r0, [pc, #616]	@ (8002c40 <hashInit.0+0x13c8>)
 80029d6:	f7fe fea1 	bl	800171c <insert.1>
		insert("WAPBT", "want");
 80029da:	46a4      	mov	ip, r4
 80029dc:	4999      	ldr	r1, [pc, #612]	@ (8002c44 <hashInit.0+0x13cc>)
 80029de:	489a      	ldr	r0, [pc, #616]	@ (8002c48 <hashInit.0+0x13d0>)
 80029e0:	f7fe fe9c 	bl	800171c <insert.1>
		insert("HOUF", "however");
 80029e4:	46a4      	mov	ip, r4
 80029e6:	4999      	ldr	r1, [pc, #612]	@ (8002c4c <hashInit.0+0x13d4>)
 80029e8:	4899      	ldr	r0, [pc, #612]	@ (8002c50 <hashInit.0+0x13d8>)
 80029ea:	f7fe fe97 	bl	800171c <insert.1>
		insert("HRAOEUT", "light");
 80029ee:	46a4      	mov	ip, r4
 80029f0:	4998      	ldr	r1, [pc, #608]	@ (8002c54 <hashInit.0+0x13dc>)
 80029f2:	4899      	ldr	r0, [pc, #612]	@ (8002c58 <hashInit.0+0x13e0>)
 80029f4:	f7fe fe92 	bl	800171c <insert.1>
		insert("KWAOEUT", "quite");
 80029f8:	46a4      	mov	ip, r4
 80029fa:	4998      	ldr	r1, [pc, #608]	@ (8002c5c <hashInit.0+0x13e4>)
 80029fc:	4898      	ldr	r0, [pc, #608]	@ (8002c60 <hashInit.0+0x13e8>)
 80029fe:	f7fe fe8d 	bl	800171c <insert.1>
		insert("PWRAUT", "brought");
 8002a02:	46a4      	mov	ip, r4
 8002a04:	4997      	ldr	r1, [pc, #604]	@ (8002c64 <hashInit.0+0x13ec>)
 8002a06:	4898      	ldr	r0, [pc, #608]	@ (8002c68 <hashInit.0+0x13f0>)
 8002a08:	f7fe fe88 	bl	800171c <insert.1>
		insert("TPH-R", "nor");
 8002a0c:	46a4      	mov	ip, r4
 8002a0e:	4997      	ldr	r1, [pc, #604]	@ (8002c6c <hashInit.0+0x13f4>)
 8002a10:	4897      	ldr	r0, [pc, #604]	@ (8002c70 <hashInit.0+0x13f8>)
 8002a12:	f7fe fe83 	bl	800171c <insert.1>
		insert("WORD", "word");
 8002a16:	46a4      	mov	ip, r4
 8002a18:	4996      	ldr	r1, [pc, #600]	@ (8002c74 <hashInit.0+0x13fc>)
 8002a1a:	4897      	ldr	r0, [pc, #604]	@ (8002c78 <hashInit.0+0x1400>)
 8002a1c:	f7fe fe7e 	bl	800171c <insert.1>
		insert("WHOZ", "whose");
 8002a20:	46a4      	mov	ip, r4
 8002a22:	4996      	ldr	r1, [pc, #600]	@ (8002c7c <hashInit.0+0x1404>)
 8002a24:	4896      	ldr	r0, [pc, #600]	@ (8002c80 <hashInit.0+0x1408>)
 8002a26:	f7fe fe79 	bl	800171c <insert.1>
		insert("TKPWEUFPB", "given");
 8002a2a:	46a4      	mov	ip, r4
 8002a2c:	4995      	ldr	r1, [pc, #596]	@ (8002c84 <hashInit.0+0x140c>)
 8002a2e:	4896      	ldr	r0, [pc, #600]	@ (8002c88 <hashInit.0+0x1410>)
 8002a30:	f7fe fe74 	bl	800171c <insert.1>
		insert("TKAOR", "door");
 8002a34:	46a4      	mov	ip, r4
 8002a36:	4995      	ldr	r1, [pc, #596]	@ (8002c8c <hashInit.0+0x1414>)
 8002a38:	4895      	ldr	r0, [pc, #596]	@ (8002c90 <hashInit.0+0x1418>)
 8002a3a:	f7fe fe6f 	bl	800171c <insert.1>
		insert("PWEFT", "best");
 8002a3e:	46a4      	mov	ip, r4
 8002a40:	4994      	ldr	r1, [pc, #592]	@ (8002c94 <hashInit.0+0x141c>)
 8002a42:	4895      	ldr	r0, [pc, #596]	@ (8002c98 <hashInit.0+0x1420>)
 8002a44:	f7fe fe6a 	bl	800171c <insert.1>
		insert("TURPBD", "turned");
 8002a48:	46a4      	mov	ip, r4
 8002a4a:	4994      	ldr	r1, [pc, #592]	@ (8002c9c <hashInit.0+0x1424>)
 8002a4c:	4894      	ldr	r0, [pc, #592]	@ (8002ca0 <hashInit.0+0x1428>)
 8002a4e:	f7fe fe65 	bl	800171c <insert.1>
		insert("TAEPB", "taken");
 8002a52:	46a4      	mov	ip, r4
 8002a54:	4993      	ldr	r1, [pc, #588]	@ (8002ca4 <hashInit.0+0x142c>)
 8002a56:	4894      	ldr	r0, [pc, #592]	@ (8002ca8 <hashInit.0+0x1430>)
 8002a58:	f7fe fe60 	bl	800171c <insert.1>
		insert("TKOS", "does");
 8002a5c:	46a4      	mov	ip, r4
 8002a5e:	4993      	ldr	r1, [pc, #588]	@ (8002cac <hashInit.0+0x1434>)
 8002a60:	4893      	ldr	r0, [pc, #588]	@ (8002cb0 <hashInit.0+0x1438>)
 8002a62:	f7fe fe5b 	bl	800171c <insert.1>
		insert("AOUS", "use");
 8002a66:	46a4      	mov	ip, r4
 8002a68:	4992      	ldr	r1, [pc, #584]	@ (8002cb4 <hashInit.0+0x143c>)
 8002a6a:	4893      	ldr	r0, [pc, #588]	@ (8002cb8 <hashInit.0+0x1440>)
 8002a6c:	f7fe fe56 	bl	800171c <insert.1>
		insert("PHORPBG", "morning");
 8002a70:	46a4      	mov	ip, r4
 8002a72:	4992      	ldr	r1, [pc, #584]	@ (8002cbc <hashInit.0+0x1444>)
 8002a74:	4892      	ldr	r0, [pc, #584]	@ (8002cc0 <hashInit.0+0x1448>)
 8002a76:	f7fe fe51 	bl	800171c <insert.1>
		insert("PHAO*EUS", "myself");
 8002a7a:	46a4      	mov	ip, r4
 8002a7c:	4991      	ldr	r1, [pc, #580]	@ (8002cc4 <hashInit.0+0x144c>)
 8002a7e:	4892      	ldr	r0, [pc, #584]	@ (8002cc8 <hashInit.0+0x1450>)
 8002a80:	f7fe fe4c 	bl	800171c <insert.1>
		insert("TKPWUT/*EPB/PWERG", "Gutenberg");
 8002a84:	46a4      	mov	ip, r4
 8002a86:	4991      	ldr	r1, [pc, #580]	@ (8002ccc <hashInit.0+0x1454>)
 8002a88:	4891      	ldr	r0, [pc, #580]	@ (8002cd0 <hashInit.0+0x1458>)
 8002a8a:	f7fe fe47 	bl	800171c <insert.1>
 8002a8e:	e121      	b.n	8002cd4 <hashInit.0+0x145c>
 8002a90:	0800dfe0 	.word	0x0800dfe0
 8002a94:	0800dfe4 	.word	0x0800dfe4
 8002a98:	0800dfec 	.word	0x0800dfec
 8002a9c:	0800dff8 	.word	0x0800dff8
 8002aa0:	0800e000 	.word	0x0800e000
 8002aa4:	0800e008 	.word	0x0800e008
 8002aa8:	0800e00c 	.word	0x0800e00c
 8002aac:	0800e014 	.word	0x0800e014
 8002ab0:	0800e01c 	.word	0x0800e01c
 8002ab4:	0800e024 	.word	0x0800e024
 8002ab8:	0800e02c 	.word	0x0800e02c
 8002abc:	0800e034 	.word	0x0800e034
 8002ac0:	0800e03c 	.word	0x0800e03c
 8002ac4:	0800e044 	.word	0x0800e044
 8002ac8:	0800e048 	.word	0x0800e048
 8002acc:	0800e050 	.word	0x0800e050
 8002ad0:	0800e058 	.word	0x0800e058
 8002ad4:	0800e060 	.word	0x0800e060
 8002ad8:	0800e068 	.word	0x0800e068
 8002adc:	0800e070 	.word	0x0800e070
 8002ae0:	0800e078 	.word	0x0800e078
 8002ae4:	0800e080 	.word	0x0800e080
 8002ae8:	0800e088 	.word	0x0800e088
 8002aec:	0800e090 	.word	0x0800e090
 8002af0:	0800e094 	.word	0x0800e094
 8002af4:	0800e09c 	.word	0x0800e09c
 8002af8:	0800e0a0 	.word	0x0800e0a0
 8002afc:	0800e0a4 	.word	0x0800e0a4
 8002b00:	0800e0ac 	.word	0x0800e0ac
 8002b04:	0800e0b4 	.word	0x0800e0b4
 8002b08:	0800e0b8 	.word	0x0800e0b8
 8002b0c:	0800e0c0 	.word	0x0800e0c0
 8002b10:	0800e0c8 	.word	0x0800e0c8
 8002b14:	0800e0d4 	.word	0x0800e0d4
 8002b18:	0800e0dc 	.word	0x0800e0dc
 8002b1c:	0800e0e4 	.word	0x0800e0e4
 8002b20:	0800e0ec 	.word	0x0800e0ec
 8002b24:	0800e0f4 	.word	0x0800e0f4
 8002b28:	0800e0fc 	.word	0x0800e0fc
 8002b2c:	0800e104 	.word	0x0800e104
 8002b30:	0800e10c 	.word	0x0800e10c
 8002b34:	0800e118 	.word	0x0800e118
 8002b38:	0800e120 	.word	0x0800e120
 8002b3c:	0800e128 	.word	0x0800e128
 8002b40:	0800e130 	.word	0x0800e130
 8002b44:	0800e138 	.word	0x0800e138
 8002b48:	0800e13c 	.word	0x0800e13c
 8002b4c:	0800e144 	.word	0x0800e144
 8002b50:	0800e14c 	.word	0x0800e14c
 8002b54:	0800e154 	.word	0x0800e154
 8002b58:	0800e15c 	.word	0x0800e15c
 8002b5c:	0800e164 	.word	0x0800e164
 8002b60:	0800e16c 	.word	0x0800e16c
 8002b64:	0800e174 	.word	0x0800e174
 8002b68:	0800e17c 	.word	0x0800e17c
 8002b6c:	0800e184 	.word	0x0800e184
 8002b70:	0800e18c 	.word	0x0800e18c
 8002b74:	0800e194 	.word	0x0800e194
 8002b78:	0800e19c 	.word	0x0800e19c
 8002b7c:	0800e1a4 	.word	0x0800e1a4
 8002b80:	0800e1a8 	.word	0x0800e1a8
 8002b84:	0800e1ac 	.word	0x0800e1ac
 8002b88:	0800e1b4 	.word	0x0800e1b4
 8002b8c:	0800e1bc 	.word	0x0800e1bc
 8002b90:	0800e1c4 	.word	0x0800e1c4
 8002b94:	0800e1cc 	.word	0x0800e1cc
 8002b98:	0800e1d4 	.word	0x0800e1d4
 8002b9c:	0800e1dc 	.word	0x0800e1dc
 8002ba0:	0800e1e4 	.word	0x0800e1e4
 8002ba4:	0800e1ec 	.word	0x0800e1ec
 8002ba8:	0800e1f8 	.word	0x0800e1f8
 8002bac:	0800e1fc 	.word	0x0800e1fc
 8002bb0:	0800e204 	.word	0x0800e204
 8002bb4:	0800e20c 	.word	0x0800e20c
 8002bb8:	0800e214 	.word	0x0800e214
 8002bbc:	0800e21c 	.word	0x0800e21c
 8002bc0:	0800e224 	.word	0x0800e224
 8002bc4:	0800e22c 	.word	0x0800e22c
 8002bc8:	0800e234 	.word	0x0800e234
 8002bcc:	0800e23c 	.word	0x0800e23c
 8002bd0:	0800e244 	.word	0x0800e244
 8002bd4:	0800e24c 	.word	0x0800e24c
 8002bd8:	0800e254 	.word	0x0800e254
 8002bdc:	0800e25c 	.word	0x0800e25c
 8002be0:	0800e264 	.word	0x0800e264
 8002be4:	0800e26c 	.word	0x0800e26c
 8002be8:	0800e274 	.word	0x0800e274
 8002bec:	0800e27c 	.word	0x0800e27c
 8002bf0:	0800e284 	.word	0x0800e284
 8002bf4:	0800d510 	.word	0x0800d510
 8002bf8:	0800d518 	.word	0x0800d518
 8002bfc:	0800e28c 	.word	0x0800e28c
 8002c00:	0800e294 	.word	0x0800e294
 8002c04:	0800e29c 	.word	0x0800e29c
 8002c08:	0800e2a0 	.word	0x0800e2a0
 8002c0c:	0800e2a8 	.word	0x0800e2a8
 8002c10:	0800e2b0 	.word	0x0800e2b0
 8002c14:	0800e2bc 	.word	0x0800e2bc
 8002c18:	0800e2c4 	.word	0x0800e2c4
 8002c1c:	0800e2cc 	.word	0x0800e2cc
 8002c20:	0800e2d4 	.word	0x0800e2d4
 8002c24:	0800e2dc 	.word	0x0800e2dc
 8002c28:	0800e2e4 	.word	0x0800e2e4
 8002c2c:	0800e2ec 	.word	0x0800e2ec
 8002c30:	0800e2f4 	.word	0x0800e2f4
 8002c34:	0800e2fc 	.word	0x0800e2fc
 8002c38:	0800e304 	.word	0x0800e304
 8002c3c:	0800e30c 	.word	0x0800e30c
 8002c40:	0800e314 	.word	0x0800e314
 8002c44:	0800e31c 	.word	0x0800e31c
 8002c48:	0800e324 	.word	0x0800e324
 8002c4c:	0800e32c 	.word	0x0800e32c
 8002c50:	0800e334 	.word	0x0800e334
 8002c54:	0800e33c 	.word	0x0800e33c
 8002c58:	0800e344 	.word	0x0800e344
 8002c5c:	0800e34c 	.word	0x0800e34c
 8002c60:	0800e354 	.word	0x0800e354
 8002c64:	0800e35c 	.word	0x0800e35c
 8002c68:	0800e364 	.word	0x0800e364
 8002c6c:	0800e36c 	.word	0x0800e36c
 8002c70:	0800e370 	.word	0x0800e370
 8002c74:	0800e378 	.word	0x0800e378
 8002c78:	0800e380 	.word	0x0800e380
 8002c7c:	0800e388 	.word	0x0800e388
 8002c80:	0800e390 	.word	0x0800e390
 8002c84:	0800e398 	.word	0x0800e398
 8002c88:	0800e3a0 	.word	0x0800e3a0
 8002c8c:	0800e3ac 	.word	0x0800e3ac
 8002c90:	0800e3b4 	.word	0x0800e3b4
 8002c94:	0800e3bc 	.word	0x0800e3bc
 8002c98:	0800e3c4 	.word	0x0800e3c4
 8002c9c:	0800e3cc 	.word	0x0800e3cc
 8002ca0:	0800e3d4 	.word	0x0800e3d4
 8002ca4:	0800e3dc 	.word	0x0800e3dc
 8002ca8:	0800e3e4 	.word	0x0800e3e4
 8002cac:	0800d5f0 	.word	0x0800d5f0
 8002cb0:	0800e3ec 	.word	0x0800e3ec
 8002cb4:	0800e3f4 	.word	0x0800e3f4
 8002cb8:	0800e3f8 	.word	0x0800e3f8
 8002cbc:	0800e400 	.word	0x0800e400
 8002cc0:	0800e408 	.word	0x0800e408
 8002cc4:	0800e410 	.word	0x0800e410
 8002cc8:	0800e418 	.word	0x0800e418
 8002ccc:	0800e424 	.word	0x0800e424
 8002cd0:	0800e430 	.word	0x0800e430
		insert("TPELT", "felt");
 8002cd4:	46a4      	mov	ip, r4
 8002cd6:	49b5      	ldr	r1, [pc, #724]	@ (8002fac <hashInit.0+0x1734>)
 8002cd8:	48b5      	ldr	r0, [pc, #724]	@ (8002fb0 <hashInit.0+0x1738>)
 8002cda:	f7fe fd1f 	bl	800171c <insert.1>
		insert("TPH-L", "until");
 8002cde:	46a4      	mov	ip, r4
 8002ce0:	49b4      	ldr	r1, [pc, #720]	@ (8002fb4 <hashInit.0+0x173c>)
 8002ce2:	48b5      	ldr	r0, [pc, #724]	@ (8002fb8 <hashInit.0+0x1740>)
 8002ce4:	f7fe fd1a 	bl	800171c <insert.1>
		insert("SEUPBS", "since");
 8002ce8:	46a4      	mov	ip, r4
 8002cea:	49b4      	ldr	r1, [pc, #720]	@ (8002fbc <hashInit.0+0x1744>)
 8002cec:	48b4      	ldr	r0, [pc, #720]	@ (8002fc0 <hashInit.0+0x1748>)
 8002cee:	f7fe fd15 	bl	800171c <insert.1>
		insert("POUR", "power");
 8002cf2:	46a4      	mov	ip, r4
 8002cf4:	49b3      	ldr	r1, [pc, #716]	@ (8002fc4 <hashInit.0+0x174c>)
 8002cf6:	48b4      	ldr	r0, [pc, #720]	@ (8002fc8 <hashInit.0+0x1750>)
 8002cf8:	f7fe fd10 	bl	800171c <insert.1>
		insert("TH*EPLS", "themselves");
 8002cfc:	46a4      	mov	ip, r4
 8002cfe:	49b3      	ldr	r1, [pc, #716]	@ (8002fcc <hashInit.0+0x1754>)
 8002d00:	48b3      	ldr	r0, [pc, #716]	@ (8002fd0 <hashInit.0+0x1758>)
 8002d02:	f7fe fd0b 	bl	800171c <insert.1>
		insert("AOUFD", "used");
 8002d06:	46a4      	mov	ip, r4
 8002d08:	49b2      	ldr	r1, [pc, #712]	@ (8002fd4 <hashInit.0+0x175c>)
 8002d0a:	48b3      	ldr	r0, [pc, #716]	@ (8002fd8 <hashInit.0+0x1760>)
 8002d0c:	f7fe fd06 	bl	800171c <insert.1>
		insert("RAER", "rather");
 8002d10:	46a4      	mov	ip, r4
 8002d12:	49b2      	ldr	r1, [pc, #712]	@ (8002fdc <hashInit.0+0x1764>)
 8002d14:	48b2      	ldr	r0, [pc, #712]	@ (8002fe0 <hashInit.0+0x1768>)
 8002d16:	f7fe fd01 	bl	800171c <insert.1>
		insert("TKPWAPB", "began");
 8002d1a:	46a4      	mov	ip, r4
 8002d1c:	49b1      	ldr	r1, [pc, #708]	@ (8002fe4 <hashInit.0+0x176c>)
 8002d1e:	48b2      	ldr	r0, [pc, #712]	@ (8002fe8 <hashInit.0+0x1770>)
 8002d20:	f7fe fcfc 	bl	800171c <insert.1>
		insert("PREPBT", "present");
 8002d24:	46a4      	mov	ip, r4
 8002d26:	49b1      	ldr	r1, [pc, #708]	@ (8002fec <hashInit.0+0x1774>)
 8002d28:	48b1      	ldr	r0, [pc, #708]	@ (8002ff0 <hashInit.0+0x1778>)
 8002d2a:	f7fe fcf7 	bl	800171c <insert.1>
		insert("SROEUS", "voice");
 8002d2e:	46a4      	mov	ip, r4
 8002d30:	49b0      	ldr	r1, [pc, #704]	@ (8002ff4 <hashInit.0+0x177c>)
 8002d32:	48b1      	ldr	r0, [pc, #708]	@ (8002ff8 <hashInit.0+0x1780>)
 8002d34:	f7fe fcf2 	bl	800171c <insert.1>
		insert("OERS", "others");
 8002d38:	46a4      	mov	ip, r4
 8002d3a:	49b0      	ldr	r1, [pc, #704]	@ (8002ffc <hashInit.0+0x1784>)
 8002d3c:	48b0      	ldr	r0, [pc, #704]	@ (8003000 <hashInit.0+0x1788>)
 8002d3e:	f7fe fced 	bl	800171c <insert.1>
		insert("WHAOEUT", "white");
 8002d42:	46a4      	mov	ip, r4
 8002d44:	49af      	ldr	r1, [pc, #700]	@ (8003004 <hashInit.0+0x178c>)
 8002d46:	48b0      	ldr	r0, [pc, #704]	@ (8003008 <hashInit.0+0x1790>)
 8002d48:	f7fe fce8 	bl	800171c <insert.1>
		insert("WORBGS", "works");
 8002d4c:	46a4      	mov	ip, r4
 8002d4e:	49af      	ldr	r1, [pc, #700]	@ (800300c <hashInit.0+0x1794>)
 8002d50:	48af      	ldr	r0, [pc, #700]	@ (8003010 <hashInit.0+0x1798>)
 8002d52:	f7fe fce3 	bl	800171c <insert.1>
		insert("HRES", "less");
 8002d56:	46a4      	mov	ip, r4
 8002d58:	49ae      	ldr	r1, [pc, #696]	@ (8003014 <hashInit.0+0x179c>)
 8002d5a:	48af      	ldr	r0, [pc, #700]	@ (8003018 <hashInit.0+0x17a0>)
 8002d5c:	f7fe fcde 	bl	800171c <insert.1>
		insert("PHUPB", "money");
 8002d60:	46a4      	mov	ip, r4
 8002d62:	49ae      	ldr	r1, [pc, #696]	@ (800301c <hashInit.0+0x17a4>)
 8002d64:	48ae      	ldr	r0, [pc, #696]	@ (8003020 <hashInit.0+0x17a8>)
 8002d66:	f7fe fcd9 	bl	800171c <insert.1>
		insert("TPHEGT", "next");
 8002d6a:	46a4      	mov	ip, r4
 8002d6c:	49ad      	ldr	r1, [pc, #692]	@ (8003024 <hashInit.0+0x17ac>)
 8002d6e:	48ae      	ldr	r0, [pc, #696]	@ (8003028 <hashInit.0+0x17b0>)
 8002d70:	f7fe fcd4 	bl	800171c <insert.1>
		insert("PAOR", "poor");
 8002d74:	46a4      	mov	ip, r4
 8002d76:	49ad      	ldr	r1, [pc, #692]	@ (800302c <hashInit.0+0x17b4>)
 8002d78:	48ad      	ldr	r0, [pc, #692]	@ (8003030 <hashInit.0+0x17b8>)
 8002d7a:	f7fe fccf 	bl	800171c <insert.1>
		insert("TK*T", "death");
 8002d7e:	46a4      	mov	ip, r4
 8002d80:	49ac      	ldr	r1, [pc, #688]	@ (8003034 <hashInit.0+0x17bc>)
 8002d82:	48ad      	ldr	r0, [pc, #692]	@ (8003038 <hashInit.0+0x17c0>)
 8002d84:	f7fe fcca 	bl	800171c <insert.1>
		insert("STAOD", "stood");
 8002d88:	46a4      	mov	ip, r4
 8002d8a:	49ac      	ldr	r1, [pc, #688]	@ (800303c <hashInit.0+0x17c4>)
 8002d8c:	48ac      	ldr	r0, [pc, #688]	@ (8003040 <hashInit.0+0x17c8>)
 8002d8e:	f7fe fcc5 	bl	800171c <insert.1>
		insert("TPORPL", "form");
 8002d92:	46a4      	mov	ip, r4
 8002d94:	49ab      	ldr	r1, [pc, #684]	@ (8003044 <hashInit.0+0x17cc>)
 8002d96:	48ac      	ldr	r0, [pc, #688]	@ (8003048 <hashInit.0+0x17d0>)
 8002d98:	f7fe fcc0 	bl	800171c <insert.1>
		insert("W-PB", "within");
 8002d9c:	46a4      	mov	ip, r4
 8002d9e:	49ab      	ldr	r1, [pc, #684]	@ (800304c <hashInit.0+0x17d4>)
 8002da0:	48ab      	ldr	r0, [pc, #684]	@ (8003050 <hashInit.0+0x17d8>)
 8002da2:	f7fe fcbb 	bl	800171c <insert.1>
		insert("TOGT", "together");
 8002da6:	46a4      	mov	ip, r4
 8002da8:	49aa      	ldr	r1, [pc, #680]	@ (8003054 <hashInit.0+0x17dc>)
 8002daa:	48ab      	ldr	r0, [pc, #684]	@ (8003058 <hashInit.0+0x17e0>)
 8002dac:	f7fe fcb6 	bl	800171c <insert.1>
		insert("TEUL", "till");
 8002db0:	46a4      	mov	ip, r4
 8002db2:	49aa      	ldr	r1, [pc, #680]	@ (800305c <hashInit.0+0x17e4>)
 8002db4:	48aa      	ldr	r0, [pc, #680]	@ (8003060 <hashInit.0+0x17e8>)
 8002db6:	f7fe fcb1 	bl	800171c <insert.1>
		insert("THAO*EU", "thy");
 8002dba:	46a4      	mov	ip, r4
 8002dbc:	49a9      	ldr	r1, [pc, #676]	@ (8003064 <hashInit.0+0x17ec>)
 8002dbe:	48aa      	ldr	r0, [pc, #680]	@ (8003068 <hashInit.0+0x17f0>)
 8002dc0:	f7fe fcac 	bl	800171c <insert.1>
		insert("HRARPBLG", "large");
 8002dc4:	46a4      	mov	ip, r4
 8002dc6:	49a9      	ldr	r1, [pc, #676]	@ (800306c <hashInit.0+0x17f4>)
 8002dc8:	48a9      	ldr	r0, [pc, #676]	@ (8003070 <hashInit.0+0x17f8>)
 8002dca:	f7fe fca7 	bl	800171c <insert.1>
		insert("PHAERT", "matter");
 8002dce:	46a4      	mov	ip, r4
 8002dd0:	49a8      	ldr	r1, [pc, #672]	@ (8003074 <hashInit.0+0x17fc>)
 8002dd2:	48a9      	ldr	r0, [pc, #676]	@ (8003078 <hashInit.0+0x1800>)
 8002dd4:	f7fe fca2 	bl	800171c <insert.1>
		insert("KEUPBD", "kind");
 8002dd8:	46a4      	mov	ip, r4
 8002dda:	49a8      	ldr	r1, [pc, #672]	@ (800307c <hashInit.0+0x1804>)
 8002ddc:	48a8      	ldr	r0, [pc, #672]	@ (8003080 <hashInit.0+0x1808>)
 8002dde:	f7fe fc9d 	bl	800171c <insert.1>
		insert("OFPB", "often");
 8002de2:	46a4      	mov	ip, r4
 8002de4:	49a7      	ldr	r1, [pc, #668]	@ (8003084 <hashInit.0+0x180c>)
 8002de6:	48a8      	ldr	r0, [pc, #672]	@ (8003088 <hashInit.0+0x1810>)
 8002de8:	f7fe fc98 	bl	800171c <insert.1>
		insert("SERPB", "certain");
 8002dec:	46a4      	mov	ip, r4
 8002dee:	49a7      	ldr	r1, [pc, #668]	@ (800308c <hashInit.0+0x1814>)
 8002df0:	48a7      	ldr	r0, [pc, #668]	@ (8003090 <hashInit.0+0x1818>)
 8002df2:	f7fe fc93 	bl	800171c <insert.1>
		insert("H*ERS", "herself");
 8002df6:	46a4      	mov	ip, r4
 8002df8:	49a6      	ldr	r1, [pc, #664]	@ (8003094 <hashInit.0+0x181c>)
 8002dfa:	48a7      	ldr	r0, [pc, #668]	@ (8003098 <hashInit.0+0x1820>)
 8002dfc:	f7fe fc8e 	bl	800171c <insert.1>
		insert("KWRAOER", "year");
 8002e00:	46a4      	mov	ip, r4
 8002e02:	49a6      	ldr	r1, [pc, #664]	@ (800309c <hashInit.0+0x1824>)
 8002e04:	48a6      	ldr	r0, [pc, #664]	@ (80030a0 <hashInit.0+0x1828>)
 8002e06:	f7fe fc89 	bl	800171c <insert.1>
		insert("TPREPBD", "friend");
 8002e0a:	46a4      	mov	ip, r4
 8002e0c:	49a5      	ldr	r1, [pc, #660]	@ (80030a4 <hashInit.0+0x182c>)
 8002e0e:	48a6      	ldr	r0, [pc, #664]	@ (80030a8 <hashInit.0+0x1830>)
 8002e10:	f7fe fc84 	bl	800171c <insert.1>
		insert("HAF", "half");
 8002e14:	46a4      	mov	ip, r4
 8002e16:	49a5      	ldr	r1, [pc, #660]	@ (80030ac <hashInit.0+0x1834>)
 8002e18:	48a5      	ldr	r0, [pc, #660]	@ (80030b0 <hashInit.0+0x1838>)
 8002e1a:	f7fe fc7f 	bl	800171c <insert.1>
		insert("ORD", "order");
 8002e1e:	46a4      	mov	ip, r4
 8002e20:	49a4      	ldr	r1, [pc, #656]	@ (80030b4 <hashInit.0+0x183c>)
 8002e22:	48a5      	ldr	r0, [pc, #660]	@ (80030b8 <hashInit.0+0x1840>)
 8002e24:	f7fe fc7a 	bl	800171c <insert.1>
		insert("ROUPBD", "round");
 8002e28:	46a4      	mov	ip, r4
 8002e2a:	49a4      	ldr	r1, [pc, #656]	@ (80030bc <hashInit.0+0x1844>)
 8002e2c:	48a4      	ldr	r0, [pc, #656]	@ (80030c0 <hashInit.0+0x1848>)
 8002e2e:	f7fe fc75 	bl	800171c <insert.1>
		insert("TRAOU", "true");
 8002e32:	46a4      	mov	ip, r4
 8002e34:	49a3      	ldr	r1, [pc, #652]	@ (80030c4 <hashInit.0+0x184c>)
 8002e36:	48a4      	ldr	r0, [pc, #656]	@ (80030c8 <hashInit.0+0x1850>)
 8002e38:	f7fe fc70 	bl	800171c <insert.1>
		insert("TPHEUG", "anything");
 8002e3c:	46a4      	mov	ip, r4
 8002e3e:	49a3      	ldr	r1, [pc, #652]	@ (80030cc <hashInit.0+0x1854>)
 8002e40:	48a3      	ldr	r0, [pc, #652]	@ (80030d0 <hashInit.0+0x1858>)
 8002e42:	f7fe fc6b 	bl	800171c <insert.1>
		insert("KAOEP", "keep");
 8002e46:	46a4      	mov	ip, r4
 8002e48:	49a2      	ldr	r1, [pc, #648]	@ (80030d4 <hashInit.0+0x185c>)
 8002e4a:	48a3      	ldr	r0, [pc, #652]	@ (80030d8 <hashInit.0+0x1860>)
 8002e4c:	f7fe fc66 	bl	800171c <insert.1>
		insert("SEPBT", "sent");
 8002e50:	46a4      	mov	ip, r4
 8002e52:	49a2      	ldr	r1, [pc, #648]	@ (80030dc <hashInit.0+0x1864>)
 8002e54:	48a2      	ldr	r0, [pc, #648]	@ (80030e0 <hashInit.0+0x1868>)
 8002e56:	f7fe fc61 	bl	800171c <insert.1>
		insert("WAOEUF", "wife");
 8002e5a:	46a4      	mov	ip, r4
 8002e5c:	49a1      	ldr	r1, [pc, #644]	@ (80030e4 <hashInit.0+0x186c>)
 8002e5e:	48a2      	ldr	r0, [pc, #648]	@ (80030e8 <hashInit.0+0x1870>)
 8002e60:	f7fe fc5c 	bl	800171c <insert.1>
		insert("PHAOEPBS", "means");
 8002e64:	46a4      	mov	ip, r4
 8002e66:	49a1      	ldr	r1, [pc, #644]	@ (80030ec <hashInit.0+0x1874>)
 8002e68:	48a1      	ldr	r0, [pc, #644]	@ (80030f0 <hashInit.0+0x1878>)
 8002e6a:	f7fe fc57 	bl	800171c <insert.1>
		insert("PWHREF", "believe");
 8002e6e:	46a4      	mov	ip, r4
 8002e70:	49a0      	ldr	r1, [pc, #640]	@ (80030f4 <hashInit.0+0x187c>)
 8002e72:	48a1      	ldr	r0, [pc, #644]	@ (80030f8 <hashInit.0+0x1880>)
 8002e74:	f7fe fc52 	bl	800171c <insert.1>
		insert("PAFD", "passed");
 8002e78:	46a4      	mov	ip, r4
 8002e7a:	49a0      	ldr	r1, [pc, #640]	@ (80030fc <hashInit.0+0x1884>)
 8002e7c:	48a0      	ldr	r0, [pc, #640]	@ (8003100 <hashInit.0+0x1888>)
 8002e7e:	f7fe fc4d 	bl	800171c <insert.1>
		insert("TPAOET", "feet");
 8002e82:	46a4      	mov	ip, r4
 8002e84:	499f      	ldr	r1, [pc, #636]	@ (8003104 <hashInit.0+0x188c>)
 8002e86:	48a0      	ldr	r0, [pc, #640]	@ (8003108 <hashInit.0+0x1890>)
 8002e88:	f7fe fc48 	bl	800171c <insert.1>
		insert("TPHAOER", "near");
 8002e8c:	46a4      	mov	ip, r4
 8002e8e:	499f      	ldr	r1, [pc, #636]	@ (800310c <hashInit.0+0x1894>)
 8002e90:	489f      	ldr	r0, [pc, #636]	@ (8003110 <hashInit.0+0x1898>)
 8002e92:	f7fe fc43 	bl	800171c <insert.1>
		insert("PHREUBG", "public");
 8002e96:	46a4      	mov	ip, r4
 8002e98:	499e      	ldr	r1, [pc, #632]	@ (8003114 <hashInit.0+0x189c>)
 8002e9a:	489f      	ldr	r0, [pc, #636]	@ (8003118 <hashInit.0+0x18a0>)
 8002e9c:	f7fe fc3e 	bl	800171c <insert.1>
		insert("STAEUT", "state");
 8002ea0:	46a4      	mov	ip, r4
 8002ea2:	499e      	ldr	r1, [pc, #632]	@ (800311c <hashInit.0+0x18a4>)
 8002ea4:	489e      	ldr	r0, [pc, #632]	@ (8003120 <hashInit.0+0x18a8>)
 8002ea6:	f7fe fc39 	bl	800171c <insert.1>
		insert("SOPB", "son");
 8002eaa:	46a4      	mov	ip, r4
 8002eac:	499d      	ldr	r1, [pc, #628]	@ (8003124 <hashInit.0+0x18ac>)
 8002eae:	489e      	ldr	r0, [pc, #632]	@ (8003128 <hashInit.0+0x18b0>)
 8002eb0:	f7fe fc34 	bl	800171c <insert.1>
		insert("HUPBD", "hundred");
 8002eb4:	46a4      	mov	ip, r4
 8002eb6:	499d      	ldr	r1, [pc, #628]	@ (800312c <hashInit.0+0x18b4>)
 8002eb8:	489d      	ldr	r0, [pc, #628]	@ (8003130 <hashInit.0+0x18b8>)
 8002eba:	f7fe fc2f 	bl	800171c <insert.1>
		insert("KHEURPB", "children");
 8002ebe:	46a4      	mov	ip, r4
 8002ec0:	499c      	ldr	r1, [pc, #624]	@ (8003134 <hashInit.0+0x18bc>)
 8002ec2:	489d      	ldr	r0, [pc, #628]	@ (8003138 <hashInit.0+0x18c0>)
 8002ec4:	f7fe fc2a 	bl	800171c <insert.1>
		insert("THUS", "thus");
 8002ec8:	46a4      	mov	ip, r4
 8002eca:	499c      	ldr	r1, [pc, #624]	@ (800313c <hashInit.0+0x18c4>)
 8002ecc:	489c      	ldr	r0, [pc, #624]	@ (8003140 <hashInit.0+0x18c8>)
 8002ece:	f7fe fc25 	bl	800171c <insert.1>
		insert("HOEP", "hope");
 8002ed2:	46a4      	mov	ip, r4
 8002ed4:	499b      	ldr	r1, [pc, #620]	@ (8003144 <hashInit.0+0x18cc>)
 8002ed6:	489c      	ldr	r0, [pc, #624]	@ (8003148 <hashInit.0+0x18d0>)
 8002ed8:	f7fe fc20 	bl	800171c <insert.1>
		insert("A/HROEPB", "alone");
 8002edc:	46a4      	mov	ip, r4
 8002ede:	499b      	ldr	r1, [pc, #620]	@ (800314c <hashInit.0+0x18d4>)
 8002ee0:	489b      	ldr	r0, [pc, #620]	@ (8003150 <hashInit.0+0x18d8>)
 8002ee2:	f7fe fc1b 	bl	800171c <insert.1>
		insert("PWOF", "above");
 8002ee6:	46a4      	mov	ip, r4
 8002ee8:	499a      	ldr	r1, [pc, #616]	@ (8003154 <hashInit.0+0x18dc>)
 8002eea:	489b      	ldr	r0, [pc, #620]	@ (8003158 <hashInit.0+0x18e0>)
 8002eec:	f7fe fc16 	bl	800171c <insert.1>
		insert("KAEUS", "case");
 8002ef0:	46a4      	mov	ip, r4
 8002ef2:	499a      	ldr	r1, [pc, #616]	@ (800315c <hashInit.0+0x18e4>)
 8002ef4:	489a      	ldr	r0, [pc, #616]	@ (8003160 <hashInit.0+0x18e8>)
 8002ef6:	f7fe fc11 	bl	800171c <insert.1>
		insert("TKAER", "dear");
 8002efa:	46a4      	mov	ip, r4
 8002efc:	4999      	ldr	r1, [pc, #612]	@ (8003164 <hashInit.0+0x18ec>)
 8002efe:	489a      	ldr	r0, [pc, #616]	@ (8003168 <hashInit.0+0x18f0>)
 8002f00:	f7fe fc0c 	bl	800171c <insert.1>
		insert("THAOE", "thee");
 8002f04:	46a4      	mov	ip, r4
 8002f06:	4999      	ldr	r1, [pc, #612]	@ (800316c <hashInit.0+0x18f4>)
 8002f08:	4899      	ldr	r0, [pc, #612]	@ (8003170 <hashInit.0+0x18f8>)
 8002f0a:	f7fe fc07 	bl	800171c <insert.1>
		insert("SEZ", "says");
 8002f0e:	46a4      	mov	ip, r4
 8002f10:	4998      	ldr	r1, [pc, #608]	@ (8003174 <hashInit.0+0x18fc>)
 8002f12:	4899      	ldr	r0, [pc, #612]	@ (8003178 <hashInit.0+0x1900>)
 8002f14:	f7fe fc02 	bl	800171c <insert.1>
		insert("PERPB", "person");
 8002f18:	46a4      	mov	ip, r4
 8002f1a:	4998      	ldr	r1, [pc, #608]	@ (800317c <hashInit.0+0x1904>)
 8002f1c:	4898      	ldr	r0, [pc, #608]	@ (8003180 <hashInit.0+0x1908>)
 8002f1e:	f7fe fbfd 	bl	800171c <insert.1>
		insert("HAOEU", "high");
 8002f22:	46a4      	mov	ip, r4
 8002f24:	4997      	ldr	r1, [pc, #604]	@ (8003184 <hashInit.0+0x190c>)
 8002f26:	4898      	ldr	r0, [pc, #608]	@ (8003188 <hashInit.0+0x1910>)
 8002f28:	f7fe fbf8 	bl	800171c <insert.1>
		insert("RAED", "read");
 8002f2c:	46a4      	mov	ip, r4
 8002f2e:	4997      	ldr	r1, [pc, #604]	@ (800318c <hashInit.0+0x1914>)
 8002f30:	4897      	ldr	r0, [pc, #604]	@ (8003190 <hashInit.0+0x1918>)
 8002f32:	f7fe fbf3 	bl	800171c <insert.1>
		insert("STEU", "city");
 8002f36:	46a4      	mov	ip, r4
 8002f38:	4996      	ldr	r1, [pc, #600]	@ (8003194 <hashInit.0+0x191c>)
 8002f3a:	4897      	ldr	r0, [pc, #604]	@ (8003198 <hashInit.0+0x1920>)
 8002f3c:	f7fe fbee 	bl	800171c <insert.1>
		insert("HR-R", "already");
 8002f40:	46a4      	mov	ip, r4
 8002f42:	4996      	ldr	r1, [pc, #600]	@ (800319c <hashInit.0+0x1924>)
 8002f44:	4896      	ldr	r0, [pc, #600]	@ (80031a0 <hashInit.0+0x1928>)
 8002f46:	f7fe fbe9 	bl	800171c <insert.1>
		insert("SAOEFD", "received");
 8002f4a:	46a4      	mov	ip, r4
 8002f4c:	4995      	ldr	r1, [pc, #596]	@ (80031a4 <hashInit.0+0x192c>)
 8002f4e:	4896      	ldr	r0, [pc, #600]	@ (80031a8 <hashInit.0+0x1930>)
 8002f50:	f7fe fbe4 	bl	800171c <insert.1>
		insert("TPABGT", "fact");
 8002f54:	46a4      	mov	ip, r4
 8002f56:	4995      	ldr	r1, [pc, #596]	@ (80031ac <hashInit.0+0x1934>)
 8002f58:	4895      	ldr	r0, [pc, #596]	@ (80031b0 <hashInit.0+0x1938>)
 8002f5a:	f7fe fbdf 	bl	800171c <insert.1>
		insert("TKPWOPB", "gone");
 8002f5e:	46a4      	mov	ip, r4
 8002f60:	4994      	ldr	r1, [pc, #592]	@ (80031b4 <hashInit.0+0x193c>)
 8002f62:	4895      	ldr	r0, [pc, #596]	@ (80031b8 <hashInit.0+0x1940>)
 8002f64:	f7fe fbda 	bl	800171c <insert.1>
		insert("TKPWEURL", "girl");
 8002f68:	46a4      	mov	ip, r4
 8002f6a:	4994      	ldr	r1, [pc, #592]	@ (80031bc <hashInit.0+0x1944>)
 8002f6c:	4894      	ldr	r0, [pc, #592]	@ (80031c0 <hashInit.0+0x1948>)
 8002f6e:	f7fe fbd5 	bl	800171c <insert.1>
		insert("TPHOEPB", "known");
 8002f72:	46a4      	mov	ip, r4
 8002f74:	4993      	ldr	r1, [pc, #588]	@ (80031c4 <hashInit.0+0x194c>)
 8002f76:	4894      	ldr	r0, [pc, #592]	@ (80031c8 <hashInit.0+0x1950>)
 8002f78:	f7fe fbd0 	bl	800171c <insert.1>
		insert("HAER", "hear");
 8002f7c:	46a4      	mov	ip, r4
 8002f7e:	4993      	ldr	r1, [pc, #588]	@ (80031cc <hashInit.0+0x1954>)
 8002f80:	4893      	ldr	r0, [pc, #588]	@ (80031d0 <hashInit.0+0x1958>)
 8002f82:	f7fe fbcb 	bl	800171c <insert.1>
		insert("TAOEUPLS", "times");
 8002f86:	46a4      	mov	ip, r4
 8002f88:	4992      	ldr	r1, [pc, #584]	@ (80031d4 <hashInit.0+0x195c>)
 8002f8a:	4893      	ldr	r0, [pc, #588]	@ (80031d8 <hashInit.0+0x1960>)
 8002f8c:	f7fe fbc6 	bl	800171c <insert.1>
		insert("HRAOEFT", "least");
 8002f90:	46a4      	mov	ip, r4
 8002f92:	4992      	ldr	r1, [pc, #584]	@ (80031dc <hashInit.0+0x1964>)
 8002f94:	4892      	ldr	r0, [pc, #584]	@ (80031e0 <hashInit.0+0x1968>)
 8002f96:	f7fe fbc1 	bl	800171c <insert.1>
		insert("PRAPS", "perhaps");
 8002f9a:	46a4      	mov	ip, r4
 8002f9c:	4991      	ldr	r1, [pc, #580]	@ (80031e4 <hashInit.0+0x196c>)
 8002f9e:	4892      	ldr	r0, [pc, #584]	@ (80031e8 <hashInit.0+0x1970>)
 8002fa0:	f7fe fbbc 	bl	800171c <insert.1>
		insert("SHUR", "sure");
 8002fa4:	46a4      	mov	ip, r4
 8002fa6:	4991      	ldr	r1, [pc, #580]	@ (80031ec <hashInit.0+0x1974>)
 8002fa8:	e122      	b.n	80031f0 <hashInit.0+0x1978>
 8002faa:	bf00      	nop
 8002fac:	0800e444 	.word	0x0800e444
 8002fb0:	0800e44c 	.word	0x0800e44c
 8002fb4:	0800e454 	.word	0x0800e454
 8002fb8:	0800e45c 	.word	0x0800e45c
 8002fbc:	0800e464 	.word	0x0800e464
 8002fc0:	0800e46c 	.word	0x0800e46c
 8002fc4:	0800e474 	.word	0x0800e474
 8002fc8:	0800e47c 	.word	0x0800e47c
 8002fcc:	0800e484 	.word	0x0800e484
 8002fd0:	0800e490 	.word	0x0800e490
 8002fd4:	0800e498 	.word	0x0800e498
 8002fd8:	0800e4a0 	.word	0x0800e4a0
 8002fdc:	0800e4a8 	.word	0x0800e4a8
 8002fe0:	0800e4b0 	.word	0x0800e4b0
 8002fe4:	0800e4b8 	.word	0x0800e4b8
 8002fe8:	0800e4c0 	.word	0x0800e4c0
 8002fec:	0800e4c8 	.word	0x0800e4c8
 8002ff0:	0800e4d0 	.word	0x0800e4d0
 8002ff4:	0800e4d8 	.word	0x0800e4d8
 8002ff8:	0800e4e0 	.word	0x0800e4e0
 8002ffc:	0800e4e8 	.word	0x0800e4e8
 8003000:	0800e4f0 	.word	0x0800e4f0
 8003004:	0800e4f8 	.word	0x0800e4f8
 8003008:	0800e500 	.word	0x0800e500
 800300c:	0800e508 	.word	0x0800e508
 8003010:	0800e510 	.word	0x0800e510
 8003014:	0800e518 	.word	0x0800e518
 8003018:	0800e520 	.word	0x0800e520
 800301c:	0800e528 	.word	0x0800e528
 8003020:	0800e530 	.word	0x0800e530
 8003024:	0800e538 	.word	0x0800e538
 8003028:	0800e540 	.word	0x0800e540
 800302c:	0800e548 	.word	0x0800e548
 8003030:	0800e550 	.word	0x0800e550
 8003034:	0800e558 	.word	0x0800e558
 8003038:	0800e560 	.word	0x0800e560
 800303c:	0800e568 	.word	0x0800e568
 8003040:	0800e570 	.word	0x0800e570
 8003044:	0800e578 	.word	0x0800e578
 8003048:	0800e580 	.word	0x0800e580
 800304c:	0800e588 	.word	0x0800e588
 8003050:	0800e590 	.word	0x0800e590
 8003054:	0800e598 	.word	0x0800e598
 8003058:	0800e5a4 	.word	0x0800e5a4
 800305c:	0800e5ac 	.word	0x0800e5ac
 8003060:	0800e5b4 	.word	0x0800e5b4
 8003064:	0800e5bc 	.word	0x0800e5bc
 8003068:	0800e5c0 	.word	0x0800e5c0
 800306c:	0800e5c8 	.word	0x0800e5c8
 8003070:	0800e5d0 	.word	0x0800e5d0
 8003074:	0800e5dc 	.word	0x0800e5dc
 8003078:	0800e5e4 	.word	0x0800e5e4
 800307c:	0800e5ec 	.word	0x0800e5ec
 8003080:	0800e5f4 	.word	0x0800e5f4
 8003084:	0800e5fc 	.word	0x0800e5fc
 8003088:	0800e604 	.word	0x0800e604
 800308c:	0800e60c 	.word	0x0800e60c
 8003090:	0800e614 	.word	0x0800e614
 8003094:	0800e61c 	.word	0x0800e61c
 8003098:	0800e624 	.word	0x0800e624
 800309c:	0800e62c 	.word	0x0800e62c
 80030a0:	0800e634 	.word	0x0800e634
 80030a4:	0800e63c 	.word	0x0800e63c
 80030a8:	0800e644 	.word	0x0800e644
 80030ac:	0800e64c 	.word	0x0800e64c
 80030b0:	0800e654 	.word	0x0800e654
 80030b4:	0800e658 	.word	0x0800e658
 80030b8:	0800e660 	.word	0x0800e660
 80030bc:	0800e664 	.word	0x0800e664
 80030c0:	0800e66c 	.word	0x0800e66c
 80030c4:	0800e674 	.word	0x0800e674
 80030c8:	0800e67c 	.word	0x0800e67c
 80030cc:	0800e684 	.word	0x0800e684
 80030d0:	0800e690 	.word	0x0800e690
 80030d4:	0800e698 	.word	0x0800e698
 80030d8:	0800e6a0 	.word	0x0800e6a0
 80030dc:	0800e6a8 	.word	0x0800e6a8
 80030e0:	0800e6b0 	.word	0x0800e6b0
 80030e4:	0800e6b8 	.word	0x0800e6b8
 80030e8:	0800e6c0 	.word	0x0800e6c0
 80030ec:	0800e6c8 	.word	0x0800e6c8
 80030f0:	0800e6d0 	.word	0x0800e6d0
 80030f4:	0800e6dc 	.word	0x0800e6dc
 80030f8:	0800e6e4 	.word	0x0800e6e4
 80030fc:	0800e6ec 	.word	0x0800e6ec
 8003100:	0800e6f4 	.word	0x0800e6f4
 8003104:	0800e6fc 	.word	0x0800e6fc
 8003108:	0800e704 	.word	0x0800e704
 800310c:	0800e70c 	.word	0x0800e70c
 8003110:	0800e714 	.word	0x0800e714
 8003114:	0800e71c 	.word	0x0800e71c
 8003118:	0800e724 	.word	0x0800e724
 800311c:	0800e72c 	.word	0x0800e72c
 8003120:	0800e734 	.word	0x0800e734
 8003124:	0800e73c 	.word	0x0800e73c
 8003128:	0800e740 	.word	0x0800e740
 800312c:	0800e748 	.word	0x0800e748
 8003130:	0800e750 	.word	0x0800e750
 8003134:	0800e758 	.word	0x0800e758
 8003138:	0800e764 	.word	0x0800e764
 800313c:	0800e76c 	.word	0x0800e76c
 8003140:	0800e774 	.word	0x0800e774
 8003144:	0800e77c 	.word	0x0800e77c
 8003148:	0800e784 	.word	0x0800e784
 800314c:	0800e78c 	.word	0x0800e78c
 8003150:	0800e794 	.word	0x0800e794
 8003154:	0800e7a0 	.word	0x0800e7a0
 8003158:	0800e7a8 	.word	0x0800e7a8
 800315c:	0800e7b0 	.word	0x0800e7b0
 8003160:	0800e7b8 	.word	0x0800e7b8
 8003164:	0800e7c0 	.word	0x0800e7c0
 8003168:	0800e7c8 	.word	0x0800e7c8
 800316c:	0800e7d0 	.word	0x0800e7d0
 8003170:	0800e7d8 	.word	0x0800e7d8
 8003174:	0800e7e0 	.word	0x0800e7e0
 8003178:	0800e7e8 	.word	0x0800e7e8
 800317c:	0800e7ec 	.word	0x0800e7ec
 8003180:	0800e7f4 	.word	0x0800e7f4
 8003184:	0800e7fc 	.word	0x0800e7fc
 8003188:	0800e804 	.word	0x0800e804
 800318c:	0800e80c 	.word	0x0800e80c
 8003190:	0800e814 	.word	0x0800e814
 8003194:	0800e81c 	.word	0x0800e81c
 8003198:	0800e824 	.word	0x0800e824
 800319c:	0800e82c 	.word	0x0800e82c
 80031a0:	0800e834 	.word	0x0800e834
 80031a4:	0800e83c 	.word	0x0800e83c
 80031a8:	0800e848 	.word	0x0800e848
 80031ac:	0800e850 	.word	0x0800e850
 80031b0:	0800e858 	.word	0x0800e858
 80031b4:	0800e860 	.word	0x0800e860
 80031b8:	0800e868 	.word	0x0800e868
 80031bc:	0800e870 	.word	0x0800e870
 80031c0:	0800e878 	.word	0x0800e878
 80031c4:	0800e884 	.word	0x0800e884
 80031c8:	0800e88c 	.word	0x0800e88c
 80031cc:	0800e894 	.word	0x0800e894
 80031d0:	0800e89c 	.word	0x0800e89c
 80031d4:	0800e8a4 	.word	0x0800e8a4
 80031d8:	0800e8ac 	.word	0x0800e8ac
 80031dc:	0800e8b8 	.word	0x0800e8b8
 80031e0:	0800e8c0 	.word	0x0800e8c0
 80031e4:	0800e8c8 	.word	0x0800e8c8
 80031e8:	0800e8d0 	.word	0x0800e8d0
 80031ec:	0800e8d8 	.word	0x0800e8d8
 80031f0:	48b5      	ldr	r0, [pc, #724]	@ (80034c8 <hashInit.0+0x1c50>)
 80031f2:	f7fe fa93 	bl	800171c <insert.1>
		insert("TPHAOEPBD", "indeed");
 80031f6:	46a4      	mov	ip, r4
 80031f8:	49b4      	ldr	r1, [pc, #720]	@ (80034cc <hashInit.0+0x1c54>)
 80031fa:	48b5      	ldr	r0, [pc, #724]	@ (80034d0 <hashInit.0+0x1c58>)
 80031fc:	f7fe fa8e 	bl	800171c <insert.1>
		insert("TKPWHREURB", "English");
 8003200:	46a4      	mov	ip, r4
 8003202:	49b4      	ldr	r1, [pc, #720]	@ (80034d4 <hashInit.0+0x1c5c>)
 8003204:	48b4      	ldr	r0, [pc, #720]	@ (80034d8 <hashInit.0+0x1c60>)
 8003206:	f7fe fa89 	bl	800171c <insert.1>
		insert("OEP", "open");
 800320a:	46a4      	mov	ip, r4
 800320c:	49b3      	ldr	r1, [pc, #716]	@ (80034dc <hashInit.0+0x1c64>)
 800320e:	48b4      	ldr	r0, [pc, #720]	@ (80034e0 <hashInit.0+0x1c68>)
 8003210:	f7fe fa84 	bl	800171c <insert.1>
		insert("PWO*ED", "body");
 8003214:	46a4      	mov	ip, r4
 8003216:	49b3      	ldr	r1, [pc, #716]	@ (80034e4 <hashInit.0+0x1c6c>)
 8003218:	48b3      	ldr	r0, [pc, #716]	@ (80034e8 <hashInit.0+0x1c70>)
 800321a:	f7fe fa7f 	bl	800171c <insert.1>
		insert("T/SEFL", "itself");
 800321e:	46a4      	mov	ip, r4
 8003220:	49b2      	ldr	r1, [pc, #712]	@ (80034ec <hashInit.0+0x1c74>)
 8003222:	48b3      	ldr	r0, [pc, #716]	@ (80034f0 <hashInit.0+0x1c78>)
 8003224:	f7fe fa7a 	bl	800171c <insert.1>
		insert("A/HROPBG", "along");
 8003228:	46a4      	mov	ip, r4
 800322a:	49b2      	ldr	r1, [pc, #712]	@ (80034f4 <hashInit.0+0x1c7c>)
 800322c:	48b2      	ldr	r0, [pc, #712]	@ (80034f8 <hashInit.0+0x1c80>)
 800322e:	f7fe fa75 	bl	800171c <insert.1>
		insert("HRAPBD", "land");
 8003232:	46a4      	mov	ip, r4
 8003234:	49b1      	ldr	r1, [pc, #708]	@ (80034fc <hashInit.0+0x1c84>)
 8003236:	48b2      	ldr	r0, [pc, #712]	@ (8003500 <hashInit.0+0x1c88>)
 8003238:	f7fe fa70 	bl	800171c <insert.1>
		insert("RURPB", "return");
 800323c:	46a4      	mov	ip, r4
 800323e:	49b1      	ldr	r1, [pc, #708]	@ (8003504 <hashInit.0+0x1c8c>)
 8003240:	48b1      	ldr	r0, [pc, #708]	@ (8003508 <hashInit.0+0x1c90>)
 8003242:	f7fe fa6b 	bl	800171c <insert.1>
		insert("HREF", "leave");
 8003246:	46a4      	mov	ip, r4
 8003248:	49b0      	ldr	r1, [pc, #704]	@ (800350c <hashInit.0+0x1c94>)
 800324a:	48b1      	ldr	r0, [pc, #708]	@ (8003510 <hashInit.0+0x1c98>)
 800324c:	f7fe fa66 	bl	800171c <insert.1>
		insert("AEUR", "air");
 8003250:	46a4      	mov	ip, r4
 8003252:	49b0      	ldr	r1, [pc, #704]	@ (8003514 <hashInit.0+0x1c9c>)
 8003254:	48b0      	ldr	r0, [pc, #704]	@ (8003518 <hashInit.0+0x1ca0>)
 8003256:	f7fe fa61 	bl	800171c <insert.1>
		insert("TPHAEURT", "nature");
 800325a:	46a4      	mov	ip, r4
 800325c:	49af      	ldr	r1, [pc, #700]	@ (800351c <hashInit.0+0x1ca4>)
 800325e:	48b0      	ldr	r0, [pc, #704]	@ (8003520 <hashInit.0+0x1ca8>)
 8003260:	f7fe fa5c 	bl	800171c <insert.1>
		insert("AEPBS/-D", "answered");
 8003264:	46a4      	mov	ip, r4
 8003266:	49af      	ldr	r1, [pc, #700]	@ (8003524 <hashInit.0+0x1cac>)
 8003268:	48af      	ldr	r0, [pc, #700]	@ (8003528 <hashInit.0+0x1cb0>)
 800326a:	f7fe fa57 	bl	800171c <insert.1>
		insert("AOERT", "either");
 800326e:	46a4      	mov	ip, r4
 8003270:	49ae      	ldr	r1, [pc, #696]	@ (800352c <hashInit.0+0x1cb4>)
 8003272:	48af      	ldr	r0, [pc, #700]	@ (8003530 <hashInit.0+0x1cb8>)
 8003274:	f7fe fa52 	bl	800171c <insert.1>
		insert("HRAU", "law");
 8003278:	46a4      	mov	ip, r4
 800327a:	49ae      	ldr	r1, [pc, #696]	@ (8003534 <hashInit.0+0x1cbc>)
 800327c:	48ae      	ldr	r0, [pc, #696]	@ (8003538 <hashInit.0+0x1cc0>)
 800327e:	f7fe fa4d 	bl	800171c <insert.1>
		insert("HEP", "help");
 8003282:	46a4      	mov	ip, r4
 8003284:	49ad      	ldr	r1, [pc, #692]	@ (800353c <hashInit.0+0x1cc4>)
 8003286:	48ae      	ldr	r0, [pc, #696]	@ (8003540 <hashInit.0+0x1cc8>)
 8003288:	f7fe fa48 	bl	800171c <insert.1>
		insert("HRAEU", "lay");
 800328c:	46a4      	mov	ip, r4
 800328e:	49ad      	ldr	r1, [pc, #692]	@ (8003544 <hashInit.0+0x1ccc>)
 8003290:	48ad      	ldr	r0, [pc, #692]	@ (8003548 <hashInit.0+0x1cd0>)
 8003292:	f7fe fa43 	bl	800171c <insert.1>
		insert("POEUPBT", "point");
 8003296:	46a4      	mov	ip, r4
 8003298:	49ac      	ldr	r1, [pc, #688]	@ (800354c <hashInit.0+0x1cd4>)
 800329a:	48ad      	ldr	r0, [pc, #692]	@ (8003550 <hashInit.0+0x1cd8>)
 800329c:	f7fe fa3e 	bl	800171c <insert.1>
		insert("KHAOEULD", "child");
 80032a0:	46a4      	mov	ip, r4
 80032a2:	49ac      	ldr	r1, [pc, #688]	@ (8003554 <hashInit.0+0x1cdc>)
 80032a4:	48ac      	ldr	r0, [pc, #688]	@ (8003558 <hashInit.0+0x1ce0>)
 80032a6:	f7fe fa39 	bl	800171c <insert.1>
		insert("HRERT", "letter");
 80032aa:	46a4      	mov	ip, r4
 80032ac:	49ab      	ldr	r1, [pc, #684]	@ (800355c <hashInit.0+0x1ce4>)
 80032ae:	48ac      	ldr	r0, [pc, #688]	@ (8003560 <hashInit.0+0x1ce8>)
 80032b0:	f7fe fa34 	bl	800171c <insert.1>
		insert("TPOUR", "four");
 80032b4:	46a4      	mov	ip, r4
 80032b6:	49ab      	ldr	r1, [pc, #684]	@ (8003564 <hashInit.0+0x1cec>)
 80032b8:	48ab      	ldr	r0, [pc, #684]	@ (8003568 <hashInit.0+0x1cf0>)
 80032ba:	f7fe fa2f 	bl	800171c <insert.1>
		insert("WEURB", "wish");
 80032be:	46a4      	mov	ip, r4
 80032c0:	49aa      	ldr	r1, [pc, #680]	@ (800356c <hashInit.0+0x1cf4>)
 80032c2:	48ab      	ldr	r0, [pc, #684]	@ (8003570 <hashInit.0+0x1cf8>)
 80032c4:	f7fe fa2a 	bl	800171c <insert.1>
		insert("TPAOEUR", "fire");
 80032c8:	46a4      	mov	ip, r4
 80032ca:	49aa      	ldr	r1, [pc, #680]	@ (8003574 <hashInit.0+0x1cfc>)
 80032cc:	48aa      	ldr	r0, [pc, #680]	@ (8003578 <hashInit.0+0x1d00>)
 80032ce:	f7fe fa25 	bl	800171c <insert.1>
		insert("KRAOEUD", "cried");
 80032d2:	46a4      	mov	ip, r4
 80032d4:	49a9      	ldr	r1, [pc, #676]	@ (800357c <hashInit.0+0x1d04>)
 80032d6:	48aa      	ldr	r0, [pc, #680]	@ (8003580 <hashInit.0+0x1d08>)
 80032d8:	f7fe fa20 	bl	800171c <insert.1>
		insert("TWO/TWO*", "2");
 80032dc:	46a4      	mov	ip, r4
 80032de:	49a9      	ldr	r1, [pc, #676]	@ (8003584 <hashInit.0+0x1d0c>)
 80032e0:	48a9      	ldr	r0, [pc, #676]	@ (8003588 <hashInit.0+0x1d10>)
 80032e2:	f7fe fa1b 	bl	800171c <insert.1>
		insert("WEUPL", "women");
 80032e6:	46a4      	mov	ip, r4
 80032e8:	49a8      	ldr	r1, [pc, #672]	@ (800358c <hashInit.0+0x1d14>)
 80032ea:	48a9      	ldr	r0, [pc, #676]	@ (8003590 <hashInit.0+0x1d18>)
 80032ec:	f7fe fa16 	bl	800171c <insert.1>
		insert("SPAOEBG", "speak");
 80032f0:	46a4      	mov	ip, r4
 80032f2:	49a8      	ldr	r1, [pc, #672]	@ (8003594 <hashInit.0+0x1d1c>)
 80032f4:	48a8      	ldr	r0, [pc, #672]	@ (8003598 <hashInit.0+0x1d20>)
 80032f6:	f7fe fa11 	bl	800171c <insert.1>
		insert("TPHUPL", "number");
 80032fa:	46a4      	mov	ip, r4
 80032fc:	49a7      	ldr	r1, [pc, #668]	@ (800359c <hashInit.0+0x1d24>)
 80032fe:	48a8      	ldr	r0, [pc, #672]	@ (80035a0 <hashInit.0+0x1d28>)
 8003300:	f7fe fa0c 	bl	800171c <insert.1>
		insert("TH-FR", "therefore");
 8003304:	46a4      	mov	ip, r4
 8003306:	49a7      	ldr	r1, [pc, #668]	@ (80035a4 <hashInit.0+0x1d2c>)
 8003308:	48a7      	ldr	r0, [pc, #668]	@ (80035a8 <hashInit.0+0x1d30>)
 800330a:	f7fe fa07 	bl	800171c <insert.1>
		insert("HOUR", "hour");
 800330e:	46a4      	mov	ip, r4
 8003310:	49a6      	ldr	r1, [pc, #664]	@ (80035ac <hashInit.0+0x1d34>)
 8003312:	48a7      	ldr	r0, [pc, #668]	@ (80035b0 <hashInit.0+0x1d38>)
 8003314:	f7fe fa02 	bl	800171c <insert.1>
		insert("TPREPBDZ", "friends");
 8003318:	46a4      	mov	ip, r4
 800331a:	49a6      	ldr	r1, [pc, #664]	@ (80035b4 <hashInit.0+0x1d3c>)
 800331c:	48a6      	ldr	r0, [pc, #664]	@ (80035b8 <hashInit.0+0x1d40>)
 800331e:	f7fe f9fd 	bl	800171c <insert.1>
		insert("HELD", "held");
 8003322:	46a4      	mov	ip, r4
 8003324:	49a5      	ldr	r1, [pc, #660]	@ (80035bc <hashInit.0+0x1d44>)
 8003326:	48a6      	ldr	r0, [pc, #664]	@ (80035c0 <hashInit.0+0x1d48>)
 8003328:	f7fe f9f8 	bl	800171c <insert.1>
		insert("TPRAOE", "free");
 800332c:	46a4      	mov	ip, r4
 800332e:	49a5      	ldr	r1, [pc, #660]	@ (80035c4 <hashInit.0+0x1d4c>)
 8003330:	48a5      	ldr	r0, [pc, #660]	@ (80035c8 <hashInit.0+0x1d50>)
 8003332:	f7fe f9f3 	bl	800171c <insert.1>
		insert("WAR", "war");
 8003336:	46a4      	mov	ip, r4
 8003338:	49a4      	ldr	r1, [pc, #656]	@ (80035cc <hashInit.0+0x1d54>)
 800333a:	48a5      	ldr	r0, [pc, #660]	@ (80035d0 <hashInit.0+0x1d58>)
 800333c:	f7fe f9ee 	bl	800171c <insert.1>
		insert("TKURG", "during");
 8003340:	46a4      	mov	ip, r4
 8003342:	49a4      	ldr	r1, [pc, #656]	@ (80035d4 <hashInit.0+0x1d5c>)
 8003344:	48a4      	ldr	r0, [pc, #656]	@ (80035d8 <hashInit.0+0x1d60>)
 8003346:	f7fe f9e9 	bl	800171c <insert.1>
		insert("SEFRL", "several");
 800334a:	46a4      	mov	ip, r4
 800334c:	49a3      	ldr	r1, [pc, #652]	@ (80035dc <hashInit.0+0x1d64>)
 800334e:	48a4      	ldr	r0, [pc, #656]	@ (80035e0 <hashInit.0+0x1d68>)
 8003350:	f7fe f9e4 	bl	800171c <insert.1>
		insert("PWEUS", "business");
 8003354:	46a4      	mov	ip, r4
 8003356:	49a3      	ldr	r1, [pc, #652]	@ (80035e4 <hashInit.0+0x1d6c>)
 8003358:	48a3      	ldr	r0, [pc, #652]	@ (80035e8 <hashInit.0+0x1d70>)
 800335a:	f7fe f9df 	bl	800171c <insert.1>
		insert("WHR", "whether");
 800335e:	46a4      	mov	ip, r4
 8003360:	49a2      	ldr	r1, [pc, #648]	@ (80035ec <hashInit.0+0x1d74>)
 8003362:	48a3      	ldr	r0, [pc, #652]	@ (80035f0 <hashInit.0+0x1d78>)
 8003364:	f7fe f9da 	bl	800171c <insert.1>
		insert("*E/R*", "er");
 8003368:	46a4      	mov	ip, r4
 800336a:	49a2      	ldr	r1, [pc, #648]	@ (80035f4 <hashInit.0+0x1d7c>)
 800336c:	48a2      	ldr	r0, [pc, #648]	@ (80035f8 <hashInit.0+0x1d80>)
 800336e:	f7fe f9d5 	bl	800171c <insert.1>
		insert("PHAERPB", "manner");
 8003372:	46a4      	mov	ip, r4
 8003374:	49a1      	ldr	r1, [pc, #644]	@ (80035fc <hashInit.0+0x1d84>)
 8003376:	48a2      	ldr	r0, [pc, #648]	@ (8003600 <hashInit.0+0x1d88>)
 8003378:	f7fe f9d0 	bl	800171c <insert.1>
		insert("SEBGD", "second");
 800337c:	46a4      	mov	ip, r4
 800337e:	49a1      	ldr	r1, [pc, #644]	@ (8003604 <hashInit.0+0x1d8c>)
 8003380:	48a1      	ldr	r0, [pc, #644]	@ (8003608 <hashInit.0+0x1d90>)
 8003382:	f7fe f9cb 	bl	800171c <insert.1>
		insert("R-PB", "reason");
 8003386:	46a4      	mov	ip, r4
 8003388:	49a0      	ldr	r1, [pc, #640]	@ (800360c <hashInit.0+0x1d94>)
 800338a:	48a1      	ldr	r0, [pc, #644]	@ (8003610 <hashInit.0+0x1d98>)
 800338c:	f7fe f9c6 	bl	800171c <insert.1>
		insert("RE/PHRAOEUD", "replied");
 8003390:	46a4      	mov	ip, r4
 8003392:	49a0      	ldr	r1, [pc, #640]	@ (8003614 <hashInit.0+0x1d9c>)
 8003394:	48a0      	ldr	r0, [pc, #640]	@ (8003618 <hashInit.0+0x1da0>)
 8003396:	f7fe f9c1 	bl	800171c <insert.1>
		insert("AOUPBTD", "united");
 800339a:	46a4      	mov	ip, r4
 800339c:	499f      	ldr	r1, [pc, #636]	@ (800361c <hashInit.0+0x1da4>)
 800339e:	48a0      	ldr	r0, [pc, #640]	@ (8003620 <hashInit.0+0x1da8>)
 80033a0:	f7fe f9bc 	bl	800171c <insert.1>
		insert("KAUL", "call");
 80033a4:	46a4      	mov	ip, r4
 80033a6:	499f      	ldr	r1, [pc, #636]	@ (8003624 <hashInit.0+0x1dac>)
 80033a8:	489f      	ldr	r0, [pc, #636]	@ (8003628 <hashInit.0+0x1db0>)
 80033aa:	f7fe f9b7 	bl	800171c <insert.1>
		insert("SKWREPBL", "general");
 80033ae:	46a4      	mov	ip, r4
 80033b0:	499e      	ldr	r1, [pc, #632]	@ (800362c <hashInit.0+0x1db4>)
 80033b2:	489f      	ldr	r0, [pc, #636]	@ (8003630 <hashInit.0+0x1db8>)
 80033b4:	f7fe f9b2 	bl	800171c <insert.1>
		insert("KWR", "why");
 80033b8:	46a4      	mov	ip, r4
 80033ba:	499e      	ldr	r1, [pc, #632]	@ (8003634 <hashInit.0+0x1dbc>)
 80033bc:	489e      	ldr	r0, [pc, #632]	@ (8003638 <hashInit.0+0x1dc0>)
 80033be:	f7fe f9ad 	bl	800171c <insert.1>
		insert("HEUPBD", "behind");
 80033c2:	46a4      	mov	ip, r4
 80033c4:	499d      	ldr	r1, [pc, #628]	@ (800363c <hashInit.0+0x1dc4>)
 80033c6:	489e      	ldr	r0, [pc, #632]	@ (8003640 <hashInit.0+0x1dc8>)
 80033c8:	f7fe f9a8 	bl	800171c <insert.1>
		insert("PWAEUPL", "became");
 80033cc:	46a4      	mov	ip, r4
 80033ce:	499d      	ldr	r1, [pc, #628]	@ (8003644 <hashInit.0+0x1dcc>)
 80033d0:	489d      	ldr	r0, [pc, #628]	@ (8003648 <hashInit.0+0x1dd0>)
 80033d2:	f7fe f9a3 	bl	800171c <insert.1>
		insert("SKWROPB", "John");
 80033d6:	46a4      	mov	ip, r4
 80033d8:	499c      	ldr	r1, [pc, #624]	@ (800364c <hashInit.0+0x1dd4>)
 80033da:	489d      	ldr	r0, [pc, #628]	@ (8003650 <hashInit.0+0x1dd8>)
 80033dc:	f7fe f99e 	bl	800171c <insert.1>
		insert("PW-BG", "become");
 80033e0:	46a4      	mov	ip, r4
 80033e2:	499c      	ldr	r1, [pc, #624]	@ (8003654 <hashInit.0+0x1ddc>)
 80033e4:	489c      	ldr	r0, [pc, #624]	@ (8003658 <hashInit.0+0x1de0>)
 80033e6:	f7fe f999 	bl	800171c <insert.1>
		insert("TKED", "dead");
 80033ea:	46a4      	mov	ip, r4
 80033ec:	499b      	ldr	r1, [pc, #620]	@ (800365c <hashInit.0+0x1de4>)
 80033ee:	489c      	ldr	r0, [pc, #624]	@ (8003660 <hashInit.0+0x1de8>)
 80033f0:	f7fe f994 	bl	800171c <insert.1>
		insert("*ERT", "earth");
 80033f4:	46a4      	mov	ip, r4
 80033f6:	499b      	ldr	r1, [pc, #620]	@ (8003664 <hashInit.0+0x1dec>)
 80033f8:	489b      	ldr	r0, [pc, #620]	@ (8003668 <hashInit.0+0x1df0>)
 80033fa:	f7fe f98f 	bl	800171c <insert.1>
		insert("PWOEU", "boy");
 80033fe:	46a4      	mov	ip, r4
 8003400:	499a      	ldr	r1, [pc, #616]	@ (800366c <hashInit.0+0x1df4>)
 8003402:	489b      	ldr	r0, [pc, #620]	@ (8003670 <hashInit.0+0x1df8>)
 8003404:	f7fe f98a 	bl	800171c <insert.1>
		insert("HRO*S", "lost");
 8003408:	46a4      	mov	ip, r4
 800340a:	499a      	ldr	r1, [pc, #616]	@ (8003674 <hashInit.0+0x1dfc>)
 800340c:	489a      	ldr	r0, [pc, #616]	@ (8003678 <hashInit.0+0x1e00>)
 800340e:	f7fe f985 	bl	800171c <insert.1>
		insert("TPO*RT", "forth");
 8003412:	46a4      	mov	ip, r4
 8003414:	4999      	ldr	r1, [pc, #612]	@ (800367c <hashInit.0+0x1e04>)
 8003416:	489a      	ldr	r0, [pc, #616]	@ (8003680 <hashInit.0+0x1e08>)
 8003418:	f7fe f980 	bl	800171c <insert.1>
		insert("THOUD", "thousand");
 800341c:	46a4      	mov	ip, r4
 800341e:	4999      	ldr	r1, [pc, #612]	@ (8003684 <hashInit.0+0x1e0c>)
 8003420:	4899      	ldr	r0, [pc, #612]	@ (8003688 <hashInit.0+0x1e10>)
 8003422:	f7fe f97b 	bl	800171c <insert.1>
		insert("HRAOG", "looking");
 8003426:	46a4      	mov	ip, r4
 8003428:	4998      	ldr	r1, [pc, #608]	@ (800368c <hashInit.0+0x1e14>)
 800342a:	4899      	ldr	r0, [pc, #612]	@ (8003690 <hashInit.0+0x1e18>)
 800342c:	f7fe f976 	bl	800171c <insert.1>
		insert("AOEUL", "I'll");
 8003430:	46a4      	mov	ip, r4
 8003432:	4998      	ldr	r1, [pc, #608]	@ (8003694 <hashInit.0+0x1e1c>)
 8003434:	4898      	ldr	r0, [pc, #608]	@ (8003698 <hashInit.0+0x1e20>)
 8003436:	f7fe f971 	bl	800171c <insert.1>
		insert("TPAEPL", "family");
 800343a:	46a4      	mov	ip, r4
 800343c:	4997      	ldr	r1, [pc, #604]	@ (800369c <hashInit.0+0x1e24>)
 800343e:	4898      	ldr	r0, [pc, #608]	@ (80036a0 <hashInit.0+0x1e28>)
 8003440:	f7fe f96c 	bl	800171c <insert.1>
		insert("SOUL", "soul");
 8003444:	46a4      	mov	ip, r4
 8003446:	4997      	ldr	r1, [pc, #604]	@ (80036a4 <hashInit.0+0x1e2c>)
 8003448:	4897      	ldr	r0, [pc, #604]	@ (80036a8 <hashInit.0+0x1e30>)
 800344a:	f7fe f967 	bl	800171c <insert.1>
		insert("TPAOEL", "feel");
 800344e:	46a4      	mov	ip, r4
 8003450:	4996      	ldr	r1, [pc, #600]	@ (80036ac <hashInit.0+0x1e34>)
 8003452:	4897      	ldr	r0, [pc, #604]	@ (80036b0 <hashInit.0+0x1e38>)
 8003454:	f7fe f962 	bl	800171c <insert.1>
		insert("KO*G", "coming");
 8003458:	46a4      	mov	ip, r4
 800345a:	4996      	ldr	r1, [pc, #600]	@ (80036b4 <hashInit.0+0x1e3c>)
 800345c:	4896      	ldr	r0, [pc, #600]	@ (80036b8 <hashInit.0+0x1e40>)
 800345e:	f7fe f95d 	bl	800171c <insert.1>
		insert("TKPWHRAEPBD", "England");
 8003462:	46a4      	mov	ip, r4
 8003464:	4995      	ldr	r1, [pc, #596]	@ (80036bc <hashInit.0+0x1e44>)
 8003466:	4896      	ldr	r0, [pc, #600]	@ (80036c0 <hashInit.0+0x1e48>)
 8003468:	f7fe f958 	bl	800171c <insert.1>
		insert("SPEURT", "spirit");
 800346c:	46a4      	mov	ip, r4
 800346e:	4995      	ldr	r1, [pc, #596]	@ (80036c4 <hashInit.0+0x1e4c>)
 8003470:	4895      	ldr	r0, [pc, #596]	@ (80036c8 <hashInit.0+0x1e50>)
 8003472:	f7fe f953 	bl	800171c <insert.1>
		insert("KWE", "question");
 8003476:	46a4      	mov	ip, r4
 8003478:	4994      	ldr	r1, [pc, #592]	@ (80036cc <hashInit.0+0x1e54>)
 800347a:	4895      	ldr	r0, [pc, #596]	@ (80036d0 <hashInit.0+0x1e58>)
 800347c:	f7fe f94e 	bl	800171c <insert.1>
		insert("KAEUR", "care");
 8003480:	46a4      	mov	ip, r4
 8003482:	4994      	ldr	r1, [pc, #592]	@ (80036d4 <hashInit.0+0x1e5c>)
 8003484:	4894      	ldr	r0, [pc, #592]	@ (80036d8 <hashInit.0+0x1e60>)
 8003486:	f7fe f949 	bl	800171c <insert.1>
		insert("TRAO*UT", "truth");
 800348a:	46a4      	mov	ip, r4
 800348c:	4993      	ldr	r1, [pc, #588]	@ (80036dc <hashInit.0+0x1e64>)
 800348e:	4894      	ldr	r0, [pc, #592]	@ (80036e0 <hashInit.0+0x1e68>)
 8003490:	f7fe f944 	bl	800171c <insert.1>
		insert("TKPWROUPBD", "ground");
 8003494:	46a4      	mov	ip, r4
 8003496:	4993      	ldr	r1, [pc, #588]	@ (80036e4 <hashInit.0+0x1e6c>)
 8003498:	4893      	ldr	r0, [pc, #588]	@ (80036e8 <hashInit.0+0x1e70>)
 800349a:	f7fe f93f 	bl	800171c <insert.1>
		insert("R-L", "really");
 800349e:	46a4      	mov	ip, r4
 80034a0:	4992      	ldr	r1, [pc, #584]	@ (80036ec <hashInit.0+0x1e74>)
 80034a2:	4893      	ldr	r0, [pc, #588]	@ (80036f0 <hashInit.0+0x1e78>)
 80034a4:	f7fe f93a 	bl	800171c <insert.1>
		insert("REFT", "rest");
 80034a8:	46a4      	mov	ip, r4
 80034aa:	4992      	ldr	r1, [pc, #584]	@ (80036f4 <hashInit.0+0x1e7c>)
 80034ac:	4892      	ldr	r0, [pc, #584]	@ (80036f8 <hashInit.0+0x1e80>)
 80034ae:	f7fe f935 	bl	800171c <insert.1>
		insert("PHAOEPB", "mean");
 80034b2:	46a4      	mov	ip, r4
 80034b4:	4991      	ldr	r1, [pc, #580]	@ (80036fc <hashInit.0+0x1e84>)
 80034b6:	4892      	ldr	r0, [pc, #584]	@ (8003700 <hashInit.0+0x1e88>)
 80034b8:	f7fe f930 	bl	800171c <insert.1>
		insert("TKEUFRT", "different");
 80034bc:	46a4      	mov	ip, r4
 80034be:	4991      	ldr	r1, [pc, #580]	@ (8003704 <hashInit.0+0x1e8c>)
 80034c0:	4891      	ldr	r0, [pc, #580]	@ (8003708 <hashInit.0+0x1e90>)
 80034c2:	f7fe f92b 	bl	800171c <insert.1>
 80034c6:	e121      	b.n	800370c <hashInit.0+0x1e94>
 80034c8:	0800e8e0 	.word	0x0800e8e0
 80034cc:	0800e8e8 	.word	0x0800e8e8
 80034d0:	0800e8f0 	.word	0x0800e8f0
 80034d4:	0800e8fc 	.word	0x0800e8fc
 80034d8:	0800e904 	.word	0x0800e904
 80034dc:	0800e910 	.word	0x0800e910
 80034e0:	0800e918 	.word	0x0800e918
 80034e4:	0800e91c 	.word	0x0800e91c
 80034e8:	0800e924 	.word	0x0800e924
 80034ec:	0800e92c 	.word	0x0800e92c
 80034f0:	0800e934 	.word	0x0800e934
 80034f4:	0800e93c 	.word	0x0800e93c
 80034f8:	0800e944 	.word	0x0800e944
 80034fc:	0800e950 	.word	0x0800e950
 8003500:	0800e958 	.word	0x0800e958
 8003504:	0800e960 	.word	0x0800e960
 8003508:	0800e968 	.word	0x0800e968
 800350c:	0800e970 	.word	0x0800e970
 8003510:	0800e978 	.word	0x0800e978
 8003514:	0800e980 	.word	0x0800e980
 8003518:	0800e984 	.word	0x0800e984
 800351c:	0800e98c 	.word	0x0800e98c
 8003520:	0800e994 	.word	0x0800e994
 8003524:	0800e9a0 	.word	0x0800e9a0
 8003528:	0800e9ac 	.word	0x0800e9ac
 800352c:	0800e9b8 	.word	0x0800e9b8
 8003530:	0800e9c0 	.word	0x0800e9c0
 8003534:	0800e9c8 	.word	0x0800e9c8
 8003538:	0800e9cc 	.word	0x0800e9cc
 800353c:	0800e9d4 	.word	0x0800e9d4
 8003540:	0800e9dc 	.word	0x0800e9dc
 8003544:	0800e9e0 	.word	0x0800e9e0
 8003548:	0800e9e4 	.word	0x0800e9e4
 800354c:	0800e9ec 	.word	0x0800e9ec
 8003550:	0800e9f4 	.word	0x0800e9f4
 8003554:	0800e9fc 	.word	0x0800e9fc
 8003558:	0800ea04 	.word	0x0800ea04
 800355c:	0800ea10 	.word	0x0800ea10
 8003560:	0800ea18 	.word	0x0800ea18
 8003564:	0800ea20 	.word	0x0800ea20
 8003568:	0800ea28 	.word	0x0800ea28
 800356c:	0800ea30 	.word	0x0800ea30
 8003570:	0800ea38 	.word	0x0800ea38
 8003574:	0800ea40 	.word	0x0800ea40
 8003578:	0800ea48 	.word	0x0800ea48
 800357c:	0800ea50 	.word	0x0800ea50
 8003580:	0800ea58 	.word	0x0800ea58
 8003584:	0800ea60 	.word	0x0800ea60
 8003588:	0800ea64 	.word	0x0800ea64
 800358c:	0800ea70 	.word	0x0800ea70
 8003590:	0800ea78 	.word	0x0800ea78
 8003594:	0800ea80 	.word	0x0800ea80
 8003598:	0800ea88 	.word	0x0800ea88
 800359c:	0800ea90 	.word	0x0800ea90
 80035a0:	0800ea98 	.word	0x0800ea98
 80035a4:	0800eaa0 	.word	0x0800eaa0
 80035a8:	0800eaac 	.word	0x0800eaac
 80035ac:	0800eab4 	.word	0x0800eab4
 80035b0:	0800eabc 	.word	0x0800eabc
 80035b4:	0800eac4 	.word	0x0800eac4
 80035b8:	0800eacc 	.word	0x0800eacc
 80035bc:	0800ead8 	.word	0x0800ead8
 80035c0:	0800eae0 	.word	0x0800eae0
 80035c4:	0800eae8 	.word	0x0800eae8
 80035c8:	0800eaf0 	.word	0x0800eaf0
 80035cc:	0800eaf8 	.word	0x0800eaf8
 80035d0:	0800eafc 	.word	0x0800eafc
 80035d4:	0800eb00 	.word	0x0800eb00
 80035d8:	0800eb08 	.word	0x0800eb08
 80035dc:	0800eb10 	.word	0x0800eb10
 80035e0:	0800eb18 	.word	0x0800eb18
 80035e4:	0800eb20 	.word	0x0800eb20
 80035e8:	0800eb2c 	.word	0x0800eb2c
 80035ec:	0800eb34 	.word	0x0800eb34
 80035f0:	0800eb3c 	.word	0x0800eb3c
 80035f4:	0800eb40 	.word	0x0800eb40
 80035f8:	0800eb44 	.word	0x0800eb44
 80035fc:	0800eb4c 	.word	0x0800eb4c
 8003600:	0800eb54 	.word	0x0800eb54
 8003604:	0800eb5c 	.word	0x0800eb5c
 8003608:	0800eb64 	.word	0x0800eb64
 800360c:	0800eb6c 	.word	0x0800eb6c
 8003610:	0800eb74 	.word	0x0800eb74
 8003614:	0800eb7c 	.word	0x0800eb7c
 8003618:	0800eb84 	.word	0x0800eb84
 800361c:	0800eb90 	.word	0x0800eb90
 8003620:	0800eb98 	.word	0x0800eb98
 8003624:	0800eba0 	.word	0x0800eba0
 8003628:	0800eba8 	.word	0x0800eba8
 800362c:	0800ebb0 	.word	0x0800ebb0
 8003630:	0800ebb8 	.word	0x0800ebb8
 8003634:	0800ebc4 	.word	0x0800ebc4
 8003638:	0800ebc8 	.word	0x0800ebc8
 800363c:	0800ebcc 	.word	0x0800ebcc
 8003640:	0800ebd4 	.word	0x0800ebd4
 8003644:	0800ebdc 	.word	0x0800ebdc
 8003648:	0800ebe4 	.word	0x0800ebe4
 800364c:	0800ebec 	.word	0x0800ebec
 8003650:	0800ebf4 	.word	0x0800ebf4
 8003654:	0800ebfc 	.word	0x0800ebfc
 8003658:	0800ec04 	.word	0x0800ec04
 800365c:	0800ec0c 	.word	0x0800ec0c
 8003660:	0800ec14 	.word	0x0800ec14
 8003664:	0800ec1c 	.word	0x0800ec1c
 8003668:	0800ec24 	.word	0x0800ec24
 800366c:	0800ec2c 	.word	0x0800ec2c
 8003670:	0800ec30 	.word	0x0800ec30
 8003674:	0800ec38 	.word	0x0800ec38
 8003678:	0800ec40 	.word	0x0800ec40
 800367c:	0800ec48 	.word	0x0800ec48
 8003680:	0800ec50 	.word	0x0800ec50
 8003684:	0800ec58 	.word	0x0800ec58
 8003688:	0800ec64 	.word	0x0800ec64
 800368c:	0800ec6c 	.word	0x0800ec6c
 8003690:	0800ec74 	.word	0x0800ec74
 8003694:	0800ec7c 	.word	0x0800ec7c
 8003698:	0800ec84 	.word	0x0800ec84
 800369c:	0800ec8c 	.word	0x0800ec8c
 80036a0:	0800ec94 	.word	0x0800ec94
 80036a4:	0800ec9c 	.word	0x0800ec9c
 80036a8:	0800eca4 	.word	0x0800eca4
 80036ac:	0800ecac 	.word	0x0800ecac
 80036b0:	0800ecb4 	.word	0x0800ecb4
 80036b4:	0800ecbc 	.word	0x0800ecbc
 80036b8:	0800ecc4 	.word	0x0800ecc4
 80036bc:	0800eccc 	.word	0x0800eccc
 80036c0:	0800ecd4 	.word	0x0800ecd4
 80036c4:	0800ece0 	.word	0x0800ece0
 80036c8:	0800ece8 	.word	0x0800ece8
 80036cc:	0800ecf0 	.word	0x0800ecf0
 80036d0:	0800ecfc 	.word	0x0800ecfc
 80036d4:	0800ed00 	.word	0x0800ed00
 80036d8:	0800ed08 	.word	0x0800ed08
 80036dc:	0800ed10 	.word	0x0800ed10
 80036e0:	0800ed18 	.word	0x0800ed18
 80036e4:	0800ed20 	.word	0x0800ed20
 80036e8:	0800ed28 	.word	0x0800ed28
 80036ec:	0800ed34 	.word	0x0800ed34
 80036f0:	0800ed3c 	.word	0x0800ed3c
 80036f4:	0800ed40 	.word	0x0800ed40
 80036f8:	0800ed48 	.word	0x0800ed48
 80036fc:	0800ed50 	.word	0x0800ed50
 8003700:	0800ed58 	.word	0x0800ed58
 8003704:	0800ed60 	.word	0x0800ed60
 8003708:	0800ed6c 	.word	0x0800ed6c
		insert("PHAEUG", "making");
 800370c:	46a4      	mov	ip, r4
 800370e:	49b5      	ldr	r1, [pc, #724]	@ (80039e4 <hashInit.0+0x216c>)
 8003710:	48b5      	ldr	r0, [pc, #724]	@ (80039e8 <hashInit.0+0x2170>)
 8003712:	f7fe f803 	bl	800171c <insert.1>
		insert("POB", "possible");
 8003716:	46a4      	mov	ip, r4
 8003718:	49b4      	ldr	r1, [pc, #720]	@ (80039ec <hashInit.0+0x2174>)
 800371a:	48b5      	ldr	r0, [pc, #724]	@ (80039f0 <hashInit.0+0x2178>)
 800371c:	f7fd fffe 	bl	800171c <insert.1>
		insert("TPEL", "fell");
 8003720:	46a4      	mov	ip, r4
 8003722:	49b4      	ldr	r1, [pc, #720]	@ (80039f4 <hashInit.0+0x217c>)
 8003724:	48b4      	ldr	r0, [pc, #720]	@ (80039f8 <hashInit.0+0x2180>)
 8003726:	f7fd fff9 	bl	800171c <insert.1>
		insert("TORDZ", "towards");
 800372a:	46a4      	mov	ip, r4
 800372c:	49b3      	ldr	r1, [pc, #716]	@ (80039fc <hashInit.0+0x2184>)
 800372e:	48b4      	ldr	r0, [pc, #720]	@ (8003a00 <hashInit.0+0x2188>)
 8003730:	f7fd fff4 	bl	800171c <insert.1>
		insert("HAOUPL", "human");
 8003734:	46a4      	mov	ip, r4
 8003736:	49b3      	ldr	r1, [pc, #716]	@ (8003a04 <hashInit.0+0x218c>)
 8003738:	48b3      	ldr	r0, [pc, #716]	@ (8003a08 <hashInit.0+0x2190>)
 800373a:	f7fd ffef 	bl	800171c <insert.1>
		insert("KEPT", "kept");
 800373e:	46a4      	mov	ip, r4
 8003740:	49b2      	ldr	r1, [pc, #712]	@ (8003a0c <hashInit.0+0x2194>)
 8003742:	48b3      	ldr	r0, [pc, #716]	@ (8003a10 <hashInit.0+0x2198>)
 8003744:	f7fd ffea 	bl	800171c <insert.1>
		insert("SHORT", "short");
 8003748:	46a4      	mov	ip, r4
 800374a:	49b2      	ldr	r1, [pc, #712]	@ (8003a14 <hashInit.0+0x219c>)
 800374c:	48b2      	ldr	r0, [pc, #712]	@ (8003a18 <hashInit.0+0x21a0>)
 800374e:	f7fd ffe5 	bl	800171c <insert.1>
		insert("TOUPB", "town");
 8003752:	46a4      	mov	ip, r4
 8003754:	49b1      	ldr	r1, [pc, #708]	@ (8003a1c <hashInit.0+0x21a4>)
 8003756:	48b2      	ldr	r0, [pc, #712]	@ (8003a20 <hashInit.0+0x21a8>)
 8003758:	f7fd ffe0 	bl	800171c <insert.1>
		insert("TPOLG", "following");
 800375c:	46a4      	mov	ip, r4
 800375e:	49b1      	ldr	r1, [pc, #708]	@ (8003a24 <hashInit.0+0x21ac>)
 8003760:	48b1      	ldr	r0, [pc, #708]	@ (8003a28 <hashInit.0+0x21b0>)
 8003762:	f7fd ffdb 	bl	800171c <insert.1>
		insert("TPHAOED", "need");
 8003766:	46a4      	mov	ip, r4
 8003768:	49b0      	ldr	r1, [pc, #704]	@ (8003a2c <hashInit.0+0x21b4>)
 800376a:	48b1      	ldr	r0, [pc, #708]	@ (8003a30 <hashInit.0+0x21b8>)
 800376c:	f7fd ffd6 	bl	800171c <insert.1>
		insert("KAUS", "cause");
 8003770:	46a4      	mov	ip, r4
 8003772:	49b0      	ldr	r1, [pc, #704]	@ (8003a34 <hashInit.0+0x21bc>)
 8003774:	48b0      	ldr	r0, [pc, #704]	@ (8003a38 <hashInit.0+0x21c0>)
 8003776:	f7fd ffd1 	bl	800171c <insert.1>
		insert("PHET", "met");
 800377a:	46a4      	mov	ip, r4
 800377c:	49af      	ldr	r1, [pc, #700]	@ (8003a3c <hashInit.0+0x21c4>)
 800377e:	48b0      	ldr	r0, [pc, #704]	@ (8003a40 <hashInit.0+0x21c8>)
 8003780:	f7fd ffcc 	bl	800171c <insert.1>
		insert("AOEPBG", "evening");
 8003784:	46a4      	mov	ip, r4
 8003786:	49af      	ldr	r1, [pc, #700]	@ (8003a44 <hashInit.0+0x21cc>)
 8003788:	48af      	ldr	r0, [pc, #700]	@ (8003a48 <hashInit.0+0x21d0>)
 800378a:	f7fd ffc7 	bl	800171c <insert.1>
		insert("RURPBD", "returned");
 800378e:	46a4      	mov	ip, r4
 8003790:	49ae      	ldr	r1, [pc, #696]	@ (8003a4c <hashInit.0+0x21d4>)
 8003792:	48af      	ldr	r0, [pc, #700]	@ (8003a50 <hashInit.0+0x21d8>)
 8003794:	f7fd ffc2 	bl	800171c <insert.1>
		insert("TPAOEUF", "five");
 8003798:	46a4      	mov	ip, r4
 800379a:	49ae      	ldr	r1, [pc, #696]	@ (8003a54 <hashInit.0+0x21dc>)
 800379c:	48ae      	ldr	r0, [pc, #696]	@ (8003a58 <hashInit.0+0x21e0>)
 800379e:	f7fd ffbd 	bl	800171c <insert.1>
		insert("STROPBG", "strong");
 80037a2:	46a4      	mov	ip, r4
 80037a4:	49ad      	ldr	r1, [pc, #692]	@ (8003a5c <hashInit.0+0x21e4>)
 80037a6:	48ae      	ldr	r0, [pc, #696]	@ (8003a60 <hashInit.0+0x21e8>)
 80037a8:	f7fd ffb8 	bl	800171c <insert.1>
		insert("ABL", "able");
 80037ac:	46a4      	mov	ip, r4
 80037ae:	49ad      	ldr	r1, [pc, #692]	@ (8003a64 <hashInit.0+0x21ec>)
 80037b0:	48ad      	ldr	r0, [pc, #692]	@ (8003a68 <hashInit.0+0x21f0>)
 80037b2:	f7fd ffb3 	bl	800171c <insert.1>
		insert("TPREFRPB", "French");
 80037b6:	46a4      	mov	ip, r4
 80037b8:	49ac      	ldr	r1, [pc, #688]	@ (8003a6c <hashInit.0+0x21f4>)
 80037ba:	48ad      	ldr	r0, [pc, #692]	@ (8003a70 <hashInit.0+0x21f8>)
 80037bc:	f7fd ffae 	bl	800171c <insert.1>
		insert("HREUF", "live");
 80037c0:	46a4      	mov	ip, r4
 80037c2:	49ac      	ldr	r1, [pc, #688]	@ (8003a74 <hashInit.0+0x21fc>)
 80037c4:	48ac      	ldr	r0, [pc, #688]	@ (8003a78 <hashInit.0+0x2200>)
 80037c6:	f7fd ffa9 	bl	800171c <insert.1>
		insert("HRA*ED", "lady");
 80037ca:	46a4      	mov	ip, r4
 80037cc:	49ab      	ldr	r1, [pc, #684]	@ (8003a7c <hashInit.0+0x2204>)
 80037ce:	48ac      	ldr	r0, [pc, #688]	@ (8003a80 <hashInit.0+0x2208>)
 80037d0:	f7fd ffa4 	bl	800171c <insert.1>
		insert("SUBT", "subject");
 80037d4:	46a4      	mov	ip, r4
 80037d6:	49ab      	ldr	r1, [pc, #684]	@ (8003a84 <hashInit.0+0x220c>)
 80037d8:	48ab      	ldr	r0, [pc, #684]	@ (8003a88 <hashInit.0+0x2210>)
 80037da:	f7fd ff9f 	bl	800171c <insert.1>
		insert("S*P/TPH*", "Sn");
 80037de:	46a4      	mov	ip, r4
 80037e0:	49aa      	ldr	r1, [pc, #680]	@ (8003a8c <hashInit.0+0x2214>)
 80037e2:	48ab      	ldr	r0, [pc, #684]	@ (8003a90 <hashInit.0+0x2218>)
 80037e4:	f7fd ff9a 	bl	800171c <insert.1>
		insert("AEPBS", "answer");
 80037e8:	46a4      	mov	ip, r4
 80037ea:	49aa      	ldr	r1, [pc, #680]	@ (8003a94 <hashInit.0+0x221c>)
 80037ec:	48aa      	ldr	r0, [pc, #680]	@ (8003a98 <hashInit.0+0x2220>)
 80037ee:	f7fd ff95 	bl	800171c <insert.1>
		insert("SAE", "sea");
 80037f2:	46a4      	mov	ip, r4
 80037f4:	49a9      	ldr	r1, [pc, #676]	@ (8003a9c <hashInit.0+0x2224>)
 80037f6:	48aa      	ldr	r0, [pc, #680]	@ (8003aa0 <hashInit.0+0x2228>)
 80037f8:	f7fd ff90 	bl	800171c <insert.1>
		insert("TPAOER", "fear");
 80037fc:	46a4      	mov	ip, r4
 80037fe:	49a9      	ldr	r1, [pc, #676]	@ (8003aa4 <hashInit.0+0x222c>)
 8003800:	48a9      	ldr	r0, [pc, #676]	@ (8003aa8 <hashInit.0+0x2230>)
 8003802:	f7fd ff8b 	bl	800171c <insert.1>
		insert("URPBD", "understand");
 8003806:	46a4      	mov	ip, r4
 8003808:	49a8      	ldr	r1, [pc, #672]	@ (8003aac <hashInit.0+0x2234>)
 800380a:	48a9      	ldr	r0, [pc, #676]	@ (8003ab0 <hashInit.0+0x2238>)
 800380c:	f7fd ff86 	bl	800171c <insert.1>
		insert("HARD", "hard");
 8003810:	46a4      	mov	ip, r4
 8003812:	49a8      	ldr	r1, [pc, #672]	@ (8003ab4 <hashInit.0+0x223c>)
 8003814:	48a8      	ldr	r0, [pc, #672]	@ (8003ab8 <hashInit.0+0x2240>)
 8003816:	f7fd ff81 	bl	800171c <insert.1>
		insert("TERPLS", "terms");
 800381a:	46a4      	mov	ip, r4
 800381c:	49a7      	ldr	r1, [pc, #668]	@ (8003abc <hashInit.0+0x2244>)
 800381e:	48a8      	ldr	r0, [pc, #672]	@ (8003ac0 <hashInit.0+0x2248>)
 8003820:	f7fd ff7c 	bl	800171c <insert.1>
		insert("TKOUT", "doubt");
 8003824:	46a4      	mov	ip, r4
 8003826:	49a7      	ldr	r1, [pc, #668]	@ (8003ac4 <hashInit.0+0x224c>)
 8003828:	48a7      	ldr	r0, [pc, #668]	@ (8003ac8 <hashInit.0+0x2250>)
 800382a:	f7fd ff77 	bl	800171c <insert.1>
		insert("ARPBD", "around");
 800382e:	46a4      	mov	ip, r4
 8003830:	49a6      	ldr	r1, [pc, #664]	@ (8003acc <hashInit.0+0x2254>)
 8003832:	48a7      	ldr	r0, [pc, #668]	@ (8003ad0 <hashInit.0+0x2258>)
 8003834:	f7fd ff72 	bl	800171c <insert.1>
		insert("SK", "ask");
 8003838:	46a4      	mov	ip, r4
 800383a:	49a6      	ldr	r1, [pc, #664]	@ (8003ad4 <hashInit.0+0x225c>)
 800383c:	48a6      	ldr	r0, [pc, #664]	@ (8003ad8 <hashInit.0+0x2260>)
 800383e:	f7fd ff6d 	bl	800171c <insert.1>
		insert("ARPLS", "arms");
 8003842:	46a4      	mov	ip, r4
 8003844:	49a5      	ldr	r1, [pc, #660]	@ (8003adc <hashInit.0+0x2264>)
 8003846:	48a6      	ldr	r0, [pc, #664]	@ (8003ae0 <hashInit.0+0x2268>)
 8003848:	f7fd ff68 	bl	800171c <insert.1>
		insert("TURPB", "turn");
 800384c:	46a4      	mov	ip, r4
 800384e:	49a5      	ldr	r1, [pc, #660]	@ (8003ae4 <hashInit.0+0x226c>)
 8003850:	48a5      	ldr	r0, [pc, #660]	@ (8003ae8 <hashInit.0+0x2270>)
 8003852:	f7fd ff63 	bl	800171c <insert.1>
		insert("SEPBS", "sense");
 8003856:	46a4      	mov	ip, r4
 8003858:	49a4      	ldr	r1, [pc, #656]	@ (8003aec <hashInit.0+0x2274>)
 800385a:	48a5      	ldr	r0, [pc, #660]	@ (8003af0 <hashInit.0+0x2278>)
 800385c:	f7fd ff5e 	bl	800171c <insert.1>
		insert("SAOEPLS", "seems");
 8003860:	46a4      	mov	ip, r4
 8003862:	49a4      	ldr	r1, [pc, #656]	@ (8003af4 <hashInit.0+0x227c>)
 8003864:	48a4      	ldr	r0, [pc, #656]	@ (8003af8 <hashInit.0+0x2280>)
 8003866:	f7fd ff59 	bl	800171c <insert.1>
		insert("PWHRABG", "black");
 800386a:	46a4      	mov	ip, r4
 800386c:	49a3      	ldr	r1, [pc, #652]	@ (8003afc <hashInit.0+0x2284>)
 800386e:	48a4      	ldr	r0, [pc, #656]	@ (8003b00 <hashInit.0+0x2288>)
 8003870:	f7fd ff54 	bl	800171c <insert.1>
		insert("PWREU", "bring");
 8003874:	46a4      	mov	ip, r4
 8003876:	49a3      	ldr	r1, [pc, #652]	@ (8003b04 <hashInit.0+0x228c>)
 8003878:	48a3      	ldr	r0, [pc, #652]	@ (8003b08 <hashInit.0+0x2290>)
 800387a:	f7fd ff4f 	bl	800171c <insert.1>
		insert("TPOLD", "followed");
 800387e:	46a4      	mov	ip, r4
 8003880:	49a2      	ldr	r1, [pc, #648]	@ (8003b0c <hashInit.0+0x2294>)
 8003882:	48a3      	ldr	r0, [pc, #652]	@ (8003b10 <hashInit.0+0x2298>)
 8003884:	f7fd ff4a 	bl	800171c <insert.1>
		insert("PWAOUFL", "beautiful");
 8003888:	46a4      	mov	ip, r4
 800388a:	49a2      	ldr	r1, [pc, #648]	@ (8003b14 <hashInit.0+0x229c>)
 800388c:	48a2      	ldr	r0, [pc, #648]	@ (8003b18 <hashInit.0+0x22a0>)
 800388e:	f7fd ff45 	bl	800171c <insert.1>
		insert("KHROES", "close");
 8003892:	46a4      	mov	ip, r4
 8003894:	49a1      	ldr	r1, [pc, #644]	@ (8003b1c <hashInit.0+0x22a4>)
 8003896:	48a2      	ldr	r0, [pc, #648]	@ (8003b20 <hashInit.0+0x22a8>)
 8003898:	f7fd ff40 	bl	800171c <insert.1>
		insert("TKARBG", "dark");
 800389c:	46a4      	mov	ip, r4
 800389e:	49a1      	ldr	r1, [pc, #644]	@ (8003b24 <hashInit.0+0x22ac>)
 80038a0:	48a1      	ldr	r0, [pc, #644]	@ (8003b28 <hashInit.0+0x22b0>)
 80038a2:	f7fd ff3b 	bl	800171c <insert.1>
		insert("HOLD", "hold");
 80038a6:	46a4      	mov	ip, r4
 80038a8:	49a0      	ldr	r1, [pc, #640]	@ (8003b2c <hashInit.0+0x22b4>)
 80038aa:	48a1      	ldr	r0, [pc, #644]	@ (8003b30 <hashInit.0+0x22b8>)
 80038ac:	f7fd ff36 	bl	800171c <insert.1>
		insert("KRAR", "character");
 80038b0:	46a4      	mov	ip, r4
 80038b2:	49a0      	ldr	r1, [pc, #640]	@ (8003b34 <hashInit.0+0x22bc>)
 80038b4:	48a0      	ldr	r0, [pc, #640]	@ (8003b38 <hashInit.0+0x22c0>)
 80038b6:	f7fd ff31 	bl	800171c <insert.1>
		insert("SORT", "sort");
 80038ba:	46a4      	mov	ip, r4
 80038bc:	499f      	ldr	r1, [pc, #636]	@ (8003b3c <hashInit.0+0x22c4>)
 80038be:	48a0      	ldr	r0, [pc, #640]	@ (8003b40 <hashInit.0+0x22c8>)
 80038c0:	f7fd ff2c 	bl	800171c <insert.1>
		insert("SAOEUT", "sight");
 80038c4:	46a4      	mov	ip, r4
 80038c6:	499f      	ldr	r1, [pc, #636]	@ (8003b44 <hashInit.0+0x22cc>)
 80038c8:	489f      	ldr	r0, [pc, #636]	@ (8003b48 <hashInit.0+0x22d0>)
 80038ca:	f7fd ff27 	bl	800171c <insert.1>
		insert("TEPB", "ten");
 80038ce:	46a4      	mov	ip, r4
 80038d0:	499e      	ldr	r1, [pc, #632]	@ (8003b4c <hashInit.0+0x22d4>)
 80038d2:	489f      	ldr	r0, [pc, #636]	@ (8003b50 <hashInit.0+0x22d8>)
 80038d4:	f7fd ff22 	bl	800171c <insert.1>
		insert("SHOE", "show");
 80038d8:	46a4      	mov	ip, r4
 80038da:	499e      	ldr	r1, [pc, #632]	@ (8003b54 <hashInit.0+0x22dc>)
 80038dc:	489e      	ldr	r0, [pc, #632]	@ (8003b58 <hashInit.0+0x22e0>)
 80038de:	f7fd ff1d 	bl	800171c <insert.1>
		insert("PAERT", "party");
 80038e2:	46a4      	mov	ip, r4
 80038e4:	499d      	ldr	r1, [pc, #628]	@ (8003b5c <hashInit.0+0x22e4>)
 80038e6:	489e      	ldr	r0, [pc, #632]	@ (8003b60 <hashInit.0+0x22e8>)
 80038e8:	f7fd ff18 	bl	800171c <insert.1>
		insert("TPAOEUPB", "fine");
 80038ec:	46a4      	mov	ip, r4
 80038ee:	499d      	ldr	r1, [pc, #628]	@ (8003b64 <hashInit.0+0x22ec>)
 80038f0:	489d      	ldr	r0, [pc, #628]	@ (8003b68 <hashInit.0+0x22f0>)
 80038f2:	f7fd ff13 	bl	800171c <insert.1>
		insert("KWR*/*E", "ye");
 80038f6:	46a4      	mov	ip, r4
 80038f8:	499c      	ldr	r1, [pc, #624]	@ (8003b6c <hashInit.0+0x22f4>)
 80038fa:	489d      	ldr	r0, [pc, #628]	@ (8003b70 <hashInit.0+0x22f8>)
 80038fc:	f7fd ff0e 	bl	800171c <insert.1>
		insert("R-D", "ready");
 8003900:	46a4      	mov	ip, r4
 8003902:	499c      	ldr	r1, [pc, #624]	@ (8003b74 <hashInit.0+0x22fc>)
 8003904:	489c      	ldr	r0, [pc, #624]	@ (8003b78 <hashInit.0+0x2300>)
 8003906:	f7fd ff09 	bl	800171c <insert.1>
		insert("STOER", "story");
 800390a:	46a4      	mov	ip, r4
 800390c:	499b      	ldr	r1, [pc, #620]	@ (8003b7c <hashInit.0+0x2304>)
 800390e:	489c      	ldr	r0, [pc, #624]	@ (8003b80 <hashInit.0+0x2308>)
 8003910:	f7fd ff04 	bl	800171c <insert.1>
		insert("KPHOPB", "common");
 8003914:	46a4      	mov	ip, r4
 8003916:	499b      	ldr	r1, [pc, #620]	@ (8003b84 <hashInit.0+0x230c>)
 8003918:	489b      	ldr	r0, [pc, #620]	@ (8003b88 <hashInit.0+0x2310>)
 800391a:	f7fd feff 	bl	800171c <insert.1>
		insert("PWAOBG", "book");
 800391e:	46a4      	mov	ip, r4
 8003920:	499a      	ldr	r1, [pc, #616]	@ (8003b8c <hashInit.0+0x2314>)
 8003922:	489b      	ldr	r0, [pc, #620]	@ (8003b90 <hashInit.0+0x2318>)
 8003924:	f7fd fefa 	bl	800171c <insert.1>
		insert("TRO*PBG", "electronic");
 8003928:	46a4      	mov	ip, r4
 800392a:	499a      	ldr	r1, [pc, #616]	@ (8003b94 <hashInit.0+0x231c>)
 800392c:	489a      	ldr	r0, [pc, #616]	@ (8003b98 <hashInit.0+0x2320>)
 800392e:	f7fd fef5 	bl	800171c <insert.1>
		insert("TAUBG", "talk");
 8003932:	46a4      	mov	ip, r4
 8003934:	4999      	ldr	r1, [pc, #612]	@ (8003b9c <hashInit.0+0x2324>)
 8003936:	489a      	ldr	r0, [pc, #616]	@ (8003ba0 <hashInit.0+0x2328>)
 8003938:	f7fd fef0 	bl	800171c <insert.1>
		insert("K-T", "account");
 800393c:	46a4      	mov	ip, r4
 800393e:	4999      	ldr	r1, [pc, #612]	@ (8003ba4 <hashInit.0+0x232c>)
 8003940:	4899      	ldr	r0, [pc, #612]	@ (8003ba8 <hashInit.0+0x2330>)
 8003942:	f7fd feeb 	bl	800171c <insert.1>
		insert("PHARBG", "mark");
 8003946:	46a4      	mov	ip, r4
 8003948:	4998      	ldr	r1, [pc, #608]	@ (8003bac <hashInit.0+0x2334>)
 800394a:	4899      	ldr	r0, [pc, #612]	@ (8003bb0 <hashInit.0+0x2338>)
 800394c:	f7fd fee6 	bl	800171c <insert.1>
		insert("TR", "interest");
 8003950:	46a4      	mov	ip, r4
 8003952:	4998      	ldr	r1, [pc, #608]	@ (8003bb4 <hashInit.0+0x233c>)
 8003954:	4898      	ldr	r0, [pc, #608]	@ (8003bb8 <hashInit.0+0x2340>)
 8003956:	f7fd fee1 	bl	800171c <insert.1>
		insert("WREUPB", "written");
 800395a:	46a4      	mov	ip, r4
 800395c:	4997      	ldr	r1, [pc, #604]	@ (8003bbc <hashInit.0+0x2344>)
 800395e:	4898      	ldr	r0, [pc, #608]	@ (8003bc0 <hashInit.0+0x2348>)
 8003960:	f7fd fedc 	bl	800171c <insert.1>
		insert("K-PBT", "can't");
 8003964:	46a4      	mov	ip, r4
 8003966:	4997      	ldr	r1, [pc, #604]	@ (8003bc4 <hashInit.0+0x234c>)
 8003968:	4897      	ldr	r0, [pc, #604]	@ (8003bc8 <hashInit.0+0x2350>)
 800396a:	f7fd fed7 	bl	800171c <insert.1>
		insert("PWED", "bed");
 800396e:	46a4      	mov	ip, r4
 8003970:	4996      	ldr	r1, [pc, #600]	@ (8003bcc <hashInit.0+0x2354>)
 8003972:	4897      	ldr	r0, [pc, #604]	@ (8003bd0 <hashInit.0+0x2358>)
 8003974:	f7fd fed2 	bl	800171c <insert.1>
		insert("TPHES", "necessary");
 8003978:	46a4      	mov	ip, r4
 800397a:	4996      	ldr	r1, [pc, #600]	@ (8003bd4 <hashInit.0+0x235c>)
 800397c:	4896      	ldr	r0, [pc, #600]	@ (8003bd8 <hashInit.0+0x2360>)
 800397e:	f7fd fecd 	bl	800171c <insert.1>
		insert("AEUPBLG", "age");
 8003982:	46a4      	mov	ip, r4
 8003984:	4995      	ldr	r1, [pc, #596]	@ (8003bdc <hashInit.0+0x2364>)
 8003986:	4896      	ldr	r0, [pc, #600]	@ (8003be0 <hashInit.0+0x2368>)
 8003988:	f7fd fec8 	bl	800171c <insert.1>
		insert("ELS", "else");
 800398c:	46a4      	mov	ip, r4
 800398e:	4995      	ldr	r1, [pc, #596]	@ (8003be4 <hashInit.0+0x236c>)
 8003990:	4895      	ldr	r0, [pc, #596]	@ (8003be8 <hashInit.0+0x2370>)
 8003992:	f7fd fec3 	bl	800171c <insert.1>
		insert("TPORS", "force");
 8003996:	46a4      	mov	ip, r4
 8003998:	4994      	ldr	r1, [pc, #592]	@ (8003bec <hashInit.0+0x2374>)
 800399a:	4895      	ldr	r0, [pc, #596]	@ (8003bf0 <hashInit.0+0x2378>)
 800399c:	f7fd febe 	bl	800171c <insert.1>
		insert("KWR-D", "idea");
 80039a0:	46a4      	mov	ip, r4
 80039a2:	4994      	ldr	r1, [pc, #592]	@ (8003bf4 <hashInit.0+0x237c>)
 80039a4:	4894      	ldr	r0, [pc, #592]	@ (8003bf8 <hashInit.0+0x2380>)
 80039a6:	f7fd feb9 	bl	800171c <insert.1>
		insert("HRORPBG", "longer");
 80039aa:	46a4      	mov	ip, r4
 80039ac:	4993      	ldr	r1, [pc, #588]	@ (8003bfc <hashInit.0+0x2384>)
 80039ae:	4894      	ldr	r0, [pc, #592]	@ (8003c00 <hashInit.0+0x2388>)
 80039b0:	f7fd feb4 	bl	800171c <insert.1>
		insert("ART", "art");
 80039b4:	46a4      	mov	ip, r4
 80039b6:	4993      	ldr	r1, [pc, #588]	@ (8003c04 <hashInit.0+0x238c>)
 80039b8:	4893      	ldr	r0, [pc, #588]	@ (8003c08 <hashInit.0+0x2390>)
 80039ba:	f7fd feaf 	bl	800171c <insert.1>
		insert("SPOEBG", "spoke");
 80039be:	46a4      	mov	ip, r4
 80039c0:	4992      	ldr	r1, [pc, #584]	@ (8003c0c <hashInit.0+0x2394>)
 80039c2:	4893      	ldr	r0, [pc, #588]	@ (8003c10 <hashInit.0+0x2398>)
 80039c4:	f7fd feaa 	bl	800171c <insert.1>
		insert("KRAOS", "across");
 80039c8:	46a4      	mov	ip, r4
 80039ca:	4992      	ldr	r1, [pc, #584]	@ (8003c14 <hashInit.0+0x239c>)
 80039cc:	4892      	ldr	r0, [pc, #584]	@ (8003c18 <hashInit.0+0x23a0>)
 80039ce:	f7fd fea5 	bl	800171c <insert.1>
		insert("PWROER", "brother");
 80039d2:	46a4      	mov	ip, r4
 80039d4:	4991      	ldr	r1, [pc, #580]	@ (8003c1c <hashInit.0+0x23a4>)
 80039d6:	4892      	ldr	r0, [pc, #584]	@ (8003c20 <hashInit.0+0x23a8>)
 80039d8:	f7fd fea0 	bl	800171c <insert.1>
		insert("ERL", "early");
 80039dc:	46a4      	mov	ip, r4
 80039de:	4991      	ldr	r1, [pc, #580]	@ (8003c24 <hashInit.0+0x23ac>)
 80039e0:	e122      	b.n	8003c28 <hashInit.0+0x23b0>
 80039e2:	bf00      	nop
 80039e4:	0800ed74 	.word	0x0800ed74
 80039e8:	0800ed7c 	.word	0x0800ed7c
 80039ec:	0800ed84 	.word	0x0800ed84
 80039f0:	0800ed90 	.word	0x0800ed90
 80039f4:	0800ed94 	.word	0x0800ed94
 80039f8:	0800ed9c 	.word	0x0800ed9c
 80039fc:	0800eda4 	.word	0x0800eda4
 8003a00:	0800edac 	.word	0x0800edac
 8003a04:	0800edb4 	.word	0x0800edb4
 8003a08:	0800edbc 	.word	0x0800edbc
 8003a0c:	0800edc4 	.word	0x0800edc4
 8003a10:	0800edcc 	.word	0x0800edcc
 8003a14:	0800edd4 	.word	0x0800edd4
 8003a18:	0800eddc 	.word	0x0800eddc
 8003a1c:	0800ede4 	.word	0x0800ede4
 8003a20:	0800edec 	.word	0x0800edec
 8003a24:	0800edf4 	.word	0x0800edf4
 8003a28:	0800ee00 	.word	0x0800ee00
 8003a2c:	0800ee08 	.word	0x0800ee08
 8003a30:	0800ee10 	.word	0x0800ee10
 8003a34:	0800d5b0 	.word	0x0800d5b0
 8003a38:	0800ee18 	.word	0x0800ee18
 8003a3c:	0800ee20 	.word	0x0800ee20
 8003a40:	0800ee24 	.word	0x0800ee24
 8003a44:	0800ee2c 	.word	0x0800ee2c
 8003a48:	0800ee34 	.word	0x0800ee34
 8003a4c:	0800ee3c 	.word	0x0800ee3c
 8003a50:	0800ee48 	.word	0x0800ee48
 8003a54:	0800ee50 	.word	0x0800ee50
 8003a58:	0800ee58 	.word	0x0800ee58
 8003a5c:	0800ee60 	.word	0x0800ee60
 8003a60:	0800ee68 	.word	0x0800ee68
 8003a64:	0800ee70 	.word	0x0800ee70
 8003a68:	0800ee78 	.word	0x0800ee78
 8003a6c:	0800ee7c 	.word	0x0800ee7c
 8003a70:	0800ee84 	.word	0x0800ee84
 8003a74:	0800ee90 	.word	0x0800ee90
 8003a78:	0800ee98 	.word	0x0800ee98
 8003a7c:	0800eea0 	.word	0x0800eea0
 8003a80:	0800eea8 	.word	0x0800eea8
 8003a84:	0800eeb0 	.word	0x0800eeb0
 8003a88:	0800eeb8 	.word	0x0800eeb8
 8003a8c:	0800eec0 	.word	0x0800eec0
 8003a90:	0800eec4 	.word	0x0800eec4
 8003a94:	0800eed0 	.word	0x0800eed0
 8003a98:	0800eed8 	.word	0x0800eed8
 8003a9c:	0800eee0 	.word	0x0800eee0
 8003aa0:	0800eee4 	.word	0x0800eee4
 8003aa4:	0800eee8 	.word	0x0800eee8
 8003aa8:	0800eef0 	.word	0x0800eef0
 8003aac:	0800eef8 	.word	0x0800eef8
 8003ab0:	0800ef04 	.word	0x0800ef04
 8003ab4:	0800ef0c 	.word	0x0800ef0c
 8003ab8:	0800ef14 	.word	0x0800ef14
 8003abc:	0800ef1c 	.word	0x0800ef1c
 8003ac0:	0800ef24 	.word	0x0800ef24
 8003ac4:	0800ef2c 	.word	0x0800ef2c
 8003ac8:	0800ef34 	.word	0x0800ef34
 8003acc:	0800ef3c 	.word	0x0800ef3c
 8003ad0:	0800ef44 	.word	0x0800ef44
 8003ad4:	0800ef4c 	.word	0x0800ef4c
 8003ad8:	0800ef50 	.word	0x0800ef50
 8003adc:	0800ef54 	.word	0x0800ef54
 8003ae0:	0800ef5c 	.word	0x0800ef5c
 8003ae4:	0800ef64 	.word	0x0800ef64
 8003ae8:	0800ef6c 	.word	0x0800ef6c
 8003aec:	0800ef74 	.word	0x0800ef74
 8003af0:	0800ef7c 	.word	0x0800ef7c
 8003af4:	0800ef84 	.word	0x0800ef84
 8003af8:	0800ef8c 	.word	0x0800ef8c
 8003afc:	0800ef94 	.word	0x0800ef94
 8003b00:	0800ef9c 	.word	0x0800ef9c
 8003b04:	0800efa4 	.word	0x0800efa4
 8003b08:	0800efac 	.word	0x0800efac
 8003b0c:	0800efb4 	.word	0x0800efb4
 8003b10:	0800efc0 	.word	0x0800efc0
 8003b14:	0800efc8 	.word	0x0800efc8
 8003b18:	0800efd4 	.word	0x0800efd4
 8003b1c:	0800efdc 	.word	0x0800efdc
 8003b20:	0800efe4 	.word	0x0800efe4
 8003b24:	0800efec 	.word	0x0800efec
 8003b28:	0800eff4 	.word	0x0800eff4
 8003b2c:	0800effc 	.word	0x0800effc
 8003b30:	0800f004 	.word	0x0800f004
 8003b34:	0800f00c 	.word	0x0800f00c
 8003b38:	0800f018 	.word	0x0800f018
 8003b3c:	0800f020 	.word	0x0800f020
 8003b40:	0800f028 	.word	0x0800f028
 8003b44:	0800f030 	.word	0x0800f030
 8003b48:	0800f038 	.word	0x0800f038
 8003b4c:	0800f040 	.word	0x0800f040
 8003b50:	0800f044 	.word	0x0800f044
 8003b54:	0800f04c 	.word	0x0800f04c
 8003b58:	0800f054 	.word	0x0800f054
 8003b5c:	0800f05c 	.word	0x0800f05c
 8003b60:	0800f064 	.word	0x0800f064
 8003b64:	0800f06c 	.word	0x0800f06c
 8003b68:	0800f074 	.word	0x0800f074
 8003b6c:	0800f080 	.word	0x0800f080
 8003b70:	0800f084 	.word	0x0800f084
 8003b74:	0800f08c 	.word	0x0800f08c
 8003b78:	0800f094 	.word	0x0800f094
 8003b7c:	0800f098 	.word	0x0800f098
 8003b80:	0800f0a0 	.word	0x0800f0a0
 8003b84:	0800f0a8 	.word	0x0800f0a8
 8003b88:	0800f0b0 	.word	0x0800f0b0
 8003b8c:	0800f0b8 	.word	0x0800f0b8
 8003b90:	0800f0c0 	.word	0x0800f0c0
 8003b94:	0800f0c8 	.word	0x0800f0c8
 8003b98:	0800f0d4 	.word	0x0800f0d4
 8003b9c:	0800f0dc 	.word	0x0800f0dc
 8003ba0:	0800f0e4 	.word	0x0800f0e4
 8003ba4:	0800f0ec 	.word	0x0800f0ec
 8003ba8:	0800f0f4 	.word	0x0800f0f4
 8003bac:	0800f0f8 	.word	0x0800f0f8
 8003bb0:	0800f100 	.word	0x0800f100
 8003bb4:	0800f108 	.word	0x0800f108
 8003bb8:	0800f114 	.word	0x0800f114
 8003bbc:	0800f118 	.word	0x0800f118
 8003bc0:	0800f120 	.word	0x0800f120
 8003bc4:	0800f128 	.word	0x0800f128
 8003bc8:	0800f130 	.word	0x0800f130
 8003bcc:	0800f138 	.word	0x0800f138
 8003bd0:	0800f13c 	.word	0x0800f13c
 8003bd4:	0800f144 	.word	0x0800f144
 8003bd8:	0800f150 	.word	0x0800f150
 8003bdc:	0800f158 	.word	0x0800f158
 8003be0:	0800f15c 	.word	0x0800f15c
 8003be4:	0800f164 	.word	0x0800f164
 8003be8:	0800f16c 	.word	0x0800f16c
 8003bec:	0800f170 	.word	0x0800f170
 8003bf0:	0800f178 	.word	0x0800f178
 8003bf4:	0800f180 	.word	0x0800f180
 8003bf8:	0800f188 	.word	0x0800f188
 8003bfc:	0800f190 	.word	0x0800f190
 8003c00:	0800f198 	.word	0x0800f198
 8003c04:	0800f1a0 	.word	0x0800f1a0
 8003c08:	0800f1a4 	.word	0x0800f1a4
 8003c0c:	0800f1a8 	.word	0x0800f1a8
 8003c10:	0800f1b0 	.word	0x0800f1b0
 8003c14:	0800f1b8 	.word	0x0800f1b8
 8003c18:	0800f1c0 	.word	0x0800f1c0
 8003c1c:	0800f1c8 	.word	0x0800f1c8
 8003c20:	0800f1d0 	.word	0x0800f1d0
 8003c24:	0800f1d8 	.word	0x0800f1d8
 8003c28:	48b5      	ldr	r0, [pc, #724]	@ (8003f00 <hashInit.0+0x2688>)
 8003c2a:	f7fd fd77 	bl	800171c <insert.1>
		insert("OT", "ought");
 8003c2e:	46a4      	mov	ip, r4
 8003c30:	49b4      	ldr	r1, [pc, #720]	@ (8003f04 <hashInit.0+0x268c>)
 8003c32:	48b5      	ldr	r0, [pc, #724]	@ (8003f08 <hashInit.0+0x2690>)
 8003c34:	f7fd fd72 	bl	800171c <insert.1>
		insert("STAOEUPLS", "sometimes");
 8003c38:	46a4      	mov	ip, r4
 8003c3a:	49b4      	ldr	r1, [pc, #720]	@ (8003f0c <hashInit.0+0x2694>)
 8003c3c:	48b4      	ldr	r0, [pc, #720]	@ (8003f10 <hashInit.0+0x2698>)
 8003c3e:	f7fd fd6d 	bl	800171c <insert.1>
		insert("HRAOEUPB", "line");
 8003c42:	46a4      	mov	ip, r4
 8003c44:	49b3      	ldr	r1, [pc, #716]	@ (8003f14 <hashInit.0+0x269c>)
 8003c46:	48b4      	ldr	r0, [pc, #720]	@ (8003f18 <hashInit.0+0x26a0>)
 8003c48:	f7fd fd68 	bl	800171c <insert.1>
		insert("SAEUG", "saying");
 8003c4c:	46a4      	mov	ip, r4
 8003c4e:	49b3      	ldr	r1, [pc, #716]	@ (8003f1c <hashInit.0+0x26a4>)
 8003c50:	48b3      	ldr	r0, [pc, #716]	@ (8003f20 <hashInit.0+0x26a8>)
 8003c52:	f7fd fd63 	bl	800171c <insert.1>
		insert("TAEUBL", "table");
 8003c56:	46a4      	mov	ip, r4
 8003c58:	49b2      	ldr	r1, [pc, #712]	@ (8003f24 <hashInit.0+0x26ac>)
 8003c5a:	48b3      	ldr	r0, [pc, #716]	@ (8003f28 <hashInit.0+0x26b0>)
 8003c5c:	f7fd fd5e 	bl	800171c <insert.1>
		insert("A/PAOERD", "appeared");
 8003c60:	46a4      	mov	ip, r4
 8003c62:	49b2      	ldr	r1, [pc, #712]	@ (8003f2c <hashInit.0+0x26b4>)
 8003c64:	48b2      	ldr	r0, [pc, #712]	@ (8003f30 <hashInit.0+0x26b8>)
 8003c66:	f7fd fd59 	bl	800171c <insert.1>
		insert("REUFR", "river");
 8003c6a:	46a4      	mov	ip, r4
 8003c6c:	49b1      	ldr	r1, [pc, #708]	@ (8003f34 <hashInit.0+0x26bc>)
 8003c6e:	48b2      	ldr	r0, [pc, #712]	@ (8003f38 <hashInit.0+0x26c0>)
 8003c70:	f7fd fd54 	bl	800171c <insert.1>
		insert("T-PBD", "continued");
 8003c74:	46a4      	mov	ip, r4
 8003c76:	49b1      	ldr	r1, [pc, #708]	@ (8003f3c <hashInit.0+0x26c4>)
 8003c78:	48b1      	ldr	r0, [pc, #708]	@ (8003f40 <hashInit.0+0x26c8>)
 8003c7a:	f7fd fd4f 	bl	800171c <insert.1>
		insert("AOEU", "eye");
 8003c7e:	46a4      	mov	ip, r4
 8003c80:	49b0      	ldr	r1, [pc, #704]	@ (8003f44 <hashInit.0+0x26cc>)
 8003c82:	48b1      	ldr	r0, [pc, #708]	@ (8003f48 <hashInit.0+0x26d0>)
 8003c84:	f7fd fd4a 	bl	800171c <insert.1>
		insert("*E/T*/KWR*", "ety");
 8003c88:	46a4      	mov	ip, r4
 8003c8a:	49b0      	ldr	r1, [pc, #704]	@ (8003f4c <hashInit.0+0x26d4>)
 8003c8c:	48b0      	ldr	r0, [pc, #704]	@ (8003f50 <hashInit.0+0x26d8>)
 8003c8e:	f7fd fd45 	bl	800171c <insert.1>
		insert("SUPB", "sun");
 8003c92:	46a4      	mov	ip, r4
 8003c94:	49af      	ldr	r1, [pc, #700]	@ (8003f54 <hashInit.0+0x26dc>)
 8003c96:	48b0      	ldr	r0, [pc, #704]	@ (8003f58 <hashInit.0+0x26e0>)
 8003c98:	f7fd fd40 	bl	800171c <insert.1>
		insert("TPH-FGS", "information");
 8003c9c:	46a4      	mov	ip, r4
 8003c9e:	49af      	ldr	r1, [pc, #700]	@ (8003f5c <hashInit.0+0x26e4>)
 8003ca0:	48af      	ldr	r0, [pc, #700]	@ (8003f60 <hashInit.0+0x26e8>)
 8003ca2:	f7fd fd3b 	bl	800171c <insert.1>
		insert("HRAEURT", "later");
 8003ca6:	46a4      	mov	ip, r4
 8003ca8:	49ae      	ldr	r1, [pc, #696]	@ (8003f64 <hashInit.0+0x26ec>)
 8003caa:	48af      	ldr	r0, [pc, #700]	@ (8003f68 <hashInit.0+0x26f0>)
 8003cac:	f7fd fd36 	bl	800171c <insert.1>
		insert("EFRG", "everything");
 8003cb0:	46a4      	mov	ip, r4
 8003cb2:	49ae      	ldr	r1, [pc, #696]	@ (8003f6c <hashInit.0+0x26f4>)
 8003cb4:	48ae      	ldr	r0, [pc, #696]	@ (8003f70 <hashInit.0+0x26f8>)
 8003cb6:	f7fd fd31 	bl	800171c <insert.1>
		insert("RAOEFPD", "reached");
 8003cba:	46a4      	mov	ip, r4
 8003cbc:	49ad      	ldr	r1, [pc, #692]	@ (8003f74 <hashInit.0+0x26fc>)
 8003cbe:	48ae      	ldr	r0, [pc, #696]	@ (8003f78 <hashInit.0+0x2700>)
 8003cc0:	f7fd fd2c 	bl	800171c <insert.1>
		insert("SULD", "suddenly");
 8003cc4:	46a4      	mov	ip, r4
 8003cc6:	49ad      	ldr	r1, [pc, #692]	@ (8003f7c <hashInit.0+0x2704>)
 8003cc8:	48ad      	ldr	r0, [pc, #692]	@ (8003f80 <hashInit.0+0x2708>)
 8003cca:	f7fd fd27 	bl	800171c <insert.1>
		insert("PAFT", "past");
 8003cce:	46a4      	mov	ip, r4
 8003cd0:	49ac      	ldr	r1, [pc, #688]	@ (8003f84 <hashInit.0+0x270c>)
 8003cd2:	48ad      	ldr	r0, [pc, #692]	@ (8003f88 <hashInit.0+0x2710>)
 8003cd4:	f7fd fd22 	bl	800171c <insert.1>
		insert("HOURS", "hours");
 8003cd8:	46a4      	mov	ip, r4
 8003cda:	49ac      	ldr	r1, [pc, #688]	@ (8003f8c <hashInit.0+0x2714>)
 8003cdc:	48ac      	ldr	r0, [pc, #688]	@ (8003f90 <hashInit.0+0x2718>)
 8003cde:	f7fd fd1d 	bl	800171c <insert.1>
		insert("STRAEUPBG", "strange");
 8003ce2:	46a4      	mov	ip, r4
 8003ce4:	49ab      	ldr	r1, [pc, #684]	@ (8003f94 <hashInit.0+0x271c>)
 8003ce6:	48ac      	ldr	r0, [pc, #688]	@ (8003f98 <hashInit.0+0x2720>)
 8003ce8:	f7fd fd18 	bl	800171c <insert.1>
		insert("TKAOEP", "deep");
 8003cec:	46a4      	mov	ip, r4
 8003cee:	49ab      	ldr	r1, [pc, #684]	@ (8003f9c <hashInit.0+0x2724>)
 8003cf0:	48ab      	ldr	r0, [pc, #684]	@ (8003fa0 <hashInit.0+0x2728>)
 8003cf2:	f7fd fd13 	bl	800171c <insert.1>
		insert("KHAEUPBG", "change");
 8003cf6:	46a4      	mov	ip, r4
 8003cf8:	49aa      	ldr	r1, [pc, #680]	@ (8003fa4 <hashInit.0+0x272c>)
 8003cfa:	48ab      	ldr	r0, [pc, #684]	@ (8003fa8 <hashInit.0+0x2730>)
 8003cfc:	f7fd fd0e 	bl	800171c <insert.1>
		insert("PHAOEULS", "miles");
 8003d00:	46a4      	mov	ip, r4
 8003d02:	49aa      	ldr	r1, [pc, #680]	@ (8003fac <hashInit.0+0x2734>)
 8003d04:	48aa      	ldr	r0, [pc, #680]	@ (8003fb0 <hashInit.0+0x2738>)
 8003d06:	f7fd fd09 	bl	800171c <insert.1>
		insert("TPAOELG", "feeling");
 8003d0a:	46a4      	mov	ip, r4
 8003d0c:	49a9      	ldr	r1, [pc, #676]	@ (8003fb4 <hashInit.0+0x273c>)
 8003d0e:	48aa      	ldr	r0, [pc, #680]	@ (8003fb8 <hashInit.0+0x2740>)
 8003d10:	f7fd fd04 	bl	800171c <insert.1>
		insert("ABGT", "act");
 8003d14:	46a4      	mov	ip, r4
 8003d16:	49a9      	ldr	r1, [pc, #676]	@ (8003fbc <hashInit.0+0x2744>)
 8003d18:	48a9      	ldr	r0, [pc, #676]	@ (8003fc0 <hashInit.0+0x2748>)
 8003d1a:	f7fd fcff 	bl	800171c <insert.1>
		insert("PHAOET", "meet");
 8003d1e:	46a4      	mov	ip, r4
 8003d20:	49a8      	ldr	r1, [pc, #672]	@ (8003fc4 <hashInit.0+0x274c>)
 8003d22:	48a9      	ldr	r0, [pc, #676]	@ (8003fc8 <hashInit.0+0x2750>)
 8003d24:	f7fd fcfa 	bl	800171c <insert.1>
		insert("PAEUD", "paid");
 8003d28:	46a4      	mov	ip, r4
 8003d2a:	49a8      	ldr	r1, [pc, #672]	@ (8003fcc <hashInit.0+0x2754>)
 8003d2c:	48a8      	ldr	r0, [pc, #672]	@ (8003fd0 <hashInit.0+0x2758>)
 8003d2e:	f7fd fcf5 	bl	800171c <insert.1>
		insert("TPURT", "further");
 8003d32:	46a4      	mov	ip, r4
 8003d34:	49a7      	ldr	r1, [pc, #668]	@ (8003fd4 <hashInit.0+0x275c>)
 8003d36:	48a8      	ldr	r0, [pc, #672]	@ (8003fd8 <hashInit.0+0x2760>)
 8003d38:	f7fd fcf0 	bl	800171c <insert.1>
		insert("PURP", "purpose");
 8003d3c:	46a4      	mov	ip, r4
 8003d3e:	49a7      	ldr	r1, [pc, #668]	@ (8003fdc <hashInit.0+0x2764>)
 8003d40:	48a7      	ldr	r0, [pc, #668]	@ (8003fe0 <hashInit.0+0x2768>)
 8003d42:	f7fd fceb 	bl	800171c <insert.1>
		insert("HAEP", "happy");
 8003d46:	46a4      	mov	ip, r4
 8003d48:	49a6      	ldr	r1, [pc, #664]	@ (8003fe4 <hashInit.0+0x276c>)
 8003d4a:	48a7      	ldr	r0, [pc, #668]	@ (8003fe8 <hashInit.0+0x2770>)
 8003d4c:	f7fd fce6 	bl	800171c <insert.1>
		insert("AD/-D", "added");
 8003d50:	46a4      	mov	ip, r4
 8003d52:	49a6      	ldr	r1, [pc, #664]	@ (8003fec <hashInit.0+0x2774>)
 8003d54:	48a6      	ldr	r0, [pc, #664]	@ (8003ff0 <hashInit.0+0x2778>)
 8003d56:	f7fd fce1 	bl	800171c <insert.1>
		insert("SAOEPL", "seem");
 8003d5a:	46a4      	mov	ip, r4
 8003d5c:	49a5      	ldr	r1, [pc, #660]	@ (8003ff4 <hashInit.0+0x277c>)
 8003d5e:	48a6      	ldr	r0, [pc, #664]	@ (8003ff8 <hashInit.0+0x2780>)
 8003d60:	f7fd fcdc 	bl	800171c <insert.1>
		insert("TAEUG", "taking");
 8003d64:	46a4      	mov	ip, r4
 8003d66:	49a5      	ldr	r1, [pc, #660]	@ (8003ffc <hashInit.0+0x2784>)
 8003d68:	48a5      	ldr	r0, [pc, #660]	@ (8004000 <hashInit.0+0x2788>)
 8003d6a:	f7fd fcd7 	bl	800171c <insert.1>
		insert("PWHRAOD", "blood");
 8003d6e:	46a4      	mov	ip, r4
 8003d70:	49a4      	ldr	r1, [pc, #656]	@ (8004004 <hashInit.0+0x278c>)
 8003d72:	48a5      	ldr	r0, [pc, #660]	@ (8004008 <hashInit.0+0x2790>)
 8003d74:	f7fd fcd2 	bl	800171c <insert.1>
		insert("ROEZ", "rose");
 8003d78:	46a4      	mov	ip, r4
 8003d7a:	49a4      	ldr	r1, [pc, #656]	@ (800400c <hashInit.0+0x2794>)
 8003d7c:	48a4      	ldr	r0, [pc, #656]	@ (8004010 <hashInit.0+0x2798>)
 8003d7e:	f7fd fccd 	bl	800171c <insert.1>
		insert("SOUT", "south");
 8003d82:	46a4      	mov	ip, r4
 8003d84:	49a3      	ldr	r1, [pc, #652]	@ (8004014 <hashInit.0+0x279c>)
 8003d86:	48a4      	ldr	r0, [pc, #656]	@ (8004018 <hashInit.0+0x27a0>)
 8003d88:	f7fd fcc8 	bl	800171c <insert.1>
		insert("KWROPBD", "beyond");
 8003d8c:	46a4      	mov	ip, r4
 8003d8e:	49a3      	ldr	r1, [pc, #652]	@ (800401c <hashInit.0+0x27a4>)
 8003d90:	48a3      	ldr	r0, [pc, #652]	@ (8004020 <hashInit.0+0x27a8>)
 8003d92:	f7fd fcc3 	bl	800171c <insert.1>
		insert("KOELD", "cold");
 8003d96:	46a4      	mov	ip, r4
 8003d98:	49a2      	ldr	r1, [pc, #648]	@ (8004024 <hashInit.0+0x27ac>)
 8003d9a:	48a3      	ldr	r0, [pc, #652]	@ (8004028 <hashInit.0+0x27b0>)
 8003d9c:	f7fd fcbe 	bl	800171c <insert.1>
		insert("TPHAOERT", "neither");
 8003da0:	46a4      	mov	ip, r4
 8003da2:	49a2      	ldr	r1, [pc, #648]	@ (800402c <hashInit.0+0x27b4>)
 8003da4:	48a2      	ldr	r0, [pc, #648]	@ (8004030 <hashInit.0+0x27b8>)
 8003da6:	f7fd fcb9 	bl	800171c <insert.1>
		insert("TPAORD", "forward");
 8003daa:	46a4      	mov	ip, r4
 8003dac:	49a1      	ldr	r1, [pc, #644]	@ (8004034 <hashInit.0+0x27bc>)
 8003dae:	48a2      	ldr	r0, [pc, #648]	@ (8004038 <hashInit.0+0x27c0>)
 8003db0:	f7fd fcb4 	bl	800171c <insert.1>
		insert("SRAOU", "view");
 8003db4:	46a4      	mov	ip, r4
 8003db6:	49a1      	ldr	r1, [pc, #644]	@ (800403c <hashInit.0+0x27c4>)
 8003db8:	48a1      	ldr	r0, [pc, #644]	@ (8004040 <hashInit.0+0x27c8>)
 8003dba:	f7fd fcaf 	bl	800171c <insert.1>
		insert("AOEUF", "I've");
 8003dbe:	46a4      	mov	ip, r4
 8003dc0:	49a0      	ldr	r1, [pc, #640]	@ (8004044 <hashInit.0+0x27cc>)
 8003dc2:	48a1      	ldr	r0, [pc, #644]	@ (8004048 <hashInit.0+0x27d0>)
 8003dc4:	f7fd fcaa 	bl	800171c <insert.1>
		insert("POGS", "position");
 8003dc8:	46a4      	mov	ip, r4
 8003dca:	49a0      	ldr	r1, [pc, #640]	@ (800404c <hashInit.0+0x27d4>)
 8003dcc:	48a0      	ldr	r0, [pc, #640]	@ (8004050 <hashInit.0+0x27d8>)
 8003dce:	f7fd fca5 	bl	800171c <insert.1>
		insert("SOUPBD", "sound");
 8003dd2:	46a4      	mov	ip, r4
 8003dd4:	499f      	ldr	r1, [pc, #636]	@ (8004054 <hashInit.0+0x27dc>)
 8003dd6:	48a0      	ldr	r0, [pc, #640]	@ (8004058 <hashInit.0+0x27e0>)
 8003dd8:	f7fd fca0 	bl	800171c <insert.1>
		insert("TPHOPB", "none");
 8003ddc:	46a4      	mov	ip, r4
 8003dde:	499f      	ldr	r1, [pc, #636]	@ (800405c <hashInit.0+0x27e4>)
 8003de0:	489f      	ldr	r0, [pc, #636]	@ (8004060 <hashInit.0+0x27e8>)
 8003de2:	f7fd fc9b 	bl	800171c <insert.1>
		insert("SPWR-D", "entered");
 8003de6:	46a4      	mov	ip, r4
 8003de8:	499e      	ldr	r1, [pc, #632]	@ (8004064 <hashInit.0+0x27ec>)
 8003dea:	489f      	ldr	r0, [pc, #636]	@ (8004068 <hashInit.0+0x27f0>)
 8003dec:	f7fd fc96 	bl	800171c <insert.1>
		insert("KHRAOER", "clear");
 8003df0:	46a4      	mov	ip, r4
 8003df2:	499e      	ldr	r1, [pc, #632]	@ (800406c <hashInit.0+0x27f4>)
 8003df4:	489e      	ldr	r0, [pc, #632]	@ (8004070 <hashInit.0+0x27f8>)
 8003df6:	f7fd fc91 	bl	800171c <insert.1>
		insert("RAOD", "road");
 8003dfa:	46a4      	mov	ip, r4
 8003dfc:	499d      	ldr	r1, [pc, #628]	@ (8004074 <hashInit.0+0x27fc>)
 8003dfe:	489e      	ldr	r0, [pc, #632]	@ (8004078 <hashInit.0+0x2800>)
 8003e00:	f7fd fc8c 	bl	800171c <insert.1>
		insert("HRAEUT", "late");
 8003e04:	46a4      	mov	ip, r4
 8003e06:	499d      	ldr	r1, [pc, #628]	@ (800407c <hashInit.0+0x2804>)
 8003e08:	489d      	ldr	r0, [pc, #628]	@ (8004080 <hashInit.0+0x2808>)
 8003e0a:	f7fd fc87 	bl	800171c <insert.1>
		insert("STAPBD", "stand");
 8003e0e:	46a4      	mov	ip, r4
 8003e10:	499c      	ldr	r1, [pc, #624]	@ (8004084 <hashInit.0+0x280c>)
 8003e12:	489d      	ldr	r0, [pc, #628]	@ (8004088 <hashInit.0+0x2810>)
 8003e14:	f7fd fc82 	bl	800171c <insert.1>
		insert("SPOS", "suppose");
 8003e18:	46a4      	mov	ip, r4
 8003e1a:	499c      	ldr	r1, [pc, #624]	@ (800408c <hashInit.0+0x2814>)
 8003e1c:	489c      	ldr	r0, [pc, #624]	@ (8004090 <hashInit.0+0x2818>)
 8003e1e:	f7fd fc7d 	bl	800171c <insert.1>
		insert("HRA", "la");
 8003e22:	46a4      	mov	ip, r4
 8003e24:	499b      	ldr	r1, [pc, #620]	@ (8004094 <hashInit.0+0x281c>)
 8003e26:	489c      	ldr	r0, [pc, #624]	@ (8004098 <hashInit.0+0x2820>)
 8003e28:	f7fd fc78 	bl	800171c <insert.1>
		insert("TKAUR", "daughter");
 8003e2c:	46a4      	mov	ip, r4
 8003e2e:	499b      	ldr	r1, [pc, #620]	@ (800409c <hashInit.0+0x2824>)
 8003e30:	489b      	ldr	r0, [pc, #620]	@ (80040a0 <hashInit.0+0x2828>)
 8003e32:	f7fd fc73 	bl	800171c <insert.1>
		insert("RAEL", "real");
 8003e36:	46a4      	mov	ip, r4
 8003e38:	499a      	ldr	r1, [pc, #616]	@ (80040a4 <hashInit.0+0x282c>)
 8003e3a:	489b      	ldr	r0, [pc, #620]	@ (80040a8 <hashInit.0+0x2830>)
 8003e3c:	f7fd fc6e 	bl	800171c <insert.1>
		insert("TPHAOERL", "nearly");
 8003e40:	46a4      	mov	ip, r4
 8003e42:	499a      	ldr	r1, [pc, #616]	@ (80040ac <hashInit.0+0x2834>)
 8003e44:	489a      	ldr	r0, [pc, #616]	@ (80040b0 <hashInit.0+0x2838>)
 8003e46:	f7fd fc69 	bl	800171c <insert.1>
		insert("PHAOEUPB", "mine");
 8003e4a:	46a4      	mov	ip, r4
 8003e4c:	4999      	ldr	r1, [pc, #612]	@ (80040b4 <hashInit.0+0x283c>)
 8003e4e:	489a      	ldr	r0, [pc, #616]	@ (80040b8 <hashInit.0+0x2840>)
 8003e50:	f7fd fc64 	bl	800171c <insert.1>
		insert("HRAUS", "laws");
 8003e54:	46a4      	mov	ip, r4
 8003e56:	4999      	ldr	r1, [pc, #612]	@ (80040bc <hashInit.0+0x2844>)
 8003e58:	4899      	ldr	r0, [pc, #612]	@ (80040c0 <hashInit.0+0x2848>)
 8003e5a:	f7fd fc5f 	bl	800171c <insert.1>
		insert("TPHOPBLG", "knowledge");
 8003e5e:	46a4      	mov	ip, r4
 8003e60:	4998      	ldr	r1, [pc, #608]	@ (80040c4 <hashInit.0+0x284c>)
 8003e62:	4899      	ldr	r0, [pc, #612]	@ (80040c8 <hashInit.0+0x2850>)
 8003e64:	f7fd fc5a 	bl	800171c <insert.1>
		insert("KOPLS", "comes");
 8003e68:	46a4      	mov	ip, r4
 8003e6a:	4998      	ldr	r1, [pc, #608]	@ (80040cc <hashInit.0+0x2854>)
 8003e6c:	4898      	ldr	r0, [pc, #608]	@ (80040d0 <hashInit.0+0x2858>)
 8003e6e:	f7fd fc55 	bl	800171c <insert.1>
		insert("TORD", "toward");
 8003e72:	46a4      	mov	ip, r4
 8003e74:	4997      	ldr	r1, [pc, #604]	@ (80040d4 <hashInit.0+0x285c>)
 8003e76:	4898      	ldr	r0, [pc, #608]	@ (80040d8 <hashInit.0+0x2860>)
 8003e78:	f7fd fc50 	bl	800171c <insert.1>
		insert("PWAD", "bad");
 8003e7c:	46a4      	mov	ip, r4
 8003e7e:	4997      	ldr	r1, [pc, #604]	@ (80040dc <hashInit.0+0x2864>)
 8003e80:	4897      	ldr	r0, [pc, #604]	@ (80040e0 <hashInit.0+0x2868>)
 8003e82:	f7fd fc4b 	bl	800171c <insert.1>
		insert("KUT", "cut");
 8003e86:	46a4      	mov	ip, r4
 8003e88:	4996      	ldr	r1, [pc, #600]	@ (80040e4 <hashInit.0+0x286c>)
 8003e8a:	4897      	ldr	r0, [pc, #604]	@ (80040e8 <hashInit.0+0x2870>)
 8003e8c:	f7fd fc46 	bl	800171c <insert.1>
		insert("KO*EP", "copy");
 8003e90:	46a4      	mov	ip, r4
 8003e92:	4996      	ldr	r1, [pc, #600]	@ (80040ec <hashInit.0+0x2874>)
 8003e94:	4896      	ldr	r0, [pc, #600]	@ (80040f0 <hashInit.0+0x2878>)
 8003e96:	f7fd fc41 	bl	800171c <insert.1>
		insert("HUS", "husband");
 8003e9a:	46a4      	mov	ip, r4
 8003e9c:	4995      	ldr	r1, [pc, #596]	@ (80040f4 <hashInit.0+0x287c>)
 8003e9e:	4896      	ldr	r0, [pc, #600]	@ (80040f8 <hashInit.0+0x2880>)
 8003ea0:	f7fd fc3c 	bl	800171c <insert.1>
		insert("SEUBGS", "six");
 8003ea4:	46a4      	mov	ip, r4
 8003ea6:	4995      	ldr	r1, [pc, #596]	@ (80040fc <hashInit.0+0x2884>)
 8003ea8:	4895      	ldr	r0, [pc, #596]	@ (8004100 <hashInit.0+0x2888>)
 8003eaa:	f7fd fc37 	bl	800171c <insert.1>
		insert("TPRAPBS", "France");
 8003eae:	46a4      	mov	ip, r4
 8003eb0:	4994      	ldr	r1, [pc, #592]	@ (8004104 <hashInit.0+0x288c>)
 8003eb2:	4895      	ldr	r0, [pc, #596]	@ (8004108 <hashInit.0+0x2890>)
 8003eb4:	f7fd fc32 	bl	800171c <insert.1>
		insert("HREUFG", "living");
 8003eb8:	46a4      	mov	ip, r4
 8003eba:	4994      	ldr	r1, [pc, #592]	@ (800410c <hashInit.0+0x2894>)
 8003ebc:	4894      	ldr	r0, [pc, #592]	@ (8004110 <hashInit.0+0x2898>)
 8003ebe:	f7fd fc2d 	bl	800171c <insert.1>
		insert("PAES", "peace");
 8003ec2:	46a4      	mov	ip, r4
 8003ec4:	4993      	ldr	r1, [pc, #588]	@ (8004114 <hashInit.0+0x289c>)
 8003ec6:	4894      	ldr	r0, [pc, #592]	@ (8004118 <hashInit.0+0x28a0>)
 8003ec8:	f7fd fc28 	bl	800171c <insert.1>
		insert("TK-PBT", "didn't");
 8003ecc:	46a4      	mov	ip, r4
 8003ece:	4993      	ldr	r1, [pc, #588]	@ (800411c <hashInit.0+0x28a4>)
 8003ed0:	4893      	ldr	r0, [pc, #588]	@ (8004120 <hashInit.0+0x28a8>)
 8003ed2:	f7fd fc23 	bl	800171c <insert.1>
		insert("HROE", "low");
 8003ed6:	46a4      	mov	ip, r4
 8003ed8:	4992      	ldr	r1, [pc, #584]	@ (8004124 <hashInit.0+0x28ac>)
 8003eda:	4893      	ldr	r0, [pc, #588]	@ (8004128 <hashInit.0+0x28b0>)
 8003edc:	f7fd fc1e 	bl	800171c <insert.1>
		insert("TPHORT", "north");
 8003ee0:	46a4      	mov	ip, r4
 8003ee2:	4992      	ldr	r1, [pc, #584]	@ (800412c <hashInit.0+0x28b4>)
 8003ee4:	4892      	ldr	r0, [pc, #584]	@ (8004130 <hashInit.0+0x28b8>)
 8003ee6:	f7fd fc19 	bl	800171c <insert.1>
		insert("RER", "remember");
 8003eea:	46a4      	mov	ip, r4
 8003eec:	4991      	ldr	r1, [pc, #580]	@ (8004134 <hashInit.0+0x28bc>)
 8003eee:	4892      	ldr	r0, [pc, #584]	@ (8004138 <hashInit.0+0x28c0>)
 8003ef0:	f7fd fc14 	bl	800171c <insert.1>
		insert("EFBGT", "effect");
 8003ef4:	46a4      	mov	ip, r4
 8003ef6:	4991      	ldr	r1, [pc, #580]	@ (800413c <hashInit.0+0x28c4>)
 8003ef8:	4891      	ldr	r0, [pc, #580]	@ (8004140 <hashInit.0+0x28c8>)
 8003efa:	f7fd fc0f 	bl	800171c <insert.1>
 8003efe:	e121      	b.n	8004144 <hashInit.0+0x28cc>
 8003f00:	0800f1e0 	.word	0x0800f1e0
 8003f04:	0800f1e4 	.word	0x0800f1e4
 8003f08:	0800f1ec 	.word	0x0800f1ec
 8003f0c:	0800f1f0 	.word	0x0800f1f0
 8003f10:	0800f1fc 	.word	0x0800f1fc
 8003f14:	0800f208 	.word	0x0800f208
 8003f18:	0800f210 	.word	0x0800f210
 8003f1c:	0800f21c 	.word	0x0800f21c
 8003f20:	0800f224 	.word	0x0800f224
 8003f24:	0800f22c 	.word	0x0800f22c
 8003f28:	0800f234 	.word	0x0800f234
 8003f2c:	0800f23c 	.word	0x0800f23c
 8003f30:	0800f248 	.word	0x0800f248
 8003f34:	0800f254 	.word	0x0800f254
 8003f38:	0800f25c 	.word	0x0800f25c
 8003f3c:	0800f264 	.word	0x0800f264
 8003f40:	0800f270 	.word	0x0800f270
 8003f44:	0800f278 	.word	0x0800f278
 8003f48:	0800f27c 	.word	0x0800f27c
 8003f4c:	0800f284 	.word	0x0800f284
 8003f50:	0800f288 	.word	0x0800f288
 8003f54:	0800f294 	.word	0x0800f294
 8003f58:	0800f298 	.word	0x0800f298
 8003f5c:	0800f2a0 	.word	0x0800f2a0
 8003f60:	0800f2ac 	.word	0x0800f2ac
 8003f64:	0800f2b4 	.word	0x0800f2b4
 8003f68:	0800f2bc 	.word	0x0800f2bc
 8003f6c:	0800f2c4 	.word	0x0800f2c4
 8003f70:	0800f2d0 	.word	0x0800f2d0
 8003f74:	0800f2d8 	.word	0x0800f2d8
 8003f78:	0800f2e0 	.word	0x0800f2e0
 8003f7c:	0800f2e8 	.word	0x0800f2e8
 8003f80:	0800f2f4 	.word	0x0800f2f4
 8003f84:	0800f2fc 	.word	0x0800f2fc
 8003f88:	0800f304 	.word	0x0800f304
 8003f8c:	0800f30c 	.word	0x0800f30c
 8003f90:	0800f314 	.word	0x0800f314
 8003f94:	0800f31c 	.word	0x0800f31c
 8003f98:	0800f324 	.word	0x0800f324
 8003f9c:	0800f330 	.word	0x0800f330
 8003fa0:	0800f338 	.word	0x0800f338
 8003fa4:	0800f340 	.word	0x0800f340
 8003fa8:	0800f348 	.word	0x0800f348
 8003fac:	0800f354 	.word	0x0800f354
 8003fb0:	0800f35c 	.word	0x0800f35c
 8003fb4:	0800f368 	.word	0x0800f368
 8003fb8:	0800f370 	.word	0x0800f370
 8003fbc:	0800f378 	.word	0x0800f378
 8003fc0:	0800f37c 	.word	0x0800f37c
 8003fc4:	0800f384 	.word	0x0800f384
 8003fc8:	0800f38c 	.word	0x0800f38c
 8003fcc:	0800f394 	.word	0x0800f394
 8003fd0:	0800f39c 	.word	0x0800f39c
 8003fd4:	0800f3a4 	.word	0x0800f3a4
 8003fd8:	0800f3ac 	.word	0x0800f3ac
 8003fdc:	0800f3b4 	.word	0x0800f3b4
 8003fe0:	0800f3bc 	.word	0x0800f3bc
 8003fe4:	0800f3c4 	.word	0x0800f3c4
 8003fe8:	0800f3cc 	.word	0x0800f3cc
 8003fec:	0800f3d4 	.word	0x0800f3d4
 8003ff0:	0800f3dc 	.word	0x0800f3dc
 8003ff4:	0800f3e4 	.word	0x0800f3e4
 8003ff8:	0800f3ec 	.word	0x0800f3ec
 8003ffc:	0800f3f4 	.word	0x0800f3f4
 8004000:	0800f3fc 	.word	0x0800f3fc
 8004004:	0800f404 	.word	0x0800f404
 8004008:	0800f40c 	.word	0x0800f40c
 800400c:	0800f414 	.word	0x0800f414
 8004010:	0800f41c 	.word	0x0800f41c
 8004014:	0800f424 	.word	0x0800f424
 8004018:	0800f42c 	.word	0x0800f42c
 800401c:	0800f434 	.word	0x0800f434
 8004020:	0800f43c 	.word	0x0800f43c
 8004024:	0800f444 	.word	0x0800f444
 8004028:	0800f44c 	.word	0x0800f44c
 800402c:	0800f454 	.word	0x0800f454
 8004030:	0800f45c 	.word	0x0800f45c
 8004034:	0800f468 	.word	0x0800f468
 8004038:	0800f470 	.word	0x0800f470
 800403c:	0800f478 	.word	0x0800f478
 8004040:	0800f480 	.word	0x0800f480
 8004044:	0800f488 	.word	0x0800f488
 8004048:	0800f490 	.word	0x0800f490
 800404c:	0800f498 	.word	0x0800f498
 8004050:	0800f4a4 	.word	0x0800f4a4
 8004054:	0800f4ac 	.word	0x0800f4ac
 8004058:	0800f4b4 	.word	0x0800f4b4
 800405c:	0800f4bc 	.word	0x0800f4bc
 8004060:	0800f4c4 	.word	0x0800f4c4
 8004064:	0800f4cc 	.word	0x0800f4cc
 8004068:	0800f4d4 	.word	0x0800f4d4
 800406c:	0800f4dc 	.word	0x0800f4dc
 8004070:	0800f4e4 	.word	0x0800f4e4
 8004074:	0800f4ec 	.word	0x0800f4ec
 8004078:	0800f4f4 	.word	0x0800f4f4
 800407c:	0800f4fc 	.word	0x0800f4fc
 8004080:	0800f504 	.word	0x0800f504
 8004084:	0800f50c 	.word	0x0800f50c
 8004088:	0800f514 	.word	0x0800f514
 800408c:	0800f51c 	.word	0x0800f51c
 8004090:	0800f524 	.word	0x0800f524
 8004094:	0800f52c 	.word	0x0800f52c
 8004098:	0800f530 	.word	0x0800f530
 800409c:	0800f534 	.word	0x0800f534
 80040a0:	0800f540 	.word	0x0800f540
 80040a4:	0800f548 	.word	0x0800f548
 80040a8:	0800f550 	.word	0x0800f550
 80040ac:	0800f558 	.word	0x0800f558
 80040b0:	0800f560 	.word	0x0800f560
 80040b4:	0800f56c 	.word	0x0800f56c
 80040b8:	0800f574 	.word	0x0800f574
 80040bc:	0800f580 	.word	0x0800f580
 80040c0:	0800f588 	.word	0x0800f588
 80040c4:	0800f590 	.word	0x0800f590
 80040c8:	0800f59c 	.word	0x0800f59c
 80040cc:	0800f5a8 	.word	0x0800f5a8
 80040d0:	0800f5b0 	.word	0x0800f5b0
 80040d4:	0800f5b8 	.word	0x0800f5b8
 80040d8:	0800f5c0 	.word	0x0800f5c0
 80040dc:	0800f5c8 	.word	0x0800f5c8
 80040e0:	0800f5cc 	.word	0x0800f5cc
 80040e4:	0800f5d4 	.word	0x0800f5d4
 80040e8:	0800f5d8 	.word	0x0800f5d8
 80040ec:	0800f5dc 	.word	0x0800f5dc
 80040f0:	0800f5e4 	.word	0x0800f5e4
 80040f4:	0800f5ec 	.word	0x0800f5ec
 80040f8:	0800f5f4 	.word	0x0800f5f4
 80040fc:	0800f5f8 	.word	0x0800f5f8
 8004100:	0800f5fc 	.word	0x0800f5fc
 8004104:	0800f604 	.word	0x0800f604
 8004108:	0800f60c 	.word	0x0800f60c
 800410c:	0800f614 	.word	0x0800f614
 8004110:	0800f61c 	.word	0x0800f61c
 8004114:	0800f624 	.word	0x0800f624
 8004118:	0800f62c 	.word	0x0800f62c
 800411c:	0800d5d0 	.word	0x0800d5d0
 8004120:	0800f634 	.word	0x0800f634
 8004124:	0800f63c 	.word	0x0800f63c
 8004128:	0800f640 	.word	0x0800f640
 800412c:	0800f648 	.word	0x0800f648
 8004130:	0800f650 	.word	0x0800f650
 8004134:	0800f658 	.word	0x0800f658
 8004138:	0800f664 	.word	0x0800f664
 800413c:	0800f668 	.word	0x0800f668
 8004140:	0800f670 	.word	0x0800f670
		insert("TPHARL", "natural");
 8004144:	46a4      	mov	ip, r4
 8004146:	49b5      	ldr	r1, [pc, #724]	@ (800441c <hashInit.0+0x2ba4>)
 8004148:	48b5      	ldr	r0, [pc, #724]	@ (8004420 <hashInit.0+0x2ba8>)
 800414a:	f7fd fae7 	bl	800171c <insert.1>
		insert("PREUT", "pretty");
 800414e:	46a4      	mov	ip, r4
 8004150:	49b4      	ldr	r1, [pc, #720]	@ (8004424 <hashInit.0+0x2bac>)
 8004152:	48b5      	ldr	r0, [pc, #724]	@ (8004428 <hashInit.0+0x2bb0>)
 8004154:	f7fd fae2 	bl	800171c <insert.1>
		insert("TPAUL", "fall");
 8004158:	46a4      	mov	ip, r4
 800415a:	49b4      	ldr	r1, [pc, #720]	@ (800442c <hashInit.0+0x2bb4>)
 800415c:	48b4      	ldr	r0, [pc, #720]	@ (8004430 <hashInit.0+0x2bb8>)
 800415e:	f7fd fadd 	bl	800171c <insert.1>
		insert("TPAEUR", "fair");
 8004162:	46a4      	mov	ip, r4
 8004164:	49b3      	ldr	r1, [pc, #716]	@ (8004434 <hashInit.0+0x2bbc>)
 8004166:	48b4      	ldr	r0, [pc, #720]	@ (8004438 <hashInit.0+0x2bc0>)
 8004168:	f7fd fad8 	bl	800171c <insert.1>
		insert("S-FS", "service");
 800416c:	46a4      	mov	ip, r4
 800416e:	49b3      	ldr	r1, [pc, #716]	@ (800443c <hashInit.0+0x2bc4>)
 8004170:	48b3      	ldr	r0, [pc, #716]	@ (8004440 <hashInit.0+0x2bc8>)
 8004172:	f7fd fad3 	bl	800171c <insert.1>
		insert("PWHRO", "below");
 8004176:	46a4      	mov	ip, r4
 8004178:	49b2      	ldr	r1, [pc, #712]	@ (8004444 <hashInit.0+0x2bcc>)
 800417a:	48b3      	ldr	r0, [pc, #716]	@ (8004448 <hashInit.0+0x2bd0>)
 800417c:	f7fd face 	bl	800171c <insert.1>
		insert("KPEPT", "except");
 8004180:	46a4      	mov	ip, r4
 8004182:	49b2      	ldr	r1, [pc, #712]	@ (800444c <hashInit.0+0x2bd4>)
 8004184:	48b2      	ldr	r0, [pc, #712]	@ (8004450 <hashInit.0+0x2bd8>)
 8004186:	f7fd fac9 	bl	800171c <insert.1>
		insert("PHERPB", "American");
 800418a:	46a4      	mov	ip, r4
 800418c:	49b1      	ldr	r1, [pc, #708]	@ (8004454 <hashInit.0+0x2bdc>)
 800418e:	48b2      	ldr	r0, [pc, #712]	@ (8004458 <hashInit.0+0x2be0>)
 8004190:	f7fd fac4 	bl	800171c <insert.1>
		insert("HAEUR", "hair");
 8004194:	46a4      	mov	ip, r4
 8004196:	49b1      	ldr	r1, [pc, #708]	@ (800445c <hashInit.0+0x2be4>)
 8004198:	48b1      	ldr	r0, [pc, #708]	@ (8004460 <hashInit.0+0x2be8>)
 800419a:	f7fd fabf 	bl	800171c <insert.1>
		insert("HROPBD/OPB", "London");
 800419e:	46a4      	mov	ip, r4
 80041a0:	49b0      	ldr	r1, [pc, #704]	@ (8004464 <hashInit.0+0x2bec>)
 80041a2:	48b1      	ldr	r0, [pc, #708]	@ (8004468 <hashInit.0+0x2bf0>)
 80041a4:	f7fd faba 	bl	800171c <insert.1>
		insert("HRAEUD", "laid");
 80041a8:	46a4      	mov	ip, r4
 80041aa:	49b0      	ldr	r1, [pc, #704]	@ (800446c <hashInit.0+0x2bf4>)
 80041ac:	48b0      	ldr	r0, [pc, #704]	@ (8004470 <hashInit.0+0x2bf8>)
 80041ae:	f7fd fab5 	bl	800171c <insert.1>
		insert("PAS", "pass");
 80041b2:	46a4      	mov	ip, r4
 80041b4:	49af      	ldr	r1, [pc, #700]	@ (8004474 <hashInit.0+0x2bfc>)
 80041b6:	48b0      	ldr	r0, [pc, #704]	@ (8004478 <hashInit.0+0x2c00>)
 80041b8:	f7fd fab0 	bl	800171c <insert.1>
		insert("HRED", "led");
 80041bc:	46a4      	mov	ip, r4
 80041be:	49af      	ldr	r1, [pc, #700]	@ (800447c <hashInit.0+0x2c04>)
 80041c0:	48af      	ldr	r0, [pc, #700]	@ (8004480 <hashInit.0+0x2c08>)
 80041c2:	f7fd faab 	bl	800171c <insert.1>
		insert("KO*EP/RAOEUT", "copyright");
 80041c6:	46a4      	mov	ip, r4
 80041c8:	49ae      	ldr	r1, [pc, #696]	@ (8004484 <hashInit.0+0x2c0c>)
 80041ca:	48af      	ldr	r0, [pc, #700]	@ (8004488 <hashInit.0+0x2c10>)
 80041cc:	f7fd faa6 	bl	800171c <insert.1>
		insert("TK*G", "doing");
 80041d0:	46a4      	mov	ip, r4
 80041d2:	49ae      	ldr	r1, [pc, #696]	@ (800448c <hashInit.0+0x2c14>)
 80041d4:	48ae      	ldr	r0, [pc, #696]	@ (8004490 <hashInit.0+0x2c18>)
 80041d6:	f7fd faa1 	bl	800171c <insert.1>
		insert("AERPL", "army");
 80041da:	46a4      	mov	ip, r4
 80041dc:	49ad      	ldr	r1, [pc, #692]	@ (8004494 <hashInit.0+0x2c1c>)
 80041de:	48ae      	ldr	r0, [pc, #696]	@ (8004498 <hashInit.0+0x2c20>)
 80041e0:	f7fd fa9c 	bl	800171c <insert.1>
		insert("RUPB", "run");
 80041e4:	46a4      	mov	ip, r4
 80041e6:	49ad      	ldr	r1, [pc, #692]	@ (800449c <hashInit.0+0x2c24>)
 80041e8:	48ad      	ldr	r0, [pc, #692]	@ (80044a0 <hashInit.0+0x2c28>)
 80041ea:	f7fd fa97 	bl	800171c <insert.1>
		insert("HORS", "horse");
 80041ee:	46a4      	mov	ip, r4
 80041f0:	49ac      	ldr	r1, [pc, #688]	@ (80044a4 <hashInit.0+0x2c2c>)
 80041f2:	48ad      	ldr	r0, [pc, #692]	@ (80044a8 <hashInit.0+0x2c30>)
 80041f4:	f7fd fa92 	bl	800171c <insert.1>
		insert("TPAOURT", "future");
 80041f8:	46a4      	mov	ip, r4
 80041fa:	49ac      	ldr	r1, [pc, #688]	@ (80044ac <hashInit.0+0x2c34>)
 80041fc:	48ac      	ldr	r0, [pc, #688]	@ (80044b0 <hashInit.0+0x2c38>)
 80041fe:	f7fd fa8d 	bl	800171c <insert.1>
		insert("OEPD", "opened");
 8004202:	46a4      	mov	ip, r4
 8004204:	49ab      	ldr	r1, [pc, #684]	@ (80044b4 <hashInit.0+0x2c3c>)
 8004206:	48ac      	ldr	r0, [pc, #688]	@ (80044b8 <hashInit.0+0x2c40>)
 8004208:	f7fd fa88 	bl	800171c <insert.1>
		insert("PHRERB", "pleasure");
 800420c:	46a4      	mov	ip, r4
 800420e:	49ab      	ldr	r1, [pc, #684]	@ (80044bc <hashInit.0+0x2c44>)
 8004210:	48ab      	ldr	r0, [pc, #684]	@ (80044c0 <hashInit.0+0x2c48>)
 8004212:	f7fd fa83 	bl	800171c <insert.1>
		insert("HEUFRT", "history");
 8004216:	46a4      	mov	ip, r4
 8004218:	49aa      	ldr	r1, [pc, #680]	@ (80044c4 <hashInit.0+0x2c4c>)
 800421a:	48ab      	ldr	r0, [pc, #684]	@ (80044c8 <hashInit.0+0x2c50>)
 800421c:	f7fd fa7e 	bl	800171c <insert.1>
		insert("WEFT", "west");
 8004220:	46a4      	mov	ip, r4
 8004222:	49aa      	ldr	r1, [pc, #680]	@ (80044cc <hashInit.0+0x2c54>)
 8004224:	48aa      	ldr	r0, [pc, #680]	@ (80044d0 <hashInit.0+0x2c58>)
 8004226:	f7fd fa79 	bl	800171c <insert.1>
		insert("PAEU", "pay");
 800422a:	46a4      	mov	ip, r4
 800422c:	49a9      	ldr	r1, [pc, #676]	@ (80044d4 <hashInit.0+0x2c5c>)
 800422e:	48aa      	ldr	r0, [pc, #680]	@ (80044d8 <hashInit.0+0x2c60>)
 8004230:	f7fd fa74 	bl	800171c <insert.1>
		insert("RED", "red");
 8004234:	46a4      	mov	ip, r4
 8004236:	49a9      	ldr	r1, [pc, #676]	@ (80044dc <hashInit.0+0x2c64>)
 8004238:	48a9      	ldr	r0, [pc, #676]	@ (80044e0 <hashInit.0+0x2c68>)
 800423a:	f7fd fa6f 	bl	800171c <insert.1>
		insert("APB/AE", "an'");
 800423e:	46a4      	mov	ip, r4
 8004240:	49a8      	ldr	r1, [pc, #672]	@ (80044e4 <hashInit.0+0x2c6c>)
 8004242:	48a9      	ldr	r0, [pc, #676]	@ (80044e8 <hashInit.0+0x2c70>)
 8004244:	f7fd fa6a 	bl	800171c <insert.1>
		insert("TPOUR/TPO*UR", "4");
 8004248:	46a4      	mov	ip, r4
 800424a:	49a8      	ldr	r1, [pc, #672]	@ (80044ec <hashInit.0+0x2c74>)
 800424c:	48a8      	ldr	r0, [pc, #672]	@ (80044f0 <hashInit.0+0x2c78>)
 800424e:	f7fd fa65 	bl	800171c <insert.1>
		insert("HA*T", "hath");
 8004252:	46a4      	mov	ip, r4
 8004254:	49a7      	ldr	r1, [pc, #668]	@ (80044f4 <hashInit.0+0x2c7c>)
 8004256:	48a8      	ldr	r0, [pc, #672]	@ (80044f8 <hashInit.0+0x2c80>)
 8004258:	f7fd fa60 	bl	800171c <insert.1>
		insert("TPHOET", "note");
 800425c:	46a4      	mov	ip, r4
 800425e:	49a7      	ldr	r1, [pc, #668]	@ (80044fc <hashInit.0+0x2c84>)
 8004260:	48a7      	ldr	r0, [pc, #668]	@ (8004500 <hashInit.0+0x2c88>)
 8004262:	f7fd fa5b 	bl	800171c <insert.1>
		insert("HR*T", "although");
 8004266:	46a4      	mov	ip, r4
 8004268:	49a6      	ldr	r1, [pc, #664]	@ (8004504 <hashInit.0+0x2c8c>)
 800426a:	48a7      	ldr	r0, [pc, #668]	@ (8004508 <hashInit.0+0x2c90>)
 800426c:	f7fd fa56 	bl	800171c <insert.1>
		insert("WAPBTD", "wanted");
 8004270:	46a4      	mov	ip, r4
 8004272:	49a6      	ldr	r1, [pc, #664]	@ (800450c <hashInit.0+0x2c94>)
 8004274:	48a6      	ldr	r0, [pc, #664]	@ (8004510 <hashInit.0+0x2c98>)
 8004276:	f7fd fa51 	bl	800171c <insert.1>
		insert("TKPWOELD", "gold");
 800427a:	46a4      	mov	ip, r4
 800427c:	49a5      	ldr	r1, [pc, #660]	@ (8004514 <hashInit.0+0x2c9c>)
 800427e:	48a6      	ldr	r0, [pc, #664]	@ (8004518 <hashInit.0+0x2ca0>)
 8004280:	f7fd fa4c 	bl	800171c <insert.1>
		insert("PHAEUBGS", "makes");
 8004284:	46a4      	mov	ip, r4
 8004286:	49a5      	ldr	r1, [pc, #660]	@ (800451c <hashInit.0+0x2ca4>)
 8004288:	48a5      	ldr	r0, [pc, #660]	@ (8004520 <hashInit.0+0x2ca8>)
 800428a:	f7fd fa47 	bl	800171c <insert.1>
		insert("STKAOEUR", "desire");
 800428e:	46a4      	mov	ip, r4
 8004290:	49a4      	ldr	r1, [pc, #656]	@ (8004524 <hashInit.0+0x2cac>)
 8004292:	48a5      	ldr	r0, [pc, #660]	@ (8004528 <hashInit.0+0x2cb0>)
 8004294:	f7fd fa42 	bl	800171c <insert.1>
		insert("PHRAEU", "play");
 8004298:	46a4      	mov	ip, r4
 800429a:	49a4      	ldr	r1, [pc, #656]	@ (800452c <hashInit.0+0x2cb4>)
 800429c:	48a4      	ldr	r0, [pc, #656]	@ (8004530 <hashInit.0+0x2cb8>)
 800429e:	f7fd fa3d 	bl	800171c <insert.1>
		insert("PHAFRT", "master");
 80042a2:	46a4      	mov	ip, r4
 80042a4:	49a3      	ldr	r1, [pc, #652]	@ (8004534 <hashInit.0+0x2cbc>)
 80042a6:	48a4      	ldr	r0, [pc, #656]	@ (8004538 <hashInit.0+0x2cc0>)
 80042a8:	f7fd fa38 	bl	800171c <insert.1>
		insert("OFS", "office");
 80042ac:	46a4      	mov	ip, r4
 80042ae:	49a3      	ldr	r1, [pc, #652]	@ (800453c <hashInit.0+0x2cc4>)
 80042b0:	48a3      	ldr	r0, [pc, #652]	@ (8004540 <hashInit.0+0x2cc8>)
 80042b2:	f7fd fa33 	bl	800171c <insert.1>
		insert("TRAOEUD", "tried");
 80042b6:	46a4      	mov	ip, r4
 80042b8:	49a2      	ldr	r1, [pc, #648]	@ (8004544 <hashInit.0+0x2ccc>)
 80042ba:	48a3      	ldr	r0, [pc, #652]	@ (8004548 <hashInit.0+0x2cd0>)
 80042bc:	f7fd fa2e 	bl	800171c <insert.1>
		insert("TPROPBT", "front");
 80042c0:	46a4      	mov	ip, r4
 80042c2:	49a2      	ldr	r1, [pc, #648]	@ (800454c <hashInit.0+0x2cd4>)
 80042c4:	48a2      	ldr	r0, [pc, #648]	@ (8004550 <hashInit.0+0x2cd8>)
 80042c6:	f7fd fa29 	bl	800171c <insert.1>
		insert("PWEUG", "big");
 80042ca:	46a4      	mov	ip, r4
 80042cc:	49a1      	ldr	r1, [pc, #644]	@ (8004554 <hashInit.0+0x2cdc>)
 80042ce:	48a2      	ldr	r0, [pc, #648]	@ (8004558 <hashInit.0+0x2ce0>)
 80042d0:	f7fd fa24 	bl	800171c <insert.1>
		insert("TKR-FPLT", "Dr.");
 80042d4:	46a4      	mov	ip, r4
 80042d6:	49a1      	ldr	r1, [pc, #644]	@ (800455c <hashInit.0+0x2ce4>)
 80042d8:	48a1      	ldr	r0, [pc, #644]	@ (8004560 <hashInit.0+0x2ce8>)
 80042da:	f7fd fa1f 	bl	800171c <insert.1>
		insert("HREUFD", "lived");
 80042de:	46a4      	mov	ip, r4
 80042e0:	49a0      	ldr	r1, [pc, #640]	@ (8004564 <hashInit.0+0x2cec>)
 80042e2:	48a1      	ldr	r0, [pc, #644]	@ (8004568 <hashInit.0+0x2cf0>)
 80042e4:	f7fd fa1a 	bl	800171c <insert.1>
		insert("SERPBL", "certainly");
 80042e8:	46a4      	mov	ip, r4
 80042ea:	49a0      	ldr	r1, [pc, #640]	@ (800456c <hashInit.0+0x2cf4>)
 80042ec:	48a0      	ldr	r0, [pc, #640]	@ (8004570 <hashInit.0+0x2cf8>)
 80042ee:	f7fd fa15 	bl	800171c <insert.1>
		insert("WEUPBD", "wind");
 80042f2:	46a4      	mov	ip, r4
 80042f4:	499f      	ldr	r1, [pc, #636]	@ (8004574 <hashInit.0+0x2cfc>)
 80042f6:	48a0      	ldr	r0, [pc, #640]	@ (8004578 <hashInit.0+0x2d00>)
 80042f8:	f7fd fa10 	bl	800171c <insert.1>
		insert("SAOEF", "receive");
 80042fc:	46a4      	mov	ip, r4
 80042fe:	499f      	ldr	r1, [pc, #636]	@ (800457c <hashInit.0+0x2d04>)
 8004300:	489f      	ldr	r0, [pc, #636]	@ (8004580 <hashInit.0+0x2d08>)
 8004302:	f7fd fa0b 	bl	800171c <insert.1>
		insert("TAEPBGS", "attention");
 8004306:	46a4      	mov	ip, r4
 8004308:	499e      	ldr	r1, [pc, #632]	@ (8004584 <hashInit.0+0x2d0c>)
 800430a:	489f      	ldr	r0, [pc, #636]	@ (8004588 <hashInit.0+0x2d10>)
 800430c:	f7fd fa06 	bl	800171c <insert.1>
		insert("TKPWOFT", "government");
 8004310:	46a4      	mov	ip, r4
 8004312:	499e      	ldr	r1, [pc, #632]	@ (800458c <hashInit.0+0x2d14>)
 8004314:	489e      	ldr	r0, [pc, #632]	@ (8004590 <hashInit.0+0x2d18>)
 8004316:	f7fd fa01 	bl	800171c <insert.1>
		insert("UPB/TO", "unto");
 800431a:	46a4      	mov	ip, r4
 800431c:	499d      	ldr	r1, [pc, #628]	@ (8004594 <hashInit.0+0x2d1c>)
 800431e:	489e      	ldr	r0, [pc, #632]	@ (8004598 <hashInit.0+0x2d20>)
 8004320:	f7fd f9fc 	bl	800171c <insert.1>
		insert("KHUFRPB", "church");
 8004324:	46a4      	mov	ip, r4
 8004326:	499d      	ldr	r1, [pc, #628]	@ (800459c <hashInit.0+0x2d24>)
 8004328:	489d      	ldr	r0, [pc, #628]	@ (80045a0 <hashInit.0+0x2d28>)
 800432a:	f7fd f9f7 	bl	800171c <insert.1>
		insert("STREPBG", "strength");
 800432e:	46a4      	mov	ip, r4
 8004330:	499c      	ldr	r1, [pc, #624]	@ (80045a4 <hashInit.0+0x2d2c>)
 8004332:	489d      	ldr	r0, [pc, #628]	@ (80045a8 <hashInit.0+0x2d30>)
 8004334:	f7fd f9f2 	bl	800171c <insert.1>
		insert("HREPBG", "length");
 8004338:	46a4      	mov	ip, r4
 800433a:	499c      	ldr	r1, [pc, #624]	@ (80045ac <hashInit.0+0x2d34>)
 800433c:	489c      	ldr	r0, [pc, #624]	@ (80045b0 <hashInit.0+0x2d38>)
 800433e:	f7fd f9ed 	bl	800171c <insert.1>
		insert("K-P", "company");
 8004342:	46a4      	mov	ip, r4
 8004344:	499b      	ldr	r1, [pc, #620]	@ (80045b4 <hashInit.0+0x2d3c>)
 8004346:	489c      	ldr	r0, [pc, #624]	@ (80045b8 <hashInit.0+0x2d40>)
 8004348:	f7fd f9e8 	bl	800171c <insert.1>
		insert("PHRAEUFD", "placed");
 800434c:	46a4      	mov	ip, r4
 800434e:	499b      	ldr	r1, [pc, #620]	@ (80045bc <hashInit.0+0x2d44>)
 8004350:	489b      	ldr	r0, [pc, #620]	@ (80045c0 <hashInit.0+0x2d48>)
 8004352:	f7fd f9e3 	bl	800171c <insert.1>
		insert("PAEUP", "paper");
 8004356:	46a4      	mov	ip, r4
 8004358:	499a      	ldr	r1, [pc, #616]	@ (80045c4 <hashInit.0+0x2d4c>)
 800435a:	489b      	ldr	r0, [pc, #620]	@ (80045c8 <hashInit.0+0x2d50>)
 800435c:	f7fd f9de 	bl	800171c <insert.1>
		insert("HRERTS", "letters");
 8004360:	46a4      	mov	ip, r4
 8004362:	499a      	ldr	r1, [pc, #616]	@ (80045cc <hashInit.0+0x2d54>)
 8004364:	489a      	ldr	r0, [pc, #616]	@ (80045d0 <hashInit.0+0x2d58>)
 8004366:	f7fd f9d9 	bl	800171c <insert.1>
		insert("PROBL", "probably");
 800436a:	46a4      	mov	ip, r4
 800436c:	4999      	ldr	r1, [pc, #612]	@ (80045d4 <hashInit.0+0x2d5c>)
 800436e:	489a      	ldr	r0, [pc, #616]	@ (80045d8 <hashInit.0+0x2d60>)
 8004370:	f7fd f9d4 	bl	800171c <insert.1>
		insert("TKPWHRAD", "glad");
 8004374:	46a4      	mov	ip, r4
 8004376:	4999      	ldr	r1, [pc, #612]	@ (80045dc <hashInit.0+0x2d64>)
 8004378:	4899      	ldr	r0, [pc, #612]	@ (80045e0 <hashInit.0+0x2d68>)
 800437a:	f7fd f9cf 	bl	800171c <insert.1>
		insert("PORPB", "important");
 800437e:	46a4      	mov	ip, r4
 8004380:	4998      	ldr	r1, [pc, #608]	@ (80045e4 <hashInit.0+0x2d6c>)
 8004382:	4899      	ldr	r0, [pc, #612]	@ (80045e8 <hashInit.0+0x2d70>)
 8004384:	f7fd f9ca 	bl	800171c <insert.1>
		insert("EPS", "especially");
 8004388:	46a4      	mov	ip, r4
 800438a:	4998      	ldr	r1, [pc, #608]	@ (80045ec <hashInit.0+0x2d74>)
 800438c:	4898      	ldr	r0, [pc, #608]	@ (80045f0 <hashInit.0+0x2d78>)
 800438e:	f7fd f9c5 	bl	800171c <insert.1>
		insert("TKPWRAERT", "greater");
 8004392:	46a4      	mov	ip, r4
 8004394:	4997      	ldr	r1, [pc, #604]	@ (80045f4 <hashInit.0+0x2d7c>)
 8004396:	4898      	ldr	r0, [pc, #608]	@ (80045f8 <hashInit.0+0x2d80>)
 8004398:	f7fd f9c0 	bl	800171c <insert.1>
		insert("KWRO*URS", "yourself");
 800439c:	46a4      	mov	ip, r4
 800439e:	4997      	ldr	r1, [pc, #604]	@ (80045fc <hashInit.0+0x2d84>)
 80043a0:	4897      	ldr	r0, [pc, #604]	@ (8004600 <hashInit.0+0x2d88>)
 80043a2:	f7fd f9bb 	bl	800171c <insert.1>
		insert("TP*EL", "fellow");
 80043a6:	46a4      	mov	ip, r4
 80043a8:	4996      	ldr	r1, [pc, #600]	@ (8004604 <hashInit.0+0x2d8c>)
 80043aa:	4897      	ldr	r0, [pc, #604]	@ (8004608 <hashInit.0+0x2d90>)
 80043ac:	f7fd f9b6 	bl	800171c <insert.1>
		insert("PWAER", "bear");
 80043b0:	46a4      	mov	ip, r4
 80043b2:	4996      	ldr	r1, [pc, #600]	@ (800460c <hashInit.0+0x2d94>)
 80043b4:	4896      	ldr	r0, [pc, #600]	@ (8004610 <hashInit.0+0x2d98>)
 80043b6:	f7fd f9b1 	bl	800171c <insert.1>
		insert("P-PB", "opinion");
 80043ba:	46a4      	mov	ip, r4
 80043bc:	4995      	ldr	r1, [pc, #596]	@ (8004614 <hashInit.0+0x2d9c>)
 80043be:	4896      	ldr	r0, [pc, #600]	@ (8004618 <hashInit.0+0x2da0>)
 80043c0:	f7fd f9ac 	bl	800171c <insert.1>
		insert("WOEUPBD", "window");
 80043c4:	46a4      	mov	ip, r4
 80043c6:	4995      	ldr	r1, [pc, #596]	@ (800461c <hashInit.0+0x2da4>)
 80043c8:	4895      	ldr	r0, [pc, #596]	@ (8004620 <hashInit.0+0x2da8>)
 80043ca:	f7fd f9a7 	bl	800171c <insert.1>
		insert("RAPB", "ran");
 80043ce:	46a4      	mov	ip, r4
 80043d0:	4994      	ldr	r1, [pc, #592]	@ (8004624 <hashInit.0+0x2dac>)
 80043d2:	4895      	ldr	r0, [pc, #596]	@ (8004628 <hashInit.0+0x2db0>)
 80043d4:	f7fd f9a2 	bl	800171c <insert.1>
		insert("TPA*EUT", "faith");
 80043d8:	46a4      	mov	ip, r4
 80043da:	4994      	ldr	r1, [pc, #592]	@ (800462c <hashInit.0+0x2db4>)
 80043dc:	4894      	ldr	r0, [pc, #592]	@ (8004630 <hashInit.0+0x2db8>)
 80043de:	f7fd f99d 	bl	800171c <insert.1>
		insert("AG", "ago");
 80043e2:	46a4      	mov	ip, r4
 80043e4:	4993      	ldr	r1, [pc, #588]	@ (8004634 <hashInit.0+0x2dbc>)
 80043e6:	4894      	ldr	r0, [pc, #592]	@ (8004638 <hashInit.0+0x2dc0>)
 80043e8:	f7fd f998 	bl	800171c <insert.1>
		insert("TKPWRAOEPLT", "agreement");
 80043ec:	46a4      	mov	ip, r4
 80043ee:	4993      	ldr	r1, [pc, #588]	@ (800463c <hashInit.0+0x2dc4>)
 80043f0:	4893      	ldr	r0, [pc, #588]	@ (8004640 <hashInit.0+0x2dc8>)
 80043f2:	f7fd f993 	bl	800171c <insert.1>
		insert("KHARPBLG", "charge");
 80043f6:	46a4      	mov	ip, r4
 80043f8:	4992      	ldr	r1, [pc, #584]	@ (8004644 <hashInit.0+0x2dcc>)
 80043fa:	4893      	ldr	r0, [pc, #588]	@ (8004648 <hashInit.0+0x2dd0>)
 80043fc:	f7fd f98e 	bl	800171c <insert.1>
		insert("PWAOUT", "beauty");
 8004400:	46a4      	mov	ip, r4
 8004402:	4992      	ldr	r1, [pc, #584]	@ (800464c <hashInit.0+0x2dd4>)
 8004404:	4892      	ldr	r0, [pc, #584]	@ (8004650 <hashInit.0+0x2dd8>)
 8004406:	f7fd f989 	bl	800171c <insert.1>
		insert("HREUPS", "lips");
 800440a:	46a4      	mov	ip, r4
 800440c:	4991      	ldr	r1, [pc, #580]	@ (8004654 <hashInit.0+0x2ddc>)
 800440e:	4892      	ldr	r0, [pc, #584]	@ (8004658 <hashInit.0+0x2de0>)
 8004410:	f7fd f984 	bl	800171c <insert.1>
		insert("RE/PHAEUPBD", "remained");
 8004414:	46a4      	mov	ip, r4
 8004416:	4991      	ldr	r1, [pc, #580]	@ (800465c <hashInit.0+0x2de4>)
 8004418:	e122      	b.n	8004660 <hashInit.0+0x2de8>
 800441a:	bf00      	nop
 800441c:	0800f678 	.word	0x0800f678
 8004420:	0800f680 	.word	0x0800f680
 8004424:	0800f688 	.word	0x0800f688
 8004428:	0800f690 	.word	0x0800f690
 800442c:	0800f698 	.word	0x0800f698
 8004430:	0800f6a0 	.word	0x0800f6a0
 8004434:	0800f6a8 	.word	0x0800f6a8
 8004438:	0800f6b0 	.word	0x0800f6b0
 800443c:	0800f6b8 	.word	0x0800f6b8
 8004440:	0800f6c0 	.word	0x0800f6c0
 8004444:	0800f6c8 	.word	0x0800f6c8
 8004448:	0800f6d0 	.word	0x0800f6d0
 800444c:	0800f6d8 	.word	0x0800f6d8
 8004450:	0800f6e0 	.word	0x0800f6e0
 8004454:	0800f6e8 	.word	0x0800f6e8
 8004458:	0800f6f4 	.word	0x0800f6f4
 800445c:	0800f6fc 	.word	0x0800f6fc
 8004460:	0800f704 	.word	0x0800f704
 8004464:	0800f70c 	.word	0x0800f70c
 8004468:	0800f714 	.word	0x0800f714
 800446c:	0800f720 	.word	0x0800f720
 8004470:	0800f728 	.word	0x0800f728
 8004474:	0800f730 	.word	0x0800f730
 8004478:	0800f738 	.word	0x0800f738
 800447c:	0800f73c 	.word	0x0800f73c
 8004480:	0800f740 	.word	0x0800f740
 8004484:	0800f748 	.word	0x0800f748
 8004488:	0800f754 	.word	0x0800f754
 800448c:	0800d598 	.word	0x0800d598
 8004490:	0800f764 	.word	0x0800f764
 8004494:	0800f76c 	.word	0x0800f76c
 8004498:	0800f774 	.word	0x0800f774
 800449c:	0800f77c 	.word	0x0800f77c
 80044a0:	0800f780 	.word	0x0800f780
 80044a4:	0800f788 	.word	0x0800f788
 80044a8:	0800f790 	.word	0x0800f790
 80044ac:	0800f798 	.word	0x0800f798
 80044b0:	0800f7a0 	.word	0x0800f7a0
 80044b4:	0800f7a8 	.word	0x0800f7a8
 80044b8:	0800f7b0 	.word	0x0800f7b0
 80044bc:	0800f7b8 	.word	0x0800f7b8
 80044c0:	0800f7c4 	.word	0x0800f7c4
 80044c4:	0800f7cc 	.word	0x0800f7cc
 80044c8:	0800f7d4 	.word	0x0800f7d4
 80044cc:	0800f7dc 	.word	0x0800f7dc
 80044d0:	0800f7e4 	.word	0x0800f7e4
 80044d4:	0800f7ec 	.word	0x0800f7ec
 80044d8:	0800f7f0 	.word	0x0800f7f0
 80044dc:	0800f7f8 	.word	0x0800f7f8
 80044e0:	0800f7fc 	.word	0x0800f7fc
 80044e4:	0800f800 	.word	0x0800f800
 80044e8:	0800f804 	.word	0x0800f804
 80044ec:	0800f80c 	.word	0x0800f80c
 80044f0:	0800f810 	.word	0x0800f810
 80044f4:	0800f820 	.word	0x0800f820
 80044f8:	0800f828 	.word	0x0800f828
 80044fc:	0800f830 	.word	0x0800f830
 8004500:	0800f838 	.word	0x0800f838
 8004504:	0800f840 	.word	0x0800f840
 8004508:	0800f84c 	.word	0x0800f84c
 800450c:	0800f854 	.word	0x0800f854
 8004510:	0800f85c 	.word	0x0800f85c
 8004514:	0800f864 	.word	0x0800f864
 8004518:	0800f86c 	.word	0x0800f86c
 800451c:	0800f878 	.word	0x0800f878
 8004520:	0800f880 	.word	0x0800f880
 8004524:	0800f88c 	.word	0x0800f88c
 8004528:	0800f894 	.word	0x0800f894
 800452c:	0800f8a0 	.word	0x0800f8a0
 8004530:	0800f8a8 	.word	0x0800f8a8
 8004534:	0800f8b0 	.word	0x0800f8b0
 8004538:	0800f8b8 	.word	0x0800f8b8
 800453c:	0800f8c0 	.word	0x0800f8c0
 8004540:	0800f8c8 	.word	0x0800f8c8
 8004544:	0800f8cc 	.word	0x0800f8cc
 8004548:	0800f8d4 	.word	0x0800f8d4
 800454c:	0800f8dc 	.word	0x0800f8dc
 8004550:	0800f8e4 	.word	0x0800f8e4
 8004554:	0800f8ec 	.word	0x0800f8ec
 8004558:	0800f8f0 	.word	0x0800f8f0
 800455c:	0800f8f8 	.word	0x0800f8f8
 8004560:	0800f8fc 	.word	0x0800f8fc
 8004564:	0800f908 	.word	0x0800f908
 8004568:	0800f910 	.word	0x0800f910
 800456c:	0800f918 	.word	0x0800f918
 8004570:	0800f924 	.word	0x0800f924
 8004574:	0800f92c 	.word	0x0800f92c
 8004578:	0800f934 	.word	0x0800f934
 800457c:	0800f93c 	.word	0x0800f93c
 8004580:	0800f944 	.word	0x0800f944
 8004584:	0800f94c 	.word	0x0800f94c
 8004588:	0800f958 	.word	0x0800f958
 800458c:	0800f960 	.word	0x0800f960
 8004590:	0800f96c 	.word	0x0800f96c
 8004594:	0800f974 	.word	0x0800f974
 8004598:	0800f97c 	.word	0x0800f97c
 800459c:	0800f984 	.word	0x0800f984
 80045a0:	0800f98c 	.word	0x0800f98c
 80045a4:	0800f994 	.word	0x0800f994
 80045a8:	0800f9a0 	.word	0x0800f9a0
 80045ac:	0800f9a8 	.word	0x0800f9a8
 80045b0:	0800f9b0 	.word	0x0800f9b0
 80045b4:	0800f9b8 	.word	0x0800f9b8
 80045b8:	0800f9c0 	.word	0x0800f9c0
 80045bc:	0800f9c4 	.word	0x0800f9c4
 80045c0:	0800f9cc 	.word	0x0800f9cc
 80045c4:	0800f9d8 	.word	0x0800f9d8
 80045c8:	0800f9e0 	.word	0x0800f9e0
 80045cc:	0800f9e8 	.word	0x0800f9e8
 80045d0:	0800f9f0 	.word	0x0800f9f0
 80045d4:	0800f9f8 	.word	0x0800f9f8
 80045d8:	0800fa04 	.word	0x0800fa04
 80045dc:	0800fa0c 	.word	0x0800fa0c
 80045e0:	0800fa14 	.word	0x0800fa14
 80045e4:	0800fa20 	.word	0x0800fa20
 80045e8:	0800fa2c 	.word	0x0800fa2c
 80045ec:	0800fa34 	.word	0x0800fa34
 80045f0:	0800fa40 	.word	0x0800fa40
 80045f4:	0800fa44 	.word	0x0800fa44
 80045f8:	0800fa4c 	.word	0x0800fa4c
 80045fc:	0800fa58 	.word	0x0800fa58
 8004600:	0800fa64 	.word	0x0800fa64
 8004604:	0800fa70 	.word	0x0800fa70
 8004608:	0800fa78 	.word	0x0800fa78
 800460c:	0800fa80 	.word	0x0800fa80
 8004610:	0800fa88 	.word	0x0800fa88
 8004614:	0800fa90 	.word	0x0800fa90
 8004618:	0800fa98 	.word	0x0800fa98
 800461c:	0800faa0 	.word	0x0800faa0
 8004620:	0800faa8 	.word	0x0800faa8
 8004624:	0800fab0 	.word	0x0800fab0
 8004628:	0800fab4 	.word	0x0800fab4
 800462c:	0800fabc 	.word	0x0800fabc
 8004630:	0800fac4 	.word	0x0800fac4
 8004634:	0800facc 	.word	0x0800facc
 8004638:	0800fad0 	.word	0x0800fad0
 800463c:	0800fad4 	.word	0x0800fad4
 8004640:	0800fae0 	.word	0x0800fae0
 8004644:	0800faec 	.word	0x0800faec
 8004648:	0800faf4 	.word	0x0800faf4
 800464c:	0800fb00 	.word	0x0800fb00
 8004650:	0800fb08 	.word	0x0800fb08
 8004654:	0800fb10 	.word	0x0800fb10
 8004658:	0800fb18 	.word	0x0800fb18
 800465c:	0800fb20 	.word	0x0800fb20
 8004660:	48b5      	ldr	r0, [pc, #724]	@ (8004938 <hashInit.0+0x30c0>)
 8004662:	f7fd f85b 	bl	800171c <insert.1>
		insert("ARPL", "arm");
 8004666:	46a4      	mov	ip, r4
 8004668:	49b4      	ldr	r1, [pc, #720]	@ (800493c <hashInit.0+0x30c4>)
 800466a:	48b5      	ldr	r0, [pc, #724]	@ (8004940 <hashInit.0+0x30c8>)
 800466c:	f7fd f856 	bl	800171c <insert.1>
		insert("HRART", "latter");
 8004670:	46a4      	mov	ip, r4
 8004672:	49b4      	ldr	r1, [pc, #720]	@ (8004944 <hashInit.0+0x30cc>)
 8004674:	48b4      	ldr	r0, [pc, #720]	@ (8004948 <hashInit.0+0x30d0>)
 8004676:	f7fd f851 	bl	800171c <insert.1>
		insert("TKAOUT", "duty");
 800467a:	46a4      	mov	ip, r4
 800467c:	49b3      	ldr	r1, [pc, #716]	@ (800494c <hashInit.0+0x30d4>)
 800467e:	48b4      	ldr	r0, [pc, #720]	@ (8004950 <hashInit.0+0x30d8>)
 8004680:	f7fd f84c 	bl	800171c <insert.1>
		insert("SEPBD", "send");
 8004684:	46a4      	mov	ip, r4
 8004686:	49b3      	ldr	r1, [pc, #716]	@ (8004954 <hashInit.0+0x30dc>)
 8004688:	48b3      	ldr	r0, [pc, #716]	@ (8004958 <hashInit.0+0x30e0>)
 800468a:	f7fd f847 	bl	800171c <insert.1>
		insert("STKAPBS", "distance");
 800468e:	46a4      	mov	ip, r4
 8004690:	49b2      	ldr	r1, [pc, #712]	@ (800495c <hashInit.0+0x30e4>)
 8004692:	48b3      	ldr	r0, [pc, #716]	@ (8004960 <hashInit.0+0x30e8>)
 8004694:	f7fd f842 	bl	800171c <insert.1>
		insert("SHREPBS", "silence");
 8004698:	46a4      	mov	ip, r4
 800469a:	49b2      	ldr	r1, [pc, #712]	@ (8004964 <hashInit.0+0x30ec>)
 800469c:	48b2      	ldr	r0, [pc, #712]	@ (8004968 <hashInit.0+0x30f0>)
 800469e:	f7fd f83d 	bl	800171c <insert.1>
		insert("TPAOT", "foot");
 80046a2:	46a4      	mov	ip, r4
 80046a4:	49b1      	ldr	r1, [pc, #708]	@ (800496c <hashInit.0+0x30f4>)
 80046a6:	48b2      	ldr	r0, [pc, #712]	@ (8004970 <hashInit.0+0x30f8>)
 80046a8:	f7fd f838 	bl	800171c <insert.1>
		insert("WAOEULD", "wild");
 80046ac:	46a4      	mov	ip, r4
 80046ae:	49b1      	ldr	r1, [pc, #708]	@ (8004974 <hashInit.0+0x30fc>)
 80046b0:	48b1      	ldr	r0, [pc, #708]	@ (8004978 <hashInit.0+0x3100>)
 80046b2:	f7fd f833 	bl	800171c <insert.1>
		insert("OBT", "object");
 80046b6:	46a4      	mov	ip, r4
 80046b8:	49b0      	ldr	r1, [pc, #704]	@ (800497c <hashInit.0+0x3104>)
 80046ba:	48b1      	ldr	r0, [pc, #708]	@ (8004980 <hashInit.0+0x3108>)
 80046bc:	f7fd f82e 	bl	800171c <insert.1>
		insert("TKAOEU", "die");
 80046c0:	46a4      	mov	ip, r4
 80046c2:	49b0      	ldr	r1, [pc, #704]	@ (8004984 <hashInit.0+0x310c>)
 80046c4:	48b0      	ldr	r0, [pc, #704]	@ (8004988 <hashInit.0+0x3110>)
 80046c6:	f7fd f829 	bl	800171c <insert.1>
		insert("SAF", "save");
 80046ca:	46a4      	mov	ip, r4
 80046cc:	49af      	ldr	r1, [pc, #700]	@ (800498c <hashInit.0+0x3114>)
 80046ce:	48b0      	ldr	r0, [pc, #704]	@ (8004990 <hashInit.0+0x3118>)
 80046d0:	f7fd f824 	bl	800171c <insert.1>
		insert("SKWRA*PL", "gentleman");
 80046d4:	46a4      	mov	ip, r4
 80046d6:	49af      	ldr	r1, [pc, #700]	@ (8004994 <hashInit.0+0x311c>)
 80046d8:	48af      	ldr	r0, [pc, #700]	@ (8004998 <hashInit.0+0x3120>)
 80046da:	f7fd f81f 	bl	800171c <insert.1>
		insert("TRAOES", "trees");
 80046de:	46a4      	mov	ip, r4
 80046e0:	49ae      	ldr	r1, [pc, #696]	@ (800499c <hashInit.0+0x3124>)
 80046e2:	48af      	ldr	r0, [pc, #700]	@ (80049a0 <hashInit.0+0x3128>)
 80046e4:	f7fd f81a 	bl	800171c <insert.1>
		insert("TKPWRAOEPB", "green");
 80046e8:	46a4      	mov	ip, r4
 80046ea:	49ae      	ldr	r1, [pc, #696]	@ (80049a4 <hashInit.0+0x312c>)
 80046ec:	48ae      	ldr	r0, [pc, #696]	@ (80049a8 <hashInit.0+0x3130>)
 80046ee:	f7fd f815 	bl	800171c <insert.1>
		insert("TRUBL", "trouble");
 80046f2:	46a4      	mov	ip, r4
 80046f4:	49ad      	ldr	r1, [pc, #692]	@ (80049ac <hashInit.0+0x3134>)
 80046f6:	48ae      	ldr	r0, [pc, #696]	@ (80049b0 <hashInit.0+0x3138>)
 80046f8:	f7fd f810 	bl	800171c <insert.1>
		insert("SPHAOEUL", "smile");
 80046fc:	46a4      	mov	ip, r4
 80046fe:	49ad      	ldr	r1, [pc, #692]	@ (80049b4 <hashInit.0+0x313c>)
 8004700:	48ad      	ldr	r0, [pc, #692]	@ (80049b8 <hashInit.0+0x3140>)
 8004702:	f7fd f80b 	bl	800171c <insert.1>
		insert("PWAOBGS", "books");
 8004706:	46a4      	mov	ip, r4
 8004708:	49ac      	ldr	r1, [pc, #688]	@ (80049bc <hashInit.0+0x3144>)
 800470a:	48ad      	ldr	r0, [pc, #692]	@ (80049c0 <hashInit.0+0x3148>)
 800470c:	f7fd f806 	bl	800171c <insert.1>
		insert("WROPBG", "wrong");
 8004710:	46a4      	mov	ip, r4
 8004712:	49ac      	ldr	r1, [pc, #688]	@ (80049c4 <hashInit.0+0x314c>)
 8004714:	48ac      	ldr	r0, [pc, #688]	@ (80049c8 <hashInit.0+0x3150>)
 8004716:	f7fd f801 	bl	800171c <insert.1>
		insert("SRAEURS", "various");
 800471a:	46a4      	mov	ip, r4
 800471c:	49ab      	ldr	r1, [pc, #684]	@ (80049cc <hashInit.0+0x3154>)
 800471e:	48ac      	ldr	r0, [pc, #688]	@ (80049d0 <hashInit.0+0x3158>)
 8004720:	f7fc fffc 	bl	800171c <insert.1>
		insert("SHRAOEP", "sleep");
 8004724:	46a4      	mov	ip, r4
 8004726:	49ab      	ldr	r1, [pc, #684]	@ (80049d4 <hashInit.0+0x315c>)
 8004728:	48ab      	ldr	r0, [pc, #684]	@ (80049d8 <hashInit.0+0x3160>)
 800472a:	f7fc fff7 	bl	800171c <insert.1>
		insert("PERPBS", "persons");
 800472e:	46a4      	mov	ip, r4
 8004730:	49aa      	ldr	r1, [pc, #680]	@ (80049dc <hashInit.0+0x3164>)
 8004732:	48ab      	ldr	r0, [pc, #684]	@ (80049e0 <hashInit.0+0x3168>)
 8004734:	f7fc fff2 	bl	800171c <insert.1>
		insert("PWHROBG/TK-LS/KWOET", "blockquote");
 8004738:	46a4      	mov	ip, r4
 800473a:	49aa      	ldr	r1, [pc, #680]	@ (80049e4 <hashInit.0+0x316c>)
 800473c:	48aa      	ldr	r0, [pc, #680]	@ (80049e8 <hashInit.0+0x3170>)
 800473e:	f7fc ffed 	bl	800171c <insert.1>
		insert("HAPD", "happened");
 8004742:	46a4      	mov	ip, r4
 8004744:	49a9      	ldr	r1, [pc, #676]	@ (80049ec <hashInit.0+0x3174>)
 8004746:	48aa      	ldr	r0, [pc, #680]	@ (80049f0 <hashInit.0+0x3178>)
 8004748:	f7fc ffe8 	bl	800171c <insert.1>
		insert("PHRAR", "particular");
 800474c:	46a4      	mov	ip, r4
 800474e:	49a9      	ldr	r1, [pc, #676]	@ (80049f4 <hashInit.0+0x317c>)
 8004750:	48a9      	ldr	r0, [pc, #676]	@ (80049f8 <hashInit.0+0x3180>)
 8004752:	f7fc ffe3 	bl	800171c <insert.1>
		insert("TKRAOU", "drew");
 8004756:	46a4      	mov	ip, r4
 8004758:	49a8      	ldr	r1, [pc, #672]	@ (80049fc <hashInit.0+0x3184>)
 800475a:	48a9      	ldr	r0, [pc, #676]	@ (8004a00 <hashInit.0+0x3188>)
 800475c:	f7fc ffde 	bl	800171c <insert.1>
		insert("PHEUPBS", "minutes");
 8004760:	46a4      	mov	ip, r4
 8004762:	49a8      	ldr	r1, [pc, #672]	@ (8004a04 <hashInit.0+0x318c>)
 8004764:	48a8      	ldr	r0, [pc, #672]	@ (8004a08 <hashInit.0+0x3190>)
 8004766:	f7fc ffd9 	bl	800171c <insert.1>
		insert("HA*RLD", "hardly");
 800476a:	46a4      	mov	ip, r4
 800476c:	49a7      	ldr	r1, [pc, #668]	@ (8004a0c <hashInit.0+0x3194>)
 800476e:	48a8      	ldr	r0, [pc, #672]	@ (8004a10 <hashInit.0+0x3198>)
 8004770:	f7fc ffd4 	bl	800171c <insert.1>
		insert("WAUBGD", "walked");
 8004774:	46a4      	mov	ip, r4
 8004776:	49a7      	ldr	r1, [pc, #668]	@ (8004a14 <hashInit.0+0x319c>)
 8004778:	48a7      	ldr	r0, [pc, #668]	@ (8004a18 <hashInit.0+0x31a0>)
 800477a:	f7fc ffcf 	bl	800171c <insert.1>
		insert("KHAOEF", "chief");
 800477e:	46a4      	mov	ip, r4
 8004780:	49a6      	ldr	r1, [pc, #664]	@ (8004a1c <hashInit.0+0x31a4>)
 8004782:	48a7      	ldr	r0, [pc, #668]	@ (8004a20 <hashInit.0+0x31a8>)
 8004784:	f7fc ffca 	bl	800171c <insert.1>
		insert("KHAPBS", "chance");
 8004788:	46a4      	mov	ip, r4
 800478a:	49a6      	ldr	r1, [pc, #664]	@ (8004a24 <hashInit.0+0x31ac>)
 800478c:	48a6      	ldr	r0, [pc, #664]	@ (8004a28 <hashInit.0+0x31b0>)
 800478e:	f7fc ffc5 	bl	800171c <insert.1>
		insert("KORG", "according");
 8004792:	46a4      	mov	ip, r4
 8004794:	49a5      	ldr	r1, [pc, #660]	@ (8004a2c <hashInit.0+0x31b4>)
 8004796:	48a6      	ldr	r0, [pc, #664]	@ (8004a30 <hashInit.0+0x31b8>)
 8004798:	f7fc ffc0 	bl	800171c <insert.1>
		insert("TKPWEUPB/-G", "beginning");
 800479c:	46a4      	mov	ip, r4
 800479e:	49a5      	ldr	r1, [pc, #660]	@ (8004a34 <hashInit.0+0x31bc>)
 80047a0:	48a5      	ldr	r0, [pc, #660]	@ (8004a38 <hashInit.0+0x31c0>)
 80047a2:	f7fc ffbb 	bl	800171c <insert.1>
		insert("*BGS", "action");
 80047a6:	46a4      	mov	ip, r4
 80047a8:	49a4      	ldr	r1, [pc, #656]	@ (8004a3c <hashInit.0+0x31c4>)
 80047aa:	48a5      	ldr	r0, [pc, #660]	@ (8004a40 <hashInit.0+0x31c8>)
 80047ac:	f7fc ffb6 	bl	800171c <insert.1>
		insert("TKAOEL", "deal");
 80047b0:	46a4      	mov	ip, r4
 80047b2:	49a4      	ldr	r1, [pc, #656]	@ (8004a44 <hashInit.0+0x31cc>)
 80047b4:	48a4      	ldr	r0, [pc, #656]	@ (8004a48 <hashInit.0+0x31d0>)
 80047b6:	f7fc ffb1 	bl	800171c <insert.1>
		insert("HROFD", "loved");
 80047ba:	46a4      	mov	ip, r4
 80047bc:	49a3      	ldr	r1, [pc, #652]	@ (8004a4c <hashInit.0+0x31d4>)
 80047be:	48a4      	ldr	r0, [pc, #656]	@ (8004a50 <hashInit.0+0x31d8>)
 80047c0:	f7fc ffac 	bl	800171c <insert.1>
		insert("SREUFT", "visit");
 80047c4:	46a4      	mov	ip, r4
 80047c6:	49a3      	ldr	r1, [pc, #652]	@ (8004a54 <hashInit.0+0x31dc>)
 80047c8:	48a3      	ldr	r0, [pc, #652]	@ (8004a58 <hashInit.0+0x31e0>)
 80047ca:	f7fc ffa7 	bl	800171c <insert.1>
		insert("THEUG", "thinking");
 80047ce:	46a4      	mov	ip, r4
 80047d0:	49a2      	ldr	r1, [pc, #648]	@ (8004a5c <hashInit.0+0x31e4>)
 80047d2:	48a3      	ldr	r0, [pc, #652]	@ (8004a60 <hashInit.0+0x31e8>)
 80047d4:	f7fc ffa2 	bl	800171c <insert.1>
		insert("TPOL", "follow");
 80047d8:	46a4      	mov	ip, r4
 80047da:	49a2      	ldr	r1, [pc, #648]	@ (8004a64 <hashInit.0+0x31ec>)
 80047dc:	48a2      	ldr	r0, [pc, #648]	@ (8004a68 <hashInit.0+0x31f0>)
 80047de:	f7fc ff9d 	bl	800171c <insert.1>
		insert("STAPBG", "standing");
 80047e2:	46a4      	mov	ip, r4
 80047e4:	49a1      	ldr	r1, [pc, #644]	@ (8004a6c <hashInit.0+0x31f4>)
 80047e6:	48a2      	ldr	r0, [pc, #648]	@ (8004a70 <hashInit.0+0x31f8>)
 80047e8:	f7fc ff98 	bl	800171c <insert.1>
		insert("TPHOEZ", "knows");
 80047ec:	46a4      	mov	ip, r4
 80047ee:	49a1      	ldr	r1, [pc, #644]	@ (8004a74 <hashInit.0+0x31fc>)
 80047f0:	48a1      	ldr	r0, [pc, #644]	@ (8004a78 <hashInit.0+0x3200>)
 80047f2:	f7fc ff93 	bl	800171c <insert.1>
		insert("TREU", "try");
 80047f6:	46a4      	mov	ip, r4
 80047f8:	49a0      	ldr	r1, [pc, #640]	@ (8004a7c <hashInit.0+0x3204>)
 80047fa:	48a1      	ldr	r0, [pc, #644]	@ (8004a80 <hashInit.0+0x3208>)
 80047fc:	f7fc ff8e 	bl	800171c <insert.1>
		insert("PREPBS", "presence");
 8004800:	46a4      	mov	ip, r4
 8004802:	49a0      	ldr	r1, [pc, #640]	@ (8004a84 <hashInit.0+0x320c>)
 8004804:	48a0      	ldr	r0, [pc, #640]	@ (8004a88 <hashInit.0+0x3210>)
 8004806:	f7fc ff89 	bl	800171c <insert.1>
		insert("HOEUF", "heavy");
 800480a:	46a4      	mov	ip, r4
 800480c:	499f      	ldr	r1, [pc, #636]	@ (8004a8c <hashInit.0+0x3214>)
 800480e:	48a0      	ldr	r0, [pc, #640]	@ (8004a90 <hashInit.0+0x3218>)
 8004810:	f7fc ff84 	bl	800171c <insert.1>
		insert("SWAOET", "sweet");
 8004814:	46a4      	mov	ip, r4
 8004816:	499f      	ldr	r1, [pc, #636]	@ (8004a94 <hashInit.0+0x321c>)
 8004818:	489f      	ldr	r0, [pc, #636]	@ (8004a98 <hashInit.0+0x3220>)
 800481a:	f7fc ff7f 	bl	800171c <insert.1>
		insert("PHRAEUPB", "plain");
 800481e:	46a4      	mov	ip, r4
 8004820:	499e      	ldr	r1, [pc, #632]	@ (8004a9c <hashInit.0+0x3224>)
 8004822:	489f      	ldr	r0, [pc, #636]	@ (8004aa0 <hashInit.0+0x3228>)
 8004824:	f7fc ff7a 	bl	800171c <insert.1>
		insert("TKOEPBGS/-S", "donations");
 8004828:	46a4      	mov	ip, r4
 800482a:	499e      	ldr	r1, [pc, #632]	@ (8004aa4 <hashInit.0+0x322c>)
 800482c:	489e      	ldr	r0, [pc, #632]	@ (8004aa8 <hashInit.0+0x3230>)
 800482e:	f7fc ff75 	bl	800171c <insert.1>
		insert("PHAOELD", "immediately");
 8004832:	46a4      	mov	ip, r4
 8004834:	499d      	ldr	r1, [pc, #628]	@ (8004aac <hashInit.0+0x3234>)
 8004836:	489e      	ldr	r0, [pc, #632]	@ (8004ab0 <hashInit.0+0x3238>)
 8004838:	f7fc ff70 	bl	800171c <insert.1>
		insert("WRO", "wrote");
 800483c:	46a4      	mov	ip, r4
 800483e:	499d      	ldr	r1, [pc, #628]	@ (8004ab4 <hashInit.0+0x323c>)
 8004840:	489d      	ldr	r0, [pc, #628]	@ (8004ab8 <hashInit.0+0x3240>)
 8004842:	f7fc ff6b 	bl	800171c <insert.1>
		insert("PHO*UT", "mouth");
 8004846:	46a4      	mov	ip, r4
 8004848:	499c      	ldr	r1, [pc, #624]	@ (8004abc <hashInit.0+0x3244>)
 800484a:	489d      	ldr	r0, [pc, #628]	@ (8004ac0 <hashInit.0+0x3248>)
 800484c:	f7fc ff66 	bl	800171c <insert.1>
		insert("REUFP", "rich");
 8004850:	46a4      	mov	ip, r4
 8004852:	499c      	ldr	r1, [pc, #624]	@ (8004ac4 <hashInit.0+0x324c>)
 8004854:	489c      	ldr	r0, [pc, #624]	@ (8004ac8 <hashInit.0+0x3250>)
 8004856:	f7fc ff61 	bl	800171c <insert.1>
		insert("THAUTS", "thoughts");
 800485a:	46a4      	mov	ip, r4
 800485c:	499b      	ldr	r1, [pc, #620]	@ (8004acc <hashInit.0+0x3254>)
 800485e:	489c      	ldr	r0, [pc, #624]	@ (8004ad0 <hashInit.0+0x3258>)
 8004860:	f7fc ff5c 	bl	800171c <insert.1>
		insert("PHO*PBTS", "months");
 8004864:	46a4      	mov	ip, r4
 8004866:	499b      	ldr	r1, [pc, #620]	@ (8004ad4 <hashInit.0+0x325c>)
 8004868:	489b      	ldr	r0, [pc, #620]	@ (8004ad8 <hashInit.0+0x3260>)
 800486a:	f7fc ff57 	bl	800171c <insert.1>
		insert("*U", "u");
 800486e:	46a4      	mov	ip, r4
 8004870:	499a      	ldr	r1, [pc, #616]	@ (8004adc <hashInit.0+0x3264>)
 8004872:	489b      	ldr	r0, [pc, #620]	@ (8004ae0 <hashInit.0+0x3268>)
 8004874:	f7fc ff52 	bl	800171c <insert.1>
		insert("WOEPBT", "won't");
 8004878:	46a4      	mov	ip, r4
 800487a:	499a      	ldr	r1, [pc, #616]	@ (8004ae4 <hashInit.0+0x326c>)
 800487c:	489a      	ldr	r0, [pc, #616]	@ (8004ae8 <hashInit.0+0x3270>)
 800487e:	f7fc ff4d 	bl	800171c <insert.1>
		insert("A/TPRAEUD", "afraid");
 8004882:	46a4      	mov	ip, r4
 8004884:	4999      	ldr	r1, [pc, #612]	@ (8004aec <hashInit.0+0x3274>)
 8004886:	489a      	ldr	r0, [pc, #616]	@ (8004af0 <hashInit.0+0x3278>)
 8004888:	f7fc ff48 	bl	800171c <insert.1>
		insert("PA*EURS", "Paris");
 800488c:	46a4      	mov	ip, r4
 800488e:	4999      	ldr	r1, [pc, #612]	@ (8004af4 <hashInit.0+0x327c>)
 8004890:	4899      	ldr	r0, [pc, #612]	@ (8004af8 <hashInit.0+0x3280>)
 8004892:	f7fc ff43 	bl	800171c <insert.1>
		insert("SEUPBLG", "single");
 8004896:	46a4      	mov	ip, r4
 8004898:	4998      	ldr	r1, [pc, #608]	@ (8004afc <hashInit.0+0x3284>)
 800489a:	4899      	ldr	r0, [pc, #612]	@ (8004b00 <hashInit.0+0x3288>)
 800489c:	f7fc ff3e 	bl	800171c <insert.1>
		insert("SKWROEU", "joy");
 80048a0:	46a4      	mov	ip, r4
 80048a2:	4998      	ldr	r1, [pc, #608]	@ (8004b04 <hashInit.0+0x328c>)
 80048a4:	4898      	ldr	r0, [pc, #608]	@ (8004b08 <hashInit.0+0x3290>)
 80048a6:	f7fc ff39 	bl	800171c <insert.1>
		insert("TPHAEPL", "enemy");
 80048aa:	46a4      	mov	ip, r4
 80048ac:	4997      	ldr	r1, [pc, #604]	@ (8004b0c <hashInit.0+0x3294>)
 80048ae:	4898      	ldr	r0, [pc, #608]	@ (8004b10 <hashInit.0+0x3298>)
 80048b0:	f7fc ff34 	bl	800171c <insert.1>
		insert("PWROEPB", "broken");
 80048b4:	46a4      	mov	ip, r4
 80048b6:	4997      	ldr	r1, [pc, #604]	@ (8004b14 <hashInit.0+0x329c>)
 80048b8:	4897      	ldr	r0, [pc, #604]	@ (8004b18 <hashInit.0+0x32a0>)
 80048ba:	f7fc ff2f 	bl	800171c <insert.1>
		insert("TPH-LS", "unless");
 80048be:	46a4      	mov	ip, r4
 80048c0:	4996      	ldr	r1, [pc, #600]	@ (8004b1c <hashInit.0+0x32a4>)
 80048c2:	4897      	ldr	r0, [pc, #604]	@ (8004b20 <hashInit.0+0x32a8>)
 80048c4:	f7fc ff2a 	bl	800171c <insert.1>
		insert("STAEUTS", "states");
 80048c8:	46a4      	mov	ip, r4
 80048ca:	4996      	ldr	r1, [pc, #600]	@ (8004b24 <hashInit.0+0x32ac>)
 80048cc:	4896      	ldr	r0, [pc, #600]	@ (8004b28 <hashInit.0+0x32b0>)
 80048ce:	f7fc ff25 	bl	800171c <insert.1>
		insert("SHEUP", "ship");
 80048d2:	46a4      	mov	ip, r4
 80048d4:	4995      	ldr	r1, [pc, #596]	@ (8004b2c <hashInit.0+0x32b4>)
 80048d6:	4896      	ldr	r0, [pc, #600]	@ (8004b30 <hashInit.0+0x32b8>)
 80048d8:	f7fc ff20 	bl	800171c <insert.1>
		insert("K-PB", "condition");
 80048dc:	46a4      	mov	ip, r4
 80048de:	4995      	ldr	r1, [pc, #596]	@ (8004b34 <hashInit.0+0x32bc>)
 80048e0:	4895      	ldr	r0, [pc, #596]	@ (8004b38 <hashInit.0+0x32c0>)
 80048e2:	f7fc ff1b 	bl	800171c <insert.1>
		insert("KAER", "carry");
 80048e6:	46a4      	mov	ip, r4
 80048e8:	4994      	ldr	r1, [pc, #592]	@ (8004b3c <hashInit.0+0x32c4>)
 80048ea:	4895      	ldr	r0, [pc, #596]	@ (8004b40 <hashInit.0+0x32c8>)
 80048ec:	f7fc ff16 	bl	800171c <insert.1>
		insert("SKHRAEUPLD", "exclaimed");
 80048f0:	46a4      	mov	ip, r4
 80048f2:	4994      	ldr	r1, [pc, #592]	@ (8004b44 <hashInit.0+0x32cc>)
 80048f4:	4894      	ldr	r0, [pc, #592]	@ (8004b48 <hashInit.0+0x32d0>)
 80048f6:	f7fc ff11 	bl	800171c <insert.1>
		insert("KHRUG", "including");
 80048fa:	46a4      	mov	ip, r4
 80048fc:	4993      	ldr	r1, [pc, #588]	@ (8004b4c <hashInit.0+0x32d4>)
 80048fe:	4894      	ldr	r0, [pc, #592]	@ (8004b50 <hashInit.0+0x32d8>)
 8004900:	f7fc ff0c 	bl	800171c <insert.1>
		insert("TPEULD", "filled");
 8004904:	46a4      	mov	ip, r4
 8004906:	4993      	ldr	r1, [pc, #588]	@ (8004b54 <hashInit.0+0x32dc>)
 8004908:	4893      	ldr	r0, [pc, #588]	@ (8004b58 <hashInit.0+0x32e0>)
 800490a:	f7fc ff07 	bl	800171c <insert.1>
		insert("SAOEG", "seeing");
 800490e:	46a4      	mov	ip, r4
 8004910:	4992      	ldr	r1, [pc, #584]	@ (8004b5c <hashInit.0+0x32e4>)
 8004912:	4893      	ldr	r0, [pc, #588]	@ (8004b60 <hashInit.0+0x32e8>)
 8004914:	f7fc ff02 	bl	800171c <insert.1>
		insert("WEPBS", "influence");
 8004918:	46a4      	mov	ip, r4
 800491a:	4992      	ldr	r1, [pc, #584]	@ (8004b64 <hashInit.0+0x32ec>)
 800491c:	4892      	ldr	r0, [pc, #584]	@ (8004b68 <hashInit.0+0x32f0>)
 800491e:	f7fc fefd 	bl	800171c <insert.1>
		insert("WREU", "write");
 8004922:	46a4      	mov	ip, r4
 8004924:	4991      	ldr	r1, [pc, #580]	@ (8004b6c <hashInit.0+0x32f4>)
 8004926:	4892      	ldr	r0, [pc, #584]	@ (8004b70 <hashInit.0+0x32f8>)
 8004928:	f7fc fef8 	bl	800171c <insert.1>
		insert("PWOEUS", "boys");
 800492c:	46a4      	mov	ip, r4
 800492e:	4991      	ldr	r1, [pc, #580]	@ (8004b74 <hashInit.0+0x32fc>)
 8004930:	4891      	ldr	r0, [pc, #580]	@ (8004b78 <hashInit.0+0x3300>)
 8004932:	f7fc fef3 	bl	800171c <insert.1>
 8004936:	e121      	b.n	8004b7c <hashInit.0+0x3304>
 8004938:	0800fb2c 	.word	0x0800fb2c
 800493c:	0800fb38 	.word	0x0800fb38
 8004940:	0800fb3c 	.word	0x0800fb3c
 8004944:	0800fb44 	.word	0x0800fb44
 8004948:	0800fb4c 	.word	0x0800fb4c
 800494c:	0800d600 	.word	0x0800d600
 8004950:	0800d608 	.word	0x0800d608
 8004954:	0800fb54 	.word	0x0800fb54
 8004958:	0800fb5c 	.word	0x0800fb5c
 800495c:	0800fb64 	.word	0x0800fb64
 8004960:	0800fb70 	.word	0x0800fb70
 8004964:	0800fb78 	.word	0x0800fb78
 8004968:	0800fb80 	.word	0x0800fb80
 800496c:	0800fb88 	.word	0x0800fb88
 8004970:	0800fb90 	.word	0x0800fb90
 8004974:	0800fb98 	.word	0x0800fb98
 8004978:	0800fba0 	.word	0x0800fba0
 800497c:	0800fba8 	.word	0x0800fba8
 8004980:	0800fbb0 	.word	0x0800fbb0
 8004984:	0800fbb4 	.word	0x0800fbb4
 8004988:	0800fbb8 	.word	0x0800fbb8
 800498c:	0800fbc0 	.word	0x0800fbc0
 8004990:	0800fbc8 	.word	0x0800fbc8
 8004994:	0800fbcc 	.word	0x0800fbcc
 8004998:	0800fbd8 	.word	0x0800fbd8
 800499c:	0800fbe4 	.word	0x0800fbe4
 80049a0:	0800fbec 	.word	0x0800fbec
 80049a4:	0800fbf4 	.word	0x0800fbf4
 80049a8:	0800fbfc 	.word	0x0800fbfc
 80049ac:	0800fc08 	.word	0x0800fc08
 80049b0:	0800fc10 	.word	0x0800fc10
 80049b4:	0800fc18 	.word	0x0800fc18
 80049b8:	0800fc20 	.word	0x0800fc20
 80049bc:	0800fc2c 	.word	0x0800fc2c
 80049c0:	0800fc34 	.word	0x0800fc34
 80049c4:	0800fc3c 	.word	0x0800fc3c
 80049c8:	0800fc44 	.word	0x0800fc44
 80049cc:	0800fc4c 	.word	0x0800fc4c
 80049d0:	0800fc54 	.word	0x0800fc54
 80049d4:	0800fc5c 	.word	0x0800fc5c
 80049d8:	0800fc64 	.word	0x0800fc64
 80049dc:	0800fc6c 	.word	0x0800fc6c
 80049e0:	0800fc74 	.word	0x0800fc74
 80049e4:	0800fc7c 	.word	0x0800fc7c
 80049e8:	0800fc88 	.word	0x0800fc88
 80049ec:	0800fc9c 	.word	0x0800fc9c
 80049f0:	0800fca8 	.word	0x0800fca8
 80049f4:	0800fcb0 	.word	0x0800fcb0
 80049f8:	0800fcbc 	.word	0x0800fcbc
 80049fc:	0800fcc4 	.word	0x0800fcc4
 8004a00:	0800fccc 	.word	0x0800fccc
 8004a04:	0800fcd4 	.word	0x0800fcd4
 8004a08:	0800fcdc 	.word	0x0800fcdc
 8004a0c:	0800fce4 	.word	0x0800fce4
 8004a10:	0800fcec 	.word	0x0800fcec
 8004a14:	0800fcf4 	.word	0x0800fcf4
 8004a18:	0800fcfc 	.word	0x0800fcfc
 8004a1c:	0800fd04 	.word	0x0800fd04
 8004a20:	0800fd0c 	.word	0x0800fd0c
 8004a24:	0800fd14 	.word	0x0800fd14
 8004a28:	0800fd1c 	.word	0x0800fd1c
 8004a2c:	0800fd24 	.word	0x0800fd24
 8004a30:	0800fd30 	.word	0x0800fd30
 8004a34:	0800fd38 	.word	0x0800fd38
 8004a38:	0800fd44 	.word	0x0800fd44
 8004a3c:	0800fd50 	.word	0x0800fd50
 8004a40:	0800fd58 	.word	0x0800fd58
 8004a44:	0800fd60 	.word	0x0800fd60
 8004a48:	0800fd68 	.word	0x0800fd68
 8004a4c:	0800fd70 	.word	0x0800fd70
 8004a50:	0800fd78 	.word	0x0800fd78
 8004a54:	0800fd80 	.word	0x0800fd80
 8004a58:	0800fd88 	.word	0x0800fd88
 8004a5c:	0800fd90 	.word	0x0800fd90
 8004a60:	0800fd9c 	.word	0x0800fd9c
 8004a64:	0800fda4 	.word	0x0800fda4
 8004a68:	0800fdac 	.word	0x0800fdac
 8004a6c:	0800fdb4 	.word	0x0800fdb4
 8004a70:	0800fdc0 	.word	0x0800fdc0
 8004a74:	0800fdc8 	.word	0x0800fdc8
 8004a78:	0800fdd0 	.word	0x0800fdd0
 8004a7c:	0800fdd8 	.word	0x0800fdd8
 8004a80:	0800fddc 	.word	0x0800fddc
 8004a84:	0800fde4 	.word	0x0800fde4
 8004a88:	0800fdf0 	.word	0x0800fdf0
 8004a8c:	0800fdf8 	.word	0x0800fdf8
 8004a90:	0800fe00 	.word	0x0800fe00
 8004a94:	0800fe08 	.word	0x0800fe08
 8004a98:	0800fe10 	.word	0x0800fe10
 8004a9c:	0800fe18 	.word	0x0800fe18
 8004aa0:	0800fe20 	.word	0x0800fe20
 8004aa4:	0800fe2c 	.word	0x0800fe2c
 8004aa8:	0800fe38 	.word	0x0800fe38
 8004aac:	0800fe44 	.word	0x0800fe44
 8004ab0:	0800fe50 	.word	0x0800fe50
 8004ab4:	0800fe58 	.word	0x0800fe58
 8004ab8:	0800fe60 	.word	0x0800fe60
 8004abc:	0800fe64 	.word	0x0800fe64
 8004ac0:	0800fe6c 	.word	0x0800fe6c
 8004ac4:	0800fe74 	.word	0x0800fe74
 8004ac8:	0800fe7c 	.word	0x0800fe7c
 8004acc:	0800fe84 	.word	0x0800fe84
 8004ad0:	0800fe90 	.word	0x0800fe90
 8004ad4:	0800fe98 	.word	0x0800fe98
 8004ad8:	0800fea0 	.word	0x0800fea0
 8004adc:	0800feac 	.word	0x0800feac
 8004ae0:	0800feb0 	.word	0x0800feb0
 8004ae4:	0800feb4 	.word	0x0800feb4
 8004ae8:	0800febc 	.word	0x0800febc
 8004aec:	0800fec4 	.word	0x0800fec4
 8004af0:	0800fecc 	.word	0x0800fecc
 8004af4:	0800fed8 	.word	0x0800fed8
 8004af8:	0800fee0 	.word	0x0800fee0
 8004afc:	0800fee8 	.word	0x0800fee8
 8004b00:	0800fef0 	.word	0x0800fef0
 8004b04:	0800fef8 	.word	0x0800fef8
 8004b08:	0800fefc 	.word	0x0800fefc
 8004b0c:	0800ff04 	.word	0x0800ff04
 8004b10:	0800ff0c 	.word	0x0800ff0c
 8004b14:	0800ff14 	.word	0x0800ff14
 8004b18:	0800ff1c 	.word	0x0800ff1c
 8004b1c:	0800ff24 	.word	0x0800ff24
 8004b20:	0800ff2c 	.word	0x0800ff2c
 8004b24:	0800ff34 	.word	0x0800ff34
 8004b28:	0800ff3c 	.word	0x0800ff3c
 8004b2c:	0800ff44 	.word	0x0800ff44
 8004b30:	0800ff4c 	.word	0x0800ff4c
 8004b34:	0800ff54 	.word	0x0800ff54
 8004b38:	0800ff60 	.word	0x0800ff60
 8004b3c:	0800ff68 	.word	0x0800ff68
 8004b40:	0800ff70 	.word	0x0800ff70
 8004b44:	0800ff78 	.word	0x0800ff78
 8004b48:	0800ff84 	.word	0x0800ff84
 8004b4c:	0800ff90 	.word	0x0800ff90
 8004b50:	0800ff9c 	.word	0x0800ff9c
 8004b54:	0800ffa4 	.word	0x0800ffa4
 8004b58:	0800ffac 	.word	0x0800ffac
 8004b5c:	0800ffb4 	.word	0x0800ffb4
 8004b60:	0800ffbc 	.word	0x0800ffbc
 8004b64:	0800ffc4 	.word	0x0800ffc4
 8004b68:	0800ffd0 	.word	0x0800ffd0
 8004b6c:	0800ffd8 	.word	0x0800ffd8
 8004b70:	0800ffe0 	.word	0x0800ffe0
 8004b74:	0800ffe8 	.word	0x0800ffe8
 8004b78:	0800fff0 	.word	0x0800fff0
		insert("A/PAOER", "appear");
 8004b7c:	46a4      	mov	ip, r4
 8004b7e:	49b5      	ldr	r1, [pc, #724]	@ (8004e54 <hashInit.0+0x35dc>)
 8004b80:	48b5      	ldr	r0, [pc, #724]	@ (8004e58 <hashInit.0+0x35e0>)
 8004b82:	f7fc fdcb 	bl	800171c <insert.1>
		insert("OUDZ", "outside");
 8004b86:	46a4      	mov	ip, r4
 8004b88:	49b4      	ldr	r1, [pc, #720]	@ (8004e5c <hashInit.0+0x35e4>)
 8004b8a:	48b5      	ldr	r0, [pc, #724]	@ (8004e60 <hashInit.0+0x35e8>)
 8004b8c:	f7fc fdc6 	bl	800171c <insert.1>
		insert("SKRET", "secret");
 8004b90:	46a4      	mov	ip, r4
 8004b92:	49b4      	ldr	r1, [pc, #720]	@ (8004e64 <hashInit.0+0x35ec>)
 8004b94:	48b4      	ldr	r0, [pc, #720]	@ (8004e68 <hashInit.0+0x35f0>)
 8004b96:	f7fc fdc1 	bl	800171c <insert.1>
		insert("PARTS", "parts");
 8004b9a:	46a4      	mov	ip, r4
 8004b9c:	49b3      	ldr	r1, [pc, #716]	@ (8004e6c <hashInit.0+0x35f4>)
 8004b9e:	48b4      	ldr	r0, [pc, #720]	@ (8004e70 <hashInit.0+0x35f8>)
 8004ba0:	f7fc fdbc 	bl	800171c <insert.1>
		insert("PHRES", "please");
 8004ba4:	46a4      	mov	ip, r4
 8004ba6:	49b3      	ldr	r1, [pc, #716]	@ (8004e74 <hashInit.0+0x35fc>)
 8004ba8:	48b3      	ldr	r0, [pc, #716]	@ (8004e78 <hashInit.0+0x3600>)
 8004baa:	f7fc fdb7 	bl	800171c <insert.1>
		insert("PAOERPBS", "appearance");
 8004bae:	46a4      	mov	ip, r4
 8004bb0:	49b2      	ldr	r1, [pc, #712]	@ (8004e7c <hashInit.0+0x3604>)
 8004bb2:	48b3      	ldr	r0, [pc, #716]	@ (8004e80 <hashInit.0+0x3608>)
 8004bb4:	f7fc fdb2 	bl	800171c <insert.1>
		insert("AOEFL", "evil");
 8004bb8:	46a4      	mov	ip, r4
 8004bba:	49b2      	ldr	r1, [pc, #712]	@ (8004e84 <hashInit.0+0x360c>)
 8004bbc:	48b2      	ldr	r0, [pc, #712]	@ (8004e88 <hashInit.0+0x3610>)
 8004bbe:	f7fc fdad 	bl	800171c <insert.1>
		insert("PHAFRPB", "march");
 8004bc2:	46a4      	mov	ip, r4
 8004bc4:	49b1      	ldr	r1, [pc, #708]	@ (8004e8c <hashInit.0+0x3614>)
 8004bc6:	48b2      	ldr	r0, [pc, #712]	@ (8004e90 <hashInit.0+0x3618>)
 8004bc8:	f7fc fda8 	bl	800171c <insert.1>
		insert("SKWRORPBLG", "George");
 8004bcc:	46a4      	mov	ip, r4
 8004bce:	49b1      	ldr	r1, [pc, #708]	@ (8004e94 <hashInit.0+0x361c>)
 8004bd0:	48b1      	ldr	r0, [pc, #708]	@ (8004e98 <hashInit.0+0x3620>)
 8004bd2:	f7fc fda3 	bl	800171c <insert.1>
		insert("WHAF", "whatever");
 8004bd6:	46a4      	mov	ip, r4
 8004bd8:	49b0      	ldr	r1, [pc, #704]	@ (8004e9c <hashInit.0+0x3624>)
 8004bda:	48b1      	ldr	r0, [pc, #708]	@ (8004ea0 <hashInit.0+0x3628>)
 8004bdc:	f7fc fd9e 	bl	800171c <insert.1>
		insert("SHROEL", "slowly");
 8004be0:	46a4      	mov	ip, r4
 8004be2:	49b0      	ldr	r1, [pc, #704]	@ (8004ea4 <hashInit.0+0x362c>)
 8004be4:	48b0      	ldr	r0, [pc, #704]	@ (8004ea8 <hashInit.0+0x3630>)
 8004be6:	f7fc fd99 	bl	800171c <insert.1>
		insert("TAERS", "tears");
 8004bea:	46a4      	mov	ip, r4
 8004bec:	49af      	ldr	r1, [pc, #700]	@ (8004eac <hashInit.0+0x3634>)
 8004bee:	48b0      	ldr	r0, [pc, #704]	@ (8004eb0 <hashInit.0+0x3638>)
 8004bf0:	f7fc fd94 	bl	800171c <insert.1>
		insert("HORS/-S", "horses");
 8004bf4:	46a4      	mov	ip, r4
 8004bf6:	49af      	ldr	r1, [pc, #700]	@ (8004eb4 <hashInit.0+0x363c>)
 8004bf8:	48af      	ldr	r0, [pc, #700]	@ (8004eb8 <hashInit.0+0x3640>)
 8004bfa:	f7fc fd8f 	bl	800171c <insert.1>
		insert("PHRAEUFS", "places");
 8004bfe:	46a4      	mov	ip, r4
 8004c00:	49ae      	ldr	r1, [pc, #696]	@ (8004ebc <hashInit.0+0x3644>)
 8004c02:	48af      	ldr	r0, [pc, #700]	@ (8004ec0 <hashInit.0+0x3648>)
 8004c04:	f7fc fd8a 	bl	800171c <insert.1>
		insert("KAUT", "caught");
 8004c08:	46a4      	mov	ip, r4
 8004c0a:	49ae      	ldr	r1, [pc, #696]	@ (8004ec4 <hashInit.0+0x364c>)
 8004c0c:	48ae      	ldr	r0, [pc, #696]	@ (8004ec8 <hashInit.0+0x3650>)
 8004c0e:	f7fc fd85 	bl	800171c <insert.1>
		insert("STAEU", "stay");
 8004c12:	46a4      	mov	ip, r4
 8004c14:	49ad      	ldr	r1, [pc, #692]	@ (8004ecc <hashInit.0+0x3654>)
 8004c16:	48ae      	ldr	r0, [pc, #696]	@ (8004ed0 <hashInit.0+0x3658>)
 8004c18:	f7fc fd80 	bl	800171c <insert.1>
		insert("STPHED", "instead");
 8004c1c:	46a4      	mov	ip, r4
 8004c1e:	49ad      	ldr	r1, [pc, #692]	@ (8004ed4 <hashInit.0+0x365c>)
 8004c20:	48ad      	ldr	r0, [pc, #692]	@ (8004ed8 <hashInit.0+0x3660>)
 8004c22:	f7fc fd7b 	bl	800171c <insert.1>
		insert("STRUBG", "struck");
 8004c26:	46a4      	mov	ip, r4
 8004c28:	49ac      	ldr	r1, [pc, #688]	@ (8004edc <hashInit.0+0x3664>)
 8004c2a:	48ad      	ldr	r0, [pc, #692]	@ (8004ee0 <hashInit.0+0x3668>)
 8004c2c:	f7fc fd76 	bl	800171c <insert.1>
		insert("PWHRU", "blue");
 8004c30:	46a4      	mov	ip, r4
 8004c32:	49ac      	ldr	r1, [pc, #688]	@ (8004ee4 <hashInit.0+0x366c>)
 8004c34:	48ac      	ldr	r0, [pc, #688]	@ (8004ee8 <hashInit.0+0x3670>)
 8004c36:	f7fc fd71 	bl	800171c <insert.1>
		insert("KWRORBG", "York");
 8004c3a:	46a4      	mov	ip, r4
 8004c3c:	49ab      	ldr	r1, [pc, #684]	@ (8004eec <hashInit.0+0x3674>)
 8004c3e:	48ac      	ldr	r0, [pc, #688]	@ (8004ef0 <hashInit.0+0x3678>)
 8004c40:	f7fc fd6c 	bl	800171c <insert.1>
		insert("EUPL/POB", "impossible");
 8004c44:	46a4      	mov	ip, r4
 8004c46:	49ab      	ldr	r1, [pc, #684]	@ (8004ef4 <hashInit.0+0x367c>)
 8004c48:	48ab      	ldr	r0, [pc, #684]	@ (8004ef8 <hashInit.0+0x3680>)
 8004c4a:	f7fc fd67 	bl	800171c <insert.1>
		insert("PAOERD", "period");
 8004c4e:	46a4      	mov	ip, r4
 8004c50:	49aa      	ldr	r1, [pc, #680]	@ (8004efc <hashInit.0+0x3684>)
 8004c52:	48ab      	ldr	r0, [pc, #684]	@ (8004f00 <hashInit.0+0x3688>)
 8004c54:	f7fc fd62 	bl	800171c <insert.1>
		insert("ST-R", "sister");
 8004c58:	46a4      	mov	ip, r4
 8004c5a:	49aa      	ldr	r1, [pc, #680]	@ (8004f04 <hashInit.0+0x368c>)
 8004c5c:	48aa      	ldr	r0, [pc, #680]	@ (8004f08 <hashInit.0+0x3690>)
 8004c5e:	f7fc fd5d 	bl	800171c <insert.1>
		insert("PWA*LT", "battle");
 8004c62:	46a4      	mov	ip, r4
 8004c64:	49a9      	ldr	r1, [pc, #676]	@ (8004f0c <hashInit.0+0x3694>)
 8004c66:	48aa      	ldr	r0, [pc, #680]	@ (8004f10 <hashInit.0+0x3698>)
 8004c68:	f7fc fd58 	bl	800171c <insert.1>
		insert("SKAOL", "school");
 8004c6c:	46a4      	mov	ip, r4
 8004c6e:	49a9      	ldr	r1, [pc, #676]	@ (8004f14 <hashInit.0+0x369c>)
 8004c70:	48a9      	ldr	r0, [pc, #676]	@ (8004f18 <hashInit.0+0x36a0>)
 8004c72:	f7fc fd53 	bl	800171c <insert.1>
		insert("PHA*ER", "Mary");
 8004c76:	46a4      	mov	ip, r4
 8004c78:	49a8      	ldr	r1, [pc, #672]	@ (8004f1c <hashInit.0+0x36a4>)
 8004c7a:	48a9      	ldr	r0, [pc, #676]	@ (8004f20 <hashInit.0+0x36a8>)
 8004c7c:	f7fc fd4e 	bl	800171c <insert.1>
		insert("RA*EUFD", "raised");
 8004c80:	46a4      	mov	ip, r4
 8004c82:	49a8      	ldr	r1, [pc, #672]	@ (8004f24 <hashInit.0+0x36ac>)
 8004c84:	48a8      	ldr	r0, [pc, #672]	@ (8004f28 <hashInit.0+0x36b0>)
 8004c86:	f7fc fd49 	bl	800171c <insert.1>
		insert("KWAEUGS", "occasion");
 8004c8a:	46a4      	mov	ip, r4
 8004c8c:	49a7      	ldr	r1, [pc, #668]	@ (8004f2c <hashInit.0+0x36b4>)
 8004c8e:	48a8      	ldr	r0, [pc, #672]	@ (8004f30 <hashInit.0+0x36b8>)
 8004c90:	f7fc fd44 	bl	800171c <insert.1>
		insert("PHAERD", "married");
 8004c94:	46a4      	mov	ip, r4
 8004c96:	49a7      	ldr	r1, [pc, #668]	@ (8004f34 <hashInit.0+0x36bc>)
 8004c98:	48a7      	ldr	r0, [pc, #668]	@ (8004f38 <hashInit.0+0x36c0>)
 8004c9a:	f7fc fd3f 	bl	800171c <insert.1>
		insert("PHAPB/AES", "man's");
 8004c9e:	46a4      	mov	ip, r4
 8004ca0:	49a6      	ldr	r1, [pc, #664]	@ (8004f3c <hashInit.0+0x36c4>)
 8004ca2:	48a7      	ldr	r0, [pc, #668]	@ (8004f40 <hashInit.0+0x36c8>)
 8004ca4:	f7fc fd3a 	bl	800171c <insert.1>
		insert("TPRORPL", "former");
 8004ca8:	46a4      	mov	ip, r4
 8004caa:	49a6      	ldr	r1, [pc, #664]	@ (8004f44 <hashInit.0+0x36cc>)
 8004cac:	48a6      	ldr	r0, [pc, #664]	@ (8004f48 <hashInit.0+0x36d0>)
 8004cae:	f7fc fd35 	bl	800171c <insert.1>
		insert("TPAOD", "food");
 8004cb2:	46a4      	mov	ip, r4
 8004cb4:	49a5      	ldr	r1, [pc, #660]	@ (8004f4c <hashInit.0+0x36d4>)
 8004cb6:	48a6      	ldr	r0, [pc, #664]	@ (8004f50 <hashInit.0+0x36d8>)
 8004cb8:	f7fc fd30 	bl	800171c <insert.1>
		insert("KWRAO*UT", "youth");
 8004cbc:	46a4      	mov	ip, r4
 8004cbe:	49a5      	ldr	r1, [pc, #660]	@ (8004f54 <hashInit.0+0x36dc>)
 8004cc0:	48a5      	ldr	r0, [pc, #660]	@ (8004f58 <hashInit.0+0x36e0>)
 8004cc2:	f7fc fd2b 	bl	800171c <insert.1>
		insert("HRERPBD", "learned");
 8004cc6:	46a4      	mov	ip, r4
 8004cc8:	49a4      	ldr	r1, [pc, #656]	@ (8004f5c <hashInit.0+0x36e4>)
 8004cca:	48a5      	ldr	r0, [pc, #660]	@ (8004f60 <hashInit.0+0x36e8>)
 8004ccc:	f7fc fd26 	bl	800171c <insert.1>
		insert("PHAOERL", "merely");
 8004cd0:	46a4      	mov	ip, r4
 8004cd2:	49a4      	ldr	r1, [pc, #656]	@ (8004f64 <hashInit.0+0x36ec>)
 8004cd4:	48a4      	ldr	r0, [pc, #656]	@ (8004f68 <hashInit.0+0x36f0>)
 8004cd6:	f7fc fd21 	bl	800171c <insert.1>
		insert("RAOEFP", "reach");
 8004cda:	46a4      	mov	ip, r4
 8004cdc:	49a3      	ldr	r1, [pc, #652]	@ (8004f6c <hashInit.0+0x36f4>)
 8004cde:	48a4      	ldr	r0, [pc, #656]	@ (8004f70 <hashInit.0+0x36f8>)
 8004ce0:	f7fc fd1c 	bl	800171c <insert.1>
		insert("S-PL", "system");
 8004ce4:	46a4      	mov	ip, r4
 8004ce6:	49a3      	ldr	r1, [pc, #652]	@ (8004f74 <hashInit.0+0x36fc>)
 8004ce8:	48a3      	ldr	r0, [pc, #652]	@ (8004f78 <hashInit.0+0x3700>)
 8004cea:	f7fc fd17 	bl	800171c <insert.1>
		insert("TWEPBT", "twenty");
 8004cee:	46a4      	mov	ip, r4
 8004cf0:	49a2      	ldr	r1, [pc, #648]	@ (8004f7c <hashInit.0+0x3704>)
 8004cf2:	48a3      	ldr	r0, [pc, #652]	@ (8004f80 <hashInit.0+0x3708>)
 8004cf4:	f7fc fd12 	bl	800171c <insert.1>
		insert("TKEURPB", "dinner");
 8004cf8:	46a4      	mov	ip, r4
 8004cfa:	49a2      	ldr	r1, [pc, #648]	@ (8004f84 <hashInit.0+0x370c>)
 8004cfc:	48a2      	ldr	r0, [pc, #648]	@ (8004f88 <hashInit.0+0x3710>)
 8004cfe:	f7fc fd0d 	bl	800171c <insert.1>
		insert("KWAO*EUT", "quiet");
 8004d02:	46a4      	mov	ip, r4
 8004d04:	49a1      	ldr	r1, [pc, #644]	@ (8004f8c <hashInit.0+0x3714>)
 8004d06:	48a2      	ldr	r0, [pc, #648]	@ (8004f90 <hashInit.0+0x3718>)
 8004d08:	f7fc fd08 	bl	800171c <insert.1>
		insert("AOELS", "easily");
 8004d0c:	46a4      	mov	ip, r4
 8004d0e:	49a1      	ldr	r1, [pc, #644]	@ (8004f94 <hashInit.0+0x371c>)
 8004d10:	48a1      	ldr	r0, [pc, #644]	@ (8004f98 <hashInit.0+0x3720>)
 8004d12:	f7fc fd03 	bl	800171c <insert.1>
		insert("PHOFD", "moved");
 8004d16:	46a4      	mov	ip, r4
 8004d18:	49a0      	ldr	r1, [pc, #640]	@ (8004f9c <hashInit.0+0x3724>)
 8004d1a:	48a1      	ldr	r0, [pc, #644]	@ (8004fa0 <hashInit.0+0x3728>)
 8004d1c:	f7fc fcfe 	bl	800171c <insert.1>
		insert("A*FRDZ", "afterwards");
 8004d20:	46a4      	mov	ip, r4
 8004d22:	49a0      	ldr	r1, [pc, #640]	@ (8004fa4 <hashInit.0+0x372c>)
 8004d24:	48a0      	ldr	r0, [pc, #640]	@ (8004fa8 <hashInit.0+0x3730>)
 8004d26:	f7fc fcf9 	bl	800171c <insert.1>
		insert("TKPWEUFG", "giving");
 8004d2a:	46a4      	mov	ip, r4
 8004d2c:	499f      	ldr	r1, [pc, #636]	@ (8004fac <hashInit.0+0x3734>)
 8004d2e:	48a0      	ldr	r0, [pc, #640]	@ (8004fb0 <hashInit.0+0x3738>)
 8004d30:	f7fc fcf4 	bl	800171c <insert.1>
		insert("WAUBG", "walk");
 8004d34:	46a4      	mov	ip, r4
 8004d36:	499f      	ldr	r1, [pc, #636]	@ (8004fb4 <hashInit.0+0x373c>)
 8004d38:	489f      	ldr	r0, [pc, #636]	@ (8004fb8 <hashInit.0+0x3740>)
 8004d3a:	f7fc fcef 	bl	800171c <insert.1>
		insert("STOPD", "stopped");
 8004d3e:	46a4      	mov	ip, r4
 8004d40:	499e      	ldr	r1, [pc, #632]	@ (8004fbc <hashInit.0+0x3744>)
 8004d42:	489f      	ldr	r0, [pc, #636]	@ (8004fc0 <hashInit.0+0x3748>)
 8004d44:	f7fc fcea 	bl	800171c <insert.1>
		insert("HRAFD", "laughed");
 8004d48:	46a4      	mov	ip, r4
 8004d4a:	499e      	ldr	r1, [pc, #632]	@ (8004fc4 <hashInit.0+0x374c>)
 8004d4c:	489e      	ldr	r0, [pc, #632]	@ (8004fc8 <hashInit.0+0x3750>)
 8004d4e:	f7fc fce5 	bl	800171c <insert.1>
		insert("HRAPBL", "language");
 8004d52:	46a4      	mov	ip, r4
 8004d54:	499d      	ldr	r1, [pc, #628]	@ (8004fcc <hashInit.0+0x3754>)
 8004d56:	489e      	ldr	r0, [pc, #632]	@ (8004fd0 <hashInit.0+0x3758>)
 8004d58:	f7fc fce0 	bl	800171c <insert.1>
		insert("EBGS/PREGS", "expression");
 8004d5c:	46a4      	mov	ip, r4
 8004d5e:	499d      	ldr	r1, [pc, #628]	@ (8004fd4 <hashInit.0+0x375c>)
 8004d60:	489d      	ldr	r0, [pc, #628]	@ (8004fd8 <hashInit.0+0x3760>)
 8004d62:	f7fc fcdb 	bl	800171c <insert.1>
		insert("WAOEBG", "week");
 8004d66:	46a4      	mov	ip, r4
 8004d68:	499c      	ldr	r1, [pc, #624]	@ (8004fdc <hashInit.0+0x3764>)
 8004d6a:	489d      	ldr	r0, [pc, #628]	@ (8004fe0 <hashInit.0+0x3768>)
 8004d6c:	f7fc fcd6 	bl	800171c <insert.1>
		insert("HAUL", "hall");
 8004d70:	46a4      	mov	ip, r4
 8004d72:	499c      	ldr	r1, [pc, #624]	@ (8004fe4 <hashInit.0+0x376c>)
 8004d74:	489c      	ldr	r0, [pc, #624]	@ (8004fe8 <hashInit.0+0x3770>)
 8004d76:	f7fc fcd1 	bl	800171c <insert.1>
		insert("TKAEUPBLG", "danger");
 8004d7a:	46a4      	mov	ip, r4
 8004d7c:	499b      	ldr	r1, [pc, #620]	@ (8004fec <hashInit.0+0x3774>)
 8004d7e:	489c      	ldr	r0, [pc, #624]	@ (8004ff0 <hashInit.0+0x3778>)
 8004d80:	f7fc fccc 	bl	800171c <insert.1>
		insert("PROT", "property");
 8004d84:	46a4      	mov	ip, r4
 8004d86:	499b      	ldr	r1, [pc, #620]	@ (8004ff4 <hashInit.0+0x377c>)
 8004d88:	489b      	ldr	r0, [pc, #620]	@ (8004ff8 <hashInit.0+0x3780>)
 8004d8a:	f7fc fcc7 	bl	800171c <insert.1>
		insert("WOPBD", "wonder");
 8004d8e:	46a4      	mov	ip, r4
 8004d90:	499a      	ldr	r1, [pc, #616]	@ (8004ffc <hashInit.0+0x3784>)
 8004d92:	489b      	ldr	r0, [pc, #620]	@ (8005000 <hashInit.0+0x3788>)
 8004d94:	f7fc fcc2 	bl	800171c <insert.1>
		insert("AOURB", "usual");
 8004d98:	46a4      	mov	ip, r4
 8004d9a:	499a      	ldr	r1, [pc, #616]	@ (8005004 <hashInit.0+0x378c>)
 8004d9c:	489a      	ldr	r0, [pc, #616]	@ (8005008 <hashInit.0+0x3790>)
 8004d9e:	f7fc fcbd 	bl	800171c <insert.1>
		insert("TPEUG", "figure");
 8004da2:	46a4      	mov	ip, r4
 8004da4:	4999      	ldr	r1, [pc, #612]	@ (800500c <hashInit.0+0x3794>)
 8004da6:	489a      	ldr	r0, [pc, #616]	@ (8005010 <hashInit.0+0x3798>)
 8004da8:	f7fc fcb8 	bl	800171c <insert.1>
		insert("PWORPB", "born");
 8004dac:	46a4      	mov	ip, r4
 8004dae:	4999      	ldr	r1, [pc, #612]	@ (8005014 <hashInit.0+0x379c>)
 8004db0:	4899      	ldr	r0, [pc, #612]	@ (8005018 <hashInit.0+0x37a0>)
 8004db2:	f7fc fcb3 	bl	800171c <insert.1>
		insert("KORT", "court");
 8004db6:	46a4      	mov	ip, r4
 8004db8:	4998      	ldr	r1, [pc, #608]	@ (800501c <hashInit.0+0x37a4>)
 8004dba:	4899      	ldr	r0, [pc, #612]	@ (8005020 <hashInit.0+0x37a8>)
 8004dbc:	f7fc fcae 	bl	800171c <insert.1>
		insert("SKWRERPBL", "generally");
 8004dc0:	46a4      	mov	ip, r4
 8004dc2:	4998      	ldr	r1, [pc, #608]	@ (8005024 <hashInit.0+0x37ac>)
 8004dc4:	4898      	ldr	r0, [pc, #608]	@ (8005028 <hashInit.0+0x37b0>)
 8004dc6:	f7fc fca9 	bl	800171c <insert.1>
		insert("TKPWRAOU", "grew");
 8004dca:	46a4      	mov	ip, r4
 8004dcc:	4997      	ldr	r1, [pc, #604]	@ (800502c <hashInit.0+0x37b4>)
 8004dce:	4898      	ldr	r0, [pc, #608]	@ (8005030 <hashInit.0+0x37b8>)
 8004dd0:	f7fc fca4 	bl	800171c <insert.1>
		insert("SHOED", "showed");
 8004dd4:	46a4      	mov	ip, r4
 8004dd6:	4997      	ldr	r1, [pc, #604]	@ (8005034 <hashInit.0+0x37bc>)
 8004dd8:	4897      	ldr	r0, [pc, #604]	@ (8005038 <hashInit.0+0x37c0>)
 8004dda:	f7fc fc9f 	bl	800171c <insert.1>
		insert("TKPWEGT", "getting");
 8004dde:	46a4      	mov	ip, r4
 8004de0:	4996      	ldr	r1, [pc, #600]	@ (800503c <hashInit.0+0x37c4>)
 8004de2:	4897      	ldr	r0, [pc, #604]	@ (8005040 <hashInit.0+0x37c8>)
 8004de4:	f7fc fc9a 	bl	800171c <insert.1>
		insert("AEURBT", "ancient");
 8004de8:	46a4      	mov	ip, r4
 8004dea:	4996      	ldr	r1, [pc, #600]	@ (8005044 <hashInit.0+0x37cc>)
 8004dec:	4896      	ldr	r0, [pc, #600]	@ (8005048 <hashInit.0+0x37d0>)
 8004dee:	f7fc fc95 	bl	800171c <insert.1>
		insert("R-PT", "respect");
 8004df2:	46a4      	mov	ip, r4
 8004df4:	4995      	ldr	r1, [pc, #596]	@ (800504c <hashInit.0+0x37d4>)
 8004df6:	4896      	ldr	r0, [pc, #600]	@ (8005050 <hashInit.0+0x37d8>)
 8004df8:	f7fc fc90 	bl	800171c <insert.1>
		insert("THEURD", "third");
 8004dfc:	46a4      	mov	ip, r4
 8004dfe:	4995      	ldr	r1, [pc, #596]	@ (8005054 <hashInit.0+0x37dc>)
 8004e00:	4895      	ldr	r0, [pc, #596]	@ (8005058 <hashInit.0+0x37e0>)
 8004e02:	f7fc fc8b 	bl	800171c <insert.1>
		insert("WO*RT", "worth");
 8004e06:	46a4      	mov	ip, r4
 8004e08:	4994      	ldr	r1, [pc, #592]	@ (800505c <hashInit.0+0x37e4>)
 8004e0a:	4895      	ldr	r0, [pc, #596]	@ (8005060 <hashInit.0+0x37e8>)
 8004e0c:	f7fc fc86 	bl	800171c <insert.1>
		insert("S*EUPL", "simple");
 8004e10:	46a4      	mov	ip, r4
 8004e12:	4994      	ldr	r1, [pc, #592]	@ (8005064 <hashInit.0+0x37ec>)
 8004e14:	4894      	ldr	r0, [pc, #592]	@ (8005068 <hashInit.0+0x37f0>)
 8004e16:	f7fc fc81 	bl	800171c <insert.1>
		insert("TRAOE", "tree");
 8004e1a:	46a4      	mov	ip, r4
 8004e1c:	4993      	ldr	r1, [pc, #588]	@ (800506c <hashInit.0+0x37f4>)
 8004e1e:	4894      	ldr	r0, [pc, #592]	@ (8005070 <hashInit.0+0x37f8>)
 8004e20:	f7fc fc7c 	bl	800171c <insert.1>
		insert("HREFG", "leaving");
 8004e24:	46a4      	mov	ip, r4
 8004e26:	4993      	ldr	r1, [pc, #588]	@ (8005074 <hashInit.0+0x37fc>)
 8004e28:	4893      	ldr	r0, [pc, #588]	@ (8005078 <hashInit.0+0x3800>)
 8004e2a:	f7fc fc77 	bl	800171c <insert.1>
		insert("RAEUPL", "remain");
 8004e2e:	46a4      	mov	ip, r4
 8004e30:	4992      	ldr	r1, [pc, #584]	@ (800507c <hashInit.0+0x3804>)
 8004e32:	4893      	ldr	r0, [pc, #588]	@ (8005080 <hashInit.0+0x3808>)
 8004e34:	f7fc fc72 	bl	800171c <insert.1>
		insert("SOET", "society");
 8004e38:	46a4      	mov	ip, r4
 8004e3a:	4992      	ldr	r1, [pc, #584]	@ (8005084 <hashInit.0+0x380c>)
 8004e3c:	4892      	ldr	r0, [pc, #584]	@ (8005088 <hashInit.0+0x3810>)
 8004e3e:	f7fc fc6d 	bl	800171c <insert.1>
		insert("TPAOEUT", "fight");
 8004e42:	46a4      	mov	ip, r4
 8004e44:	4991      	ldr	r1, [pc, #580]	@ (800508c <hashInit.0+0x3814>)
 8004e46:	4892      	ldr	r0, [pc, #584]	@ (8005090 <hashInit.0+0x3818>)
 8004e48:	f7fc fc68 	bl	800171c <insert.1>
		insert("WAUL", "wall");
 8004e4c:	46a4      	mov	ip, r4
 8004e4e:	4991      	ldr	r1, [pc, #580]	@ (8005094 <hashInit.0+0x381c>)
 8004e50:	e122      	b.n	8005098 <hashInit.0+0x3820>
 8004e52:	bf00      	nop
 8004e54:	0800fff8 	.word	0x0800fff8
 8004e58:	08010000 	.word	0x08010000
 8004e5c:	08010008 	.word	0x08010008
 8004e60:	08010010 	.word	0x08010010
 8004e64:	08010018 	.word	0x08010018
 8004e68:	08010020 	.word	0x08010020
 8004e6c:	08010028 	.word	0x08010028
 8004e70:	08010030 	.word	0x08010030
 8004e74:	08010038 	.word	0x08010038
 8004e78:	08010040 	.word	0x08010040
 8004e7c:	08010048 	.word	0x08010048
 8004e80:	08010054 	.word	0x08010054
 8004e84:	08010060 	.word	0x08010060
 8004e88:	08010068 	.word	0x08010068
 8004e8c:	08010070 	.word	0x08010070
 8004e90:	08010078 	.word	0x08010078
 8004e94:	08010080 	.word	0x08010080
 8004e98:	08010088 	.word	0x08010088
 8004e9c:	08010094 	.word	0x08010094
 8004ea0:	080100a0 	.word	0x080100a0
 8004ea4:	080100a8 	.word	0x080100a8
 8004ea8:	080100b0 	.word	0x080100b0
 8004eac:	080100b8 	.word	0x080100b8
 8004eb0:	080100c0 	.word	0x080100c0
 8004eb4:	080100c8 	.word	0x080100c8
 8004eb8:	080100d0 	.word	0x080100d0
 8004ebc:	080100d8 	.word	0x080100d8
 8004ec0:	080100e0 	.word	0x080100e0
 8004ec4:	080100ec 	.word	0x080100ec
 8004ec8:	080100f4 	.word	0x080100f4
 8004ecc:	080100fc 	.word	0x080100fc
 8004ed0:	08010104 	.word	0x08010104
 8004ed4:	0801010c 	.word	0x0801010c
 8004ed8:	08010114 	.word	0x08010114
 8004edc:	0801011c 	.word	0x0801011c
 8004ee0:	08010124 	.word	0x08010124
 8004ee4:	0801012c 	.word	0x0801012c
 8004ee8:	08010134 	.word	0x08010134
 8004eec:	0801013c 	.word	0x0801013c
 8004ef0:	08010144 	.word	0x08010144
 8004ef4:	0801014c 	.word	0x0801014c
 8004ef8:	08010158 	.word	0x08010158
 8004efc:	08010164 	.word	0x08010164
 8004f00:	0801016c 	.word	0x0801016c
 8004f04:	08010174 	.word	0x08010174
 8004f08:	0801017c 	.word	0x0801017c
 8004f0c:	08010184 	.word	0x08010184
 8004f10:	0801018c 	.word	0x0801018c
 8004f14:	08010194 	.word	0x08010194
 8004f18:	0801019c 	.word	0x0801019c
 8004f1c:	080101a4 	.word	0x080101a4
 8004f20:	080101ac 	.word	0x080101ac
 8004f24:	080101b4 	.word	0x080101b4
 8004f28:	080101bc 	.word	0x080101bc
 8004f2c:	080101c4 	.word	0x080101c4
 8004f30:	080101d0 	.word	0x080101d0
 8004f34:	080101d8 	.word	0x080101d8
 8004f38:	080101e0 	.word	0x080101e0
 8004f3c:	080101e8 	.word	0x080101e8
 8004f40:	080101f0 	.word	0x080101f0
 8004f44:	080101fc 	.word	0x080101fc
 8004f48:	08010204 	.word	0x08010204
 8004f4c:	0801020c 	.word	0x0801020c
 8004f50:	08010214 	.word	0x08010214
 8004f54:	0801021c 	.word	0x0801021c
 8004f58:	08010224 	.word	0x08010224
 8004f5c:	08010230 	.word	0x08010230
 8004f60:	08010238 	.word	0x08010238
 8004f64:	08010240 	.word	0x08010240
 8004f68:	08010248 	.word	0x08010248
 8004f6c:	08010250 	.word	0x08010250
 8004f70:	08010258 	.word	0x08010258
 8004f74:	08010260 	.word	0x08010260
 8004f78:	08010268 	.word	0x08010268
 8004f7c:	08010270 	.word	0x08010270
 8004f80:	08010278 	.word	0x08010278
 8004f84:	08010280 	.word	0x08010280
 8004f88:	08010288 	.word	0x08010288
 8004f8c:	08010290 	.word	0x08010290
 8004f90:	08010298 	.word	0x08010298
 8004f94:	080102a4 	.word	0x080102a4
 8004f98:	080102ac 	.word	0x080102ac
 8004f9c:	080102b4 	.word	0x080102b4
 8004fa0:	080102bc 	.word	0x080102bc
 8004fa4:	080102c4 	.word	0x080102c4
 8004fa8:	080102d0 	.word	0x080102d0
 8004fac:	080102d8 	.word	0x080102d8
 8004fb0:	080102e0 	.word	0x080102e0
 8004fb4:	080102ec 	.word	0x080102ec
 8004fb8:	080102f4 	.word	0x080102f4
 8004fbc:	080102fc 	.word	0x080102fc
 8004fc0:	08010304 	.word	0x08010304
 8004fc4:	0801030c 	.word	0x0801030c
 8004fc8:	08010314 	.word	0x08010314
 8004fcc:	0801031c 	.word	0x0801031c
 8004fd0:	08010328 	.word	0x08010328
 8004fd4:	08010330 	.word	0x08010330
 8004fd8:	0801033c 	.word	0x0801033c
 8004fdc:	08010348 	.word	0x08010348
 8004fe0:	08010350 	.word	0x08010350
 8004fe4:	08010358 	.word	0x08010358
 8004fe8:	08010360 	.word	0x08010360
 8004fec:	08010368 	.word	0x08010368
 8004ff0:	08010370 	.word	0x08010370
 8004ff4:	0801037c 	.word	0x0801037c
 8004ff8:	08010388 	.word	0x08010388
 8004ffc:	08010390 	.word	0x08010390
 8005000:	08010398 	.word	0x08010398
 8005004:	080103a0 	.word	0x080103a0
 8005008:	080103a8 	.word	0x080103a8
 800500c:	080103b0 	.word	0x080103b0
 8005010:	080103b8 	.word	0x080103b8
 8005014:	080103c0 	.word	0x080103c0
 8005018:	080103c8 	.word	0x080103c8
 800501c:	080103d0 	.word	0x080103d0
 8005020:	080103d8 	.word	0x080103d8
 8005024:	080103e0 	.word	0x080103e0
 8005028:	080103ec 	.word	0x080103ec
 800502c:	080103f8 	.word	0x080103f8
 8005030:	08010400 	.word	0x08010400
 8005034:	0801040c 	.word	0x0801040c
 8005038:	08010414 	.word	0x08010414
 800503c:	0801041c 	.word	0x0801041c
 8005040:	08010424 	.word	0x08010424
 8005044:	0801042c 	.word	0x0801042c
 8005048:	08010434 	.word	0x08010434
 800504c:	0801043c 	.word	0x0801043c
 8005050:	08010444 	.word	0x08010444
 8005054:	0801044c 	.word	0x0801044c
 8005058:	08010454 	.word	0x08010454
 800505c:	0801045c 	.word	0x0801045c
 8005060:	08010464 	.word	0x08010464
 8005064:	0801046c 	.word	0x0801046c
 8005068:	08010474 	.word	0x08010474
 800506c:	0801047c 	.word	0x0801047c
 8005070:	08010484 	.word	0x08010484
 8005074:	0801048c 	.word	0x0801048c
 8005078:	08010494 	.word	0x08010494
 800507c:	0801049c 	.word	0x0801049c
 8005080:	080104a4 	.word	0x080104a4
 8005084:	080104ac 	.word	0x080104ac
 8005088:	080104b4 	.word	0x080104b4
 800508c:	080104bc 	.word	0x080104bc
 8005090:	080104c4 	.word	0x080104c4
 8005094:	080104cc 	.word	0x080104cc
 8005098:	48b5      	ldr	r0, [pc, #724]	@ (8005370 <hashInit.0+0x3af8>)
 800509a:	f7fc fb3f 	bl	800171c <insert.1>
		insert("RULT", "result");
 800509e:	46a4      	mov	ip, r4
 80050a0:	49b4      	ldr	r1, [pc, #720]	@ (8005374 <hashInit.0+0x3afc>)
 80050a2:	48b5      	ldr	r0, [pc, #724]	@ (8005378 <hashInit.0+0x3b00>)
 80050a4:	f7fc fb3a 	bl	800171c <insert.1>
		insert("HEFPB", "heaven");
 80050a8:	46a4      	mov	ip, r4
 80050aa:	49b4      	ldr	r1, [pc, #720]	@ (800537c <hashInit.0+0x3b04>)
 80050ac:	48b4      	ldr	r0, [pc, #720]	@ (8005380 <hashInit.0+0x3b08>)
 80050ae:	f7fc fb35 	bl	800171c <insert.1>
		insert("WOEUPL", "William");
 80050b2:	46a4      	mov	ip, r4
 80050b4:	49b3      	ldr	r1, [pc, #716]	@ (8005384 <hashInit.0+0x3b0c>)
 80050b6:	48b4      	ldr	r0, [pc, #720]	@ (8005388 <hashInit.0+0x3b10>)
 80050b8:	f7fc fb30 	bl	800171c <insert.1>
		insert("STARTD", "started");
 80050bc:	46a4      	mov	ip, r4
 80050be:	49b3      	ldr	r1, [pc, #716]	@ (800538c <hashInit.0+0x3b14>)
 80050c0:	48b3      	ldr	r0, [pc, #716]	@ (8005390 <hashInit.0+0x3b18>)
 80050c2:	f7fc fb2b 	bl	800171c <insert.1>
		insert("KPHAPBD", "command");
 80050c6:	46a4      	mov	ip, r4
 80050c8:	49b2      	ldr	r1, [pc, #712]	@ (8005394 <hashInit.0+0x3b1c>)
 80050ca:	48b3      	ldr	r0, [pc, #716]	@ (8005398 <hashInit.0+0x3b20>)
 80050cc:	f7fc fb26 	bl	800171c <insert.1>
		insert("TOEPB", "tone");
 80050d0:	46a4      	mov	ip, r4
 80050d2:	49b2      	ldr	r1, [pc, #712]	@ (800539c <hashInit.0+0x3b24>)
 80050d4:	48b2      	ldr	r0, [pc, #712]	@ (80053a0 <hashInit.0+0x3b28>)
 80050d6:	f7fc fb21 	bl	800171c <insert.1>
		insert("RARD", "regard");
 80050da:	46a4      	mov	ip, r4
 80050dc:	49b1      	ldr	r1, [pc, #708]	@ (80053a4 <hashInit.0+0x3b2c>)
 80050de:	48b2      	ldr	r0, [pc, #712]	@ (80053a8 <hashInit.0+0x3b30>)
 80050e0:	f7fc fb1c 	bl	800171c <insert.1>
		insert("KP-PTD", "expected");
 80050e4:	46a4      	mov	ip, r4
 80050e6:	49b1      	ldr	r1, [pc, #708]	@ (80053ac <hashInit.0+0x3b34>)
 80050e8:	48b1      	ldr	r0, [pc, #708]	@ (80053b0 <hashInit.0+0x3b38>)
 80050ea:	f7fc fb17 	bl	800171c <insert.1>
		insert("PHAOER", "mere");
 80050ee:	46a4      	mov	ip, r4
 80050f0:	49b0      	ldr	r1, [pc, #704]	@ (80053b4 <hashInit.0+0x3b3c>)
 80050f2:	48b1      	ldr	r0, [pc, #708]	@ (80053b8 <hashInit.0+0x3b40>)
 80050f4:	f7fc fb12 	bl	800171c <insert.1>
		insert("PHO*PBT", "month");
 80050f8:	46a4      	mov	ip, r4
 80050fa:	49b0      	ldr	r1, [pc, #704]	@ (80053bc <hashInit.0+0x3b44>)
 80050fc:	48b0      	ldr	r0, [pc, #704]	@ (80053c0 <hashInit.0+0x3b48>)
 80050fe:	f7fc fb0d 	bl	800171c <insert.1>
		insert("PWE/SAOEUD", "beside");
 8005102:	46a4      	mov	ip, r4
 8005104:	49af      	ldr	r1, [pc, #700]	@ (80053c4 <hashInit.0+0x3b4c>)
 8005106:	48b0      	ldr	r0, [pc, #704]	@ (80053c8 <hashInit.0+0x3b50>)
 8005108:	f7fc fb08 	bl	800171c <insert.1>
		insert("SHREPBT", "silent");
 800510c:	46a4      	mov	ip, r4
 800510e:	49af      	ldr	r1, [pc, #700]	@ (80053cc <hashInit.0+0x3b54>)
 8005110:	48af      	ldr	r0, [pc, #700]	@ (80053d0 <hashInit.0+0x3b58>)
 8005112:	f7fc fb03 	bl	800171c <insert.1>
		insert("P-F", "perfect");
 8005116:	46a4      	mov	ip, r4
 8005118:	49ae      	ldr	r1, [pc, #696]	@ (80053d4 <hashInit.0+0x3b5c>)
 800511a:	48af      	ldr	r0, [pc, #700]	@ (80053d8 <hashInit.0+0x3b60>)
 800511c:	f7fc fafe 	bl	800171c <insert.1>
		insert("SPAOERPBS", "experience");
 8005120:	46a4      	mov	ip, r4
 8005122:	49ae      	ldr	r1, [pc, #696]	@ (80053dc <hashInit.0+0x3b64>)
 8005124:	48ae      	ldr	r0, [pc, #696]	@ (80053e0 <hashInit.0+0x3b68>)
 8005126:	f7fc faf9 	bl	800171c <insert.1>
		insert("STRAOET", "street");
 800512a:	46a4      	mov	ip, r4
 800512c:	49ad      	ldr	r1, [pc, #692]	@ (80053e4 <hashInit.0+0x3b6c>)
 800512e:	48ae      	ldr	r0, [pc, #696]	@ (80053e8 <hashInit.0+0x3b70>)
 8005130:	f7fc faf4 	bl	800171c <insert.1>
		insert("WREUG", "writing");
 8005134:	46a4      	mov	ip, r4
 8005136:	49ad      	ldr	r1, [pc, #692]	@ (80053ec <hashInit.0+0x3b74>)
 8005138:	48ad      	ldr	r0, [pc, #692]	@ (80053f0 <hashInit.0+0x3b78>)
 800513a:	f7fc faef 	bl	800171c <insert.1>
		insert("TKPW-S", "goes");
 800513e:	46a4      	mov	ip, r4
 8005140:	49ac      	ldr	r1, [pc, #688]	@ (80053f4 <hashInit.0+0x3b7c>)
 8005142:	48ad      	ldr	r0, [pc, #692]	@ (80053f8 <hashInit.0+0x3b80>)
 8005144:	f7fc faea 	bl	800171c <insert.1>
		insert("SEURBGS", "circumstances");
 8005148:	46a4      	mov	ip, r4
 800514a:	49ac      	ldr	r1, [pc, #688]	@ (80053fc <hashInit.0+0x3b84>)
 800514c:	48ac      	ldr	r0, [pc, #688]	@ (8005400 <hashInit.0+0x3b88>)
 800514e:	f7fc fae5 	bl	800171c <insert.1>
		insert("SPWAOEURL", "entirely");
 8005152:	46a4      	mov	ip, r4
 8005154:	49ab      	ldr	r1, [pc, #684]	@ (8005404 <hashInit.0+0x3b8c>)
 8005156:	48ac      	ldr	r0, [pc, #688]	@ (8005408 <hashInit.0+0x3b90>)
 8005158:	f7fc fae0 	bl	800171c <insert.1>
		insert("TPRERB", "fresh");
 800515c:	46a4      	mov	ip, r4
 800515e:	49ab      	ldr	r1, [pc, #684]	@ (800540c <hashInit.0+0x3b94>)
 8005160:	48ab      	ldr	r0, [pc, #684]	@ (8005410 <hashInit.0+0x3b98>)
 8005162:	f7fc fadb 	bl	800171c <insert.1>
		insert("TKAOUBG", "duke");
 8005166:	46a4      	mov	ip, r4
 8005168:	49aa      	ldr	r1, [pc, #680]	@ (8005414 <hashInit.0+0x3b9c>)
 800516a:	48ab      	ldr	r0, [pc, #684]	@ (8005418 <hashInit.0+0x3ba0>)
 800516c:	f7fc fad6 	bl	800171c <insert.1>
		insert("KOFRD", "covered");
 8005170:	46a4      	mov	ip, r4
 8005172:	49aa      	ldr	r1, [pc, #680]	@ (800541c <hashInit.0+0x3ba4>)
 8005174:	48aa      	ldr	r0, [pc, #680]	@ (8005420 <hashInit.0+0x3ba8>)
 8005176:	f7fc fad1 	bl	800171c <insert.1>
		insert("PWOUPBD", "bound");
 800517a:	46a4      	mov	ip, r4
 800517c:	49a9      	ldr	r1, [pc, #676]	@ (8005424 <hashInit.0+0x3bac>)
 800517e:	48aa      	ldr	r0, [pc, #680]	@ (8005428 <hashInit.0+0x3bb0>)
 8005180:	f7fc facc 	bl	800171c <insert.1>
		insert("AOEFT", "east");
 8005184:	46a4      	mov	ip, r4
 8005186:	49a9      	ldr	r1, [pc, #676]	@ (800542c <hashInit.0+0x3bb4>)
 8005188:	48a9      	ldr	r0, [pc, #676]	@ (8005430 <hashInit.0+0x3bb8>)
 800518a:	f7fc fac7 	bl	800171c <insert.1>
		insert("WAOD", "wood");
 800518e:	46a4      	mov	ip, r4
 8005190:	49a8      	ldr	r1, [pc, #672]	@ (8005434 <hashInit.0+0x3bbc>)
 8005192:	48a9      	ldr	r0, [pc, #676]	@ (8005438 <hashInit.0+0x3bc0>)
 8005194:	f7fc fac2 	bl	800171c <insert.1>
		insert("STOEPB", "stone");
 8005198:	46a4      	mov	ip, r4
 800519a:	49a8      	ldr	r1, [pc, #672]	@ (800543c <hashInit.0+0x3bc4>)
 800519c:	48a8      	ldr	r0, [pc, #672]	@ (8005440 <hashInit.0+0x3bc8>)
 800519e:	f7fc fabd 	bl	800171c <insert.1>
		insert("KWEULG", "quickly");
 80051a2:	46a4      	mov	ip, r4
 80051a4:	49a7      	ldr	r1, [pc, #668]	@ (8005444 <hashInit.0+0x3bcc>)
 80051a6:	48a8      	ldr	r0, [pc, #672]	@ (8005448 <hashInit.0+0x3bd0>)
 80051a8:	f7fc fab8 	bl	800171c <insert.1>
		insert("TPH-TS", "notice");
 80051ac:	46a4      	mov	ip, r4
 80051ae:	49a7      	ldr	r1, [pc, #668]	@ (800544c <hashInit.0+0x3bd4>)
 80051b0:	48a7      	ldr	r0, [pc, #668]	@ (8005450 <hashInit.0+0x3bd8>)
 80051b2:	f7fc fab3 	bl	800171c <insert.1>
		insert("PWRAOEUT", "bright");
 80051b6:	46a4      	mov	ip, r4
 80051b8:	49a6      	ldr	r1, [pc, #664]	@ (8005454 <hashInit.0+0x3bdc>)
 80051ba:	48a7      	ldr	r0, [pc, #668]	@ (8005458 <hashInit.0+0x3be0>)
 80051bc:	f7fc faae 	bl	800171c <insert.1>
		insert("KRAOEUFT", "Christ");
 80051c0:	46a4      	mov	ip, r4
 80051c2:	49a6      	ldr	r1, [pc, #664]	@ (800545c <hashInit.0+0x3be4>)
 80051c4:	48a6      	ldr	r0, [pc, #664]	@ (8005460 <hashInit.0+0x3be8>)
 80051c6:	f7fc faa9 	bl	800171c <insert.1>
		insert("PWOET", "boat");
 80051ca:	46a4      	mov	ip, r4
 80051cc:	49a5      	ldr	r1, [pc, #660]	@ (8005464 <hashInit.0+0x3bec>)
 80051ce:	48a6      	ldr	r0, [pc, #664]	@ (8005468 <hashInit.0+0x3bf0>)
 80051d0:	f7fc faa4 	bl	800171c <insert.1>
		insert("TPHOEBL", "noble");
 80051d4:	46a4      	mov	ip, r4
 80051d6:	49a5      	ldr	r1, [pc, #660]	@ (800546c <hashInit.0+0x3bf4>)
 80051d8:	48a5      	ldr	r0, [pc, #660]	@ (8005470 <hashInit.0+0x3bf8>)
 80051da:	f7fc fa9f 	bl	800171c <insert.1>
		insert("PHEPBT", "meant");
 80051de:	46a4      	mov	ip, r4
 80051e0:	49a4      	ldr	r1, [pc, #656]	@ (8005474 <hashInit.0+0x3bfc>)
 80051e2:	48a5      	ldr	r0, [pc, #660]	@ (8005478 <hashInit.0+0x3c00>)
 80051e4:	f7fc fa9a 	bl	800171c <insert.1>
		insert("SWHA", "somewhat");
 80051e8:	46a4      	mov	ip, r4
 80051ea:	49a4      	ldr	r1, [pc, #656]	@ (800547c <hashInit.0+0x3c04>)
 80051ec:	48a4      	ldr	r0, [pc, #656]	@ (8005480 <hashInit.0+0x3c08>)
 80051ee:	f7fc fa95 	bl	800171c <insert.1>
		insert("SUD", "sudden");
 80051f2:	46a4      	mov	ip, r4
 80051f4:	49a3      	ldr	r1, [pc, #652]	@ (8005484 <hashInit.0+0x3c0c>)
 80051f6:	48a4      	ldr	r0, [pc, #656]	@ (8005488 <hashInit.0+0x3c10>)
 80051f8:	f7fc fa90 	bl	800171c <insert.1>
		insert("SRAOUL", "value");
 80051fc:	46a4      	mov	ip, r4
 80051fe:	49a3      	ldr	r1, [pc, #652]	@ (800548c <hashInit.0+0x3c14>)
 8005200:	48a3      	ldr	r0, [pc, #652]	@ (8005490 <hashInit.0+0x3c18>)
 8005202:	f7fc fa8b 	bl	800171c <insert.1>
		insert("KR*/TP-PL", "c.");
 8005206:	46a4      	mov	ip, r4
 8005208:	49a2      	ldr	r1, [pc, #648]	@ (8005494 <hashInit.0+0x3c1c>)
 800520a:	48a3      	ldr	r0, [pc, #652]	@ (8005498 <hashInit.0+0x3c20>)
 800520c:	f7fc fa86 	bl	800171c <insert.1>
		insert("TKREBGS", "direction");
 8005210:	46a4      	mov	ip, r4
 8005212:	49a2      	ldr	r1, [pc, #648]	@ (800549c <hashInit.0+0x3c24>)
 8005214:	48a2      	ldr	r0, [pc, #648]	@ (80054a0 <hashInit.0+0x3c28>)
 8005216:	f7fc fa81 	bl	800171c <insert.1>
		insert("KHAEUR", "chair");
 800521a:	46a4      	mov	ip, r4
 800521c:	49a1      	ldr	r1, [pc, #644]	@ (80054a4 <hashInit.0+0x3c2c>)
 800521e:	48a2      	ldr	r0, [pc, #648]	@ (80054a8 <hashInit.0+0x3c30>)
 8005220:	f7fc fa7c 	bl	800171c <insert.1>
		insert("TKAOU", "due");
 8005224:	46a4      	mov	ip, r4
 8005226:	49a1      	ldr	r1, [pc, #644]	@ (80054ac <hashInit.0+0x3c34>)
 8005228:	48a1      	ldr	r0, [pc, #644]	@ (80054b0 <hashInit.0+0x3c38>)
 800522a:	f7fc fa77 	bl	800171c <insert.1>
		insert("SPOR", "support");
 800522e:	46a4      	mov	ip, r4
 8005230:	49a0      	ldr	r1, [pc, #640]	@ (80054b4 <hashInit.0+0x3c3c>)
 8005232:	48a1      	ldr	r0, [pc, #644]	@ (80054b8 <hashInit.0+0x3c40>)
 8005234:	f7fc fa72 	bl	800171c <insert.1>
		insert("TOPL", "Tom");
 8005238:	46a4      	mov	ip, r4
 800523a:	49a0      	ldr	r1, [pc, #640]	@ (80054bc <hashInit.0+0x3c44>)
 800523c:	48a0      	ldr	r0, [pc, #640]	@ (80054c0 <hashInit.0+0x3c48>)
 800523e:	f7fc fa6d 	bl	800171c <insert.1>
		insert("TKAEUT", "date");
 8005242:	46a4      	mov	ip, r4
 8005244:	499f      	ldr	r1, [pc, #636]	@ (80054c4 <hashInit.0+0x3c4c>)
 8005246:	48a0      	ldr	r0, [pc, #640]	@ (80054c8 <hashInit.0+0x3c50>)
 8005248:	f7fc fa68 	bl	800171c <insert.1>
		insert("WAEUGT", "waiting");
 800524c:	46a4      	mov	ip, r4
 800524e:	499f      	ldr	r1, [pc, #636]	@ (80054cc <hashInit.0+0x3c54>)
 8005250:	489f      	ldr	r0, [pc, #636]	@ (80054d0 <hashInit.0+0x3c58>)
 8005252:	f7fc fa63 	bl	800171c <insert.1>
		insert("KREUGS", "Christian");
 8005256:	46a4      	mov	ip, r4
 8005258:	499e      	ldr	r1, [pc, #632]	@ (80054d4 <hashInit.0+0x3c5c>)
 800525a:	489f      	ldr	r0, [pc, #636]	@ (80054d8 <hashInit.0+0x3c60>)
 800525c:	f7fc fa5e 	bl	800171c <insert.1>
		insert("SREULG", "village");
 8005260:	46a4      	mov	ip, r4
 8005262:	499e      	ldr	r1, [pc, #632]	@ (80054dc <hashInit.0+0x3c64>)
 8005264:	489e      	ldr	r0, [pc, #632]	@ (80054e0 <hashInit.0+0x3c68>)
 8005266:	f7fc fa59 	bl	800171c <insert.1>
		insert("HREUFS", "lives");
 800526a:	46a4      	mov	ip, r4
 800526c:	499d      	ldr	r1, [pc, #628]	@ (80054e4 <hashInit.0+0x3c6c>)
 800526e:	489e      	ldr	r0, [pc, #632]	@ (80054e8 <hashInit.0+0x3c70>)
 8005270:	f7fc fa54 	bl	800171c <insert.1>
		insert("RAEGD", "reading");
 8005274:	46a4      	mov	ip, r4
 8005276:	499d      	ldr	r1, [pc, #628]	@ (80054ec <hashInit.0+0x3c74>)
 8005278:	489d      	ldr	r0, [pc, #628]	@ (80054f0 <hashInit.0+0x3c78>)
 800527a:	f7fc fa4f 	bl	800171c <insert.1>
		insert("TKPWRAE", "agree");
 800527e:	46a4      	mov	ip, r4
 8005280:	499c      	ldr	r1, [pc, #624]	@ (80054f4 <hashInit.0+0x3c7c>)
 8005282:	489d      	ldr	r0, [pc, #628]	@ (80054f8 <hashInit.0+0x3c80>)
 8005284:	f7fc fa4a 	bl	800171c <insert.1>
		insert("HRAOEUPBS", "lines");
 8005288:	46a4      	mov	ip, r4
 800528a:	499c      	ldr	r1, [pc, #624]	@ (80054fc <hashInit.0+0x3c84>)
 800528c:	489c      	ldr	r0, [pc, #624]	@ (8005500 <hashInit.0+0x3c88>)
 800528e:	f7fc fa45 	bl	800171c <insert.1>
		insert("KR-D", "considered");
 8005292:	46a4      	mov	ip, r4
 8005294:	499b      	ldr	r1, [pc, #620]	@ (8005504 <hashInit.0+0x3c8c>)
 8005296:	489c      	ldr	r0, [pc, #624]	@ (8005508 <hashInit.0+0x3c90>)
 8005298:	f7fc fa40 	bl	800171c <insert.1>
		insert("TPAOELD", "field");
 800529c:	46a4      	mov	ip, r4
 800529e:	499b      	ldr	r1, [pc, #620]	@ (800550c <hashInit.0+0x3c94>)
 80052a0:	489b      	ldr	r0, [pc, #620]	@ (8005510 <hashInit.0+0x3c98>)
 80052a2:	f7fc fa3b 	bl	800171c <insert.1>
		insert("OEBD", "observed");
 80052a6:	46a4      	mov	ip, r4
 80052a8:	499a      	ldr	r1, [pc, #616]	@ (8005514 <hashInit.0+0x3c9c>)
 80052aa:	489b      	ldr	r0, [pc, #620]	@ (8005518 <hashInit.0+0x3ca0>)
 80052ac:	f7fc fa36 	bl	800171c <insert.1>
		insert("SKAEURS/HREU", "scarcely");
 80052b0:	46a4      	mov	ip, r4
 80052b2:	499a      	ldr	r1, [pc, #616]	@ (800551c <hashInit.0+0x3ca4>)
 80052b4:	489a      	ldr	r0, [pc, #616]	@ (8005520 <hashInit.0+0x3ca8>)
 80052b6:	f7fc fa31 	bl	800171c <insert.1>
		insert("WEURBD", "wished");
 80052ba:	46a4      	mov	ip, r4
 80052bc:	4999      	ldr	r1, [pc, #612]	@ (8005524 <hashInit.0+0x3cac>)
 80052be:	489a      	ldr	r0, [pc, #616]	@ (8005528 <hashInit.0+0x3cb0>)
 80052c0:	f7fc fa2c 	bl	800171c <insert.1>
		insert("WAEUT", "wait");
 80052c4:	46a4      	mov	ip, r4
 80052c6:	4999      	ldr	r1, [pc, #612]	@ (800552c <hashInit.0+0x3cb4>)
 80052c8:	4899      	ldr	r0, [pc, #612]	@ (8005530 <hashInit.0+0x3cb8>)
 80052ca:	f7fc fa27 	bl	800171c <insert.1>
		insert("TKPWRAET/EFT", "greatest");
 80052ce:	46a4      	mov	ip, r4
 80052d0:	4998      	ldr	r1, [pc, #608]	@ (8005534 <hashInit.0+0x3cbc>)
 80052d2:	4899      	ldr	r0, [pc, #612]	@ (8005538 <hashInit.0+0x3cc0>)
 80052d4:	f7fc fa22 	bl	800171c <insert.1>
		insert("PERPLGS", "permission");
 80052d8:	46a4      	mov	ip, r4
 80052da:	4998      	ldr	r1, [pc, #608]	@ (800553c <hashInit.0+0x3cc4>)
 80052dc:	4898      	ldr	r0, [pc, #608]	@ (8005540 <hashInit.0+0x3cc8>)
 80052de:	f7fc fa1d 	bl	800171c <insert.1>
		insert("SKES", "success");
 80052e2:	46a4      	mov	ip, r4
 80052e4:	4997      	ldr	r1, [pc, #604]	@ (8005544 <hashInit.0+0x3ccc>)
 80052e6:	4898      	ldr	r0, [pc, #608]	@ (8005548 <hashInit.0+0x3cd0>)
 80052e8:	f7fc fa18 	bl	800171c <insert.1>
		insert("PAOES", "piece");
 80052ec:	46a4      	mov	ip, r4
 80052ee:	4997      	ldr	r1, [pc, #604]	@ (800554c <hashInit.0+0x3cd4>)
 80052f0:	4897      	ldr	r0, [pc, #604]	@ (8005550 <hashInit.0+0x3cd8>)
 80052f2:	f7fc fa13 	bl	800171c <insert.1>
		insert("PWREURB", "British");
 80052f6:	46a4      	mov	ip, r4
 80052f8:	4996      	ldr	r1, [pc, #600]	@ (8005554 <hashInit.0+0x3cdc>)
 80052fa:	4897      	ldr	r0, [pc, #604]	@ (8005558 <hashInit.0+0x3ce0>)
 80052fc:	f7fc fa0e 	bl	800171c <insert.1>
		insert("EBGS", "ex");
 8005300:	46a4      	mov	ip, r4
 8005302:	4996      	ldr	r1, [pc, #600]	@ (800555c <hashInit.0+0x3ce4>)
 8005304:	4896      	ldr	r0, [pc, #600]	@ (8005560 <hashInit.0+0x3ce8>)
 8005306:	f7fc fa09 	bl	800171c <insert.1>
		insert("KHARLS", "Charles");
 800530a:	46a4      	mov	ip, r4
 800530c:	4995      	ldr	r1, [pc, #596]	@ (8005564 <hashInit.0+0x3cec>)
 800530e:	4896      	ldr	r0, [pc, #600]	@ (8005568 <hashInit.0+0x3cf0>)
 8005310:	f7fc fa04 	bl	800171c <insert.1>
		insert("TPORPLD", "formed");
 8005314:	46a4      	mov	ip, r4
 8005316:	4995      	ldr	r1, [pc, #596]	@ (800556c <hashInit.0+0x3cf4>)
 8005318:	4895      	ldr	r0, [pc, #596]	@ (8005570 <hashInit.0+0x3cf8>)
 800531a:	f7fc f9ff 	bl	800171c <insert.1>
		insert("SPAOEG", "speaking");
 800531e:	46a4      	mov	ip, r4
 8005320:	4994      	ldr	r1, [pc, #592]	@ (8005574 <hashInit.0+0x3cfc>)
 8005322:	4895      	ldr	r0, [pc, #596]	@ (8005578 <hashInit.0+0x3d00>)
 8005324:	f7fc f9fa 	bl	800171c <insert.1>
		insert("TRAOEUG", "trying");
 8005328:	46a4      	mov	ip, r4
 800532a:	4994      	ldr	r1, [pc, #592]	@ (800557c <hashInit.0+0x3d04>)
 800532c:	4894      	ldr	r0, [pc, #592]	@ (8005580 <hashInit.0+0x3d08>)
 800532e:	f7fc f9f5 	bl	800171c <insert.1>
		insert("K-FRGS", "conversation");
 8005332:	46a4      	mov	ip, r4
 8005334:	4993      	ldr	r1, [pc, #588]	@ (8005584 <hashInit.0+0x3d0c>)
 8005336:	4894      	ldr	r0, [pc, #592]	@ (8005588 <hashInit.0+0x3d10>)
 8005338:	f7fc f9f0 	bl	800171c <insert.1>
		insert("PROR", "proper");
 800533c:	46a4      	mov	ip, r4
 800533e:	4993      	ldr	r1, [pc, #588]	@ (800558c <hashInit.0+0x3d14>)
 8005340:	4893      	ldr	r0, [pc, #588]	@ (8005590 <hashInit.0+0x3d18>)
 8005342:	f7fc f9eb 	bl	800171c <insert.1>
		insert("HEUL", "hill");
 8005346:	46a4      	mov	ip, r4
 8005348:	4992      	ldr	r1, [pc, #584]	@ (8005594 <hashInit.0+0x3d1c>)
 800534a:	4893      	ldr	r0, [pc, #588]	@ (8005598 <hashInit.0+0x3d20>)
 800534c:	f7fc f9e6 	bl	800171c <insert.1>
		insert("PHAOUFBG", "music");
 8005350:	46a4      	mov	ip, r4
 8005352:	4992      	ldr	r1, [pc, #584]	@ (800559c <hashInit.0+0x3d24>)
 8005354:	4892      	ldr	r0, [pc, #584]	@ (80055a0 <hashInit.0+0x3d28>)
 8005356:	f7fc f9e1 	bl	800171c <insert.1>
		insert("TAOUPBT", "opportunity");
 800535a:	46a4      	mov	ip, r4
 800535c:	4991      	ldr	r1, [pc, #580]	@ (80055a4 <hashInit.0+0x3d2c>)
 800535e:	4892      	ldr	r0, [pc, #584]	@ (80055a8 <hashInit.0+0x3d30>)
 8005360:	f7fc f9dc 	bl	800171c <insert.1>
		insert("TH-TS", "that's");
 8005364:	46a4      	mov	ip, r4
 8005366:	4991      	ldr	r1, [pc, #580]	@ (80055ac <hashInit.0+0x3d34>)
 8005368:	4891      	ldr	r0, [pc, #580]	@ (80055b0 <hashInit.0+0x3d38>)
 800536a:	f7fc f9d7 	bl	800171c <insert.1>
 800536e:	e121      	b.n	80055b4 <hashInit.0+0x3d3c>
 8005370:	080104d4 	.word	0x080104d4
 8005374:	080104dc 	.word	0x080104dc
 8005378:	080104e4 	.word	0x080104e4
 800537c:	080104ec 	.word	0x080104ec
 8005380:	080104f4 	.word	0x080104f4
 8005384:	080104fc 	.word	0x080104fc
 8005388:	08010504 	.word	0x08010504
 800538c:	0801050c 	.word	0x0801050c
 8005390:	08010514 	.word	0x08010514
 8005394:	0801051c 	.word	0x0801051c
 8005398:	08010524 	.word	0x08010524
 800539c:	0801052c 	.word	0x0801052c
 80053a0:	08010534 	.word	0x08010534
 80053a4:	0801053c 	.word	0x0801053c
 80053a8:	08010544 	.word	0x08010544
 80053ac:	0801054c 	.word	0x0801054c
 80053b0:	08010558 	.word	0x08010558
 80053b4:	08010560 	.word	0x08010560
 80053b8:	08010568 	.word	0x08010568
 80053bc:	08010570 	.word	0x08010570
 80053c0:	08010578 	.word	0x08010578
 80053c4:	08010580 	.word	0x08010580
 80053c8:	08010588 	.word	0x08010588
 80053cc:	08010594 	.word	0x08010594
 80053d0:	0801059c 	.word	0x0801059c
 80053d4:	080105a4 	.word	0x080105a4
 80053d8:	080105ac 	.word	0x080105ac
 80053dc:	080105b0 	.word	0x080105b0
 80053e0:	080105bc 	.word	0x080105bc
 80053e4:	080105c8 	.word	0x080105c8
 80053e8:	080105d0 	.word	0x080105d0
 80053ec:	080105d8 	.word	0x080105d8
 80053f0:	080105e0 	.word	0x080105e0
 80053f4:	080105e8 	.word	0x080105e8
 80053f8:	080105f0 	.word	0x080105f0
 80053fc:	080105f8 	.word	0x080105f8
 8005400:	08010608 	.word	0x08010608
 8005404:	08010610 	.word	0x08010610
 8005408:	0801061c 	.word	0x0801061c
 800540c:	08010628 	.word	0x08010628
 8005410:	08010630 	.word	0x08010630
 8005414:	08010638 	.word	0x08010638
 8005418:	08010640 	.word	0x08010640
 800541c:	08010648 	.word	0x08010648
 8005420:	08010650 	.word	0x08010650
 8005424:	08010658 	.word	0x08010658
 8005428:	08010660 	.word	0x08010660
 800542c:	08010668 	.word	0x08010668
 8005430:	08010670 	.word	0x08010670
 8005434:	08010678 	.word	0x08010678
 8005438:	08010680 	.word	0x08010680
 800543c:	08010688 	.word	0x08010688
 8005440:	08010690 	.word	0x08010690
 8005444:	08010698 	.word	0x08010698
 8005448:	080106a0 	.word	0x080106a0
 800544c:	080106a8 	.word	0x080106a8
 8005450:	080106b0 	.word	0x080106b0
 8005454:	080106b8 	.word	0x080106b8
 8005458:	080106c0 	.word	0x080106c0
 800545c:	080106cc 	.word	0x080106cc
 8005460:	080106d4 	.word	0x080106d4
 8005464:	080106e0 	.word	0x080106e0
 8005468:	080106e8 	.word	0x080106e8
 800546c:	080106f0 	.word	0x080106f0
 8005470:	080106f8 	.word	0x080106f8
 8005474:	08010700 	.word	0x08010700
 8005478:	08010708 	.word	0x08010708
 800547c:	08010710 	.word	0x08010710
 8005480:	0801071c 	.word	0x0801071c
 8005484:	08010724 	.word	0x08010724
 8005488:	0801072c 	.word	0x0801072c
 800548c:	08010730 	.word	0x08010730
 8005490:	08010738 	.word	0x08010738
 8005494:	08010740 	.word	0x08010740
 8005498:	08010744 	.word	0x08010744
 800549c:	08010750 	.word	0x08010750
 80054a0:	0801075c 	.word	0x0801075c
 80054a4:	08010764 	.word	0x08010764
 80054a8:	0801076c 	.word	0x0801076c
 80054ac:	0800d610 	.word	0x0800d610
 80054b0:	0800d614 	.word	0x0800d614
 80054b4:	08010774 	.word	0x08010774
 80054b8:	0801077c 	.word	0x0801077c
 80054bc:	08010784 	.word	0x08010784
 80054c0:	08010788 	.word	0x08010788
 80054c4:	08010790 	.word	0x08010790
 80054c8:	08010798 	.word	0x08010798
 80054cc:	080107a0 	.word	0x080107a0
 80054d0:	080107a8 	.word	0x080107a8
 80054d4:	080107b0 	.word	0x080107b0
 80054d8:	080107bc 	.word	0x080107bc
 80054dc:	080107c4 	.word	0x080107c4
 80054e0:	080107cc 	.word	0x080107cc
 80054e4:	080107d4 	.word	0x080107d4
 80054e8:	080107dc 	.word	0x080107dc
 80054ec:	080107e4 	.word	0x080107e4
 80054f0:	080107ec 	.word	0x080107ec
 80054f4:	080107f4 	.word	0x080107f4
 80054f8:	080107fc 	.word	0x080107fc
 80054fc:	08010804 	.word	0x08010804
 8005500:	0801080c 	.word	0x0801080c
 8005504:	08010818 	.word	0x08010818
 8005508:	08010824 	.word	0x08010824
 800550c:	0801082c 	.word	0x0801082c
 8005510:	08010834 	.word	0x08010834
 8005514:	0801083c 	.word	0x0801083c
 8005518:	08010848 	.word	0x08010848
 800551c:	08010850 	.word	0x08010850
 8005520:	0801085c 	.word	0x0801085c
 8005524:	0801086c 	.word	0x0801086c
 8005528:	08010874 	.word	0x08010874
 800552c:	0801087c 	.word	0x0801087c
 8005530:	08010884 	.word	0x08010884
 8005534:	0801088c 	.word	0x0801088c
 8005538:	08010898 	.word	0x08010898
 800553c:	080108a8 	.word	0x080108a8
 8005540:	080108b4 	.word	0x080108b4
 8005544:	080108bc 	.word	0x080108bc
 8005548:	080108c4 	.word	0x080108c4
 800554c:	080108cc 	.word	0x080108cc
 8005550:	080108d4 	.word	0x080108d4
 8005554:	080108dc 	.word	0x080108dc
 8005558:	080108e4 	.word	0x080108e4
 800555c:	080108ec 	.word	0x080108ec
 8005560:	080108f0 	.word	0x080108f0
 8005564:	080108f8 	.word	0x080108f8
 8005568:	08010900 	.word	0x08010900
 800556c:	08010908 	.word	0x08010908
 8005570:	08010910 	.word	0x08010910
 8005574:	08010918 	.word	0x08010918
 8005578:	08010924 	.word	0x08010924
 800557c:	0801092c 	.word	0x0801092c
 8005580:	08010934 	.word	0x08010934
 8005584:	0801093c 	.word	0x0801093c
 8005588:	0801094c 	.word	0x0801094c
 800558c:	08010954 	.word	0x08010954
 8005590:	0801095c 	.word	0x0801095c
 8005594:	08010964 	.word	0x08010964
 8005598:	0801096c 	.word	0x0801096c
 800559c:	08010974 	.word	0x08010974
 80055a0:	0801097c 	.word	0x0801097c
 80055a4:	08010988 	.word	0x08010988
 80055a8:	08010994 	.word	0x08010994
 80055ac:	0801099c 	.word	0x0801099c
 80055b0:	080109a4 	.word	0x080109a4
		insert("SKWR*ERPB", "German");
 80055b4:	46a4      	mov	ip, r4
 80055b6:	49b5      	ldr	r1, [pc, #724]	@ (800588c <hashInit.0+0x4014>)
 80055b8:	48b5      	ldr	r0, [pc, #724]	@ (8005890 <hashInit.0+0x4018>)
 80055ba:	f7fc f8af 	bl	800171c <insert.1>
		insert("AFPB", "afternoon");
 80055be:	46a4      	mov	ip, r4
 80055c0:	49b4      	ldr	r1, [pc, #720]	@ (8005894 <hashInit.0+0x401c>)
 80055c2:	48b5      	ldr	r0, [pc, #724]	@ (8005898 <hashInit.0+0x4020>)
 80055c4:	f7fc f8aa 	bl	800171c <insert.1>
		insert("KRAOEU", "cry");
 80055c8:	46a4      	mov	ip, r4
 80055ca:	49b4      	ldr	r1, [pc, #720]	@ (800589c <hashInit.0+0x4024>)
 80055cc:	48b4      	ldr	r0, [pc, #720]	@ (80058a0 <hashInit.0+0x4028>)
 80055ce:	f7fc f8a5 	bl	800171c <insert.1>
		insert("KOFT", "cost");
 80055d2:	46a4      	mov	ip, r4
 80055d4:	49b3      	ldr	r1, [pc, #716]	@ (80058a4 <hashInit.0+0x402c>)
 80055d6:	48b4      	ldr	r0, [pc, #720]	@ (80058a8 <hashInit.0+0x4030>)
 80055d8:	f7fc f8a0 	bl	800171c <insert.1>
		insert("HRO*UD", "allowed");
 80055dc:	46a4      	mov	ip, r4
 80055de:	49b3      	ldr	r1, [pc, #716]	@ (80058ac <hashInit.0+0x4034>)
 80055e0:	48b3      	ldr	r0, [pc, #716]	@ (80058b0 <hashInit.0+0x4038>)
 80055e2:	f7fc f89b 	bl	800171c <insert.1>
		insert("TKPWEURLS", "girls");
 80055e6:	46a4      	mov	ip, r4
 80055e8:	49b2      	ldr	r1, [pc, #712]	@ (80058b4 <hashInit.0+0x403c>)
 80055ea:	48b3      	ldr	r0, [pc, #716]	@ (80058b8 <hashInit.0+0x4040>)
 80055ec:	f7fc f896 	bl	800171c <insert.1>
		insert("KR-BL", "considerable");
 80055f0:	46a4      	mov	ip, r4
 80055f2:	49b2      	ldr	r1, [pc, #712]	@ (80058bc <hashInit.0+0x4044>)
 80055f4:	48b2      	ldr	r0, [pc, #712]	@ (80058c0 <hashInit.0+0x4048>)
 80055f6:	f7fc f891 	bl	800171c <insert.1>
		insert("KR*", "c");
 80055fa:	46a4      	mov	ip, r4
 80055fc:	49b1      	ldr	r1, [pc, #708]	@ (80058c4 <hashInit.0+0x404c>)
 80055fe:	48b2      	ldr	r0, [pc, #712]	@ (80058c8 <hashInit.0+0x4050>)
 8005600:	f7fc f88c 	bl	800171c <insert.1>
		insert("PWROEBG", "broke");
 8005604:	46a4      	mov	ip, r4
 8005606:	49b1      	ldr	r1, [pc, #708]	@ (80058cc <hashInit.0+0x4054>)
 8005608:	48b1      	ldr	r0, [pc, #708]	@ (80058d0 <hashInit.0+0x4058>)
 800560a:	f7fc f887 	bl	800171c <insert.1>
		insert("HO*RPB/A*U", "honour");
 800560e:	46a4      	mov	ip, r4
 8005610:	49b0      	ldr	r1, [pc, #704]	@ (80058d4 <hashInit.0+0x405c>)
 8005612:	48b1      	ldr	r0, [pc, #708]	@ (80058d8 <hashInit.0+0x4060>)
 8005614:	f7fc f882 	bl	800171c <insert.1>
		insert("SEFPB", "seven");
 8005618:	46a4      	mov	ip, r4
 800561a:	49b0      	ldr	r1, [pc, #704]	@ (80058dc <hashInit.0+0x4064>)
 800561c:	48b0      	ldr	r0, [pc, #704]	@ (80058e0 <hashInit.0+0x4068>)
 800561e:	f7fc f87d 	bl	800171c <insert.1>
		insert("PRAOEUFT", "private");
 8005622:	46a4      	mov	ip, r4
 8005624:	49af      	ldr	r1, [pc, #700]	@ (80058e4 <hashInit.0+0x406c>)
 8005626:	48b0      	ldr	r0, [pc, #704]	@ (80058e8 <hashInit.0+0x4070>)
 8005628:	f7fc f878 	bl	800171c <insert.1>
		insert("SEUT", "sit");
 800562c:	46a4      	mov	ip, r4
 800562e:	49af      	ldr	r1, [pc, #700]	@ (80058ec <hashInit.0+0x4074>)
 8005630:	48af      	ldr	r0, [pc, #700]	@ (80058f0 <hashInit.0+0x4078>)
 8005632:	f7fc f873 	bl	800171c <insert.1>
		insert("TPHUS", "news");
 8005636:	46a4      	mov	ip, r4
 8005638:	49ae      	ldr	r1, [pc, #696]	@ (80058f4 <hashInit.0+0x407c>)
 800563a:	48af      	ldr	r0, [pc, #700]	@ (80058f8 <hashInit.0+0x4080>)
 800563c:	f7fc f86e 	bl	800171c <insert.1>
		insert("TOP", "top");
 8005640:	46a4      	mov	ip, r4
 8005642:	49ae      	ldr	r1, [pc, #696]	@ (80058fc <hashInit.0+0x4084>)
 8005644:	48ae      	ldr	r0, [pc, #696]	@ (8005900 <hashInit.0+0x4088>)
 8005646:	f7fc f869 	bl	800171c <insert.1>
		insert("SAEPB", "scene");
 800564a:	46a4      	mov	ip, r4
 800564c:	49ad      	ldr	r1, [pc, #692]	@ (8005904 <hashInit.0+0x408c>)
 800564e:	48ae      	ldr	r0, [pc, #696]	@ (8005908 <hashInit.0+0x4090>)
 8005650:	f7fc f864 	bl	800171c <insert.1>
		insert("SKOFD", "discovered");
 8005654:	46a4      	mov	ip, r4
 8005656:	49ad      	ldr	r1, [pc, #692]	@ (800590c <hashInit.0+0x4094>)
 8005658:	48ad      	ldr	r0, [pc, #692]	@ (8005910 <hashInit.0+0x4098>)
 800565a:	f7fc f85f 	bl	800171c <insert.1>
		insert("PHAERPBLG", "marriage");
 800565e:	46a4      	mov	ip, r4
 8005660:	49ac      	ldr	r1, [pc, #688]	@ (8005914 <hashInit.0+0x409c>)
 8005662:	48ad      	ldr	r0, [pc, #692]	@ (8005918 <hashInit.0+0x40a0>)
 8005664:	f7fc f85a 	bl	800171c <insert.1>
		insert("STEP", "step");
 8005668:	46a4      	mov	ip, r4
 800566a:	49ac      	ldr	r1, [pc, #688]	@ (800591c <hashInit.0+0x40a4>)
 800566c:	48ac      	ldr	r0, [pc, #688]	@ (8005920 <hashInit.0+0x40a8>)
 800566e:	f7fc f855 	bl	800171c <insert.1>
		insert("TKPWA*RPB", "garden");
 8005672:	46a4      	mov	ip, r4
 8005674:	49ab      	ldr	r1, [pc, #684]	@ (8005924 <hashInit.0+0x40ac>)
 8005676:	48ac      	ldr	r0, [pc, #688]	@ (8005928 <hashInit.0+0x40b0>)
 8005678:	f7fc f850 	bl	800171c <insert.1>
		insert("RAEUS", "race");
 800567c:	46a4      	mov	ip, r4
 800567e:	49ab      	ldr	r1, [pc, #684]	@ (800592c <hashInit.0+0x40b4>)
 8005680:	48ab      	ldr	r0, [pc, #684]	@ (8005930 <hashInit.0+0x40b8>)
 8005682:	f7fc f84b 	bl	800171c <insert.1>
		insert("TKPWEUPB", "begin");
 8005686:	46a4      	mov	ip, r4
 8005688:	49aa      	ldr	r1, [pc, #680]	@ (8005934 <hashInit.0+0x40bc>)
 800568a:	48ab      	ldr	r0, [pc, #684]	@ (8005938 <hashInit.0+0x40c0>)
 800568c:	f7fc f846 	bl	800171c <insert.1>
		insert("PER", "per");
 8005690:	46a4      	mov	ip, r4
 8005692:	49aa      	ldr	r1, [pc, #680]	@ (800593c <hashInit.0+0x40c4>)
 8005694:	48aa      	ldr	r0, [pc, #680]	@ (8005940 <hashInit.0+0x40c8>)
 8005696:	f7fc f841 	bl	800171c <insert.1>
		insert("SREUD", "individual");
 800569a:	46a4      	mov	ip, r4
 800569c:	49a9      	ldr	r1, [pc, #676]	@ (8005944 <hashInit.0+0x40cc>)
 800569e:	48aa      	ldr	r0, [pc, #680]	@ (8005948 <hashInit.0+0x40d0>)
 80056a0:	f7fc f83c 	bl	800171c <insert.1>
		insert("SEUGT", "sitting");
 80056a4:	46a4      	mov	ip, r4
 80056a6:	49a9      	ldr	r1, [pc, #676]	@ (800594c <hashInit.0+0x40d4>)
 80056a8:	48a9      	ldr	r0, [pc, #676]	@ (8005950 <hashInit.0+0x40d8>)
 80056aa:	f7fc f837 	bl	800171c <insert.1>
		insert("HRERPB", "learn");
 80056ae:	46a4      	mov	ip, r4
 80056b0:	49a8      	ldr	r1, [pc, #672]	@ (8005954 <hashInit.0+0x40dc>)
 80056b2:	48a9      	ldr	r0, [pc, #676]	@ (8005958 <hashInit.0+0x40e0>)
 80056b4:	f7fc f832 	bl	800171c <insert.1>
		insert("PHREU/K-L", "political");
 80056b8:	46a4      	mov	ip, r4
 80056ba:	49a8      	ldr	r1, [pc, #672]	@ (800595c <hashInit.0+0x40e4>)
 80056bc:	48a8      	ldr	r0, [pc, #672]	@ (8005960 <hashInit.0+0x40e8>)
 80056be:	f7fc f82d 	bl	800171c <insert.1>
		insert("TKEUFL", "difficult");
 80056c2:	46a4      	mov	ip, r4
 80056c4:	49a7      	ldr	r1, [pc, #668]	@ (8005964 <hashInit.0+0x40ec>)
 80056c6:	48a8      	ldr	r0, [pc, #672]	@ (8005968 <hashInit.0+0x40f0>)
 80056c8:	f7fc f828 	bl	800171c <insert.1>
		insert("PWEUT", "bit");
 80056cc:	46a4      	mov	ip, r4
 80056ce:	49a7      	ldr	r1, [pc, #668]	@ (800596c <hashInit.0+0x40f4>)
 80056d0:	48a7      	ldr	r0, [pc, #668]	@ (8005970 <hashInit.0+0x40f8>)
 80056d2:	f7fc f823 	bl	800171c <insert.1>
		insert("SPAOEFP", "speech");
 80056d6:	46a4      	mov	ip, r4
 80056d8:	49a6      	ldr	r1, [pc, #664]	@ (8005974 <hashInit.0+0x40fc>)
 80056da:	48a7      	ldr	r0, [pc, #668]	@ (8005978 <hashInit.0+0x4100>)
 80056dc:	f7fc f81e 	bl	800171c <insert.1>
		insert("HEPB/REU", "Henry");
 80056e0:	46a4      	mov	ip, r4
 80056e2:	49a6      	ldr	r1, [pc, #664]	@ (800597c <hashInit.0+0x4104>)
 80056e4:	48a6      	ldr	r0, [pc, #664]	@ (8005980 <hashInit.0+0x4108>)
 80056e6:	f7fc f819 	bl	800171c <insert.1>
		insert("HRAOEU", "lie");
 80056ea:	46a4      	mov	ip, r4
 80056ec:	49a5      	ldr	r1, [pc, #660]	@ (8005984 <hashInit.0+0x410c>)
 80056ee:	48a6      	ldr	r0, [pc, #664]	@ (8005988 <hashInit.0+0x4110>)
 80056f0:	f7fc f814 	bl	800171c <insert.1>
		insert("KAFT", "cast");
 80056f4:	46a4      	mov	ip, r4
 80056f6:	49a5      	ldr	r1, [pc, #660]	@ (800598c <hashInit.0+0x4114>)
 80056f8:	48a5      	ldr	r0, [pc, #660]	@ (8005990 <hashInit.0+0x4118>)
 80056fa:	f7fc f80f 	bl	800171c <insert.1>
		insert("AOET", "eat");
 80056fe:	46a4      	mov	ip, r4
 8005700:	49a4      	ldr	r1, [pc, #656]	@ (8005994 <hashInit.0+0x411c>)
 8005702:	48a5      	ldr	r0, [pc, #660]	@ (8005998 <hashInit.0+0x4120>)
 8005704:	f7fc f80a 	bl	800171c <insert.1>
		insert("THORT", "authority");
 8005708:	46a4      	mov	ip, r4
 800570a:	49a4      	ldr	r1, [pc, #656]	@ (800599c <hashInit.0+0x4124>)
 800570c:	48a4      	ldr	r0, [pc, #656]	@ (80059a0 <hashInit.0+0x4128>)
 800570e:	f7fc f805 	bl	800171c <insert.1>
		insert("*ETS", "etc.");
 8005712:	46a4      	mov	ip, r4
 8005714:	49a3      	ldr	r1, [pc, #652]	@ (80059a4 <hashInit.0+0x412c>)
 8005716:	48a4      	ldr	r0, [pc, #656]	@ (80059a8 <hashInit.0+0x4130>)
 8005718:	f7fc f800 	bl	800171c <insert.1>
		insert("TPHRAOR", "floor");
 800571c:	46a4      	mov	ip, r4
 800571e:	49a3      	ldr	r1, [pc, #652]	@ (80059ac <hashInit.0+0x4134>)
 8005720:	48a3      	ldr	r0, [pc, #652]	@ (80059b0 <hashInit.0+0x4138>)
 8005722:	f7fb fffb 	bl	800171c <insert.1>
		insert("EUL", "ill");
 8005726:	46a4      	mov	ip, r4
 8005728:	49a2      	ldr	r1, [pc, #648]	@ (80059b4 <hashInit.0+0x413c>)
 800572a:	48a3      	ldr	r0, [pc, #652]	@ (80059b8 <hashInit.0+0x4140>)
 800572c:	f7fb fff6 	bl	800171c <insert.1>
		insert("WAEUS", "ways");
 8005730:	46a4      	mov	ip, r4
 8005732:	49a2      	ldr	r1, [pc, #648]	@ (80059bc <hashInit.0+0x4144>)
 8005734:	48a2      	ldr	r0, [pc, #648]	@ (80059c0 <hashInit.0+0x4148>)
 8005736:	f7fb fff1 	bl	800171c <insert.1>
		insert("OEUFRS", "officers");
 800573a:	46a4      	mov	ip, r4
 800573c:	49a1      	ldr	r1, [pc, #644]	@ (80059c4 <hashInit.0+0x414c>)
 800573e:	48a2      	ldr	r0, [pc, #648]	@ (80059c8 <hashInit.0+0x4150>)
 8005740:	f7fb ffec 	bl	800171c <insert.1>
		insert("OFRD", "offered");
 8005744:	46a4      	mov	ip, r4
 8005746:	49a1      	ldr	r1, [pc, #644]	@ (80059cc <hashInit.0+0x4154>)
 8005748:	48a1      	ldr	r0, [pc, #644]	@ (80059d0 <hashInit.0+0x4158>)
 800574a:	f7fb ffe7 	bl	800171c <insert.1>
		insert("ORPBLG", "original");
 800574e:	46a4      	mov	ip, r4
 8005750:	49a0      	ldr	r1, [pc, #640]	@ (80059d4 <hashInit.0+0x415c>)
 8005752:	48a1      	ldr	r0, [pc, #644]	@ (80059d8 <hashInit.0+0x4160>)
 8005754:	f7fb ffe2 	bl	800171c <insert.1>
		insert("HAEP/-PBS", "happiness");
 8005758:	46a4      	mov	ip, r4
 800575a:	49a0      	ldr	r1, [pc, #640]	@ (80059dc <hashInit.0+0x4164>)
 800575c:	48a0      	ldr	r0, [pc, #640]	@ (80059e0 <hashInit.0+0x4168>)
 800575e:	f7fb ffdd 	bl	800171c <insert.1>
		insert("TPHRO*URS", "flowers");
 8005762:	46a4      	mov	ip, r4
 8005764:	499f      	ldr	r1, [pc, #636]	@ (80059e4 <hashInit.0+0x416c>)
 8005766:	48a0      	ldr	r0, [pc, #640]	@ (80059e8 <hashInit.0+0x4170>)
 8005768:	f7fb ffd8 	bl	800171c <insert.1>
		insert("PRO*UD", "produced");
 800576c:	46a4      	mov	ip, r4
 800576e:	499f      	ldr	r1, [pc, #636]	@ (80059ec <hashInit.0+0x4174>)
 8005770:	489f      	ldr	r0, [pc, #636]	@ (80059f0 <hashInit.0+0x4178>)
 8005772:	f7fb ffd3 	bl	800171c <insert.1>
		insert("SAOURPL", "summer");
 8005776:	46a4      	mov	ip, r4
 8005778:	499e      	ldr	r1, [pc, #632]	@ (80059f4 <hashInit.0+0x417c>)
 800577a:	489f      	ldr	r0, [pc, #636]	@ (80059f8 <hashInit.0+0x4180>)
 800577c:	f7fb ffce 	bl	800171c <insert.1>
		insert("PROEFD", "provide");
 8005780:	46a4      	mov	ip, r4
 8005782:	499e      	ldr	r1, [pc, #632]	@ (80059fc <hashInit.0+0x4184>)
 8005784:	489e      	ldr	r0, [pc, #632]	@ (8005a00 <hashInit.0+0x4188>)
 8005786:	f7fb ffc9 	bl	800171c <insert.1>
		insert("STOEU", "study");
 800578a:	46a4      	mov	ip, r4
 800578c:	499d      	ldr	r1, [pc, #628]	@ (8005a04 <hashInit.0+0x418c>)
 800578e:	489e      	ldr	r0, [pc, #632]	@ (8005a08 <hashInit.0+0x4190>)
 8005790:	f7fb ffc4 	bl	800171c <insert.1>
		insert("RE/HREUGS", "religion");
 8005794:	46a4      	mov	ip, r4
 8005796:	499d      	ldr	r1, [pc, #628]	@ (8005a0c <hashInit.0+0x4194>)
 8005798:	489d      	ldr	r0, [pc, #628]	@ (8005a10 <hashInit.0+0x4198>)
 800579a:	f7fb ffbf 	bl	800171c <insert.1>
		insert("P*EUFP", "picture");
 800579e:	46a4      	mov	ip, r4
 80057a0:	499c      	ldr	r1, [pc, #624]	@ (8005a14 <hashInit.0+0x419c>)
 80057a2:	489d      	ldr	r0, [pc, #628]	@ (8005a18 <hashInit.0+0x41a0>)
 80057a4:	f7fb ffba 	bl	800171c <insert.1>
		insert("WAULS", "walls");
 80057a8:	46a4      	mov	ip, r4
 80057aa:	499c      	ldr	r1, [pc, #624]	@ (8005a1c <hashInit.0+0x41a4>)
 80057ac:	489c      	ldr	r0, [pc, #624]	@ (8005a20 <hashInit.0+0x41a8>)
 80057ae:	f7fb ffb5 	bl	800171c <insert.1>
		insert("PERPBL", "personal");
 80057b2:	46a4      	mov	ip, r4
 80057b4:	499b      	ldr	r1, [pc, #620]	@ (8005a24 <hashInit.0+0x41ac>)
 80057b6:	489c      	ldr	r0, [pc, #624]	@ (8005a28 <hashInit.0+0x41b0>)
 80057b8:	f7fb ffb0 	bl	800171c <insert.1>
		insert("PHERBG", "America");
 80057bc:	46a4      	mov	ip, r4
 80057be:	499b      	ldr	r1, [pc, #620]	@ (8005a2c <hashInit.0+0x41b4>)
 80057c0:	489b      	ldr	r0, [pc, #620]	@ (8005a30 <hashInit.0+0x41b8>)
 80057c2:	f7fb ffab 	bl	800171c <insert.1>
		insert("WAFP", "watch");
 80057c6:	46a4      	mov	ip, r4
 80057c8:	499a      	ldr	r1, [pc, #616]	@ (8005a34 <hashInit.0+0x41bc>)
 80057ca:	489b      	ldr	r0, [pc, #620]	@ (8005a38 <hashInit.0+0x41c0>)
 80057cc:	f7fb ffa6 	bl	800171c <insert.1>
		insert("PHREFD", "pleased");
 80057d0:	46a4      	mov	ip, r4
 80057d2:	499a      	ldr	r1, [pc, #616]	@ (8005a3c <hashInit.0+0x41c4>)
 80057d4:	489a      	ldr	r0, [pc, #616]	@ (8005a40 <hashInit.0+0x41c8>)
 80057d6:	f7fb ffa1 	bl	800171c <insert.1>
		insert("HREFS", "leaves");
 80057da:	46a4      	mov	ip, r4
 80057dc:	4999      	ldr	r1, [pc, #612]	@ (8005a44 <hashInit.0+0x41cc>)
 80057de:	489a      	ldr	r0, [pc, #616]	@ (8005a48 <hashInit.0+0x41d0>)
 80057e0:	f7fb ff9c 	bl	800171c <insert.1>
		insert("TKE/KHRAEURD", "declared");
 80057e4:	46a4      	mov	ip, r4
 80057e6:	4999      	ldr	r1, [pc, #612]	@ (8005a4c <hashInit.0+0x41d4>)
 80057e8:	4899      	ldr	r0, [pc, #612]	@ (8005a50 <hashInit.0+0x41d8>)
 80057ea:	f7fb ff97 	bl	800171c <insert.1>
		insert("HOT", "hot");
 80057ee:	46a4      	mov	ip, r4
 80057f0:	4998      	ldr	r1, [pc, #608]	@ (8005a54 <hashInit.0+0x41dc>)
 80057f2:	4899      	ldr	r0, [pc, #612]	@ (8005a58 <hashInit.0+0x41e0>)
 80057f4:	f7fb ff92 	bl	800171c <insert.1>
		insert("*URPBD", "understood");
 80057f8:	46a4      	mov	ip, r4
 80057fa:	4998      	ldr	r1, [pc, #608]	@ (8005a5c <hashInit.0+0x41e4>)
 80057fc:	4898      	ldr	r0, [pc, #608]	@ (8005a60 <hashInit.0+0x41e8>)
 80057fe:	f7fb ff8d 	bl	800171c <insert.1>
		insert("EFRT", "effort");
 8005802:	46a4      	mov	ip, r4
 8005804:	4997      	ldr	r1, [pc, #604]	@ (8005a64 <hashInit.0+0x41ec>)
 8005806:	4898      	ldr	r0, [pc, #608]	@ (8005a68 <hashInit.0+0x41f0>)
 8005808:	f7fb ff88 	bl	800171c <insert.1>
		insert("PRAOEPD", "prepared");
 800580c:	46a4      	mov	ip, r4
 800580e:	4997      	ldr	r1, [pc, #604]	@ (8005a6c <hashInit.0+0x41f4>)
 8005810:	4897      	ldr	r0, [pc, #604]	@ (8005a70 <hashInit.0+0x41f8>)
 8005812:	f7fb ff83 	bl	800171c <insert.1>
		insert("SKA*EUP", "escape");
 8005816:	46a4      	mov	ip, r4
 8005818:	4996      	ldr	r1, [pc, #600]	@ (8005a74 <hashInit.0+0x41fc>)
 800581a:	4897      	ldr	r0, [pc, #604]	@ (8005a78 <hashInit.0+0x4200>)
 800581c:	f7fb ff7e 	bl	800171c <insert.1>
		insert("A/TEPLT", "attempt");
 8005820:	46a4      	mov	ip, r4
 8005822:	4996      	ldr	r1, [pc, #600]	@ (8005a7c <hashInit.0+0x4204>)
 8005824:	4896      	ldr	r0, [pc, #600]	@ (8005a80 <hashInit.0+0x4208>)
 8005826:	f7fb ff79 	bl	800171c <insert.1>
		insert("SPOED", "supposed");
 800582a:	46a4      	mov	ip, r4
 800582c:	4995      	ldr	r1, [pc, #596]	@ (8005a84 <hashInit.0+0x420c>)
 800582e:	4896      	ldr	r0, [pc, #600]	@ (8005a88 <hashInit.0+0x4210>)
 8005830:	f7fb ff74 	bl	800171c <insert.1>
		insert("KEULD", "killed");
 8005834:	46a4      	mov	ip, r4
 8005836:	4995      	ldr	r1, [pc, #596]	@ (8005a8c <hashInit.0+0x4214>)
 8005838:	4895      	ldr	r0, [pc, #596]	@ (8005a90 <hashInit.0+0x4218>)
 800583a:	f7fb ff6f 	bl	800171c <insert.1>
		insert("TPAFT", "fast");
 800583e:	46a4      	mov	ip, r4
 8005840:	4994      	ldr	r1, [pc, #592]	@ (8005a94 <hashInit.0+0x421c>)
 8005842:	4895      	ldr	r0, [pc, #596]	@ (8005a98 <hashInit.0+0x4220>)
 8005844:	f7fb ff6a 	bl	800171c <insert.1>
		insert("THOER", "author");
 8005848:	46a4      	mov	ip, r4
 800584a:	4994      	ldr	r1, [pc, #592]	@ (8005a9c <hashInit.0+0x4224>)
 800584c:	4894      	ldr	r0, [pc, #592]	@ (8005aa0 <hashInit.0+0x4228>)
 800584e:	f7fb ff65 	bl	800171c <insert.1>
		insert("EUPBD/KWRAPB", "Indian");
 8005852:	46a4      	mov	ip, r4
 8005854:	4993      	ldr	r1, [pc, #588]	@ (8005aa4 <hashInit.0+0x422c>)
 8005856:	4894      	ldr	r0, [pc, #592]	@ (8005aa8 <hashInit.0+0x4230>)
 8005858:	f7fb ff60 	bl	800171c <insert.1>
		insert("PWROUPB", "brown");
 800585c:	46a4      	mov	ip, r4
 800585e:	4993      	ldr	r1, [pc, #588]	@ (8005aac <hashInit.0+0x4234>)
 8005860:	4893      	ldr	r0, [pc, #588]	@ (8005ab0 <hashInit.0+0x4238>)
 8005862:	f7fb ff5b 	bl	800171c <insert.1>
		insert("TKERPLD", "determined");
 8005866:	46a4      	mov	ip, r4
 8005868:	4992      	ldr	r1, [pc, #584]	@ (8005ab4 <hashInit.0+0x423c>)
 800586a:	4893      	ldr	r0, [pc, #588]	@ (8005ab8 <hashInit.0+0x4240>)
 800586c:	f7fb ff56 	bl	800171c <insert.1>
		insert("PAEUPB", "pain");
 8005870:	46a4      	mov	ip, r4
 8005872:	4992      	ldr	r1, [pc, #584]	@ (8005abc <hashInit.0+0x4244>)
 8005874:	4892      	ldr	r0, [pc, #584]	@ (8005ac0 <hashInit.0+0x4248>)
 8005876:	f7fb ff51 	bl	800171c <insert.1>
		insert("SPREUPBG", "spring");
 800587a:	46a4      	mov	ip, r4
 800587c:	4991      	ldr	r1, [pc, #580]	@ (8005ac4 <hashInit.0+0x424c>)
 800587e:	4892      	ldr	r0, [pc, #584]	@ (8005ac8 <hashInit.0+0x4250>)
 8005880:	f7fb ff4c 	bl	800171c <insert.1>
		insert("TAEUBGS", "takes");
 8005884:	46a4      	mov	ip, r4
 8005886:	4991      	ldr	r1, [pc, #580]	@ (8005acc <hashInit.0+0x4254>)
 8005888:	e122      	b.n	8005ad0 <hashInit.0+0x4258>
 800588a:	bf00      	nop
 800588c:	080109ac 	.word	0x080109ac
 8005890:	080109b4 	.word	0x080109b4
 8005894:	080109c0 	.word	0x080109c0
 8005898:	080109cc 	.word	0x080109cc
 800589c:	080109d4 	.word	0x080109d4
 80058a0:	080109d8 	.word	0x080109d8
 80058a4:	080109e0 	.word	0x080109e0
 80058a8:	080109e8 	.word	0x080109e8
 80058ac:	080109f0 	.word	0x080109f0
 80058b0:	080109f8 	.word	0x080109f8
 80058b4:	08010a00 	.word	0x08010a00
 80058b8:	08010a08 	.word	0x08010a08
 80058bc:	08010a14 	.word	0x08010a14
 80058c0:	08010a24 	.word	0x08010a24
 80058c4:	08010a2c 	.word	0x08010a2c
 80058c8:	08010a30 	.word	0x08010a30
 80058cc:	08010a34 	.word	0x08010a34
 80058d0:	08010a3c 	.word	0x08010a3c
 80058d4:	08010a44 	.word	0x08010a44
 80058d8:	08010a4c 	.word	0x08010a4c
 80058dc:	08010a58 	.word	0x08010a58
 80058e0:	08010a60 	.word	0x08010a60
 80058e4:	08010a68 	.word	0x08010a68
 80058e8:	08010a70 	.word	0x08010a70
 80058ec:	08010a7c 	.word	0x08010a7c
 80058f0:	08010a80 	.word	0x08010a80
 80058f4:	08010a88 	.word	0x08010a88
 80058f8:	08010a90 	.word	0x08010a90
 80058fc:	08010a98 	.word	0x08010a98
 8005900:	08010a9c 	.word	0x08010a9c
 8005904:	08010aa0 	.word	0x08010aa0
 8005908:	08010aa8 	.word	0x08010aa8
 800590c:	08010ab0 	.word	0x08010ab0
 8005910:	08010abc 	.word	0x08010abc
 8005914:	08010ac4 	.word	0x08010ac4
 8005918:	08010ad0 	.word	0x08010ad0
 800591c:	08010adc 	.word	0x08010adc
 8005920:	08010ae4 	.word	0x08010ae4
 8005924:	08010aec 	.word	0x08010aec
 8005928:	08010af4 	.word	0x08010af4
 800592c:	08010b00 	.word	0x08010b00
 8005930:	08010b08 	.word	0x08010b08
 8005934:	08010b10 	.word	0x08010b10
 8005938:	08010b18 	.word	0x08010b18
 800593c:	08010b24 	.word	0x08010b24
 8005940:	08010b28 	.word	0x08010b28
 8005944:	08010b2c 	.word	0x08010b2c
 8005948:	08010b38 	.word	0x08010b38
 800594c:	08010b40 	.word	0x08010b40
 8005950:	08010b48 	.word	0x08010b48
 8005954:	08010b50 	.word	0x08010b50
 8005958:	08010b58 	.word	0x08010b58
 800595c:	08010b60 	.word	0x08010b60
 8005960:	08010b6c 	.word	0x08010b6c
 8005964:	08010b78 	.word	0x08010b78
 8005968:	08010b84 	.word	0x08010b84
 800596c:	08010b8c 	.word	0x08010b8c
 8005970:	08010b90 	.word	0x08010b90
 8005974:	08010b98 	.word	0x08010b98
 8005978:	08010ba0 	.word	0x08010ba0
 800597c:	08010ba8 	.word	0x08010ba8
 8005980:	08010bb0 	.word	0x08010bb0
 8005984:	08010bbc 	.word	0x08010bbc
 8005988:	08010bc0 	.word	0x08010bc0
 800598c:	08010bc8 	.word	0x08010bc8
 8005990:	08010bd0 	.word	0x08010bd0
 8005994:	08010bd8 	.word	0x08010bd8
 8005998:	08010bdc 	.word	0x08010bdc
 800599c:	08010be4 	.word	0x08010be4
 80059a0:	08010bf0 	.word	0x08010bf0
 80059a4:	08010bf8 	.word	0x08010bf8
 80059a8:	08010c00 	.word	0x08010c00
 80059ac:	08010c08 	.word	0x08010c08
 80059b0:	08010c10 	.word	0x08010c10
 80059b4:	08010c18 	.word	0x08010c18
 80059b8:	08010c1c 	.word	0x08010c1c
 80059bc:	08010c20 	.word	0x08010c20
 80059c0:	08010c28 	.word	0x08010c28
 80059c4:	08010c30 	.word	0x08010c30
 80059c8:	08010c3c 	.word	0x08010c3c
 80059cc:	08010c44 	.word	0x08010c44
 80059d0:	08010c4c 	.word	0x08010c4c
 80059d4:	08010c54 	.word	0x08010c54
 80059d8:	08010c60 	.word	0x08010c60
 80059dc:	08010c68 	.word	0x08010c68
 80059e0:	08010c74 	.word	0x08010c74
 80059e4:	08010c80 	.word	0x08010c80
 80059e8:	08010c88 	.word	0x08010c88
 80059ec:	08010c94 	.word	0x08010c94
 80059f0:	08010ca0 	.word	0x08010ca0
 80059f4:	08010ca8 	.word	0x08010ca8
 80059f8:	08010cb0 	.word	0x08010cb0
 80059fc:	08010cb8 	.word	0x08010cb8
 8005a00:	08010cc0 	.word	0x08010cc0
 8005a04:	08010cc8 	.word	0x08010cc8
 8005a08:	08010cd0 	.word	0x08010cd0
 8005a0c:	08010cd8 	.word	0x08010cd8
 8005a10:	08010ce4 	.word	0x08010ce4
 8005a14:	08010cf0 	.word	0x08010cf0
 8005a18:	08010cf8 	.word	0x08010cf8
 8005a1c:	08010d00 	.word	0x08010d00
 8005a20:	08010d08 	.word	0x08010d08
 8005a24:	08010d10 	.word	0x08010d10
 8005a28:	08010d1c 	.word	0x08010d1c
 8005a2c:	08010d24 	.word	0x08010d24
 8005a30:	08010d2c 	.word	0x08010d2c
 8005a34:	08010d34 	.word	0x08010d34
 8005a38:	08010d3c 	.word	0x08010d3c
 8005a3c:	08010d44 	.word	0x08010d44
 8005a40:	08010d4c 	.word	0x08010d4c
 8005a44:	08010d54 	.word	0x08010d54
 8005a48:	08010d5c 	.word	0x08010d5c
 8005a4c:	08010d64 	.word	0x08010d64
 8005a50:	08010d70 	.word	0x08010d70
 8005a54:	08010d80 	.word	0x08010d80
 8005a58:	08010d84 	.word	0x08010d84
 8005a5c:	08010d88 	.word	0x08010d88
 8005a60:	08010d94 	.word	0x08010d94
 8005a64:	08010d9c 	.word	0x08010d9c
 8005a68:	08010da4 	.word	0x08010da4
 8005a6c:	08010dac 	.word	0x08010dac
 8005a70:	08010db8 	.word	0x08010db8
 8005a74:	08010dc0 	.word	0x08010dc0
 8005a78:	08010dc8 	.word	0x08010dc8
 8005a7c:	08010dd0 	.word	0x08010dd0
 8005a80:	08010dd8 	.word	0x08010dd8
 8005a84:	08010de0 	.word	0x08010de0
 8005a88:	08010dec 	.word	0x08010dec
 8005a8c:	08010df4 	.word	0x08010df4
 8005a90:	08010dfc 	.word	0x08010dfc
 8005a94:	08010e04 	.word	0x08010e04
 8005a98:	08010e0c 	.word	0x08010e0c
 8005a9c:	08010e14 	.word	0x08010e14
 8005aa0:	08010e1c 	.word	0x08010e1c
 8005aa4:	08010e24 	.word	0x08010e24
 8005aa8:	08010e2c 	.word	0x08010e2c
 8005aac:	08010e3c 	.word	0x08010e3c
 8005ab0:	08010e44 	.word	0x08010e44
 8005ab4:	08010e4c 	.word	0x08010e4c
 8005ab8:	08010e58 	.word	0x08010e58
 8005abc:	08010e60 	.word	0x08010e60
 8005ac0:	08010e68 	.word	0x08010e68
 8005ac4:	08010e70 	.word	0x08010e70
 8005ac8:	08010e78 	.word	0x08010e78
 8005acc:	08010e84 	.word	0x08010e84
 8005ad0:	48b5      	ldr	r0, [pc, #724]	@ (8005da8 <hashInit.0+0x4530>)
 8005ad2:	f7fb fe23 	bl	800171c <insert.1>
		insert("TKRAUPB", "drawn");
 8005ad6:	46a4      	mov	ip, r4
 8005ad8:	49b4      	ldr	r1, [pc, #720]	@ (8005dac <hashInit.0+0x4534>)
 8005ada:	48b5      	ldr	r0, [pc, #724]	@ (8005db0 <hashInit.0+0x4538>)
 8005adc:	f7fb fe1e 	bl	800171c <insert.1>
		insert("SHRERPBLGS", "soldiers");
 8005ae0:	46a4      	mov	ip, r4
 8005ae2:	49b4      	ldr	r1, [pc, #720]	@ (8005db4 <hashInit.0+0x453c>)
 8005ae4:	48b4      	ldr	r0, [pc, #720]	@ (8005db8 <hashInit.0+0x4540>)
 8005ae6:	f7fb fe19 	bl	800171c <insert.1>
		insert("HO*UFS", "houses");
 8005aea:	46a4      	mov	ip, r4
 8005aec:	49b3      	ldr	r1, [pc, #716]	@ (8005dbc <hashInit.0+0x4544>)
 8005aee:	48b4      	ldr	r0, [pc, #720]	@ (8005dc0 <hashInit.0+0x4548>)
 8005af0:	f7fb fe14 	bl	800171c <insert.1>
		insert("TPHAO*ET", "beneath");
 8005af4:	46a4      	mov	ip, r4
 8005af6:	49b3      	ldr	r1, [pc, #716]	@ (8005dc4 <hashInit.0+0x454c>)
 8005af8:	48b3      	ldr	r0, [pc, #716]	@ (8005dc8 <hashInit.0+0x4550>)
 8005afa:	f7fb fe0f 	bl	800171c <insert.1>
		insert("TAUG", "talking");
 8005afe:	46a4      	mov	ip, r4
 8005b00:	49b2      	ldr	r1, [pc, #712]	@ (8005dcc <hashInit.0+0x4554>)
 8005b02:	48b3      	ldr	r0, [pc, #716]	@ (8005dd0 <hashInit.0+0x4558>)
 8005b04:	f7fb fe0a 	bl	800171c <insert.1>
		insert("TURPBG", "turning");
 8005b08:	46a4      	mov	ip, r4
 8005b0a:	49b2      	ldr	r1, [pc, #712]	@ (8005dd4 <hashInit.0+0x455c>)
 8005b0c:	48b2      	ldr	r0, [pc, #712]	@ (8005dd8 <hashInit.0+0x4560>)
 8005b0e:	f7fb fe05 	bl	800171c <insert.1>
		insert("KROEURPBT", "century");
 8005b12:	46a4      	mov	ip, r4
 8005b14:	49b1      	ldr	r1, [pc, #708]	@ (8005ddc <hashInit.0+0x4564>)
 8005b16:	48b2      	ldr	r0, [pc, #712]	@ (8005de0 <hashInit.0+0x4568>)
 8005b18:	f7fb fe00 	bl	800171c <insert.1>
		insert("STEPS", "steps");
 8005b1c:	46a4      	mov	ip, r4
 8005b1e:	49b1      	ldr	r1, [pc, #708]	@ (8005de4 <hashInit.0+0x456c>)
 8005b20:	48b1      	ldr	r0, [pc, #708]	@ (8005de8 <hashInit.0+0x4570>)
 8005b22:	f7fb fdfb 	bl	800171c <insert.1>
		insert("SPWEPBD/-D", "intended");
 8005b26:	46a4      	mov	ip, r4
 8005b28:	49b0      	ldr	r1, [pc, #704]	@ (8005dec <hashInit.0+0x4574>)
 8005b2a:	48b1      	ldr	r0, [pc, #708]	@ (8005df0 <hashInit.0+0x4578>)
 8005b2c:	f7fb fdf6 	bl	800171c <insert.1>
		insert("SOFT", "soft");
 8005b30:	46a4      	mov	ip, r4
 8005b32:	49b0      	ldr	r1, [pc, #704]	@ (8005df4 <hashInit.0+0x457c>)
 8005b34:	48b0      	ldr	r0, [pc, #704]	@ (8005df8 <hashInit.0+0x4580>)
 8005b36:	f7fb fdf1 	bl	800171c <insert.1>
		insert("STRAEUT", "straight");
 8005b3a:	46a4      	mov	ip, r4
 8005b3c:	49af      	ldr	r1, [pc, #700]	@ (8005dfc <hashInit.0+0x4584>)
 8005b3e:	48b0      	ldr	r0, [pc, #704]	@ (8005e00 <hashInit.0+0x4588>)
 8005b40:	f7fb fdec 	bl	800171c <insert.1>
		insert("PHAERTS", "matters");
 8005b44:	46a4      	mov	ip, r4
 8005b46:	49af      	ldr	r1, [pc, #700]	@ (8005e04 <hashInit.0+0x458c>)
 8005b48:	48af      	ldr	r0, [pc, #700]	@ (8005e08 <hashInit.0+0x4590>)
 8005b4a:	f7fb fde7 	bl	800171c <insert.1>
		insert("HRAOEULG", "likely");
 8005b4e:	46a4      	mov	ip, r4
 8005b50:	49ae      	ldr	r1, [pc, #696]	@ (8005e0c <hashInit.0+0x4594>)
 8005b52:	48af      	ldr	r0, [pc, #700]	@ (8005e10 <hashInit.0+0x4598>)
 8005b54:	f7fb fde2 	bl	800171c <insert.1>
		insert("KRORPB", "corner");
 8005b58:	46a4      	mov	ip, r4
 8005b5a:	49ae      	ldr	r1, [pc, #696]	@ (8005e14 <hashInit.0+0x459c>)
 8005b5c:	48ae      	ldr	r0, [pc, #696]	@ (8005e18 <hashInit.0+0x45a0>)
 8005b5e:	f7fb fddd 	bl	800171c <insert.1>
		insert("TRAEUD/PHARBG", "trademark");
 8005b62:	46a4      	mov	ip, r4
 8005b64:	49ad      	ldr	r1, [pc, #692]	@ (8005e1c <hashInit.0+0x45a4>)
 8005b66:	48ae      	ldr	r0, [pc, #696]	@ (8005e20 <hashInit.0+0x45a8>)
 8005b68:	f7fb fdd8 	bl	800171c <insert.1>
		insert("SKWRUFS", "justice");
 8005b6c:	46a4      	mov	ip, r4
 8005b6e:	49ad      	ldr	r1, [pc, #692]	@ (8005e24 <hashInit.0+0x45ac>)
 8005b70:	48ad      	ldr	r0, [pc, #692]	@ (8005e28 <hashInit.0+0x45b0>)
 8005b72:	f7fb fdd3 	bl	800171c <insert.1>
		insert("SAO*EPL", "simply");
 8005b76:	46a4      	mov	ip, r4
 8005b78:	49ac      	ldr	r1, [pc, #688]	@ (8005e2c <hashInit.0+0x45b4>)
 8005b7a:	48ad      	ldr	r0, [pc, #692]	@ (8005e30 <hashInit.0+0x45b8>)
 8005b7c:	f7fb fdce 	bl	800171c <insert.1>
		insert("PROU", "produce");
 8005b80:	46a4      	mov	ip, r4
 8005b82:	49ac      	ldr	r1, [pc, #688]	@ (8005e34 <hashInit.0+0x45bc>)
 8005b84:	48ac      	ldr	r0, [pc, #688]	@ (8005e38 <hashInit.0+0x45c0>)
 8005b86:	f7fb fdc9 	bl	800171c <insert.1>
		insert("TRUFT", "trust");
 8005b8a:	46a4      	mov	ip, r4
 8005b8c:	49ab      	ldr	r1, [pc, #684]	@ (8005e3c <hashInit.0+0x45c4>)
 8005b8e:	48ac      	ldr	r0, [pc, #688]	@ (8005e40 <hashInit.0+0x45c8>)
 8005b90:	f7fb fdc4 	bl	800171c <insert.1>
		insert("A/PAOERS", "appears");
 8005b94:	46a4      	mov	ip, r4
 8005b96:	49ab      	ldr	r1, [pc, #684]	@ (8005e44 <hashInit.0+0x45cc>)
 8005b98:	48ab      	ldr	r0, [pc, #684]	@ (8005e48 <hashInit.0+0x45d0>)
 8005b9a:	f7fb fdbf 	bl	800171c <insert.1>
		insert("RO*EPL", "Rome");
 8005b9e:	46a4      	mov	ip, r4
 8005ba0:	49aa      	ldr	r1, [pc, #680]	@ (8005e4c <hashInit.0+0x45d4>)
 8005ba2:	48ab      	ldr	r0, [pc, #684]	@ (8005e50 <hashInit.0+0x45d8>)
 8005ba4:	f7fb fdba 	bl	800171c <insert.1>
		insert("HRAF", "laugh");
 8005ba8:	46a4      	mov	ip, r4
 8005baa:	49aa      	ldr	r1, [pc, #680]	@ (8005e54 <hashInit.0+0x45dc>)
 8005bac:	48aa      	ldr	r0, [pc, #680]	@ (8005e58 <hashInit.0+0x45e0>)
 8005bae:	f7fb fdb5 	bl	800171c <insert.1>
		insert("TPORGT", "forget");
 8005bb2:	46a4      	mov	ip, r4
 8005bb4:	49a9      	ldr	r1, [pc, #676]	@ (8005e5c <hashInit.0+0x45e4>)
 8005bb6:	48aa      	ldr	r0, [pc, #680]	@ (8005e60 <hashInit.0+0x45e8>)
 8005bb8:	f7fb fdb0 	bl	800171c <insert.1>
		insert("AO*URP", "Europe");
 8005bbc:	46a4      	mov	ip, r4
 8005bbe:	49a9      	ldr	r1, [pc, #676]	@ (8005e64 <hashInit.0+0x45ec>)
 8005bc0:	48a9      	ldr	r0, [pc, #676]	@ (8005e68 <hashInit.0+0x45f0>)
 8005bc2:	f7fb fdab 	bl	800171c <insert.1>
		insert("PAFPBLG", "passage");
 8005bc6:	46a4      	mov	ip, r4
 8005bc8:	49a8      	ldr	r1, [pc, #672]	@ (8005e6c <hashInit.0+0x45f4>)
 8005bca:	48a9      	ldr	r0, [pc, #676]	@ (8005e70 <hashInit.0+0x45f8>)
 8005bcc:	f7fb fda6 	bl	800171c <insert.1>
		insert("AET", "eight");
 8005bd0:	46a4      	mov	ip, r4
 8005bd2:	49a8      	ldr	r1, [pc, #672]	@ (8005e74 <hashInit.0+0x45fc>)
 8005bd4:	48a8      	ldr	r0, [pc, #672]	@ (8005e78 <hashInit.0+0x4600>)
 8005bd6:	f7fb fda1 	bl	800171c <insert.1>
		insert("KHROEFD", "closed");
 8005bda:	46a4      	mov	ip, r4
 8005bdc:	49a7      	ldr	r1, [pc, #668]	@ (8005e7c <hashInit.0+0x4604>)
 8005bde:	48a8      	ldr	r0, [pc, #672]	@ (8005e80 <hashInit.0+0x4608>)
 8005be0:	f7fb fd9c 	bl	800171c <insert.1>
		insert("OUR/SEFS", "ourselves");
 8005be4:	46a4      	mov	ip, r4
 8005be6:	49a7      	ldr	r1, [pc, #668]	@ (8005e84 <hashInit.0+0x460c>)
 8005be8:	48a7      	ldr	r0, [pc, #668]	@ (8005e88 <hashInit.0+0x4610>)
 8005bea:	f7fb fd97 	bl	800171c <insert.1>
		insert("TKPWEUFS", "gives");
 8005bee:	46a4      	mov	ip, r4
 8005bf0:	49a6      	ldr	r1, [pc, #664]	@ (8005e8c <hashInit.0+0x4614>)
 8005bf2:	48a7      	ldr	r0, [pc, #668]	@ (8005e90 <hashInit.0+0x4618>)
 8005bf4:	f7fb fd92 	bl	800171c <insert.1>
		insert("TKRES", "dress");
 8005bf8:	46a4      	mov	ip, r4
 8005bfa:	49a6      	ldr	r1, [pc, #664]	@ (8005e94 <hashInit.0+0x461c>)
 8005bfc:	48a6      	ldr	r0, [pc, #664]	@ (8005e98 <hashInit.0+0x4620>)
 8005bfe:	f7fb fd8d 	bl	800171c <insert.1>
		insert("PAFG", "passing");
 8005c02:	46a4      	mov	ip, r4
 8005c04:	49a5      	ldr	r1, [pc, #660]	@ (8005e9c <hashInit.0+0x4624>)
 8005c06:	48a6      	ldr	r0, [pc, #664]	@ (8005ea0 <hashInit.0+0x4628>)
 8005c08:	f7fb fd88 	bl	800171c <insert.1>
		insert("TERBL", "terrible");
 8005c0c:	46a4      	mov	ip, r4
 8005c0e:	49a5      	ldr	r1, [pc, #660]	@ (8005ea4 <hashInit.0+0x462c>)
 8005c10:	48a5      	ldr	r0, [pc, #660]	@ (8005ea8 <hashInit.0+0x4630>)
 8005c12:	f7fb fd83 	bl	800171c <insert.1>
		insert("RAOEURD", "required");
 8005c16:	46a4      	mov	ip, r4
 8005c18:	49a4      	ldr	r1, [pc, #656]	@ (8005eac <hashInit.0+0x4634>)
 8005c1a:	48a5      	ldr	r0, [pc, #660]	@ (8005eb0 <hashInit.0+0x4638>)
 8005c1c:	f7fb fd7e 	bl	800171c <insert.1>
		insert("PHAOEPLD", "medium");
 8005c20:	46a4      	mov	ip, r4
 8005c22:	49a4      	ldr	r1, [pc, #656]	@ (8005eb4 <hashInit.0+0x463c>)
 8005c24:	48a4      	ldr	r0, [pc, #656]	@ (8005eb8 <hashInit.0+0x4640>)
 8005c26:	f7fb fd79 	bl	800171c <insert.1>
		insert("EFRTS", "efforts");
 8005c2a:	46a4      	mov	ip, r4
 8005c2c:	49a3      	ldr	r1, [pc, #652]	@ (8005ebc <hashInit.0+0x4644>)
 8005c2e:	48a4      	ldr	r0, [pc, #656]	@ (8005ec0 <hashInit.0+0x4648>)
 8005c30:	f7fb fd74 	bl	800171c <insert.1>
		insert("SAEUBG", "sake");
 8005c34:	46a4      	mov	ip, r4
 8005c36:	49a3      	ldr	r1, [pc, #652]	@ (8005ec4 <hashInit.0+0x464c>)
 8005c38:	48a3      	ldr	r0, [pc, #652]	@ (8005ec8 <hashInit.0+0x4650>)
 8005c3a:	f7fb fd6f 	bl	800171c <insert.1>
		insert("PWR*ET", "breath");
 8005c3e:	46a4      	mov	ip, r4
 8005c40:	49a2      	ldr	r1, [pc, #648]	@ (8005ecc <hashInit.0+0x4654>)
 8005c42:	48a3      	ldr	r0, [pc, #652]	@ (8005ed0 <hashInit.0+0x4658>)
 8005c44:	f7fb fd6a 	bl	800171c <insert.1>
		insert("WAOEUS", "wise");
 8005c48:	46a4      	mov	ip, r4
 8005c4a:	49a2      	ldr	r1, [pc, #648]	@ (8005ed4 <hashInit.0+0x465c>)
 8005c4c:	48a2      	ldr	r0, [pc, #648]	@ (8005ed8 <hashInit.0+0x4660>)
 8005c4e:	f7fb fd65 	bl	800171c <insert.1>
		insert("HRAEUDZ", "ladies");
 8005c52:	46a4      	mov	ip, r4
 8005c54:	49a1      	ldr	r1, [pc, #644]	@ (8005edc <hashInit.0+0x4664>)
 8005c56:	48a2      	ldr	r0, [pc, #648]	@ (8005ee0 <hashInit.0+0x4668>)
 8005c58:	f7fb fd60 	bl	800171c <insert.1>
		insert("PEFGS", "possession");
 8005c5c:	46a4      	mov	ip, r4
 8005c5e:	49a1      	ldr	r1, [pc, #644]	@ (8005ee4 <hashInit.0+0x466c>)
 8005c60:	48a1      	ldr	r0, [pc, #644]	@ (8005ee8 <hashInit.0+0x4670>)
 8005c62:	f7fb fd5b 	bl	800171c <insert.1>
		insert("PHREFPBT", "pleasant");
 8005c66:	46a4      	mov	ip, r4
 8005c68:	49a0      	ldr	r1, [pc, #640]	@ (8005eec <hashInit.0+0x4674>)
 8005c6a:	48a1      	ldr	r0, [pc, #644]	@ (8005ef0 <hashInit.0+0x4678>)
 8005c6c:	f7fb fd56 	bl	800171c <insert.1>
		insert("P-FRL", "perfectly");
 8005c70:	46a4      	mov	ip, r4
 8005c72:	49a0      	ldr	r1, [pc, #640]	@ (8005ef4 <hashInit.0+0x467c>)
 8005c74:	48a0      	ldr	r0, [pc, #640]	@ (8005ef8 <hashInit.0+0x4680>)
 8005c76:	f7fb fd51 	bl	800171c <insert.1>
		insert("O*/TK-LS/AE", "o'");
 8005c7a:	46a4      	mov	ip, r4
 8005c7c:	499f      	ldr	r1, [pc, #636]	@ (8005efc <hashInit.0+0x4684>)
 8005c7e:	48a0      	ldr	r0, [pc, #640]	@ (8005f00 <hashInit.0+0x4688>)
 8005c80:	f7fb fd4c 	bl	800171c <insert.1>
		insert("PHOEURPL", "memory");
 8005c84:	46a4      	mov	ip, r4
 8005c86:	499f      	ldr	r1, [pc, #636]	@ (8005f04 <hashInit.0+0x468c>)
 8005c88:	489f      	ldr	r0, [pc, #636]	@ (8005f08 <hashInit.0+0x4690>)
 8005c8a:	f7fb fd47 	bl	800171c <insert.1>
		insert("AOURBL", "usually");
 8005c8e:	46a4      	mov	ip, r4
 8005c90:	499e      	ldr	r1, [pc, #632]	@ (8005f0c <hashInit.0+0x4694>)
 8005c92:	489f      	ldr	r0, [pc, #636]	@ (8005f10 <hashInit.0+0x4698>)
 8005c94:	f7fb fd42 	bl	800171c <insert.1>
		insert("TKPWRAEUF", "grave");
 8005c98:	46a4      	mov	ip, r4
 8005c9a:	499e      	ldr	r1, [pc, #632]	@ (8005f14 <hashInit.0+0x469c>)
 8005c9c:	489e      	ldr	r0, [pc, #632]	@ (8005f18 <hashInit.0+0x46a0>)
 8005c9e:	f7fb fd3d 	bl	800171c <insert.1>
		insert("TPEUFD", "fixed");
 8005ca2:	46a4      	mov	ip, r4
 8005ca4:	499d      	ldr	r1, [pc, #628]	@ (8005f1c <hashInit.0+0x46a4>)
 8005ca6:	489e      	ldr	r0, [pc, #632]	@ (8005f20 <hashInit.0+0x46a8>)
 8005ca8:	f7fb fd38 	bl	800171c <insert.1>
		insert("PHOERPB", "modern");
 8005cac:	46a4      	mov	ip, r4
 8005cae:	499d      	ldr	r1, [pc, #628]	@ (8005f24 <hashInit.0+0x46ac>)
 8005cb0:	489d      	ldr	r0, [pc, #628]	@ (8005f28 <hashInit.0+0x46b0>)
 8005cb2:	f7fb fd33 	bl	800171c <insert.1>
		insert("SPOT", "spot");
 8005cb6:	46a4      	mov	ip, r4
 8005cb8:	499c      	ldr	r1, [pc, #624]	@ (8005f2c <hashInit.0+0x46b4>)
 8005cba:	489d      	ldr	r0, [pc, #628]	@ (8005f30 <hashInit.0+0x46b8>)
 8005cbc:	f7fb fd2e 	bl	800171c <insert.1>
		insert("TRAOPS", "troops");
 8005cc0:	46a4      	mov	ip, r4
 8005cc2:	499c      	ldr	r1, [pc, #624]	@ (8005f34 <hashInit.0+0x46bc>)
 8005cc4:	489c      	ldr	r0, [pc, #624]	@ (8005f38 <hashInit.0+0x46c0>)
 8005cc6:	f7fb fd29 	bl	800171c <insert.1>
		insert("RAOEUZ", "rise");
 8005cca:	46a4      	mov	ip, r4
 8005ccc:	499b      	ldr	r1, [pc, #620]	@ (8005f3c <hashInit.0+0x46c4>)
 8005cce:	489c      	ldr	r0, [pc, #624]	@ (8005f40 <hashInit.0+0x46c8>)
 8005cd0:	f7fb fd24 	bl	800171c <insert.1>
		insert("PWRAEBG", "break");
 8005cd4:	46a4      	mov	ip, r4
 8005cd6:	499b      	ldr	r1, [pc, #620]	@ (8005f44 <hashInit.0+0x46cc>)
 8005cd8:	489b      	ldr	r0, [pc, #620]	@ (8005f48 <hashInit.0+0x46d0>)
 8005cda:	f7fb fd1f 	bl	800171c <insert.1>
		insert("TPAEFT", "fifty");
 8005cde:	46a4      	mov	ip, r4
 8005ce0:	499a      	ldr	r1, [pc, #616]	@ (8005f4c <hashInit.0+0x46d4>)
 8005ce2:	489b      	ldr	r0, [pc, #620]	@ (8005f50 <hashInit.0+0x46d8>)
 8005ce4:	f7fb fd1a 	bl	800171c <insert.1>
		insert("AOEULD", "island");
 8005ce8:	46a4      	mov	ip, r4
 8005cea:	499a      	ldr	r1, [pc, #616]	@ (8005f54 <hashInit.0+0x46dc>)
 8005cec:	489a      	ldr	r0, [pc, #616]	@ (8005f58 <hashInit.0+0x46e0>)
 8005cee:	f7fb fd15 	bl	800171c <insert.1>
		insert("PHAOEGT", "meeting");
 8005cf2:	46a4      	mov	ip, r4
 8005cf4:	4999      	ldr	r1, [pc, #612]	@ (8005f5c <hashInit.0+0x46e4>)
 8005cf6:	489a      	ldr	r0, [pc, #616]	@ (8005f60 <hashInit.0+0x46e8>)
 8005cf8:	f7fb fd10 	bl	800171c <insert.1>
		insert("KAFRP", "camp");
 8005cfc:	46a4      	mov	ip, r4
 8005cfe:	4999      	ldr	r1, [pc, #612]	@ (8005f64 <hashInit.0+0x46ec>)
 8005d00:	4899      	ldr	r0, [pc, #612]	@ (8005f68 <hashInit.0+0x46f0>)
 8005d02:	f7fb fd0b 	bl	800171c <insert.1>
		insert("TPH-GS", "nation");
 8005d06:	46a4      	mov	ip, r4
 8005d08:	4998      	ldr	r1, [pc, #608]	@ (8005f6c <hashInit.0+0x46f4>)
 8005d0a:	4899      	ldr	r0, [pc, #612]	@ (8005f70 <hashInit.0+0x46f8>)
 8005d0c:	f7fb fd06 	bl	800171c <insert.1>
		insert("KPEUFS", "existence");
 8005d10:	46a4      	mov	ip, r4
 8005d12:	4998      	ldr	r1, [pc, #608]	@ (8005f74 <hashInit.0+0x46fc>)
 8005d14:	4898      	ldr	r0, [pc, #608]	@ (8005f78 <hashInit.0+0x4700>)
 8005d16:	f7fb fd01 	bl	800171c <insert.1>
		insert("RE/PHRAOEU", "reply");
 8005d1a:	46a4      	mov	ip, r4
 8005d1c:	4997      	ldr	r1, [pc, #604]	@ (8005f7c <hashInit.0+0x4704>)
 8005d1e:	4898      	ldr	r0, [pc, #608]	@ (8005f80 <hashInit.0+0x4708>)
 8005d20:	f7fb fcfc 	bl	800171c <insert.1>
		insert("AOEUD", "I'd");
 8005d24:	46a4      	mov	ip, r4
 8005d26:	4997      	ldr	r1, [pc, #604]	@ (8005f84 <hashInit.0+0x470c>)
 8005d28:	4897      	ldr	r0, [pc, #604]	@ (8005f88 <hashInit.0+0x4710>)
 8005d2a:	f7fb fcf7 	bl	800171c <insert.1>
		insert("KO*EPS", "copies");
 8005d2e:	46a4      	mov	ip, r4
 8005d30:	4996      	ldr	r1, [pc, #600]	@ (8005f8c <hashInit.0+0x4714>)
 8005d32:	4897      	ldr	r0, [pc, #604]	@ (8005f90 <hashInit.0+0x4718>)
 8005d34:	f7fb fcf2 	bl	800171c <insert.1>
		insert("SKAOEU", "sky");
 8005d38:	46a4      	mov	ip, r4
 8005d3a:	4996      	ldr	r1, [pc, #600]	@ (8005f94 <hashInit.0+0x471c>)
 8005d3c:	4896      	ldr	r0, [pc, #600]	@ (8005f98 <hashInit.0+0x4720>)
 8005d3e:	f7fb fced 	bl	800171c <insert.1>
		insert("TUFP", "touch");
 8005d42:	46a4      	mov	ip, r4
 8005d44:	4995      	ldr	r1, [pc, #596]	@ (8005f9c <hashInit.0+0x4724>)
 8005d46:	4896      	ldr	r0, [pc, #600]	@ (8005fa0 <hashInit.0+0x4728>)
 8005d48:	f7fb fce8 	bl	800171c <insert.1>
		insert("KWAL", "equal");
 8005d4c:	46a4      	mov	ip, r4
 8005d4e:	4995      	ldr	r1, [pc, #596]	@ (8005fa4 <hashInit.0+0x472c>)
 8005d50:	4895      	ldr	r0, [pc, #596]	@ (8005fa8 <hashInit.0+0x4730>)
 8005d52:	f7fb fce3 	bl	800171c <insert.1>
		insert("TP-RPB", "fortune");
 8005d56:	46a4      	mov	ip, r4
 8005d58:	4994      	ldr	r1, [pc, #592]	@ (8005fac <hashInit.0+0x4734>)
 8005d5a:	4895      	ldr	r0, [pc, #596]	@ (8005fb0 <hashInit.0+0x4738>)
 8005d5c:	f7fb fcde 	bl	800171c <insert.1>
		insert("SR*/TP-PL", "v.");
 8005d60:	46a4      	mov	ip, r4
 8005d62:	4994      	ldr	r1, [pc, #592]	@ (8005fb4 <hashInit.0+0x473c>)
 8005d64:	4894      	ldr	r0, [pc, #592]	@ (8005fb8 <hashInit.0+0x4740>)
 8005d66:	f7fb fcd9 	bl	800171c <insert.1>
		insert("SHOR", "shore");
 8005d6a:	46a4      	mov	ip, r4
 8005d6c:	4993      	ldr	r1, [pc, #588]	@ (8005fbc <hashInit.0+0x4744>)
 8005d6e:	4894      	ldr	r0, [pc, #592]	@ (8005fc0 <hashInit.0+0x4748>)
 8005d70:	f7fb fcd4 	bl	800171c <insert.1>
		insert("TKPHAEUPB", "domain");
 8005d74:	46a4      	mov	ip, r4
 8005d76:	4993      	ldr	r1, [pc, #588]	@ (8005fc4 <hashInit.0+0x474c>)
 8005d78:	4893      	ldr	r0, [pc, #588]	@ (8005fc8 <hashInit.0+0x4750>)
 8005d7a:	f7fb fccf 	bl	800171c <insert.1>
		insert("TPHAEUPLD", "named");
 8005d7e:	46a4      	mov	ip, r4
 8005d80:	4992      	ldr	r1, [pc, #584]	@ (8005fcc <hashInit.0+0x4754>)
 8005d82:	4893      	ldr	r0, [pc, #588]	@ (8005fd0 <hashInit.0+0x4758>)
 8005d84:	f7fb fcca 	bl	800171c <insert.1>
		insert("SEUFP", "situation");
 8005d88:	46a4      	mov	ip, r4
 8005d8a:	4992      	ldr	r1, [pc, #584]	@ (8005fd4 <hashInit.0+0x475c>)
 8005d8c:	4892      	ldr	r0, [pc, #584]	@ (8005fd8 <hashInit.0+0x4760>)
 8005d8e:	f7fb fcc5 	bl	800171c <insert.1>
		insert("HRAOBGS", "looks");
 8005d92:	46a4      	mov	ip, r4
 8005d94:	4991      	ldr	r1, [pc, #580]	@ (8005fdc <hashInit.0+0x4764>)
 8005d96:	4892      	ldr	r0, [pc, #584]	@ (8005fe0 <hashInit.0+0x4768>)
 8005d98:	f7fb fcc0 	bl	800171c <insert.1>
		insert("PROPLS", "promise");
 8005d9c:	46a4      	mov	ip, r4
 8005d9e:	4991      	ldr	r1, [pc, #580]	@ (8005fe4 <hashInit.0+0x476c>)
 8005da0:	4891      	ldr	r0, [pc, #580]	@ (8005fe8 <hashInit.0+0x4770>)
 8005da2:	f7fb fcbb 	bl	800171c <insert.1>
 8005da6:	e121      	b.n	8005fec <hashInit.0+0x4774>
 8005da8:	08010e8c 	.word	0x08010e8c
 8005dac:	08010e94 	.word	0x08010e94
 8005db0:	08010e9c 	.word	0x08010e9c
 8005db4:	08010ea4 	.word	0x08010ea4
 8005db8:	08010eb0 	.word	0x08010eb0
 8005dbc:	08010ebc 	.word	0x08010ebc
 8005dc0:	08010ec4 	.word	0x08010ec4
 8005dc4:	08010ecc 	.word	0x08010ecc
 8005dc8:	08010ed4 	.word	0x08010ed4
 8005dcc:	08010ee0 	.word	0x08010ee0
 8005dd0:	08010ee8 	.word	0x08010ee8
 8005dd4:	08010ef0 	.word	0x08010ef0
 8005dd8:	08010ef8 	.word	0x08010ef8
 8005ddc:	08010f00 	.word	0x08010f00
 8005de0:	08010f08 	.word	0x08010f08
 8005de4:	08010f14 	.word	0x08010f14
 8005de8:	08010f1c 	.word	0x08010f1c
 8005dec:	08010f24 	.word	0x08010f24
 8005df0:	08010f30 	.word	0x08010f30
 8005df4:	08010f3c 	.word	0x08010f3c
 8005df8:	08010f44 	.word	0x08010f44
 8005dfc:	08010f4c 	.word	0x08010f4c
 8005e00:	08010f58 	.word	0x08010f58
 8005e04:	08010f60 	.word	0x08010f60
 8005e08:	08010f68 	.word	0x08010f68
 8005e0c:	08010f70 	.word	0x08010f70
 8005e10:	08010f78 	.word	0x08010f78
 8005e14:	08010f84 	.word	0x08010f84
 8005e18:	08010f8c 	.word	0x08010f8c
 8005e1c:	08010f94 	.word	0x08010f94
 8005e20:	08010fa0 	.word	0x08010fa0
 8005e24:	08010fb0 	.word	0x08010fb0
 8005e28:	08010fb8 	.word	0x08010fb8
 8005e2c:	08010fc0 	.word	0x08010fc0
 8005e30:	08010fc8 	.word	0x08010fc8
 8005e34:	08010fd0 	.word	0x08010fd0
 8005e38:	08010fd8 	.word	0x08010fd8
 8005e3c:	08010fe0 	.word	0x08010fe0
 8005e40:	08010fe8 	.word	0x08010fe8
 8005e44:	08010ff0 	.word	0x08010ff0
 8005e48:	08010ff8 	.word	0x08010ff8
 8005e4c:	08011004 	.word	0x08011004
 8005e50:	0801100c 	.word	0x0801100c
 8005e54:	08011014 	.word	0x08011014
 8005e58:	0801101c 	.word	0x0801101c
 8005e5c:	08011024 	.word	0x08011024
 8005e60:	0801102c 	.word	0x0801102c
 8005e64:	08011034 	.word	0x08011034
 8005e68:	0801103c 	.word	0x0801103c
 8005e6c:	08011044 	.word	0x08011044
 8005e70:	0801104c 	.word	0x0801104c
 8005e74:	08011054 	.word	0x08011054
 8005e78:	0801105c 	.word	0x0801105c
 8005e7c:	08011060 	.word	0x08011060
 8005e80:	08011068 	.word	0x08011068
 8005e84:	08011070 	.word	0x08011070
 8005e88:	0801107c 	.word	0x0801107c
 8005e8c:	08011088 	.word	0x08011088
 8005e90:	08011090 	.word	0x08011090
 8005e94:	0801109c 	.word	0x0801109c
 8005e98:	080110a4 	.word	0x080110a4
 8005e9c:	080110ac 	.word	0x080110ac
 8005ea0:	080110b4 	.word	0x080110b4
 8005ea4:	080110bc 	.word	0x080110bc
 8005ea8:	080110c8 	.word	0x080110c8
 8005eac:	080110d0 	.word	0x080110d0
 8005eb0:	080110dc 	.word	0x080110dc
 8005eb4:	080110e4 	.word	0x080110e4
 8005eb8:	080110ec 	.word	0x080110ec
 8005ebc:	080110f8 	.word	0x080110f8
 8005ec0:	08011100 	.word	0x08011100
 8005ec4:	08011108 	.word	0x08011108
 8005ec8:	08011110 	.word	0x08011110
 8005ecc:	08011118 	.word	0x08011118
 8005ed0:	08011120 	.word	0x08011120
 8005ed4:	08011128 	.word	0x08011128
 8005ed8:	08011130 	.word	0x08011130
 8005edc:	08011138 	.word	0x08011138
 8005ee0:	08011140 	.word	0x08011140
 8005ee4:	08011148 	.word	0x08011148
 8005ee8:	08011154 	.word	0x08011154
 8005eec:	0801115c 	.word	0x0801115c
 8005ef0:	08011168 	.word	0x08011168
 8005ef4:	08011174 	.word	0x08011174
 8005ef8:	08011180 	.word	0x08011180
 8005efc:	08011188 	.word	0x08011188
 8005f00:	0801118c 	.word	0x0801118c
 8005f04:	08011198 	.word	0x08011198
 8005f08:	080111a0 	.word	0x080111a0
 8005f0c:	080111ac 	.word	0x080111ac
 8005f10:	080111b4 	.word	0x080111b4
 8005f14:	080111bc 	.word	0x080111bc
 8005f18:	080111c4 	.word	0x080111c4
 8005f1c:	080111d0 	.word	0x080111d0
 8005f20:	080111d8 	.word	0x080111d8
 8005f24:	080111e0 	.word	0x080111e0
 8005f28:	080111e8 	.word	0x080111e8
 8005f2c:	080111f0 	.word	0x080111f0
 8005f30:	080111f8 	.word	0x080111f8
 8005f34:	08011200 	.word	0x08011200
 8005f38:	08011208 	.word	0x08011208
 8005f3c:	08011210 	.word	0x08011210
 8005f40:	08011218 	.word	0x08011218
 8005f44:	08011220 	.word	0x08011220
 8005f48:	08011228 	.word	0x08011228
 8005f4c:	08011230 	.word	0x08011230
 8005f50:	08011238 	.word	0x08011238
 8005f54:	08011240 	.word	0x08011240
 8005f58:	08011248 	.word	0x08011248
 8005f5c:	08011250 	.word	0x08011250
 8005f60:	08011258 	.word	0x08011258
 8005f64:	08011260 	.word	0x08011260
 8005f68:	08011268 	.word	0x08011268
 8005f6c:	08011270 	.word	0x08011270
 8005f70:	08011278 	.word	0x08011278
 8005f74:	08011280 	.word	0x08011280
 8005f78:	0801128c 	.word	0x0801128c
 8005f7c:	08011294 	.word	0x08011294
 8005f80:	0801129c 	.word	0x0801129c
 8005f84:	080112a8 	.word	0x080112a8
 8005f88:	080112ac 	.word	0x080112ac
 8005f8c:	080112b4 	.word	0x080112b4
 8005f90:	080112bc 	.word	0x080112bc
 8005f94:	080112c4 	.word	0x080112c4
 8005f98:	080112c8 	.word	0x080112c8
 8005f9c:	080112d0 	.word	0x080112d0
 8005fa0:	080112d8 	.word	0x080112d8
 8005fa4:	080112e0 	.word	0x080112e0
 8005fa8:	080112e8 	.word	0x080112e8
 8005fac:	080112f0 	.word	0x080112f0
 8005fb0:	080112f8 	.word	0x080112f8
 8005fb4:	08011300 	.word	0x08011300
 8005fb8:	08011304 	.word	0x08011304
 8005fbc:	08011310 	.word	0x08011310
 8005fc0:	08011318 	.word	0x08011318
 8005fc4:	08011320 	.word	0x08011320
 8005fc8:	08011328 	.word	0x08011328
 8005fcc:	08011334 	.word	0x08011334
 8005fd0:	0801133c 	.word	0x0801133c
 8005fd4:	08011348 	.word	0x08011348
 8005fd8:	08011354 	.word	0x08011354
 8005fdc:	0801135c 	.word	0x0801135c
 8005fe0:	08011364 	.word	0x08011364
 8005fe4:	0801136c 	.word	0x0801136c
 8005fe8:	08011374 	.word	0x08011374
		insert("ORDZ", "orders");
 8005fec:	46a4      	mov	ip, r4
 8005fee:	4931      	ldr	r1, [pc, #196]	@ (80060b4 <hashInit.0+0x483c>)
 8005ff0:	4831      	ldr	r0, [pc, #196]	@ (80060b8 <hashInit.0+0x4840>)
 8005ff2:	f7fb fb93 	bl	800171c <insert.1>
		insert("TKEG", "degree");
 8005ff6:	46a4      	mov	ip, r4
 8005ff8:	4930      	ldr	r1, [pc, #192]	@ (80060bc <hashInit.0+0x4844>)
 8005ffa:	4831      	ldr	r0, [pc, #196]	@ (80060c0 <hashInit.0+0x4848>)
 8005ffc:	f7fb fb8e 	bl	800171c <insert.1>
		insert("PH*EULD", "middle");
 8006000:	46a4      	mov	ip, r4
 8006002:	4930      	ldr	r1, [pc, #192]	@ (80060c4 <hashInit.0+0x484c>)
 8006004:	4830      	ldr	r0, [pc, #192]	@ (80060c8 <hashInit.0+0x4850>)
 8006006:	f7fb fb89 	bl	800171c <insert.1>
		insert("WEURPBT", "winter");
 800600a:	46a4      	mov	ip, r4
 800600c:	492f      	ldr	r1, [pc, #188]	@ (80060cc <hashInit.0+0x4854>)
 800600e:	4830      	ldr	r0, [pc, #192]	@ (80060d0 <hashInit.0+0x4858>)
 8006010:	f7fb fb84 	bl	800171c <insert.1>
		insert("PHRAPB", "plan");
 8006014:	46a4      	mov	ip, r4
 8006016:	492f      	ldr	r1, [pc, #188]	@ (80060d4 <hashInit.0+0x485c>)
 8006018:	482f      	ldr	r0, [pc, #188]	@ (80060d8 <hashInit.0+0x4860>)
 800601a:	f7fb fb7f 	bl	800171c <insert.1>
		insert("SPEPBT", "spent");
 800601e:	46a4      	mov	ip, r4
 8006020:	492e      	ldr	r1, [pc, #184]	@ (80060dc <hashInit.0+0x4864>)
 8006022:	482f      	ldr	r0, [pc, #188]	@ (80060e0 <hashInit.0+0x4868>)
 8006024:	f7fb fb7a 	bl	800171c <insert.1>
		insert("HROU", "allow");
 8006028:	46a4      	mov	ip, r4
 800602a:	492e      	ldr	r1, [pc, #184]	@ (80060e4 <hashInit.0+0x486c>)
 800602c:	482e      	ldr	r0, [pc, #184]	@ (80060e8 <hashInit.0+0x4870>)
 800602e:	f7fb fb75 	bl	800171c <insert.1>
		insert("PAEL", "pale");
 8006032:	46a4      	mov	ip, r4
 8006034:	492d      	ldr	r1, [pc, #180]	@ (80060ec <hashInit.0+0x4874>)
 8006036:	482e      	ldr	r0, [pc, #184]	@ (80060f0 <hashInit.0+0x4878>)
 8006038:	f7fb fb70 	bl	800171c <insert.1>
		insert("KUBGT", "conduct");
 800603c:	46a4      	mov	ip, r4
 800603e:	492d      	ldr	r1, [pc, #180]	@ (80060f4 <hashInit.0+0x487c>)
 8006040:	482d      	ldr	r0, [pc, #180]	@ (80060f8 <hashInit.0+0x4880>)
 8006042:	f7fb fb6b 	bl	800171c <insert.1>
		insert("R*UPBG", "running");
 8006046:	46a4      	mov	ip, r4
 8006048:	492c      	ldr	r1, [pc, #176]	@ (80060fc <hashInit.0+0x4884>)
 800604a:	482d      	ldr	r0, [pc, #180]	@ (8006100 <hashInit.0+0x4888>)
 800604c:	f7fb fb66 	bl	800171c <insert.1>
		insert("RE/HREURBS", "religious");
 8006050:	46a4      	mov	ip, r4
 8006052:	492c      	ldr	r1, [pc, #176]	@ (8006104 <hashInit.0+0x488c>)
 8006054:	482c      	ldr	r0, [pc, #176]	@ (8006108 <hashInit.0+0x4890>)
 8006056:	f7fb fb61 	bl	800171c <insert.1>
		insert("SPRAOEUS", "surprise");
 800605a:	46a4      	mov	ip, r4
 800605c:	492b      	ldr	r1, [pc, #172]	@ (800610c <hashInit.0+0x4894>)
 800605e:	482c      	ldr	r0, [pc, #176]	@ (8006110 <hashInit.0+0x4898>)
 8006060:	f7fb fb5c 	bl	800171c <insert.1>
		insert("PHEUPB", "minute");
 8006064:	46a4      	mov	ip, r4
 8006066:	492b      	ldr	r1, [pc, #172]	@ (8006114 <hashInit.0+0x489c>)
 8006068:	482b      	ldr	r0, [pc, #172]	@ (8006118 <hashInit.0+0x48a0>)
 800606a:	f7fb fb57 	bl	800171c <insert.1>
		insert("RO*EPB", "Roman");
 800606e:	46a4      	mov	ip, r4
 8006070:	492a      	ldr	r1, [pc, #168]	@ (800611c <hashInit.0+0x48a4>)
 8006072:	482b      	ldr	r0, [pc, #172]	@ (8006120 <hashInit.0+0x48a8>)
 8006074:	f7fb fb52 	bl	800171c <insert.1>
		insert("KAEUSZ", "cases");
 8006078:	46a4      	mov	ip, r4
 800607a:	492a      	ldr	r1, [pc, #168]	@ (8006124 <hashInit.0+0x48ac>)
 800607c:	482a      	ldr	r0, [pc, #168]	@ (8006128 <hashInit.0+0x48b0>)
 800607e:	f7fb fb4d 	bl	800171c <insert.1>
		insert("SHOT", "shot");
 8006082:	46a4      	mov	ip, r4
 8006084:	4929      	ldr	r1, [pc, #164]	@ (800612c <hashInit.0+0x48b4>)
 8006086:	482a      	ldr	r0, [pc, #168]	@ (8006130 <hashInit.0+0x48b8>)
 8006088:	f7fb fb48 	bl	800171c <insert.1>
		insert("HRAED", "lead");
 800608c:	46a4      	mov	ip, r4
 800608e:	4929      	ldr	r1, [pc, #164]	@ (8006134 <hashInit.0+0x48bc>)
 8006090:	4829      	ldr	r0, [pc, #164]	@ (8006138 <hashInit.0+0x48c0>)
 8006092:	f7fb fb43 	bl	800171c <insert.1>
		insert("PHOF", "move");
 8006096:	46a4      	mov	ip, r4
 8006098:	4928      	ldr	r1, [pc, #160]	@ (800613c <hashInit.0+0x48c4>)
 800609a:	4829      	ldr	r0, [pc, #164]	@ (8006140 <hashInit.0+0x48c8>)
 800609c:	f7fb fb3e 	bl	800171c <insert.1>
		insert("TPHAEUPLS", "names");
 80060a0:	46a4      	mov	ip, r4
 80060a2:	4928      	ldr	r1, [pc, #160]	@ (8006144 <hashInit.0+0x48cc>)
 80060a4:	4828      	ldr	r0, [pc, #160]	@ (8006148 <hashInit.0+0x48d0>)
 80060a6:	f7fb fb39 	bl	800171c <insert.1>
  }
 80060aa:	bf00      	nop
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd90      	pop	{r4, r7, pc}
 80060b2:	bf00      	nop
 80060b4:	0801137c 	.word	0x0801137c
 80060b8:	08011384 	.word	0x08011384
 80060bc:	0801138c 	.word	0x0801138c
 80060c0:	08011394 	.word	0x08011394
 80060c4:	0801139c 	.word	0x0801139c
 80060c8:	080113a4 	.word	0x080113a4
 80060cc:	080113ac 	.word	0x080113ac
 80060d0:	080113b4 	.word	0x080113b4
 80060d4:	080113bc 	.word	0x080113bc
 80060d8:	080113c4 	.word	0x080113c4
 80060dc:	080113cc 	.word	0x080113cc
 80060e0:	080113d4 	.word	0x080113d4
 80060e4:	080113dc 	.word	0x080113dc
 80060e8:	080113e4 	.word	0x080113e4
 80060ec:	080113ec 	.word	0x080113ec
 80060f0:	080113f4 	.word	0x080113f4
 80060f4:	080113fc 	.word	0x080113fc
 80060f8:	08011404 	.word	0x08011404
 80060fc:	0801140c 	.word	0x0801140c
 8006100:	08011414 	.word	0x08011414
 8006104:	0801141c 	.word	0x0801141c
 8006108:	08011428 	.word	0x08011428
 800610c:	08011434 	.word	0x08011434
 8006110:	08011440 	.word	0x08011440
 8006114:	0801144c 	.word	0x0801144c
 8006118:	08011454 	.word	0x08011454
 800611c:	0801145c 	.word	0x0801145c
 8006120:	08011464 	.word	0x08011464
 8006124:	0801146c 	.word	0x0801146c
 8006128:	08011474 	.word	0x08011474
 800612c:	0801147c 	.word	0x0801147c
 8006130:	08011484 	.word	0x08011484
 8006134:	0801148c 	.word	0x0801148c
 8006138:	08011494 	.word	0x08011494
 800613c:	0801149c 	.word	0x0801149c
 8006140:	080114a4 	.word	0x080114a4
 8006144:	080114ac 	.word	0x080114ac
 8006148:	080114b4 	.word	0x080114b4

0800614c <sendBuffer.9>:
  void sendBuffer(){
 800614c:	b5b0      	push	{r4, r5, r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	4664      	mov	r4, ip
 8006154:	f8c7 c004 	str.w	ip, [r7, #4]
	  for(int n = 0; n < bufferItemsNumber; n++){
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e00f      	b.n	800617e <sendBuffer.9+0x32>
			strcpy(result, (search(charbuffer)));
 800615e:	f104 0514 	add.w	r5, r4, #20
 8006162:	f104 032a 	add.w	r3, r4, #42	@ 0x2a
 8006166:	46a4      	mov	ip, r4
 8006168:	4618      	mov	r0, r3
 800616a:	f7fb fb4b 	bl	8001804 <search.10>
 800616e:	4603      	mov	r3, r0
 8006170:	4619      	mov	r1, r3
 8006172:	4628      	mov	r0, r5
 8006174:	f007 f80f 	bl	800d196 <strcpy>
	  for(int n = 0; n < bufferItemsNumber; n++){
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	429a      	cmp	r2, r3
 8006184:	dbeb      	blt.n	800615e <sendBuffer.9+0x12>
		  for(int n = 0; n < strlen(result); n++){
 8006186:	2300      	movs	r3, #0
 8006188:	60bb      	str	r3, [r7, #8]
 800618a:	e00d      	b.n	80061a8 <sendBuffer.9+0x5c>
		  Set_Character(result[n]);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4423      	add	r3, r4
 8006190:	3314      	adds	r3, #20
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	46a4      	mov	ip, r4
 8006196:	4618      	mov	r0, r3
 8006198:	f7fb f854 	bl	8001244 <Set_Character.5>
		  Send_Character();
 800619c:	46a4      	mov	ip, r4
 800619e:	f7fb f82d 	bl	80011fc <Send_Character.6>
		  for(int n = 0; n < strlen(result); n++){
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	3301      	adds	r3, #1
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	f104 0314 	add.w	r3, r4, #20
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fa f81d 	bl	80001ec <strlen>
 80061b2:	4602      	mov	r2, r0
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d8e8      	bhi.n	800618c <sendBuffer.9+0x40>
		  Set_Character(' ');
 80061ba:	46a4      	mov	ip, r4
 80061bc:	2020      	movs	r0, #32
 80061be:	f7fb f841 	bl	8001244 <Set_Character.5>
		  Send_Character();
 80061c2:	46a4      	mov	ip, r4
 80061c4:	f7fb f81a 	bl	80011fc <Send_Character.6>
		  bufferItemsNumber = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	6123      	str	r3, [r4, #16]
		  Clear_Buffer();
 80061cc:	46a4      	mov	ip, r4
 80061ce:	f7fa fff9 	bl	80011c4 <Clear_Buffer.11>
  }
 80061d2:	bf00      	nop
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bdb0      	pop	{r4, r5, r7, pc}

080061da <translation.8>:
  void translation(int n, char c){
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	460b      	mov	r3, r1
 80061e4:	72fb      	strb	r3, [r7, #11]
 80061e6:	4663      	mov	r3, ip
 80061e8:	f8c7 c004 	str.w	ip, [r7, #4]
  	  if(n == 1){
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	2a01      	cmp	r2, #1
 80061f0:	d103      	bne.n	80061fa <translation.8+0x20>
  		  sendBuffer();
 80061f2:	469c      	mov	ip, r3
 80061f4:	f7ff ffaa 	bl	800614c <sendBuffer.9>
    }
 80061f8:	e007      	b.n	800620a <translation.8+0x30>
  		  charbuffer[bufferItemsNumber] = c;
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	441a      	add	r2, r3
 80061fe:	7af9      	ldrb	r1, [r7, #11]
 8006200:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
  		  bufferItemsNumber += 1;
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	3201      	adds	r2, #1
 8006208:	611a      	str	r2, [r3, #16]
    }
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <CounterRestart.12>:
  void CounterRestart(){
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_TIM_Base_Stop_IT(&htim10);
 800621e:	4808      	ldr	r0, [pc, #32]	@ (8006240 <CounterRestart.12+0x2c>)
 8006220:	f002 fdc0 	bl	8008da4 <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(&htim10, 0);
 8006224:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <CounterRestart.12+0x2c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2200      	movs	r2, #0
 800622a:	625a      	str	r2, [r3, #36]	@ 0x24
	  elapsedTime = 0;
 800622c:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <CounterRestart.12+0x30>)
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT(&htim10);
 8006232:	4803      	ldr	r0, [pc, #12]	@ (8006240 <CounterRestart.12+0x2c>)
 8006234:	f002 fd54 	bl	8008ce0 <HAL_TIM_Base_Start_IT>
  }
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20000188 	.word	0x20000188
 8006244:	2000137c 	.word	0x2000137c

08006248 <Send_Gate.7>:
  void Send_Gate(int n, char c) {
 8006248:	b590      	push	{r4, r7, lr}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	460b      	mov	r3, r1
 8006252:	72fb      	strb	r3, [r7, #11]
 8006254:	4664      	mov	r4, ip
 8006256:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(previousChar == 0 && n == 24){
 800625a:	68e3      	ldr	r3, [r4, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <Send_Gate.7+0x1e>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b18      	cmp	r3, #24
 8006264:	d02b      	beq.n	80062be <Send_Gate.7+0x76>
  	  if(previousChar < n || n == 1 || n == 24){
 8006266:	68e2      	ldr	r2, [r4, #12]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	429a      	cmp	r2, r3
 800626c:	db05      	blt.n	800627a <Send_Gate.7+0x32>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d002      	beq.n	800627a <Send_Gate.7+0x32>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b18      	cmp	r3, #24
 8006278:	d122      	bne.n	80062c0 <Send_Gate.7+0x78>
  		  if(n != lastPress){
 800627a:	68a3      	ldr	r3, [r4, #8]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	429a      	cmp	r2, r3
 8006280:	d002      	beq.n	8006288 <Send_Gate.7+0x40>
  			  timeout = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	6063      	str	r3, [r4, #4]
 8006286:	e002      	b.n	800628e <Send_Gate.7+0x46>
  			  timeout +=1;
 8006288:	6863      	ldr	r3, [r4, #4]
 800628a:	3301      	adds	r3, #1
 800628c:	6063      	str	r3, [r4, #4]
  		  if(timeout >= 1200 || timeout == 0){
 800628e:	6863      	ldr	r3, [r4, #4]
 8006290:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8006294:	da02      	bge.n	800629c <Send_Gate.7+0x54>
 8006296:	6863      	ldr	r3, [r4, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d108      	bne.n	80062ae <Send_Gate.7+0x66>
  			  translation(n, c);
 800629c:	7afb      	ldrb	r3, [r7, #11]
 800629e:	46a4      	mov	ip, r4
 80062a0:	4619      	mov	r1, r3
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f7ff ff99 	bl	80061da <translation.8>
  			  CounterRestart();
 80062a8:	46a4      	mov	ip, r4
 80062aa:	f7ff ffb3 	bl	8006214 <CounterRestart.12>
  		  previousChar = n;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	60e3      	str	r3, [r4, #12]
  		  if(n == 24){
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b18      	cmp	r3, #24
 80062b6:	d103      	bne.n	80062c0 <Send_Gate.7+0x78>
			  previousChar = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	60e3      	str	r3, [r4, #12]
 80062bc:	e000      	b.n	80062c0 <Send_Gate.7+0x78>
		  return;
 80062be:	bf00      	nop
    }
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}

080062c6 <BackSpace.4>:
  void BackSpace(){
 80062c6:	b590      	push	{r4, r7, lr}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	4664      	mov	r4, ip
 80062ce:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(lastPress != 1){
 80062d2:	68a3      	ldr	r3, [r4, #8]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d002      	beq.n	80062de <BackSpace.4+0x18>
		  timeoutB = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	6023      	str	r3, [r4, #0]
 80062dc:	e002      	b.n	80062e4 <BackSpace.4+0x1e>
		  timeoutB +=1;
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	3301      	adds	r3, #1
 80062e2:	6023      	str	r3, [r4, #0]
	  if(timeoutB == 0 || timeoutB >= 1500){
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <BackSpace.4+0x2e>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	f240 52db 	movw	r2, #1499	@ 0x5db
 80062f0:	4293      	cmp	r3, r2
 80062f2:	dd08      	ble.n	8006306 <BackSpace.4+0x40>
		  Set_Character('#');
 80062f4:	46a4      	mov	ip, r4
 80062f6:	2023      	movs	r0, #35	@ 0x23
 80062f8:	f7fa ffa4 	bl	8001244 <Set_Character.5>
		  Send_Character();
 80062fc:	46a4      	mov	ip, r4
 80062fe:	f7fa ff7d 	bl	80011fc <Send_Character.6>
		  timeoutB = 1;
 8006302:	2301      	movs	r3, #1
 8006304:	6023      	str	r3, [r4, #0]
  }
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	bd90      	pop	{r4, r7, pc}
	...

08006310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b094      	sub	sp, #80	@ 0x50
 8006314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006316:	f107 0320 	add.w	r3, r7, #32
 800631a:	2230      	movs	r2, #48	@ 0x30
 800631c:	2100      	movs	r1, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f006 fe9a 	bl	800d058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006324:	f107 030c 	add.w	r3, r7, #12
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	609a      	str	r2, [r3, #8]
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006334:	2300      	movs	r3, #0
 8006336:	60bb      	str	r3, [r7, #8]
 8006338:	4b27      	ldr	r3, [pc, #156]	@ (80063d8 <SystemClock_Config+0xc8>)
 800633a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633c:	4a26      	ldr	r2, [pc, #152]	@ (80063d8 <SystemClock_Config+0xc8>)
 800633e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006342:	6413      	str	r3, [r2, #64]	@ 0x40
 8006344:	4b24      	ldr	r3, [pc, #144]	@ (80063d8 <SystemClock_Config+0xc8>)
 8006346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800634c:	60bb      	str	r3, [r7, #8]
 800634e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006350:	2300      	movs	r3, #0
 8006352:	607b      	str	r3, [r7, #4]
 8006354:	4b21      	ldr	r3, [pc, #132]	@ (80063dc <SystemClock_Config+0xcc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a20      	ldr	r2, [pc, #128]	@ (80063dc <SystemClock_Config+0xcc>)
 800635a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	4b1e      	ldr	r3, [pc, #120]	@ (80063dc <SystemClock_Config+0xcc>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800636c:	2301      	movs	r3, #1
 800636e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006370:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006376:	2302      	movs	r3, #2
 8006378:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800637a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800637e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006380:	2319      	movs	r3, #25
 8006382:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8006384:	23c0      	movs	r3, #192	@ 0xc0
 8006386:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006388:	2302      	movs	r3, #2
 800638a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800638c:	2304      	movs	r3, #4
 800638e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006390:	f107 0320 	add.w	r3, r7, #32
 8006394:	4618      	mov	r0, r3
 8006396:	f002 f823 	bl	80083e0 <HAL_RCC_OscConfig>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80063a0:	f000 f8f2 	bl	8006588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063a4:	230f      	movs	r3, #15
 80063a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063a8:	2302      	movs	r3, #2
 80063aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80063b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80063b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80063ba:	f107 030c 	add.w	r3, r7, #12
 80063be:	2103      	movs	r1, #3
 80063c0:	4618      	mov	r0, r3
 80063c2:	f002 fa85 	bl	80088d0 <HAL_RCC_ClockConfig>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80063cc:	f000 f8dc 	bl	8006588 <Error_Handler>
  }
}
 80063d0:	bf00      	nop
 80063d2:	3750      	adds	r7, #80	@ 0x50
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40023800 	.word	0x40023800
 80063dc:	40007000 	.word	0x40007000

080063e0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80063e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006420 <MX_TIM10_Init+0x40>)
 80063e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006424 <MX_TIM10_Init+0x44>)
 80063e8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000 - 1;
 80063ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <MX_TIM10_Init+0x40>)
 80063ec:	f242 720f 	movw	r2, #9999	@ 0x270f
 80063f0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006420 <MX_TIM10_Init+0x40>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000 - 1;
 80063f8:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <MX_TIM10_Init+0x40>)
 80063fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80063fe:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006400:	4b07      	ldr	r3, [pc, #28]	@ (8006420 <MX_TIM10_Init+0x40>)
 8006402:	2200      	movs	r2, #0
 8006404:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006406:	4b06      	ldr	r3, [pc, #24]	@ (8006420 <MX_TIM10_Init+0x40>)
 8006408:	2200      	movs	r2, #0
 800640a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800640c:	4804      	ldr	r0, [pc, #16]	@ (8006420 <MX_TIM10_Init+0x40>)
 800640e:	f002 fc17 	bl	8008c40 <HAL_TIM_Base_Init>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8006418:	f000 f8b6 	bl	8006588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800641c:	bf00      	nop
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000188 	.word	0x20000188
 8006424:	40014400 	.word	0x40014400

08006428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	@ 0x28
 800642c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800642e:	f107 0314 	add.w	r3, r7, #20
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	605a      	str	r2, [r3, #4]
 8006438:	609a      	str	r2, [r3, #8]
 800643a:	60da      	str	r2, [r3, #12]
 800643c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800643e:	2300      	movs	r3, #0
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	4b41      	ldr	r3, [pc, #260]	@ (8006548 <MX_GPIO_Init+0x120>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006446:	4a40      	ldr	r2, [pc, #256]	@ (8006548 <MX_GPIO_Init+0x120>)
 8006448:	f043 0304 	orr.w	r3, r3, #4
 800644c:	6313      	str	r3, [r2, #48]	@ 0x30
 800644e:	4b3e      	ldr	r3, [pc, #248]	@ (8006548 <MX_GPIO_Init+0x120>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	4b3a      	ldr	r3, [pc, #232]	@ (8006548 <MX_GPIO_Init+0x120>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006462:	4a39      	ldr	r2, [pc, #228]	@ (8006548 <MX_GPIO_Init+0x120>)
 8006464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006468:	6313      	str	r3, [r2, #48]	@ 0x30
 800646a:	4b37      	ldr	r3, [pc, #220]	@ (8006548 <MX_GPIO_Init+0x120>)
 800646c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	4b33      	ldr	r3, [pc, #204]	@ (8006548 <MX_GPIO_Init+0x120>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647e:	4a32      	ldr	r2, [pc, #200]	@ (8006548 <MX_GPIO_Init+0x120>)
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	6313      	str	r3, [r2, #48]	@ 0x30
 8006486:	4b30      	ldr	r3, [pc, #192]	@ (8006548 <MX_GPIO_Init+0x120>)
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	60bb      	str	r3, [r7, #8]
 8006490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006492:	2300      	movs	r3, #0
 8006494:	607b      	str	r3, [r7, #4]
 8006496:	4b2c      	ldr	r3, [pc, #176]	@ (8006548 <MX_GPIO_Init+0x120>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649a:	4a2b      	ldr	r2, [pc, #172]	@ (8006548 <MX_GPIO_Init+0x120>)
 800649c:	f043 0302 	orr.w	r3, r3, #2
 80064a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80064a2:	4b29      	ldr	r3, [pc, #164]	@ (8006548 <MX_GPIO_Init+0x120>)
 80064a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	607b      	str	r3, [r7, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80064ae:	2200      	movs	r2, #0
 80064b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80064b4:	4825      	ldr	r0, [pc, #148]	@ (800654c <MX_GPIO_Init+0x124>)
 80064b6:	f000 fd3f 	bl	8006f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 80064ba:	2200      	movs	r2, #0
 80064bc:	21f0      	movs	r1, #240	@ 0xf0
 80064be:	4824      	ldr	r0, [pc, #144]	@ (8006550 <MX_GPIO_Init+0x128>)
 80064c0:	f000 fd3a 	bl	8006f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Column5_Pin|Column6_Pin|Column7_Pin|Column8_Pin
 80064c4:	2200      	movs	r2, #0
 80064c6:	f247 4107 	movw	r1, #29703	@ 0x7407
 80064ca:	4822      	ldr	r0, [pc, #136]	@ (8006554 <MX_GPIO_Init+0x12c>)
 80064cc:	f000 fd34 	bl	8006f38 <HAL_GPIO_WritePin>
                          |Column11_Pin|Column10_Pin|Column9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80064d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80064d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064d6:	2301      	movs	r3, #1
 80064d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064de:	2300      	movs	r3, #0
 80064e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80064e2:	f107 0314 	add.w	r3, r7, #20
 80064e6:	4619      	mov	r1, r3
 80064e8:	4818      	ldr	r0, [pc, #96]	@ (800654c <MX_GPIO_Init+0x124>)
 80064ea:	f000 fb89 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row1_Pin Row2_Pin Row3_Pin Row4_Pin */
  GPIO_InitStruct.Pin = Row1_Pin|Row2_Pin|Row3_Pin|Row4_Pin;
 80064ee:	230f      	movs	r3, #15
 80064f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80064f6:	2302      	movs	r3, #2
 80064f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064fa:	f107 0314 	add.w	r3, r7, #20
 80064fe:	4619      	mov	r1, r3
 8006500:	4813      	ldr	r0, [pc, #76]	@ (8006550 <MX_GPIO_Init+0x128>)
 8006502:	f000 fb7d 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : Column1_Pin Column2_Pin Column3_Pin Column4_Pin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 8006506:	23f0      	movs	r3, #240	@ 0xf0
 8006508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800650a:	2301      	movs	r3, #1
 800650c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006512:	2300      	movs	r3, #0
 8006514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006516:	f107 0314 	add.w	r3, r7, #20
 800651a:	4619      	mov	r1, r3
 800651c:	480c      	ldr	r0, [pc, #48]	@ (8006550 <MX_GPIO_Init+0x128>)
 800651e:	f000 fb6f 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : Column5_Pin Column6_Pin Column7_Pin Column8_Pin
                           Column11_Pin Column10_Pin Column9_Pin */
  GPIO_InitStruct.Pin = Column5_Pin|Column6_Pin|Column7_Pin|Column8_Pin
 8006522:	f247 4307 	movw	r3, #29703	@ 0x7407
 8006526:	617b      	str	r3, [r7, #20]
                          |Column11_Pin|Column10_Pin|Column9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006528:	2301      	movs	r3, #1
 800652a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006530:	2300      	movs	r3, #0
 8006532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006534:	f107 0314 	add.w	r3, r7, #20
 8006538:	4619      	mov	r1, r3
 800653a:	4806      	ldr	r0, [pc, #24]	@ (8006554 <MX_GPIO_Init+0x12c>)
 800653c:	f000 fb60 	bl	8006c00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006540:	bf00      	nop
 8006542:	3728      	adds	r7, #40	@ 0x28
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40023800 	.word	0x40023800
 800654c:	40020800 	.word	0x40020800
 8006550:	40020000 	.word	0x40020000
 8006554:	40020400 	.word	0x40020400

08006558 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
    		if(htim == &htim10){
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a07      	ldr	r2, [pc, #28]	@ (8006580 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d104      	bne.n	8006572 <HAL_TIM_PeriodElapsedCallback+0x1a>
    			elapsedTime++;
 8006568:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3301      	adds	r3, #1
 800656e:	4a05      	ldr	r2, [pc, #20]	@ (8006584 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006570:	6013      	str	r3, [r2, #0]
    		}
    	}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20000188 	.word	0x20000188
 8006584:	2000137c 	.word	0x2000137c

08006588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800658c:	b672      	cpsid	i
}
 800658e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006590:	bf00      	nop
 8006592:	e7fd      	b.n	8006590 <Error_Handler+0x8>

08006594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800659a:	2300      	movs	r3, #0
 800659c:	607b      	str	r3, [r7, #4]
 800659e:	4b10      	ldr	r3, [pc, #64]	@ (80065e0 <HAL_MspInit+0x4c>)
 80065a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a2:	4a0f      	ldr	r2, [pc, #60]	@ (80065e0 <HAL_MspInit+0x4c>)
 80065a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80065aa:	4b0d      	ldr	r3, [pc, #52]	@ (80065e0 <HAL_MspInit+0x4c>)
 80065ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065b2:	607b      	str	r3, [r7, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065b6:	2300      	movs	r3, #0
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	4b09      	ldr	r3, [pc, #36]	@ (80065e0 <HAL_MspInit+0x4c>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	4a08      	ldr	r2, [pc, #32]	@ (80065e0 <HAL_MspInit+0x4c>)
 80065c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80065c6:	4b06      	ldr	r3, [pc, #24]	@ (80065e0 <HAL_MspInit+0x4c>)
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40023800 	.word	0x40023800

080065e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a0e      	ldr	r2, [pc, #56]	@ (800662c <HAL_TIM_Base_MspInit+0x48>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d115      	bne.n	8006622 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006630 <HAL_TIM_Base_MspInit+0x4c>)
 80065fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006630 <HAL_TIM_Base_MspInit+0x4c>)
 8006600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006604:	6453      	str	r3, [r2, #68]	@ 0x44
 8006606:	4b0a      	ldr	r3, [pc, #40]	@ (8006630 <HAL_TIM_Base_MspInit+0x4c>)
 8006608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006612:	2200      	movs	r2, #0
 8006614:	2100      	movs	r1, #0
 8006616:	2019      	movs	r0, #25
 8006618:	f000 fabb 	bl	8006b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800661c:	2019      	movs	r0, #25
 800661e:	f000 fad4 	bl	8006bca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40014400 	.word	0x40014400
 8006630:	40023800 	.word	0x40023800

08006634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006638:	bf00      	nop
 800663a:	e7fd      	b.n	8006638 <NMI_Handler+0x4>

0800663c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006640:	bf00      	nop
 8006642:	e7fd      	b.n	8006640 <HardFault_Handler+0x4>

08006644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <MemManage_Handler+0x4>

0800664c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006650:	bf00      	nop
 8006652:	e7fd      	b.n	8006650 <BusFault_Handler+0x4>

08006654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006658:	bf00      	nop
 800665a:	e7fd      	b.n	8006658 <UsageFault_Handler+0x4>

0800665c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006660:	bf00      	nop
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800666a:	b480      	push	{r7}
 800666c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800666e:	bf00      	nop
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800667c:	bf00      	nop
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800668a:	f000 f963 	bl	8006954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800668e:	bf00      	nop
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006698:	4802      	ldr	r0, [pc, #8]	@ (80066a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800669a:	f002 fbb2 	bl	8008e02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800669e:	bf00      	nop
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000188 	.word	0x20000188

080066a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80066ac:	4802      	ldr	r0, [pc, #8]	@ (80066b8 <OTG_FS_IRQHandler+0x10>)
 80066ae:	f000 fda0 	bl	80071f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20001868 	.word	0x20001868

080066bc <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80066c6:	f006 fd39 	bl	800d13c <__errno>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2216      	movs	r2, #22
 80066ce:	601a      	str	r2, [r3, #0]
  return -1;
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_exit>:

void _exit (int status)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80066e4:	f04f 31ff 	mov.w	r1, #4294967295
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff ffe7 	bl	80066bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <_exit+0x12>

080066f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b086      	sub	sp, #24
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	e00a      	b.n	800671a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006704:	f3af 8000 	nop.w
 8006708:	4601      	mov	r1, r0
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	60ba      	str	r2, [r7, #8]
 8006710:	b2ca      	uxtb	r2, r1
 8006712:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	3301      	adds	r3, #1
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	429a      	cmp	r2, r3
 8006720:	dbf0      	blt.n	8006704 <_read+0x12>
  }

  return len;
 8006722:	687b      	ldr	r3, [r7, #4]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	e009      	b.n	8006752 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	60ba      	str	r2, [r7, #8]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	3301      	adds	r3, #1
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	dbf1      	blt.n	800673e <_write+0x12>
  }
  return len;
 800675a:	687b      	ldr	r3, [r7, #4]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <_close>:

int _close(int file)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800676c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800678c:	605a      	str	r2, [r3, #4]
  return 0;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <_isatty>:

int _isatty(int file)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80067a4:	2301      	movs	r3, #1
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80067d4:	4a14      	ldr	r2, [pc, #80]	@ (8006828 <_sbrk+0x5c>)
 80067d6:	4b15      	ldr	r3, [pc, #84]	@ (800682c <_sbrk+0x60>)
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80067e0:	4b13      	ldr	r3, [pc, #76]	@ (8006830 <_sbrk+0x64>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80067e8:	4b11      	ldr	r3, [pc, #68]	@ (8006830 <_sbrk+0x64>)
 80067ea:	4a12      	ldr	r2, [pc, #72]	@ (8006834 <_sbrk+0x68>)
 80067ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80067ee:	4b10      	ldr	r3, [pc, #64]	@ (8006830 <_sbrk+0x64>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4413      	add	r3, r2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d207      	bcs.n	800680c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80067fc:	f006 fc9e 	bl	800d13c <__errno>
 8006800:	4603      	mov	r3, r0
 8006802:	220c      	movs	r2, #12
 8006804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	e009      	b.n	8006820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800680c:	4b08      	ldr	r3, [pc, #32]	@ (8006830 <_sbrk+0x64>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006812:	4b07      	ldr	r3, [pc, #28]	@ (8006830 <_sbrk+0x64>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4413      	add	r3, r2
 800681a:	4a05      	ldr	r2, [pc, #20]	@ (8006830 <_sbrk+0x64>)
 800681c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20020000 	.word	0x20020000
 800682c:	00000400 	.word	0x00000400
 8006830:	20001380 	.word	0x20001380
 8006834:	20001eb0 	.word	0x20001eb0

08006838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800683c:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <SystemInit+0x20>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006842:	4a05      	ldr	r2, [pc, #20]	@ (8006858 <SystemInit+0x20>)
 8006844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800684c:	bf00      	nop
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	e000ed00 	.word	0xe000ed00

0800685c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 800685c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006894 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006860:	f7ff ffea 	bl	8006838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006864:	480c      	ldr	r0, [pc, #48]	@ (8006898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006866:	490d      	ldr	r1, [pc, #52]	@ (800689c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006868:	4a0d      	ldr	r2, [pc, #52]	@ (80068a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800686a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800686c:	e002      	b.n	8006874 <LoopCopyDataInit>

0800686e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800686e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006872:	3304      	adds	r3, #4

08006874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006878:	d3f9      	bcc.n	800686e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800687a:	4a0a      	ldr	r2, [pc, #40]	@ (80068a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800687c:	4c0a      	ldr	r4, [pc, #40]	@ (80068a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800687e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006880:	e001      	b.n	8006886 <LoopFillZerobss>

08006882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006884:	3204      	adds	r2, #4

08006886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006888:	d3fb      	bcc.n	8006882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800688a:	f006 fc5d 	bl	800d148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800688e:	f7fa f9bd 	bl	8000c0c <main>
  bx  lr    
 8006892:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8006894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800689c:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80068a0:	08011528 	.word	0x08011528
  ldr r2, =_sbss
 80068a4:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80068a8:	20001eac 	.word	0x20001eac

080068ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068ac:	e7fe      	b.n	80068ac <ADC_IRQHandler>
	...

080068b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068b4:	4b0e      	ldr	r3, [pc, #56]	@ (80068f0 <HAL_Init+0x40>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a0d      	ldr	r2, [pc, #52]	@ (80068f0 <HAL_Init+0x40>)
 80068ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80068c0:	4b0b      	ldr	r3, [pc, #44]	@ (80068f0 <HAL_Init+0x40>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a0a      	ldr	r2, [pc, #40]	@ (80068f0 <HAL_Init+0x40>)
 80068c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068cc:	4b08      	ldr	r3, [pc, #32]	@ (80068f0 <HAL_Init+0x40>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a07      	ldr	r2, [pc, #28]	@ (80068f0 <HAL_Init+0x40>)
 80068d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068d8:	2003      	movs	r0, #3
 80068da:	f000 f94f 	bl	8006b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068de:	200f      	movs	r0, #15
 80068e0:	f000 f808 	bl	80068f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068e4:	f7ff fe56 	bl	8006594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40023c00 	.word	0x40023c00

080068f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80068fc:	4b12      	ldr	r3, [pc, #72]	@ (8006948 <HAL_InitTick+0x54>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	4b12      	ldr	r3, [pc, #72]	@ (800694c <HAL_InitTick+0x58>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	4619      	mov	r1, r3
 8006906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800690a:	fbb3 f3f1 	udiv	r3, r3, r1
 800690e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006912:	4618      	mov	r0, r3
 8006914:	f000 f967 	bl	8006be6 <HAL_SYSTICK_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e00e      	b.n	8006940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b0f      	cmp	r3, #15
 8006926:	d80a      	bhi.n	800693e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006928:	2200      	movs	r2, #0
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	f000 f92f 	bl	8006b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006934:	4a06      	ldr	r2, [pc, #24]	@ (8006950 <HAL_InitTick+0x5c>)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	e000      	b.n	8006940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20000000 	.word	0x20000000
 800694c:	20000008 	.word	0x20000008
 8006950:	20000004 	.word	0x20000004

08006954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006958:	4b06      	ldr	r3, [pc, #24]	@ (8006974 <HAL_IncTick+0x20>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <HAL_IncTick+0x24>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4413      	add	r3, r2
 8006964:	4a04      	ldr	r2, [pc, #16]	@ (8006978 <HAL_IncTick+0x24>)
 8006966:	6013      	str	r3, [r2, #0]
}
 8006968:	bf00      	nop
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000008 	.word	0x20000008
 8006978:	20001384 	.word	0x20001384

0800697c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  return uwTick;
 8006980:	4b03      	ldr	r3, [pc, #12]	@ (8006990 <HAL_GetTick+0x14>)
 8006982:	681b      	ldr	r3, [r3, #0]
}
 8006984:	4618      	mov	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20001384 	.word	0x20001384

08006994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800699c:	f7ff ffee 	bl	800697c <HAL_GetTick>
 80069a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d005      	beq.n	80069ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069ae:	4b0a      	ldr	r3, [pc, #40]	@ (80069d8 <HAL_Delay+0x44>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80069ba:	bf00      	nop
 80069bc:	f7ff ffde 	bl	800697c <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d8f7      	bhi.n	80069bc <HAL_Delay+0x28>
  {
  }
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000008 	.word	0x20000008

080069dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006a20 <__NVIC_SetPriorityGrouping+0x44>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80069f8:	4013      	ands	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a0e:	4a04      	ldr	r2, [pc, #16]	@ (8006a20 <__NVIC_SetPriorityGrouping+0x44>)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	60d3      	str	r3, [r2, #12]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	e000ed00 	.word	0xe000ed00

08006a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a28:	4b04      	ldr	r3, [pc, #16]	@ (8006a3c <__NVIC_GetPriorityGrouping+0x18>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	0a1b      	lsrs	r3, r3, #8
 8006a2e:	f003 0307 	and.w	r3, r3, #7
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	e000ed00 	.word	0xe000ed00

08006a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	db0b      	blt.n	8006a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	f003 021f 	and.w	r2, r3, #31
 8006a58:	4907      	ldr	r1, [pc, #28]	@ (8006a78 <__NVIC_EnableIRQ+0x38>)
 8006a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	2001      	movs	r0, #1
 8006a62:	fa00 f202 	lsl.w	r2, r0, r2
 8006a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	e000e100 	.word	0xe000e100

08006a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	6039      	str	r1, [r7, #0]
 8006a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	db0a      	blt.n	8006aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	490c      	ldr	r1, [pc, #48]	@ (8006ac8 <__NVIC_SetPriority+0x4c>)
 8006a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9a:	0112      	lsls	r2, r2, #4
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006aa4:	e00a      	b.n	8006abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	4908      	ldr	r1, [pc, #32]	@ (8006acc <__NVIC_SetPriority+0x50>)
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	f003 030f 	and.w	r3, r3, #15
 8006ab2:	3b04      	subs	r3, #4
 8006ab4:	0112      	lsls	r2, r2, #4
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	440b      	add	r3, r1
 8006aba:	761a      	strb	r2, [r3, #24]
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	e000e100 	.word	0xe000e100
 8006acc:	e000ed00 	.word	0xe000ed00

08006ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	@ 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f1c3 0307 	rsb	r3, r3, #7
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	bf28      	it	cs
 8006aee:	2304      	movcs	r3, #4
 8006af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	3304      	adds	r3, #4
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d902      	bls.n	8006b00 <NVIC_EncodePriority+0x30>
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	3b03      	subs	r3, #3
 8006afe:	e000      	b.n	8006b02 <NVIC_EncodePriority+0x32>
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b04:	f04f 32ff 	mov.w	r2, #4294967295
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	43da      	mvns	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	401a      	ands	r2, r3
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b18:	f04f 31ff 	mov.w	r1, #4294967295
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b22:	43d9      	mvns	r1, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b28:	4313      	orrs	r3, r2
         );
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3724      	adds	r7, #36	@ 0x24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b48:	d301      	bcc.n	8006b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e00f      	b.n	8006b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b78 <SysTick_Config+0x40>)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b56:	210f      	movs	r1, #15
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	f7ff ff8e 	bl	8006a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b60:	4b05      	ldr	r3, [pc, #20]	@ (8006b78 <SysTick_Config+0x40>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b66:	4b04      	ldr	r3, [pc, #16]	@ (8006b78 <SysTick_Config+0x40>)
 8006b68:	2207      	movs	r2, #7
 8006b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	e000e010 	.word	0xe000e010

08006b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff ff29 	bl	80069dc <__NVIC_SetPriorityGrouping>
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b086      	sub	sp, #24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	4603      	mov	r3, r0
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
 8006b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ba4:	f7ff ff3e 	bl	8006a24 <__NVIC_GetPriorityGrouping>
 8006ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	6978      	ldr	r0, [r7, #20]
 8006bb0:	f7ff ff8e 	bl	8006ad0 <NVIC_EncodePriority>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff ff5d 	bl	8006a7c <__NVIC_SetPriority>
}
 8006bc2:	bf00      	nop
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff ff31 	bl	8006a40 <__NVIC_EnableIRQ>
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff ffa2 	bl	8006b38 <SysTick_Config>
 8006bf4:	4603      	mov	r3, r0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b089      	sub	sp, #36	@ 0x24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	e159      	b.n	8006ed0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	f040 8148 	bne.w	8006eca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d005      	beq.n	8006c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d130      	bne.n	8006cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43db      	mvns	r3, r3
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4013      	ands	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c88:	2201      	movs	r2, #1
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	43db      	mvns	r3, r3
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	4013      	ands	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	091b      	lsrs	r3, r3, #4
 8006c9e:	f003 0201 	and.w	r2, r3, #1
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d017      	beq.n	8006cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	2203      	movs	r2, #3
 8006ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d123      	bne.n	8006d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	08da      	lsrs	r2, r3, #3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3208      	adds	r2, #8
 8006d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	220f      	movs	r2, #15
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	08da      	lsrs	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3208      	adds	r2, #8
 8006d3e:	69b9      	ldr	r1, [r7, #24]
 8006d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	2203      	movs	r2, #3
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	43db      	mvns	r3, r3
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f003 0203 	and.w	r2, r3, #3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80a2 	beq.w	8006eca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	4b57      	ldr	r3, [pc, #348]	@ (8006ee8 <HAL_GPIO_Init+0x2e8>)
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8e:	4a56      	ldr	r2, [pc, #344]	@ (8006ee8 <HAL_GPIO_Init+0x2e8>)
 8006d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d96:	4b54      	ldr	r3, [pc, #336]	@ (8006ee8 <HAL_GPIO_Init+0x2e8>)
 8006d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006da2:	4a52      	ldr	r2, [pc, #328]	@ (8006eec <HAL_GPIO_Init+0x2ec>)
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	089b      	lsrs	r3, r3, #2
 8006da8:	3302      	adds	r3, #2
 8006daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	220f      	movs	r2, #15
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a49      	ldr	r2, [pc, #292]	@ (8006ef0 <HAL_GPIO_Init+0x2f0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d019      	beq.n	8006e02 <HAL_GPIO_Init+0x202>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a48      	ldr	r2, [pc, #288]	@ (8006ef4 <HAL_GPIO_Init+0x2f4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <HAL_GPIO_Init+0x1fe>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a47      	ldr	r2, [pc, #284]	@ (8006ef8 <HAL_GPIO_Init+0x2f8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00d      	beq.n	8006dfa <HAL_GPIO_Init+0x1fa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a46      	ldr	r2, [pc, #280]	@ (8006efc <HAL_GPIO_Init+0x2fc>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d007      	beq.n	8006df6 <HAL_GPIO_Init+0x1f6>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a45      	ldr	r2, [pc, #276]	@ (8006f00 <HAL_GPIO_Init+0x300>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d101      	bne.n	8006df2 <HAL_GPIO_Init+0x1f2>
 8006dee:	2304      	movs	r3, #4
 8006df0:	e008      	b.n	8006e04 <HAL_GPIO_Init+0x204>
 8006df2:	2307      	movs	r3, #7
 8006df4:	e006      	b.n	8006e04 <HAL_GPIO_Init+0x204>
 8006df6:	2303      	movs	r3, #3
 8006df8:	e004      	b.n	8006e04 <HAL_GPIO_Init+0x204>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e002      	b.n	8006e04 <HAL_GPIO_Init+0x204>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <HAL_GPIO_Init+0x204>
 8006e02:	2300      	movs	r3, #0
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	f002 0203 	and.w	r2, r2, #3
 8006e0a:	0092      	lsls	r2, r2, #2
 8006e0c:	4093      	lsls	r3, r2
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e14:	4935      	ldr	r1, [pc, #212]	@ (8006eec <HAL_GPIO_Init+0x2ec>)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	089b      	lsrs	r3, r3, #2
 8006e1a:	3302      	adds	r3, #2
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e22:	4b38      	ldr	r3, [pc, #224]	@ (8006f04 <HAL_GPIO_Init+0x304>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e46:	4a2f      	ldr	r2, [pc, #188]	@ (8006f04 <HAL_GPIO_Init+0x304>)
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006f04 <HAL_GPIO_Init+0x304>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	43db      	mvns	r3, r3
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e70:	4a24      	ldr	r2, [pc, #144]	@ (8006f04 <HAL_GPIO_Init+0x304>)
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006e76:	4b23      	ldr	r3, [pc, #140]	@ (8006f04 <HAL_GPIO_Init+0x304>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	4013      	ands	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006f04 <HAL_GPIO_Init+0x304>)
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ea0:	4b18      	ldr	r3, [pc, #96]	@ (8006f04 <HAL_GPIO_Init+0x304>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	43db      	mvns	r3, r3
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	4013      	ands	r3, r2
 8006eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8006f04 <HAL_GPIO_Init+0x304>)
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	61fb      	str	r3, [r7, #28]
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	2b0f      	cmp	r3, #15
 8006ed4:	f67f aea2 	bls.w	8006c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	3724      	adds	r7, #36	@ 0x24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	40013800 	.word	0x40013800
 8006ef0:	40020000 	.word	0x40020000
 8006ef4:	40020400 	.word	0x40020400
 8006ef8:	40020800 	.word	0x40020800
 8006efc:	40020c00 	.word	0x40020c00
 8006f00:	40021000 	.word	0x40021000
 8006f04:	40013c00 	.word	0x40013c00

08006f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	887b      	ldrh	r3, [r7, #2]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f20:	2301      	movs	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]
 8006f24:	e001      	b.n	8006f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	807b      	strh	r3, [r7, #2]
 8006f44:	4613      	mov	r3, r2
 8006f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f48:	787b      	ldrb	r3, [r7, #1]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f4e:	887a      	ldrh	r2, [r7, #2]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f54:	e003      	b.n	8006f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f56:	887b      	ldrh	r3, [r7, #2]
 8006f58:	041a      	lsls	r2, r3, #16
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	619a      	str	r2, [r3, #24]
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b086      	sub	sp, #24
 8006f6e:	af02      	add	r7, sp, #8
 8006f70:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e101      	b.n	8007180 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f005 faaa 	bl	800c4f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006faa:	d102      	bne.n	8006fb2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f002 f9f3 	bl	80093a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7c1a      	ldrb	r2, [r3, #16]
 8006fc4:	f88d 2000 	strb.w	r2, [sp]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fcc:	f002 f8d2 	bl	8009174 <USB_CoreInit>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e0ce      	b.n	8007180 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f002 f9eb 	bl	80093c4 <USB_SetCurrentMode>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e0bf      	b.n	8007180 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]
 8007004:	e04a      	b.n	800709c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007006:	7bfa      	ldrb	r2, [r7, #15]
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	3315      	adds	r3, #21
 8007016:	2201      	movs	r2, #1
 8007018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800701a:	7bfa      	ldrb	r2, [r7, #15]
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	3314      	adds	r3, #20
 800702a:	7bfa      	ldrb	r2, [r7, #15]
 800702c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800702e:	7bfa      	ldrb	r2, [r7, #15]
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	b298      	uxth	r0, r3
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	4613      	mov	r3, r2
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	332e      	adds	r3, #46	@ 0x2e
 8007042:	4602      	mov	r2, r0
 8007044:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007046:	7bfa      	ldrb	r2, [r7, #15]
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	4613      	mov	r3, r2
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	3318      	adds	r3, #24
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800705a:	7bfa      	ldrb	r2, [r7, #15]
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	4613      	mov	r3, r2
 8007060:	00db      	lsls	r3, r3, #3
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	331c      	adds	r3, #28
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800706e:	7bfa      	ldrb	r2, [r7, #15]
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	3320      	adds	r3, #32
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007082:	7bfa      	ldrb	r2, [r7, #15]
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	4613      	mov	r3, r2
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	3324      	adds	r3, #36	@ 0x24
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	3301      	adds	r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	791b      	ldrb	r3, [r3, #4]
 80070a0:	7bfa      	ldrb	r2, [r7, #15]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d3af      	bcc.n	8007006 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]
 80070aa:	e044      	b.n	8007136 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070ac:	7bfa      	ldrb	r2, [r7, #15]
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80070be:	2200      	movs	r2, #0
 80070c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80070c2:	7bfa      	ldrb	r2, [r7, #15]
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80070d4:	7bfa      	ldrb	r2, [r7, #15]
 80070d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070d8:	7bfa      	ldrb	r2, [r7, #15]
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80070ee:	7bfa      	ldrb	r2, [r7, #15]
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007104:	7bfa      	ldrb	r2, [r7, #15]
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	4613      	mov	r3, r2
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	4413      	add	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	440b      	add	r3, r1
 8007112:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800711a:	7bfa      	ldrb	r2, [r7, #15]
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	4613      	mov	r3, r2
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	3301      	adds	r3, #1
 8007134:	73fb      	strb	r3, [r7, #15]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	791b      	ldrb	r3, [r3, #4]
 800713a:	7bfa      	ldrb	r2, [r7, #15]
 800713c:	429a      	cmp	r2, r3
 800713e:	d3b5      	bcc.n	80070ac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	7c1a      	ldrb	r2, [r3, #16]
 8007148:	f88d 2000 	strb.w	r2, [sp]
 800714c:	3304      	adds	r3, #4
 800714e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007150:	f002 f984 	bl	800945c <USB_DevInit>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d005      	beq.n	8007166 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e00c      	b.n	8007180 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f003 f9ce 	bl	800a51a <USB_DevDisconnect>

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800719c:	2b01      	cmp	r3, #1
 800719e:	d101      	bne.n	80071a4 <HAL_PCD_Start+0x1c>
 80071a0:	2302      	movs	r3, #2
 80071a2:	e022      	b.n	80071ea <HAL_PCD_Start+0x62>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d009      	beq.n	80071cc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d105      	bne.n	80071cc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f002 f8d5 	bl	8009380 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f003 f97c 	bl	800a4d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80071f2:	b590      	push	{r4, r7, lr}
 80071f4:	b08d      	sub	sp, #52	@ 0x34
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f003 fa3a 	bl	800a682 <USB_GetMode>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	f040 848c 	bne.w	8007b2e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f003 f99e 	bl	800a55c <USB_ReadInterrupts>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 8482 	beq.w	8007b2c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	0a1b      	lsrs	r3, r3, #8
 8007232:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4618      	mov	r0, r3
 8007242:	f003 f98b 	bl	800a55c <USB_ReadInterrupts>
 8007246:	4603      	mov	r3, r0
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b02      	cmp	r3, #2
 800724e:	d107      	bne.n	8007260 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695a      	ldr	r2, [r3, #20]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f002 0202 	and.w	r2, r2, #2
 800725e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f003 f979 	bl	800a55c <USB_ReadInterrupts>
 800726a:	4603      	mov	r3, r0
 800726c:	f003 0310 	and.w	r3, r3, #16
 8007270:	2b10      	cmp	r3, #16
 8007272:	d161      	bne.n	8007338 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0210 	bic.w	r2, r2, #16
 8007282:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	f003 020f 	and.w	r2, r3, #15
 8007290:	4613      	mov	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	4413      	add	r3, r2
 80072a0:	3304      	adds	r3, #4
 80072a2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	0c5b      	lsrs	r3, r3, #17
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d124      	bne.n	80072fa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80072b6:	4013      	ands	r3, r2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d035      	beq.n	8007328 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	091b      	lsrs	r3, r3, #4
 80072c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	6a38      	ldr	r0, [r7, #32]
 80072d0:	f002 ffb0 	bl	800a234 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	091b      	lsrs	r3, r3, #4
 80072dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072e0:	441a      	add	r2, r3
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	695a      	ldr	r2, [r3, #20]
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	091b      	lsrs	r3, r3, #4
 80072ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072f2:	441a      	add	r2, r3
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	615a      	str	r2, [r3, #20]
 80072f8:	e016      	b.n	8007328 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	0c5b      	lsrs	r3, r3, #17
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	2b06      	cmp	r3, #6
 8007304:	d110      	bne.n	8007328 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800730c:	2208      	movs	r2, #8
 800730e:	4619      	mov	r1, r3
 8007310:	6a38      	ldr	r0, [r7, #32]
 8007312:	f002 ff8f 	bl	800a234 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	695a      	ldr	r2, [r3, #20]
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	091b      	lsrs	r3, r3, #4
 800731e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007322:	441a      	add	r2, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0210 	orr.w	r2, r2, #16
 8007336:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f003 f90d 	bl	800a55c <USB_ReadInterrupts>
 8007342:	4603      	mov	r3, r0
 8007344:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007348:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800734c:	f040 80a7 	bne.w	800749e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f003 f912 	bl	800a582 <USB_ReadDevAllOutEpInterrupt>
 800735e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007360:	e099      	b.n	8007496 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 808e 	beq.w	800748a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	4611      	mov	r1, r2
 8007378:	4618      	mov	r0, r3
 800737a:	f003 f936 	bl	800a5ea <USB_ReadDevOutEPInterrupt>
 800737e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00c      	beq.n	80073a4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800738a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007396:	461a      	mov	r2, r3
 8007398:	2301      	movs	r3, #1
 800739a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800739c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fe8c 	bl	80080bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00c      	beq.n	80073c8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ba:	461a      	mov	r2, r3
 80073bc:	2308      	movs	r3, #8
 80073be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80073c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 ff62 	bl	800828c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f003 0310 	and.w	r3, r3, #16
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d008      	beq.n	80073e4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073de:	461a      	mov	r2, r3
 80073e0:	2310      	movs	r3, #16
 80073e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d030      	beq.n	8007450 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f6:	2b80      	cmp	r3, #128	@ 0x80
 80073f8:	d109      	bne.n	800740e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007408:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800740c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800740e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007410:	4613      	mov	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4413      	add	r3, r2
 8007420:	3304      	adds	r3, #4
 8007422:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	78db      	ldrb	r3, [r3, #3]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d108      	bne.n	800743e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2200      	movs	r2, #0
 8007430:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	b2db      	uxtb	r3, r3
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f005 f955 	bl	800c6e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744a:	461a      	mov	r2, r3
 800744c:	2302      	movs	r3, #2
 800744e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007466:	461a      	mov	r2, r3
 8007468:	2320      	movs	r3, #32
 800746a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d009      	beq.n	800748a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007482:	461a      	mov	r2, r3
 8007484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007488:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	3301      	adds	r3, #1
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	2b00      	cmp	r3, #0
 800749a:	f47f af62 	bne.w	8007362 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f003 f85a 	bl	800a55c <USB_ReadInterrupts>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074b2:	f040 80db 	bne.w	800766c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f003 f87b 	bl	800a5b6 <USB_ReadDevAllInEpInterrupt>
 80074c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80074c6:	e0cd      	b.n	8007664 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80c2 	beq.w	8007658 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	4611      	mov	r1, r2
 80074de:	4618      	mov	r0, r3
 80074e0:	f003 f8a1 	bl	800a626 <USB_ReadDevInEPInterrupt>
 80074e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d057      	beq.n	80075a0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	2201      	movs	r2, #1
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	43db      	mvns	r3, r3
 800750a:	69f9      	ldr	r1, [r7, #28]
 800750c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007510:	4013      	ands	r3, r2
 8007512:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007520:	461a      	mov	r2, r3
 8007522:	2301      	movs	r3, #1
 8007524:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	799b      	ldrb	r3, [r3, #6]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d132      	bne.n	8007594 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007532:	4613      	mov	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	3320      	adds	r3, #32
 800753e:	6819      	ldr	r1, [r3, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007544:	4613      	mov	r3, r2
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4403      	add	r3, r0
 800754e:	331c      	adds	r3, #28
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4419      	add	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007558:	4613      	mov	r3, r2
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4403      	add	r3, r0
 8007562:	3320      	adds	r3, #32
 8007564:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d113      	bne.n	8007594 <HAL_PCD_IRQHandler+0x3a2>
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007570:	4613      	mov	r3, r2
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	3324      	adds	r3, #36	@ 0x24
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d108      	bne.n	8007594 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6818      	ldr	r0, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800758c:	461a      	mov	r2, r3
 800758e:	2101      	movs	r1, #1
 8007590:	f003 f8a8 	bl	800a6e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	b2db      	uxtb	r3, r3
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f005 f829 	bl	800c5f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d008      	beq.n	80075bc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b6:	461a      	mov	r2, r3
 80075b8:	2308      	movs	r3, #8
 80075ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d2:	461a      	mov	r2, r3
 80075d4:	2310      	movs	r3, #16
 80075d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d008      	beq.n	80075f4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ee:	461a      	mov	r2, r3
 80075f0:	2340      	movs	r3, #64	@ 0x40
 80075f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d023      	beq.n	8007646 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80075fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007600:	6a38      	ldr	r0, [r7, #32]
 8007602:	f002 f88f 	bl	8009724 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007608:	4613      	mov	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	3310      	adds	r3, #16
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	4413      	add	r3, r2
 8007616:	3304      	adds	r3, #4
 8007618:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	78db      	ldrb	r3, [r3, #3]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d108      	bne.n	8007634 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2200      	movs	r2, #0
 8007626:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762a:	b2db      	uxtb	r3, r3
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f005 f86c 	bl	800c70c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007640:	461a      	mov	r2, r3
 8007642:	2302      	movs	r3, #2
 8007644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fca5 	bl	8007fa2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	3301      	adds	r3, #1
 800765c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800765e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007660:	085b      	lsrs	r3, r3, #1
 8007662:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007666:	2b00      	cmp	r3, #0
 8007668:	f47f af2e 	bne.w	80074c8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f002 ff73 	bl	800a55c <USB_ReadInterrupts>
 8007676:	4603      	mov	r3, r0
 8007678:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800767c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007680:	d122      	bne.n	80076c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007690:	f023 0301 	bic.w	r3, r3, #1
 8007694:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800769c:	2b01      	cmp	r3, #1
 800769e:	d108      	bne.n	80076b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80076a8:	2100      	movs	r1, #0
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fe8c 	bl	80083c8 <HAL_PCDEx_LPM_Callback>
 80076b0:	e002      	b.n	80076b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f005 f80a 	bl	800c6cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695a      	ldr	r2, [r3, #20]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80076c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f002 ff45 	bl	800a55c <USB_ReadInterrupts>
 80076d2:	4603      	mov	r3, r0
 80076d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076dc:	d112      	bne.n	8007704 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d102      	bne.n	80076f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f004 ffc6 	bl	800c680 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695a      	ldr	r2, [r3, #20]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007702:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f002 ff27 	bl	800a55c <USB_ReadInterrupts>
 800770e:	4603      	mov	r3, r0
 8007710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007718:	f040 80b7 	bne.w	800788a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800772a:	f023 0301 	bic.w	r3, r3, #1
 800772e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2110      	movs	r1, #16
 8007736:	4618      	mov	r0, r3
 8007738:	f001 fff4 	bl	8009724 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800773c:	2300      	movs	r3, #0
 800773e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007740:	e046      	b.n	80077d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774e:	461a      	mov	r2, r3
 8007750:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007754:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	440a      	add	r2, r1
 800776c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007770:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007774:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007782:	461a      	mov	r2, r3
 8007784:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007788:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800778a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077cc:	3301      	adds	r3, #1
 80077ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	791b      	ldrb	r3, [r3, #4]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d8:	4293      	cmp	r3, r2
 80077da:	d3b2      	bcc.n	8007742 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077ea:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80077ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	7bdb      	ldrb	r3, [r3, #15]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d016      	beq.n	8007826 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007808:	f043 030b 	orr.w	r3, r3, #11
 800780c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800781e:	f043 030b 	orr.w	r3, r3, #11
 8007822:	6453      	str	r3, [r2, #68]	@ 0x44
 8007824:	e015      	b.n	8007852 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007834:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007838:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800783c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800784c:	f043 030b 	orr.w	r3, r3, #11
 8007850:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007860:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007864:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007874:	461a      	mov	r2, r3
 8007876:	f002 ff35 	bl	800a6e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695a      	ldr	r2, [r3, #20]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4618      	mov	r0, r3
 8007890:	f002 fe64 	bl	800a55c <USB_ReadInterrupts>
 8007894:	4603      	mov	r3, r0
 8007896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800789a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800789e:	d123      	bne.n	80078e8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f002 fefa 	bl	800a69e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 ffb1 	bl	8009816 <USB_GetDevSpeed>
 80078b4:	4603      	mov	r3, r0
 80078b6:	461a      	mov	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681c      	ldr	r4, [r3, #0]
 80078c0:	f001 f9b2 	bl	8008c28 <HAL_RCC_GetHCLKFreq>
 80078c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80078ca:	461a      	mov	r2, r3
 80078cc:	4620      	mov	r0, r4
 80078ce:	f001 fcb5 	bl	800923c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f004 feb5 	bl	800c642 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80078e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f002 fe35 	bl	800a55c <USB_ReadInterrupts>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d10a      	bne.n	8007912 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f004 fe92 	bl	800c626 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695a      	ldr	r2, [r3, #20]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f002 0208 	and.w	r2, r2, #8
 8007910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f002 fe20 	bl	800a55c <USB_ReadInterrupts>
 800791c:	4603      	mov	r3, r0
 800791e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007922:	2b80      	cmp	r3, #128	@ 0x80
 8007924:	d123      	bne.n	800796e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007932:	2301      	movs	r3, #1
 8007934:	627b      	str	r3, [r7, #36]	@ 0x24
 8007936:	e014      	b.n	8007962 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800793c:	4613      	mov	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d105      	bne.n	800795c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007952:	b2db      	uxtb	r3, r3
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 faf2 	bl	8007f40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	3301      	adds	r3, #1
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	791b      	ldrb	r3, [r3, #4]
 8007966:	461a      	mov	r2, r3
 8007968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796a:	4293      	cmp	r3, r2
 800796c:	d3e4      	bcc.n	8007938 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f002 fdf2 	bl	800a55c <USB_ReadInterrupts>
 8007978:	4603      	mov	r3, r0
 800797a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800797e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007982:	d13c      	bne.n	80079fe <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007984:	2301      	movs	r3, #1
 8007986:	627b      	str	r3, [r7, #36]	@ 0x24
 8007988:	e02b      	b.n	80079e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800798a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800799e:	4613      	mov	r3, r2
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	440b      	add	r3, r1
 80079a8:	3318      	adds	r3, #24
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d115      	bne.n	80079dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80079b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da12      	bge.n	80079dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ba:	4613      	mov	r3, r2
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	3317      	adds	r3, #23
 80079c6:	2201      	movs	r2, #1
 80079c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80079ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fab2 	bl	8007f40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079de:	3301      	adds	r3, #1
 80079e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	791b      	ldrb	r3, [r3, #4]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d3cd      	bcc.n	800798a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	695a      	ldr	r2, [r3, #20]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80079fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f002 fdaa 	bl	800a55c <USB_ReadInterrupts>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a12:	d156      	bne.n	8007ac2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a14:	2301      	movs	r3, #1
 8007a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a18:	e045      	b.n	8007aa6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a2a:	6879      	ldr	r1, [r7, #4]
 8007a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a2e:	4613      	mov	r3, r2
 8007a30:	00db      	lsls	r3, r3, #3
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d12e      	bne.n	8007aa0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	da2b      	bge.n	8007aa0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007a54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d121      	bne.n	8007aa0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a60:	4613      	mov	r3, r2
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007a6e:	2201      	movs	r2, #1
 8007a70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a9c:	6053      	str	r3, [r2, #4]
            break;
 8007a9e:	e008      	b.n	8007ab2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	791b      	ldrb	r3, [r3, #4]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d3b3      	bcc.n	8007a1a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	695a      	ldr	r2, [r3, #20]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f002 fd48 	bl	800a55c <USB_ReadInterrupts>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ad6:	d10a      	bne.n	8007aee <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f004 fe29 	bl	800c730 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695a      	ldr	r2, [r3, #20]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f002 fd32 	bl	800a55c <USB_ReadInterrupts>
 8007af8:	4603      	mov	r3, r0
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d115      	bne.n	8007b2e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f004 fe19 	bl	800c74c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6859      	ldr	r1, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	605a      	str	r2, [r3, #4]
 8007b2a:	e000      	b.n	8007b2e <HAL_PCD_IRQHandler+0x93c>
      return;
 8007b2c:	bf00      	nop
    }
  }
}
 8007b2e:	3734      	adds	r7, #52	@ 0x34
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd90      	pop	{r4, r7, pc}

08007b34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_PCD_SetAddress+0x1a>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e012      	b.n	8007b74 <HAL_PCD_SetAddress+0x40>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	4611      	mov	r1, r2
 8007b64:	4618      	mov	r0, r3
 8007b66:	f002 fc91 	bl	800a48c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	4608      	mov	r0, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	70fb      	strb	r3, [r7, #3]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	803b      	strh	r3, [r7, #0]
 8007b92:	4613      	mov	r3, r2
 8007b94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	da0f      	bge.n	8007bc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	f003 020f 	and.w	r2, r3, #15
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	3310      	adds	r3, #16
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	705a      	strb	r2, [r3, #1]
 8007bc0:	e00f      	b.n	8007be2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	f003 020f 	and.w	r2, r3, #15
 8007bc8:	4613      	mov	r3, r2
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	3304      	adds	r3, #4
 8007bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	f003 030f 	and.w	r3, r3, #15
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007bee:	883b      	ldrh	r3, [r7, #0]
 8007bf0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	78ba      	ldrb	r2, [r7, #2]
 8007bfc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c10:	78bb      	ldrb	r3, [r7, #2]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d102      	bne.n	8007c1c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d101      	bne.n	8007c2a <HAL_PCD_EP_Open+0xae>
 8007c26:	2302      	movs	r3, #2
 8007c28:	e00e      	b.n	8007c48 <HAL_PCD_EP_Open+0xcc>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 fe11 	bl	8009860 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007c46:	7afb      	ldrb	r3, [r7, #11]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	da0f      	bge.n	8007c84 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	f003 020f 	and.w	r2, r3, #15
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	3310      	adds	r3, #16
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	4413      	add	r3, r2
 8007c78:	3304      	adds	r3, #4
 8007c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	705a      	strb	r2, [r3, #1]
 8007c82:	e00f      	b.n	8007ca4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	f003 020f 	and.w	r2, r3, #15
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	4413      	add	r3, r2
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_PCD_EP_Close+0x6e>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e00e      	b.n	8007cdc <HAL_PCD_EP_Close+0x8c>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68f9      	ldr	r1, [r7, #12]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f001 fe4f 	bl	8009970 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	607a      	str	r2, [r7, #4]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	f003 020f 	and.w	r2, r3, #15
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2200      	movs	r2, #0
 8007d24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d26:	7afb      	ldrb	r3, [r7, #11]
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	799b      	ldrb	r3, [r3, #6]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d102      	bne.n	8007d40 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6818      	ldr	r0, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	799b      	ldrb	r3, [r3, #6]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6979      	ldr	r1, [r7, #20]
 8007d4c:	f001 feec 	bl	8009b28 <USB_EPStartXfer>

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
 8007d66:	460b      	mov	r3, r1
 8007d68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	f003 020f 	and.w	r2, r3, #15
 8007d70:	4613      	mov	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	3310      	adds	r3, #16
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	3304      	adds	r3, #4
 8007d80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2200      	movs	r2, #0
 8007d92:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	2201      	movs	r2, #1
 8007d98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	f003 030f 	and.w	r3, r3, #15
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	799b      	ldrb	r3, [r3, #6]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d102      	bne.n	8007db4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6818      	ldr	r0, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	799b      	ldrb	r3, [r3, #6]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6979      	ldr	r1, [r7, #20]
 8007dc0:	f001 feb2 	bl	8009b28 <USB_EPStartXfer>

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007dda:	78fb      	ldrb	r3, [r7, #3]
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	7912      	ldrb	r2, [r2, #4]
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d901      	bls.n	8007dec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e04f      	b.n	8007e8c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	da0f      	bge.n	8007e14 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	f003 020f 	and.w	r2, r3, #15
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	00db      	lsls	r3, r3, #3
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	3310      	adds	r3, #16
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	4413      	add	r3, r2
 8007e08:	3304      	adds	r3, #4
 8007e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	705a      	strb	r2, [r3, #1]
 8007e12:	e00d      	b.n	8007e30 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e14:	78fa      	ldrb	r2, [r7, #3]
 8007e16:	4613      	mov	r3, r2
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	4413      	add	r3, r2
 8007e26:	3304      	adds	r3, #4
 8007e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2201      	movs	r2, #1
 8007e34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d101      	bne.n	8007e50 <HAL_PCD_EP_SetStall+0x82>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	e01d      	b.n	8007e8c <HAL_PCD_EP_SetStall+0xbe>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68f9      	ldr	r1, [r7, #12]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f002 fa40 	bl	800a2e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	f003 030f 	and.w	r3, r3, #15
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d109      	bne.n	8007e82 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	7999      	ldrb	r1, [r3, #6]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f002 fc31 	bl	800a6e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	7912      	ldrb	r2, [r2, #4]
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d901      	bls.n	8007eb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e042      	b.n	8007f38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da0f      	bge.n	8007eda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	f003 020f 	and.w	r2, r3, #15
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	3310      	adds	r3, #16
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	4413      	add	r3, r2
 8007ece:	3304      	adds	r3, #4
 8007ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	705a      	strb	r2, [r3, #1]
 8007ed8:	e00f      	b.n	8007efa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	f003 020f 	and.w	r2, r3, #15
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	4413      	add	r3, r2
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	f003 030f 	and.w	r3, r3, #15
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d101      	bne.n	8007f1a <HAL_PCD_EP_ClrStall+0x86>
 8007f16:	2302      	movs	r3, #2
 8007f18:	e00e      	b.n	8007f38 <HAL_PCD_EP_ClrStall+0xa4>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68f9      	ldr	r1, [r7, #12]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f002 fa49 	bl	800a3c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	da0c      	bge.n	8007f6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	f003 020f 	and.w	r2, r3, #15
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	3310      	adds	r3, #16
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	4413      	add	r3, r2
 8007f68:	3304      	adds	r3, #4
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	e00c      	b.n	8007f88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	f003 020f 	and.w	r2, r3, #15
 8007f74:	4613      	mov	r3, r2
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	4413      	add	r3, r2
 8007f84:	3304      	adds	r3, #4
 8007f86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68f9      	ldr	r1, [r7, #12]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f002 f868 	bl	800a064 <USB_EPStopXfer>
 8007f94:	4603      	mov	r3, r0
 8007f96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007f98:	7afb      	ldrb	r3, [r7, #11]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b08a      	sub	sp, #40	@ 0x28
 8007fa6:	af02      	add	r7, sp, #8
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	00db      	lsls	r3, r3, #3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	3310      	adds	r3, #16
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	695a      	ldr	r2, [r3, #20]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d901      	bls.n	8007fda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e06b      	b.n	80080b2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	691a      	ldr	r2, [r3, #16]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d902      	bls.n	8007ff6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	3303      	adds	r3, #3
 8007ffa:	089b      	lsrs	r3, r3, #2
 8007ffc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ffe:	e02a      	b.n	8008056 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	429a      	cmp	r2, r3
 8008014:	d902      	bls.n	800801c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	3303      	adds	r3, #3
 8008020:	089b      	lsrs	r3, r3, #2
 8008022:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	68d9      	ldr	r1, [r3, #12]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	b2da      	uxtb	r2, r3
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	4603      	mov	r3, r0
 8008038:	6978      	ldr	r0, [r7, #20]
 800803a:	f002 f8bd 	bl	800a1b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	441a      	add	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	695a      	ldr	r2, [r3, #20]
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	441a      	add	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	429a      	cmp	r2, r3
 800806a:	d809      	bhi.n	8008080 <PCD_WriteEmptyTxFifo+0xde>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	695a      	ldr	r2, [r3, #20]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008074:	429a      	cmp	r2, r3
 8008076:	d203      	bcs.n	8008080 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1bf      	bne.n	8008000 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	429a      	cmp	r2, r3
 800808a:	d811      	bhi.n	80080b0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	2201      	movs	r2, #1
 8008094:	fa02 f303 	lsl.w	r3, r2, r3
 8008098:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	43db      	mvns	r3, r3
 80080a6:	6939      	ldr	r1, [r7, #16]
 80080a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080ac:	4013      	ands	r3, r2
 80080ae:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	333c      	adds	r3, #60	@ 0x3c
 80080d4:	3304      	adds	r3, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	799b      	ldrb	r3, [r3, #6]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d17b      	bne.n	80081ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d015      	beq.n	8008128 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	4a61      	ldr	r2, [pc, #388]	@ (8008284 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008100:	4293      	cmp	r3, r2
 8008102:	f240 80b9 	bls.w	8008278 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 80b3 	beq.w	8008278 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800811e:	461a      	mov	r2, r3
 8008120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008124:	6093      	str	r3, [r2, #8]
 8008126:	e0a7      	b.n	8008278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b00      	cmp	r3, #0
 8008130:	d009      	beq.n	8008146 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800813e:	461a      	mov	r2, r3
 8008140:	2320      	movs	r3, #32
 8008142:	6093      	str	r3, [r2, #8]
 8008144:	e098      	b.n	8008278 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800814c:	2b00      	cmp	r3, #0
 800814e:	f040 8093 	bne.w	8008278 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	4a4b      	ldr	r2, [pc, #300]	@ (8008284 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d90f      	bls.n	800817a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008170:	461a      	mov	r2, r3
 8008172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008176:	6093      	str	r3, [r2, #8]
 8008178:	e07e      	b.n	8008278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	4413      	add	r3, r2
 800818c:	3304      	adds	r3, #4
 800818e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1a      	ldr	r2, [r3, #32]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	0159      	lsls	r1, r3, #5
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	440b      	add	r3, r1
 800819c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081a6:	1ad2      	subs	r2, r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d114      	bne.n	80081dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081c4:	461a      	mov	r2, r3
 80081c6:	2101      	movs	r1, #1
 80081c8:	f002 fa8c 	bl	800a6e4 <USB_EP0_OutStart>
 80081cc:	e006      	b.n	80081dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	68da      	ldr	r2, [r3, #12]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	441a      	add	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f004 f9ea 	bl	800c5bc <HAL_PCD_DataOutStageCallback>
 80081e8:	e046      	b.n	8008278 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	4a26      	ldr	r2, [pc, #152]	@ (8008288 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d124      	bne.n	800823c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008208:	461a      	mov	r2, r3
 800820a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800820e:	6093      	str	r3, [r2, #8]
 8008210:	e032      	b.n	8008278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f003 0320 	and.w	r3, r3, #32
 8008218:	2b00      	cmp	r3, #0
 800821a:	d008      	beq.n	800822e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008228:	461a      	mov	r2, r3
 800822a:	2320      	movs	r3, #32
 800822c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f004 f9c1 	bl	800c5bc <HAL_PCD_DataOutStageCallback>
 800823a:	e01d      	b.n	8008278 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d114      	bne.n	800826c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	4613      	mov	r3, r2
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	440b      	add	r3, r1
 8008250:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d108      	bne.n	800826c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008264:	461a      	mov	r2, r3
 8008266:	2100      	movs	r1, #0
 8008268:	f002 fa3c 	bl	800a6e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f004 f9a2 	bl	800c5bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3720      	adds	r7, #32
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	4f54300a 	.word	0x4f54300a
 8008288:	4f54310a 	.word	0x4f54310a

0800828c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	333c      	adds	r3, #60	@ 0x3c
 80082a4:	3304      	adds	r3, #4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4a15      	ldr	r2, [pc, #84]	@ (8008314 <PCD_EP_OutSetupPacket_int+0x88>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d90e      	bls.n	80082e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d009      	beq.n	80082e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d8:	461a      	mov	r2, r3
 80082da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f004 f959 	bl	800c598 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a0a      	ldr	r2, [pc, #40]	@ (8008314 <PCD_EP_OutSetupPacket_int+0x88>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d90c      	bls.n	8008308 <PCD_EP_OutSetupPacket_int+0x7c>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	799b      	ldrb	r3, [r3, #6]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d108      	bne.n	8008308 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008300:	461a      	mov	r2, r3
 8008302:	2101      	movs	r1, #1
 8008304:	f002 f9ee 	bl	800a6e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	4f54300a 	.word	0x4f54300a

08008318 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
 8008324:	4613      	mov	r3, r2
 8008326:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d107      	bne.n	8008346 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008336:	883b      	ldrh	r3, [r7, #0]
 8008338:	0419      	lsls	r1, r3, #16
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	430a      	orrs	r2, r1
 8008342:	629a      	str	r2, [r3, #40]	@ 0x28
 8008344:	e028      	b.n	8008398 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834c:	0c1b      	lsrs	r3, r3, #16
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4413      	add	r3, r2
 8008352:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]
 8008358:	e00d      	b.n	8008376 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	3340      	adds	r3, #64	@ 0x40
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	0c1b      	lsrs	r3, r3, #16
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	4413      	add	r3, r2
 800836e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	3301      	adds	r3, #1
 8008374:	73fb      	strb	r3, [r7, #15]
 8008376:	7bfa      	ldrb	r2, [r7, #15]
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	3b01      	subs	r3, #1
 800837c:	429a      	cmp	r2, r3
 800837e:	d3ec      	bcc.n	800835a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008380:	883b      	ldrh	r3, [r7, #0]
 8008382:	0418      	lsls	r0, r3, #16
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6819      	ldr	r1, [r3, #0]
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	3b01      	subs	r3, #1
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	4302      	orrs	r2, r0
 8008390:	3340      	adds	r3, #64	@ 0x40
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	887a      	ldrh	r2, [r7, #2]
 80083b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e267      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d075      	beq.n	80084ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80083fe:	4b88      	ldr	r3, [pc, #544]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f003 030c 	and.w	r3, r3, #12
 8008406:	2b04      	cmp	r3, #4
 8008408:	d00c      	beq.n	8008424 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800840a:	4b85      	ldr	r3, [pc, #532]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008412:	2b08      	cmp	r3, #8
 8008414:	d112      	bne.n	800843c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008416:	4b82      	ldr	r3, [pc, #520]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800841e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008422:	d10b      	bne.n	800843c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008424:	4b7e      	ldr	r3, [pc, #504]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d05b      	beq.n	80084e8 <HAL_RCC_OscConfig+0x108>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d157      	bne.n	80084e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e242      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008444:	d106      	bne.n	8008454 <HAL_RCC_OscConfig+0x74>
 8008446:	4b76      	ldr	r3, [pc, #472]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a75      	ldr	r2, [pc, #468]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 800844c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e01d      	b.n	8008490 <HAL_RCC_OscConfig+0xb0>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800845c:	d10c      	bne.n	8008478 <HAL_RCC_OscConfig+0x98>
 800845e:	4b70      	ldr	r3, [pc, #448]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a6f      	ldr	r2, [pc, #444]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	4b6d      	ldr	r3, [pc, #436]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a6c      	ldr	r2, [pc, #432]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	e00b      	b.n	8008490 <HAL_RCC_OscConfig+0xb0>
 8008478:	4b69      	ldr	r3, [pc, #420]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a68      	ldr	r2, [pc, #416]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 800847e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	4b66      	ldr	r3, [pc, #408]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a65      	ldr	r2, [pc, #404]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 800848a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800848e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d013      	beq.n	80084c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008498:	f7fe fa70 	bl	800697c <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084a0:	f7fe fa6c 	bl	800697c <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b64      	cmp	r3, #100	@ 0x64
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e207      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084b2:	4b5b      	ldr	r3, [pc, #364]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0f0      	beq.n	80084a0 <HAL_RCC_OscConfig+0xc0>
 80084be:	e014      	b.n	80084ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c0:	f7fe fa5c 	bl	800697c <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084c8:	f7fe fa58 	bl	800697c <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b64      	cmp	r3, #100	@ 0x64
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e1f3      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084da:	4b51      	ldr	r3, [pc, #324]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f0      	bne.n	80084c8 <HAL_RCC_OscConfig+0xe8>
 80084e6:	e000      	b.n	80084ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d063      	beq.n	80085be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80084f6:	4b4a      	ldr	r3, [pc, #296]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 030c 	and.w	r3, r3, #12
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00b      	beq.n	800851a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008502:	4b47      	ldr	r3, [pc, #284]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800850a:	2b08      	cmp	r3, #8
 800850c:	d11c      	bne.n	8008548 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800850e:	4b44      	ldr	r3, [pc, #272]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d116      	bne.n	8008548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800851a:	4b41      	ldr	r3, [pc, #260]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <HAL_RCC_OscConfig+0x152>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d001      	beq.n	8008532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e1c7      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008532:	4b3b      	ldr	r3, [pc, #236]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4937      	ldr	r1, [pc, #220]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008542:	4313      	orrs	r3, r2
 8008544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008546:	e03a      	b.n	80085be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d020      	beq.n	8008592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008550:	4b34      	ldr	r3, [pc, #208]	@ (8008624 <HAL_RCC_OscConfig+0x244>)
 8008552:	2201      	movs	r2, #1
 8008554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008556:	f7fe fa11 	bl	800697c <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800855c:	e008      	b.n	8008570 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800855e:	f7fe fa0d 	bl	800697c <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d901      	bls.n	8008570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e1a8      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008570:	4b2b      	ldr	r3, [pc, #172]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0f0      	beq.n	800855e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800857c:	4b28      	ldr	r3, [pc, #160]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	00db      	lsls	r3, r3, #3
 800858a:	4925      	ldr	r1, [pc, #148]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 800858c:	4313      	orrs	r3, r2
 800858e:	600b      	str	r3, [r1, #0]
 8008590:	e015      	b.n	80085be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008592:	4b24      	ldr	r3, [pc, #144]	@ (8008624 <HAL_RCC_OscConfig+0x244>)
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008598:	f7fe f9f0 	bl	800697c <HAL_GetTick>
 800859c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800859e:	e008      	b.n	80085b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085a0:	f7fe f9ec 	bl	800697c <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d901      	bls.n	80085b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e187      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1f0      	bne.n	80085a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d036      	beq.n	8008638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d016      	beq.n	8008600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085d2:	4b15      	ldr	r3, [pc, #84]	@ (8008628 <HAL_RCC_OscConfig+0x248>)
 80085d4:	2201      	movs	r2, #1
 80085d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d8:	f7fe f9d0 	bl	800697c <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085e0:	f7fe f9cc 	bl	800697c <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e167      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008620 <HAL_RCC_OscConfig+0x240>)
 80085f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0f0      	beq.n	80085e0 <HAL_RCC_OscConfig+0x200>
 80085fe:	e01b      	b.n	8008638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008600:	4b09      	ldr	r3, [pc, #36]	@ (8008628 <HAL_RCC_OscConfig+0x248>)
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008606:	f7fe f9b9 	bl	800697c <HAL_GetTick>
 800860a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800860c:	e00e      	b.n	800862c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800860e:	f7fe f9b5 	bl	800697c <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d907      	bls.n	800862c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e150      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
 8008620:	40023800 	.word	0x40023800
 8008624:	42470000 	.word	0x42470000
 8008628:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800862c:	4b88      	ldr	r3, [pc, #544]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 800862e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1ea      	bne.n	800860e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8097 	beq.w	8008774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008646:	2300      	movs	r3, #0
 8008648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800864a:	4b81      	ldr	r3, [pc, #516]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 800864c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10f      	bne.n	8008676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008656:	2300      	movs	r3, #0
 8008658:	60bb      	str	r3, [r7, #8]
 800865a:	4b7d      	ldr	r3, [pc, #500]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 800865c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865e:	4a7c      	ldr	r2, [pc, #496]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 8008660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008664:	6413      	str	r3, [r2, #64]	@ 0x40
 8008666:	4b7a      	ldr	r3, [pc, #488]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800866e:	60bb      	str	r3, [r7, #8]
 8008670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008672:	2301      	movs	r3, #1
 8008674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008676:	4b77      	ldr	r3, [pc, #476]	@ (8008854 <HAL_RCC_OscConfig+0x474>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800867e:	2b00      	cmp	r3, #0
 8008680:	d118      	bne.n	80086b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008682:	4b74      	ldr	r3, [pc, #464]	@ (8008854 <HAL_RCC_OscConfig+0x474>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a73      	ldr	r2, [pc, #460]	@ (8008854 <HAL_RCC_OscConfig+0x474>)
 8008688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800868c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800868e:	f7fe f975 	bl	800697c <HAL_GetTick>
 8008692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008696:	f7fe f971 	bl	800697c <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e10c      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086a8:	4b6a      	ldr	r3, [pc, #424]	@ (8008854 <HAL_RCC_OscConfig+0x474>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d0f0      	beq.n	8008696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d106      	bne.n	80086ca <HAL_RCC_OscConfig+0x2ea>
 80086bc:	4b64      	ldr	r3, [pc, #400]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80086be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c0:	4a63      	ldr	r2, [pc, #396]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80086c8:	e01c      	b.n	8008704 <HAL_RCC_OscConfig+0x324>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	d10c      	bne.n	80086ec <HAL_RCC_OscConfig+0x30c>
 80086d2:	4b5f      	ldr	r3, [pc, #380]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80086d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d6:	4a5e      	ldr	r2, [pc, #376]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80086d8:	f043 0304 	orr.w	r3, r3, #4
 80086dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80086de:	4b5c      	ldr	r3, [pc, #368]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e2:	4a5b      	ldr	r2, [pc, #364]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80086e4:	f043 0301 	orr.w	r3, r3, #1
 80086e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80086ea:	e00b      	b.n	8008704 <HAL_RCC_OscConfig+0x324>
 80086ec:	4b58      	ldr	r3, [pc, #352]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80086ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f0:	4a57      	ldr	r2, [pc, #348]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80086f2:	f023 0301 	bic.w	r3, r3, #1
 80086f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80086f8:	4b55      	ldr	r3, [pc, #340]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80086fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086fc:	4a54      	ldr	r2, [pc, #336]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80086fe:	f023 0304 	bic.w	r3, r3, #4
 8008702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d015      	beq.n	8008738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800870c:	f7fe f936 	bl	800697c <HAL_GetTick>
 8008710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008712:	e00a      	b.n	800872a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008714:	f7fe f932 	bl	800697c <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008722:	4293      	cmp	r3, r2
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e0cb      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800872a:	4b49      	ldr	r3, [pc, #292]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 800872c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0ee      	beq.n	8008714 <HAL_RCC_OscConfig+0x334>
 8008736:	e014      	b.n	8008762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008738:	f7fe f920 	bl	800697c <HAL_GetTick>
 800873c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800873e:	e00a      	b.n	8008756 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008740:	f7fe f91c 	bl	800697c <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800874e:	4293      	cmp	r3, r2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e0b5      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008756:	4b3e      	ldr	r3, [pc, #248]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 8008758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1ee      	bne.n	8008740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d105      	bne.n	8008774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008768:	4b39      	ldr	r3, [pc, #228]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 800876a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800876c:	4a38      	ldr	r2, [pc, #224]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 800876e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 80a1 	beq.w	80088c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800877e:	4b34      	ldr	r3, [pc, #208]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 030c 	and.w	r3, r3, #12
 8008786:	2b08      	cmp	r3, #8
 8008788:	d05c      	beq.n	8008844 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d141      	bne.n	8008816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008792:	4b31      	ldr	r3, [pc, #196]	@ (8008858 <HAL_RCC_OscConfig+0x478>)
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008798:	f7fe f8f0 	bl	800697c <HAL_GetTick>
 800879c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a0:	f7fe f8ec 	bl	800697c <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e087      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087b2:	4b27      	ldr	r3, [pc, #156]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1f0      	bne.n	80087a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69da      	ldr	r2, [r3, #28]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087cc:	019b      	lsls	r3, r3, #6
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	3b01      	subs	r3, #1
 80087d8:	041b      	lsls	r3, r3, #16
 80087da:	431a      	orrs	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e0:	061b      	lsls	r3, r3, #24
 80087e2:	491b      	ldr	r1, [pc, #108]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008858 <HAL_RCC_OscConfig+0x478>)
 80087ea:	2201      	movs	r2, #1
 80087ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ee:	f7fe f8c5 	bl	800697c <HAL_GetTick>
 80087f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087f4:	e008      	b.n	8008808 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087f6:	f7fe f8c1 	bl	800697c <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b02      	cmp	r3, #2
 8008802:	d901      	bls.n	8008808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e05c      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008808:	4b11      	ldr	r3, [pc, #68]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0f0      	beq.n	80087f6 <HAL_RCC_OscConfig+0x416>
 8008814:	e054      	b.n	80088c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008816:	4b10      	ldr	r3, [pc, #64]	@ (8008858 <HAL_RCC_OscConfig+0x478>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800881c:	f7fe f8ae 	bl	800697c <HAL_GetTick>
 8008820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008824:	f7fe f8aa 	bl	800697c <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e045      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008836:	4b06      	ldr	r3, [pc, #24]	@ (8008850 <HAL_RCC_OscConfig+0x470>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0x444>
 8008842:	e03d      	b.n	80088c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d107      	bne.n	800885c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e038      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
 8008850:	40023800 	.word	0x40023800
 8008854:	40007000 	.word	0x40007000
 8008858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800885c:	4b1b      	ldr	r3, [pc, #108]	@ (80088cc <HAL_RCC_OscConfig+0x4ec>)
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d028      	beq.n	80088bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008874:	429a      	cmp	r2, r3
 8008876:	d121      	bne.n	80088bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008882:	429a      	cmp	r2, r3
 8008884:	d11a      	bne.n	80088bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800888c:	4013      	ands	r3, r2
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008894:	4293      	cmp	r3, r2
 8008896:	d111      	bne.n	80088bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	3b01      	subs	r3, #1
 80088a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d107      	bne.n	80088bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d001      	beq.n	80088c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e000      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40023800 	.word	0x40023800

080088d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e0cc      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088e4:	4b68      	ldr	r3, [pc, #416]	@ (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d90c      	bls.n	800890c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088f2:	4b65      	ldr	r3, [pc, #404]	@ (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088fa:	4b63      	ldr	r3, [pc, #396]	@ (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d001      	beq.n	800890c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e0b8      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d020      	beq.n	800895a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008924:	4b59      	ldr	r3, [pc, #356]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	4a58      	ldr	r2, [pc, #352]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 800892a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800892e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800893c:	4b53      	ldr	r3, [pc, #332]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	4a52      	ldr	r2, [pc, #328]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008942:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008948:	4b50      	ldr	r3, [pc, #320]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	494d      	ldr	r1, [pc, #308]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008956:	4313      	orrs	r3, r2
 8008958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d044      	beq.n	80089f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d107      	bne.n	800897e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800896e:	4b47      	ldr	r3, [pc, #284]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d119      	bne.n	80089ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e07f      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d003      	beq.n	800898e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800898a:	2b03      	cmp	r3, #3
 800898c:	d107      	bne.n	800899e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800898e:	4b3f      	ldr	r3, [pc, #252]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d109      	bne.n	80089ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e06f      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800899e:	4b3b      	ldr	r3, [pc, #236]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e067      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089ae:	4b37      	ldr	r3, [pc, #220]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f023 0203 	bic.w	r2, r3, #3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	4934      	ldr	r1, [pc, #208]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089c0:	f7fd ffdc 	bl	800697c <HAL_GetTick>
 80089c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089c6:	e00a      	b.n	80089de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089c8:	f7fd ffd8 	bl	800697c <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e04f      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089de:	4b2b      	ldr	r3, [pc, #172]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f003 020c 	and.w	r2, r3, #12
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d1eb      	bne.n	80089c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089f0:	4b25      	ldr	r3, [pc, #148]	@ (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d20c      	bcs.n	8008a18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089fe:	4b22      	ldr	r3, [pc, #136]	@ (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a06:	4b20      	ldr	r3, [pc, #128]	@ (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d001      	beq.n	8008a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e032      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d008      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a24:	4b19      	ldr	r3, [pc, #100]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	4916      	ldr	r1, [pc, #88]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d009      	beq.n	8008a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a42:	4b12      	ldr	r3, [pc, #72]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	490e      	ldr	r1, [pc, #56]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a56:	f000 f821 	bl	8008a9c <HAL_RCC_GetSysClockFreq>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	091b      	lsrs	r3, r3, #4
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	490a      	ldr	r1, [pc, #40]	@ (8008a90 <HAL_RCC_ClockConfig+0x1c0>)
 8008a68:	5ccb      	ldrb	r3, [r1, r3]
 8008a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6e:	4a09      	ldr	r2, [pc, #36]	@ (8008a94 <HAL_RCC_ClockConfig+0x1c4>)
 8008a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008a72:	4b09      	ldr	r3, [pc, #36]	@ (8008a98 <HAL_RCC_ClockConfig+0x1c8>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fd ff3c 	bl	80068f4 <HAL_InitTick>

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	40023c00 	.word	0x40023c00
 8008a8c:	40023800 	.word	0x40023800
 8008a90:	08011508 	.word	0x08011508
 8008a94:	20000000 	.word	0x20000000
 8008a98:	20000004 	.word	0x20000004

08008a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aa0:	b090      	sub	sp, #64	@ 0x40
 8008aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ab4:	4b59      	ldr	r3, [pc, #356]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f003 030c 	and.w	r3, r3, #12
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d00d      	beq.n	8008adc <HAL_RCC_GetSysClockFreq+0x40>
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	f200 80a1 	bhi.w	8008c08 <HAL_RCC_GetSysClockFreq+0x16c>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d003      	beq.n	8008ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008ace:	e09b      	b.n	8008c08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ad0:	4b53      	ldr	r3, [pc, #332]	@ (8008c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ad4:	e09b      	b.n	8008c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ad6:	4b53      	ldr	r3, [pc, #332]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ada:	e098      	b.n	8008c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008adc:	4b4f      	ldr	r3, [pc, #316]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ae4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d028      	beq.n	8008b44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008af2:	4b4a      	ldr	r3, [pc, #296]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	099b      	lsrs	r3, r3, #6
 8008af8:	2200      	movs	r2, #0
 8008afa:	623b      	str	r3, [r7, #32]
 8008afc:	627a      	str	r2, [r7, #36]	@ 0x24
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008b04:	2100      	movs	r1, #0
 8008b06:	4b47      	ldr	r3, [pc, #284]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8008b08:	fb03 f201 	mul.w	r2, r3, r1
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	fb00 f303 	mul.w	r3, r0, r3
 8008b12:	4413      	add	r3, r2
 8008b14:	4a43      	ldr	r2, [pc, #268]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8008b16:	fba0 1202 	umull	r1, r2, r0, r2
 8008b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b1c:	460a      	mov	r2, r1
 8008b1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b22:	4413      	add	r3, r2
 8008b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b28:	2200      	movs	r2, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
 8008b2c:	61fa      	str	r2, [r7, #28]
 8008b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008b36:	f7f7 fb61 	bl	80001fc <__aeabi_uldivmod>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4613      	mov	r3, r2
 8008b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b42:	e053      	b.n	8008bec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b44:	4b35      	ldr	r3, [pc, #212]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	099b      	lsrs	r3, r3, #6
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	613b      	str	r3, [r7, #16]
 8008b4e:	617a      	str	r2, [r7, #20]
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008b56:	f04f 0b00 	mov.w	fp, #0
 8008b5a:	4652      	mov	r2, sl
 8008b5c:	465b      	mov	r3, fp
 8008b5e:	f04f 0000 	mov.w	r0, #0
 8008b62:	f04f 0100 	mov.w	r1, #0
 8008b66:	0159      	lsls	r1, r3, #5
 8008b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b6c:	0150      	lsls	r0, r2, #5
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	ebb2 080a 	subs.w	r8, r2, sl
 8008b76:	eb63 090b 	sbc.w	r9, r3, fp
 8008b7a:	f04f 0200 	mov.w	r2, #0
 8008b7e:	f04f 0300 	mov.w	r3, #0
 8008b82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008b86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008b8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008b8e:	ebb2 0408 	subs.w	r4, r2, r8
 8008b92:	eb63 0509 	sbc.w	r5, r3, r9
 8008b96:	f04f 0200 	mov.w	r2, #0
 8008b9a:	f04f 0300 	mov.w	r3, #0
 8008b9e:	00eb      	lsls	r3, r5, #3
 8008ba0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ba4:	00e2      	lsls	r2, r4, #3
 8008ba6:	4614      	mov	r4, r2
 8008ba8:	461d      	mov	r5, r3
 8008baa:	eb14 030a 	adds.w	r3, r4, sl
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	eb45 030b 	adc.w	r3, r5, fp
 8008bb4:	607b      	str	r3, [r7, #4]
 8008bb6:	f04f 0200 	mov.w	r2, #0
 8008bba:	f04f 0300 	mov.w	r3, #0
 8008bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	028b      	lsls	r3, r1, #10
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008bcc:	4621      	mov	r1, r4
 8008bce:	028a      	lsls	r2, r1, #10
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	60bb      	str	r3, [r7, #8]
 8008bda:	60fa      	str	r2, [r7, #12]
 8008bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008be0:	f7f7 fb0c 	bl	80001fc <__aeabi_uldivmod>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4613      	mov	r3, r2
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008bec:	4b0b      	ldr	r3, [pc, #44]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	0c1b      	lsrs	r3, r3, #16
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008bfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c06:	e002      	b.n	8008c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c08:	4b05      	ldr	r3, [pc, #20]	@ (8008c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3740      	adds	r7, #64	@ 0x40
 8008c14:	46bd      	mov	sp, r7
 8008c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c1a:	bf00      	nop
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	00f42400 	.word	0x00f42400
 8008c24:	017d7840 	.word	0x017d7840

08008c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c2c:	4b03      	ldr	r3, [pc, #12]	@ (8008c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	20000000 	.word	0x20000000

08008c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e041      	b.n	8008cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d106      	bne.n	8008c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7fd fcbc 	bl	80065e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f000 f9d8 	bl	8009034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d001      	beq.n	8008cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e044      	b.n	8008d82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f042 0201 	orr.w	r2, r2, #1
 8008d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a1e      	ldr	r2, [pc, #120]	@ (8008d90 <HAL_TIM_Base_Start_IT+0xb0>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d018      	beq.n	8008d4c <HAL_TIM_Base_Start_IT+0x6c>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d22:	d013      	beq.n	8008d4c <HAL_TIM_Base_Start_IT+0x6c>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a1a      	ldr	r2, [pc, #104]	@ (8008d94 <HAL_TIM_Base_Start_IT+0xb4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00e      	beq.n	8008d4c <HAL_TIM_Base_Start_IT+0x6c>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a19      	ldr	r2, [pc, #100]	@ (8008d98 <HAL_TIM_Base_Start_IT+0xb8>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d009      	beq.n	8008d4c <HAL_TIM_Base_Start_IT+0x6c>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a17      	ldr	r2, [pc, #92]	@ (8008d9c <HAL_TIM_Base_Start_IT+0xbc>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d004      	beq.n	8008d4c <HAL_TIM_Base_Start_IT+0x6c>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a16      	ldr	r2, [pc, #88]	@ (8008da0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d111      	bne.n	8008d70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b06      	cmp	r3, #6
 8008d5c:	d010      	beq.n	8008d80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f042 0201 	orr.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d6e:	e007      	b.n	8008d80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f042 0201 	orr.w	r2, r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40010000 	.word	0x40010000
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	40000c00 	.word	0x40000c00
 8008da0:	40014000 	.word	0x40014000

08008da4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6a1a      	ldr	r2, [r3, #32]
 8008dc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10f      	bne.n	8008dec <HAL_TIM_Base_Stop_IT+0x48>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6a1a      	ldr	r2, [r3, #32]
 8008dd2:	f240 4344 	movw	r3, #1092	@ 0x444
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d107      	bne.n	8008dec <HAL_TIM_Base_Stop_IT+0x48>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 0201 	bic.w	r2, r2, #1
 8008dea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d020      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f003 0302 	and.w	r3, r3, #2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d01b      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f06f 0202 	mvn.w	r2, #2
 8008e36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f003 0303 	and.w	r3, r3, #3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f8d2 	bl	8008ff6 <HAL_TIM_IC_CaptureCallback>
 8008e52:	e005      	b.n	8008e60 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f8c4 	bl	8008fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f8d5 	bl	800900a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d020      	beq.n	8008eb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d01b      	beq.n	8008eb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f06f 0204 	mvn.w	r2, #4
 8008e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f8ac 	bl	8008ff6 <HAL_TIM_IC_CaptureCallback>
 8008e9e:	e005      	b.n	8008eac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f89e 	bl	8008fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f8af 	bl	800900a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d020      	beq.n	8008efe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f003 0308 	and.w	r3, r3, #8
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01b      	beq.n	8008efe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f06f 0208 	mvn.w	r2, #8
 8008ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	f003 0303 	and.w	r3, r3, #3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f886 	bl	8008ff6 <HAL_TIM_IC_CaptureCallback>
 8008eea:	e005      	b.n	8008ef8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f878 	bl	8008fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f889 	bl	800900a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f003 0310 	and.w	r3, r3, #16
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d020      	beq.n	8008f4a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f003 0310 	and.w	r3, r3, #16
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d01b      	beq.n	8008f4a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f06f 0210 	mvn.w	r2, #16
 8008f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2208      	movs	r2, #8
 8008f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f860 	bl	8008ff6 <HAL_TIM_IC_CaptureCallback>
 8008f36:	e005      	b.n	8008f44 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f852 	bl	8008fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f863 	bl	800900a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00c      	beq.n	8008f6e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d007      	beq.n	8008f6e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f06f 0201 	mvn.w	r2, #1
 8008f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7fd faf5 	bl	8006558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00c      	beq.n	8008f92 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d007      	beq.n	8008f92 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f8e7 	bl	8009160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00c      	beq.n	8008fb6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f834 	bl	800901e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f003 0320 	and.w	r3, r3, #32
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00c      	beq.n	8008fda <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d007      	beq.n	8008fda <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f06f 0220 	mvn.w	r2, #32
 8008fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f8b9 	bl	800914c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b083      	sub	sp, #12
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ffe:	bf00      	nop
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009026:	bf00      	nop
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
	...

08009034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a3a      	ldr	r2, [pc, #232]	@ (8009130 <TIM_Base_SetConfig+0xfc>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d00f      	beq.n	800906c <TIM_Base_SetConfig+0x38>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009052:	d00b      	beq.n	800906c <TIM_Base_SetConfig+0x38>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a37      	ldr	r2, [pc, #220]	@ (8009134 <TIM_Base_SetConfig+0x100>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d007      	beq.n	800906c <TIM_Base_SetConfig+0x38>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a36      	ldr	r2, [pc, #216]	@ (8009138 <TIM_Base_SetConfig+0x104>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d003      	beq.n	800906c <TIM_Base_SetConfig+0x38>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a35      	ldr	r2, [pc, #212]	@ (800913c <TIM_Base_SetConfig+0x108>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d108      	bne.n	800907e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a2b      	ldr	r2, [pc, #172]	@ (8009130 <TIM_Base_SetConfig+0xfc>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d01b      	beq.n	80090be <TIM_Base_SetConfig+0x8a>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800908c:	d017      	beq.n	80090be <TIM_Base_SetConfig+0x8a>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a28      	ldr	r2, [pc, #160]	@ (8009134 <TIM_Base_SetConfig+0x100>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d013      	beq.n	80090be <TIM_Base_SetConfig+0x8a>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a27      	ldr	r2, [pc, #156]	@ (8009138 <TIM_Base_SetConfig+0x104>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00f      	beq.n	80090be <TIM_Base_SetConfig+0x8a>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a26      	ldr	r2, [pc, #152]	@ (800913c <TIM_Base_SetConfig+0x108>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00b      	beq.n	80090be <TIM_Base_SetConfig+0x8a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a25      	ldr	r2, [pc, #148]	@ (8009140 <TIM_Base_SetConfig+0x10c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d007      	beq.n	80090be <TIM_Base_SetConfig+0x8a>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a24      	ldr	r2, [pc, #144]	@ (8009144 <TIM_Base_SetConfig+0x110>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d003      	beq.n	80090be <TIM_Base_SetConfig+0x8a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a23      	ldr	r2, [pc, #140]	@ (8009148 <TIM_Base_SetConfig+0x114>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d108      	bne.n	80090d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	4313      	orrs	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a0e      	ldr	r2, [pc, #56]	@ (8009130 <TIM_Base_SetConfig+0xfc>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d103      	bne.n	8009104 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b01      	cmp	r3, #1
 8009114:	d105      	bne.n	8009122 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	f023 0201 	bic.w	r2, r3, #1
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	611a      	str	r2, [r3, #16]
  }
}
 8009122:	bf00      	nop
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	40010000 	.word	0x40010000
 8009134:	40000400 	.word	0x40000400
 8009138:	40000800 	.word	0x40000800
 800913c:	40000c00 	.word	0x40000c00
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800

0800914c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009174:	b084      	sub	sp, #16
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	f107 001c 	add.w	r0, r7, #28
 8009182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009186:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800918a:	2b01      	cmp	r3, #1
 800918c:	d123      	bne.n	80091d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009192:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80091a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d105      	bne.n	80091ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f001 fae8 	bl	800a7a0 <USB_CoreReset>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]
 80091d4:	e01b      	b.n	800920e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f001 fadc 	bl	800a7a0 <USB_CoreReset>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80091ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d106      	bne.n	8009202 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8009200:	e005      	b.n	800920e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009206:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800920e:	7fbb      	ldrb	r3, [r7, #30]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d10b      	bne.n	800922c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f043 0206 	orr.w	r2, r3, #6
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f043 0220 	orr.w	r2, r3, #32
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009238:	b004      	add	sp, #16
 800923a:	4770      	bx	lr

0800923c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	2b02      	cmp	r3, #2
 800924e:	d165      	bne.n	800931c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4a41      	ldr	r2, [pc, #260]	@ (8009358 <USB_SetTurnaroundTime+0x11c>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d906      	bls.n	8009266 <USB_SetTurnaroundTime+0x2a>
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4a40      	ldr	r2, [pc, #256]	@ (800935c <USB_SetTurnaroundTime+0x120>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d202      	bcs.n	8009266 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009260:	230f      	movs	r3, #15
 8009262:	617b      	str	r3, [r7, #20]
 8009264:	e062      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	4a3c      	ldr	r2, [pc, #240]	@ (800935c <USB_SetTurnaroundTime+0x120>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d306      	bcc.n	800927c <USB_SetTurnaroundTime+0x40>
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	4a3b      	ldr	r2, [pc, #236]	@ (8009360 <USB_SetTurnaroundTime+0x124>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d202      	bcs.n	800927c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009276:	230e      	movs	r3, #14
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	e057      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4a38      	ldr	r2, [pc, #224]	@ (8009360 <USB_SetTurnaroundTime+0x124>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d306      	bcc.n	8009292 <USB_SetTurnaroundTime+0x56>
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4a37      	ldr	r2, [pc, #220]	@ (8009364 <USB_SetTurnaroundTime+0x128>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d202      	bcs.n	8009292 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800928c:	230d      	movs	r3, #13
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e04c      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	4a33      	ldr	r2, [pc, #204]	@ (8009364 <USB_SetTurnaroundTime+0x128>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d306      	bcc.n	80092a8 <USB_SetTurnaroundTime+0x6c>
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	4a32      	ldr	r2, [pc, #200]	@ (8009368 <USB_SetTurnaroundTime+0x12c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d802      	bhi.n	80092a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80092a2:	230c      	movs	r3, #12
 80092a4:	617b      	str	r3, [r7, #20]
 80092a6:	e041      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	4a2f      	ldr	r2, [pc, #188]	@ (8009368 <USB_SetTurnaroundTime+0x12c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d906      	bls.n	80092be <USB_SetTurnaroundTime+0x82>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4a2e      	ldr	r2, [pc, #184]	@ (800936c <USB_SetTurnaroundTime+0x130>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d802      	bhi.n	80092be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80092b8:	230b      	movs	r3, #11
 80092ba:	617b      	str	r3, [r7, #20]
 80092bc:	e036      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	4a2a      	ldr	r2, [pc, #168]	@ (800936c <USB_SetTurnaroundTime+0x130>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d906      	bls.n	80092d4 <USB_SetTurnaroundTime+0x98>
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	4a29      	ldr	r2, [pc, #164]	@ (8009370 <USB_SetTurnaroundTime+0x134>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d802      	bhi.n	80092d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80092ce:	230a      	movs	r3, #10
 80092d0:	617b      	str	r3, [r7, #20]
 80092d2:	e02b      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4a26      	ldr	r2, [pc, #152]	@ (8009370 <USB_SetTurnaroundTime+0x134>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d906      	bls.n	80092ea <USB_SetTurnaroundTime+0xae>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4a25      	ldr	r2, [pc, #148]	@ (8009374 <USB_SetTurnaroundTime+0x138>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d202      	bcs.n	80092ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80092e4:	2309      	movs	r3, #9
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	e020      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	4a21      	ldr	r2, [pc, #132]	@ (8009374 <USB_SetTurnaroundTime+0x138>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d306      	bcc.n	8009300 <USB_SetTurnaroundTime+0xc4>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	4a20      	ldr	r2, [pc, #128]	@ (8009378 <USB_SetTurnaroundTime+0x13c>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d802      	bhi.n	8009300 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80092fa:	2308      	movs	r3, #8
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	e015      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	4a1d      	ldr	r2, [pc, #116]	@ (8009378 <USB_SetTurnaroundTime+0x13c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d906      	bls.n	8009316 <USB_SetTurnaroundTime+0xda>
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	4a1c      	ldr	r2, [pc, #112]	@ (800937c <USB_SetTurnaroundTime+0x140>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d202      	bcs.n	8009316 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009310:	2307      	movs	r3, #7
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	e00a      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009316:	2306      	movs	r3, #6
 8009318:	617b      	str	r3, [r7, #20]
 800931a:	e007      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d102      	bne.n	8009328 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009322:	2309      	movs	r3, #9
 8009324:	617b      	str	r3, [r7, #20]
 8009326:	e001      	b.n	800932c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009328:	2309      	movs	r3, #9
 800932a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	68da      	ldr	r2, [r3, #12]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	029b      	lsls	r3, r3, #10
 8009340:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009344:	431a      	orrs	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	371c      	adds	r7, #28
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	00d8acbf 	.word	0x00d8acbf
 800935c:	00e4e1c0 	.word	0x00e4e1c0
 8009360:	00f42400 	.word	0x00f42400
 8009364:	01067380 	.word	0x01067380
 8009368:	011a499f 	.word	0x011a499f
 800936c:	01312cff 	.word	0x01312cff
 8009370:	014ca43f 	.word	0x014ca43f
 8009374:	016e3600 	.word	0x016e3600
 8009378:	01a6ab1f 	.word	0x01a6ab1f
 800937c:	01e84800 	.word	0x01e84800

08009380 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f043 0201 	orr.w	r2, r3, #1
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f023 0201 	bic.w	r2, r3, #1
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d115      	bne.n	8009412 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093f2:	200a      	movs	r0, #10
 80093f4:	f7fd face 	bl	8006994 <HAL_Delay>
      ms += 10U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	330a      	adds	r3, #10
 80093fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 f93f 	bl	800a682 <USB_GetMode>
 8009404:	4603      	mov	r3, r0
 8009406:	2b01      	cmp	r3, #1
 8009408:	d01e      	beq.n	8009448 <USB_SetCurrentMode+0x84>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2bc7      	cmp	r3, #199	@ 0xc7
 800940e:	d9f0      	bls.n	80093f2 <USB_SetCurrentMode+0x2e>
 8009410:	e01a      	b.n	8009448 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d115      	bne.n	8009444 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009424:	200a      	movs	r0, #10
 8009426:	f7fd fab5 	bl	8006994 <HAL_Delay>
      ms += 10U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	330a      	adds	r3, #10
 800942e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 f926 	bl	800a682 <USB_GetMode>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <USB_SetCurrentMode+0x84>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009440:	d9f0      	bls.n	8009424 <USB_SetCurrentMode+0x60>
 8009442:	e001      	b.n	8009448 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e005      	b.n	8009454 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2bc8      	cmp	r3, #200	@ 0xc8
 800944c:	d101      	bne.n	8009452 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800945c:	b084      	sub	sp, #16
 800945e:	b580      	push	{r7, lr}
 8009460:	b086      	sub	sp, #24
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800946a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009476:	2300      	movs	r3, #0
 8009478:	613b      	str	r3, [r7, #16]
 800947a:	e009      	b.n	8009490 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	3340      	adds	r3, #64	@ 0x40
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	2200      	movs	r2, #0
 8009488:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	3301      	adds	r3, #1
 800948e:	613b      	str	r3, [r7, #16]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2b0e      	cmp	r3, #14
 8009494:	d9f2      	bls.n	800947c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009496:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800949a:	2b00      	cmp	r3, #0
 800949c:	d11c      	bne.n	80094d8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094ac:	f043 0302 	orr.w	r3, r3, #2
 80094b0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80094d6:	e00b      	b.n	80094f0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094dc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094f6:	461a      	mov	r2, r3
 80094f8:	2300      	movs	r3, #0
 80094fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009500:	2b01      	cmp	r3, #1
 8009502:	d10d      	bne.n	8009520 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009508:	2b00      	cmp	r3, #0
 800950a:	d104      	bne.n	8009516 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800950c:	2100      	movs	r1, #0
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f968 	bl	80097e4 <USB_SetDevSpeed>
 8009514:	e008      	b.n	8009528 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009516:	2101      	movs	r1, #1
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f963 	bl	80097e4 <USB_SetDevSpeed>
 800951e:	e003      	b.n	8009528 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009520:	2103      	movs	r1, #3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f95e 	bl	80097e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009528:	2110      	movs	r1, #16
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f8fa 	bl	8009724 <USB_FlushTxFifo>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f924 	bl	8009788 <USB_FlushRxFifo>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009550:	461a      	mov	r2, r3
 8009552:	2300      	movs	r3, #0
 8009554:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800955c:	461a      	mov	r2, r3
 800955e:	2300      	movs	r3, #0
 8009560:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009568:	461a      	mov	r2, r3
 800956a:	2300      	movs	r3, #0
 800956c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800956e:	2300      	movs	r3, #0
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	e043      	b.n	80095fc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800958a:	d118      	bne.n	80095be <USB_DevInit+0x162>
    {
      if (i == 0U)
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800959e:	461a      	mov	r2, r3
 80095a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	e013      	b.n	80095d0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095b4:	461a      	mov	r2, r3
 80095b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	e008      	b.n	80095d0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ca:	461a      	mov	r2, r3
 80095cc:	2300      	movs	r3, #0
 80095ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095dc:	461a      	mov	r2, r3
 80095de:	2300      	movs	r3, #0
 80095e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ee:	461a      	mov	r2, r3
 80095f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80095f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	3301      	adds	r3, #1
 80095fa:	613b      	str	r3, [r7, #16]
 80095fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009600:	461a      	mov	r2, r3
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	4293      	cmp	r3, r2
 8009606:	d3b5      	bcc.n	8009574 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009608:	2300      	movs	r3, #0
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	e043      	b.n	8009696 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009624:	d118      	bne.n	8009658 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009638:	461a      	mov	r2, r3
 800963a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800963e:	6013      	str	r3, [r2, #0]
 8009640:	e013      	b.n	800966a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4413      	add	r3, r2
 800964a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800964e:	461a      	mov	r2, r3
 8009650:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	e008      	b.n	800966a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009664:	461a      	mov	r2, r3
 8009666:	2300      	movs	r3, #0
 8009668:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009676:	461a      	mov	r2, r3
 8009678:	2300      	movs	r3, #0
 800967a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009688:	461a      	mov	r2, r3
 800968a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800968e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	3301      	adds	r3, #1
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800969a:	461a      	mov	r2, r3
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	4293      	cmp	r3, r2
 80096a0:	d3b5      	bcc.n	800960e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80096c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80096c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d105      	bne.n	80096d8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f043 0210 	orr.w	r2, r3, #16
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699a      	ldr	r2, [r3, #24]
 80096dc:	4b10      	ldr	r3, [pc, #64]	@ (8009720 <USB_DevInit+0x2c4>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	f043 0208 	orr.w	r2, r3, #8
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d107      	bne.n	8009710 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009708:	f043 0304 	orr.w	r3, r3, #4
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800971c:	b004      	add	sp, #16
 800971e:	4770      	bx	lr
 8009720:	803c3800 	.word	0x803c3800

08009724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3301      	adds	r3, #1
 8009736:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800973e:	d901      	bls.n	8009744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e01b      	b.n	800977c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	daf2      	bge.n	8009732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	019b      	lsls	r3, r3, #6
 8009754:	f043 0220 	orr.w	r2, r3, #32
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009768:	d901      	bls.n	800976e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e006      	b.n	800977c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	f003 0320 	and.w	r3, r3, #32
 8009776:	2b20      	cmp	r3, #32
 8009778:	d0f0      	beq.n	800975c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3301      	adds	r3, #1
 8009798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097a0:	d901      	bls.n	80097a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e018      	b.n	80097d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	daf2      	bge.n	8009794 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2210      	movs	r2, #16
 80097b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3301      	adds	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097c4:	d901      	bls.n	80097ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e006      	b.n	80097d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	f003 0310 	and.w	r3, r3, #16
 80097d2:	2b10      	cmp	r3, #16
 80097d4:	d0f0      	beq.n	80097b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	78fb      	ldrb	r3, [r7, #3]
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009804:	4313      	orrs	r3, r2
 8009806:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009816:	b480      	push	{r7}
 8009818:	b087      	sub	sp, #28
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f003 0306 	and.w	r3, r3, #6
 800982e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d102      	bne.n	800983c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009836:	2300      	movs	r3, #0
 8009838:	75fb      	strb	r3, [r7, #23]
 800983a:	e00a      	b.n	8009852 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2b02      	cmp	r3, #2
 8009840:	d002      	beq.n	8009848 <USB_GetDevSpeed+0x32>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2b06      	cmp	r3, #6
 8009846:	d102      	bne.n	800984e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009848:	2302      	movs	r3, #2
 800984a:	75fb      	strb	r3, [r7, #23]
 800984c:	e001      	b.n	8009852 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800984e:	230f      	movs	r3, #15
 8009850:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009852:	7dfb      	ldrb	r3, [r7, #23]
}
 8009854:	4618      	mov	r0, r3
 8009856:	371c      	adds	r7, #28
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	785b      	ldrb	r3, [r3, #1]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d13a      	bne.n	80098f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009882:	69da      	ldr	r2, [r3, #28]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	f003 030f 	and.w	r3, r3, #15
 800988c:	2101      	movs	r1, #1
 800988e:	fa01 f303 	lsl.w	r3, r1, r3
 8009892:	b29b      	uxth	r3, r3
 8009894:	68f9      	ldr	r1, [r7, #12]
 8009896:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800989a:	4313      	orrs	r3, r2
 800989c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d155      	bne.n	8009960 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	791b      	ldrb	r3, [r3, #4]
 80098ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	059b      	lsls	r3, r3, #22
 80098d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098d8:	4313      	orrs	r3, r2
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	0151      	lsls	r1, r2, #5
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	440a      	add	r2, r1
 80098e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	e036      	b.n	8009960 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f8:	69da      	ldr	r2, [r3, #28]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 030f 	and.w	r3, r3, #15
 8009902:	2101      	movs	r1, #1
 8009904:	fa01 f303 	lsl.w	r3, r1, r3
 8009908:	041b      	lsls	r3, r3, #16
 800990a:	68f9      	ldr	r1, [r7, #12]
 800990c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009910:	4313      	orrs	r3, r2
 8009912:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d11a      	bne.n	8009960 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	791b      	ldrb	r3, [r3, #4]
 8009944:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009946:	430b      	orrs	r3, r1
 8009948:	4313      	orrs	r3, r2
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	0151      	lsls	r1, r2, #5
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	440a      	add	r2, r1
 8009952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800995a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800995e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
	...

08009970 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	785b      	ldrb	r3, [r3, #1]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d161      	bne.n	8009a50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800999e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099a2:	d11f      	bne.n	80099e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	0151      	lsls	r1, r2, #5
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	440a      	add	r2, r1
 80099da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	f003 030f 	and.w	r3, r3, #15
 80099f4:	2101      	movs	r1, #1
 80099f6:	fa01 f303 	lsl.w	r3, r1, r3
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	43db      	mvns	r3, r3
 80099fe:	68f9      	ldr	r1, [r7, #12]
 8009a00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a04:	4013      	ands	r3, r2
 8009a06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a0e:	69da      	ldr	r2, [r3, #28]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	f003 030f 	and.w	r3, r3, #15
 8009a18:	2101      	movs	r1, #1
 8009a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	43db      	mvns	r3, r3
 8009a22:	68f9      	ldr	r1, [r7, #12]
 8009a24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a28:	4013      	ands	r3, r2
 8009a2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	015a      	lsls	r2, r3, #5
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	4413      	add	r3, r2
 8009a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	0159      	lsls	r1, r3, #5
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	440b      	add	r3, r1
 8009a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a46:	4619      	mov	r1, r3
 8009a48:	4b35      	ldr	r3, [pc, #212]	@ (8009b20 <USB_DeactivateEndpoint+0x1b0>)
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	600b      	str	r3, [r1, #0]
 8009a4e:	e060      	b.n	8009b12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a66:	d11f      	bne.n	8009aa8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	0151      	lsls	r1, r2, #5
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	440a      	add	r2, r1
 8009a7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	0151      	lsls	r1, r2, #5
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	440a      	add	r2, r1
 8009a9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009aa2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	f003 030f 	and.w	r3, r3, #15
 8009ab8:	2101      	movs	r1, #1
 8009aba:	fa01 f303 	lsl.w	r3, r1, r3
 8009abe:	041b      	lsls	r3, r3, #16
 8009ac0:	43db      	mvns	r3, r3
 8009ac2:	68f9      	ldr	r1, [r7, #12]
 8009ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ac8:	4013      	ands	r3, r2
 8009aca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ad2:	69da      	ldr	r2, [r3, #28]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	f003 030f 	and.w	r3, r3, #15
 8009adc:	2101      	movs	r1, #1
 8009ade:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae2:	041b      	lsls	r3, r3, #16
 8009ae4:	43db      	mvns	r3, r3
 8009ae6:	68f9      	ldr	r1, [r7, #12]
 8009ae8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009aec:	4013      	ands	r3, r2
 8009aee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	0159      	lsls	r1, r3, #5
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	440b      	add	r3, r1
 8009b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	4b05      	ldr	r3, [pc, #20]	@ (8009b24 <USB_DeactivateEndpoint+0x1b4>)
 8009b0e:	4013      	ands	r3, r2
 8009b10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	ec337800 	.word	0xec337800
 8009b24:	eff37800 	.word	0xeff37800

08009b28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08a      	sub	sp, #40	@ 0x28
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	4613      	mov	r3, r2
 8009b34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	f040 817f 	bne.w	8009e48 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d132      	bne.n	8009bb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	0151      	lsls	r1, r2, #5
 8009b64:	69fa      	ldr	r2, [r7, #28]
 8009b66:	440a      	add	r2, r1
 8009b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b6c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009b70:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	015a      	lsls	r2, r3, #5
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	69ba      	ldr	r2, [r7, #24]
 8009b86:	0151      	lsls	r1, r2, #5
 8009b88:	69fa      	ldr	r2, [r7, #28]
 8009b8a:	440a      	add	r2, r1
 8009b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	69ba      	ldr	r2, [r7, #24]
 8009ba6:	0151      	lsls	r1, r2, #5
 8009ba8:	69fa      	ldr	r2, [r7, #28]
 8009baa:	440a      	add	r2, r1
 8009bac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bb0:	0cdb      	lsrs	r3, r3, #19
 8009bb2:	04db      	lsls	r3, r3, #19
 8009bb4:	6113      	str	r3, [r2, #16]
 8009bb6:	e097      	b.n	8009ce8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bd2:	0cdb      	lsrs	r3, r3, #19
 8009bd4:	04db      	lsls	r3, r3, #19
 8009bd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	0151      	lsls	r1, r2, #5
 8009bea:	69fa      	ldr	r2, [r7, #28]
 8009bec:	440a      	add	r2, r1
 8009bee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bf2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009bf6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009bfa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d11a      	bne.n	8009c38 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	691a      	ldr	r2, [r3, #16]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d903      	bls.n	8009c16 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	0151      	lsls	r1, r2, #5
 8009c28:	69fa      	ldr	r2, [r7, #28]
 8009c2a:	440a      	add	r2, r1
 8009c2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c34:	6113      	str	r3, [r2, #16]
 8009c36:	e044      	b.n	8009cc2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	4413      	add	r3, r2
 8009c42:	1e5a      	subs	r2, r3, #1
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5a:	691a      	ldr	r2, [r3, #16]
 8009c5c:	8afb      	ldrh	r3, [r7, #22]
 8009c5e:	04d9      	lsls	r1, r3, #19
 8009c60:	4ba4      	ldr	r3, [pc, #656]	@ (8009ef4 <USB_EPStartXfer+0x3cc>)
 8009c62:	400b      	ands	r3, r1
 8009c64:	69b9      	ldr	r1, [r7, #24]
 8009c66:	0148      	lsls	r0, r1, #5
 8009c68:	69f9      	ldr	r1, [r7, #28]
 8009c6a:	4401      	add	r1, r0
 8009c6c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c70:	4313      	orrs	r3, r2
 8009c72:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	791b      	ldrb	r3, [r3, #4]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d122      	bne.n	8009cc2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	69ba      	ldr	r2, [r7, #24]
 8009c8c:	0151      	lsls	r1, r2, #5
 8009c8e:	69fa      	ldr	r2, [r7, #28]
 8009c90:	440a      	add	r2, r1
 8009c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c96:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009c9a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	015a      	lsls	r2, r3, #5
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca8:	691a      	ldr	r2, [r3, #16]
 8009caa:	8afb      	ldrh	r3, [r7, #22]
 8009cac:	075b      	lsls	r3, r3, #29
 8009cae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009cb2:	69b9      	ldr	r1, [r7, #24]
 8009cb4:	0148      	lsls	r0, r1, #5
 8009cb6:	69f9      	ldr	r1, [r7, #28]
 8009cb8:	4401      	add	r1, r0
 8009cba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cce:	691a      	ldr	r2, [r3, #16]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd8:	69b9      	ldr	r1, [r7, #24]
 8009cda:	0148      	lsls	r0, r1, #5
 8009cdc:	69f9      	ldr	r1, [r7, #28]
 8009cde:	4401      	add	r1, r0
 8009ce0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d14b      	bne.n	8009d86 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d02:	461a      	mov	r2, r3
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	791b      	ldrb	r3, [r3, #4]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d128      	bne.n	8009d64 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d110      	bne.n	8009d44 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	0151      	lsls	r1, r2, #5
 8009d34:	69fa      	ldr	r2, [r7, #28]
 8009d36:	440a      	add	r2, r1
 8009d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	e00f      	b.n	8009d64 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	0151      	lsls	r1, r2, #5
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	440a      	add	r2, r1
 8009d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d62:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	e166      	b.n	800a054 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	0151      	lsls	r1, r2, #5
 8009d98:	69fa      	ldr	r2, [r7, #28]
 8009d9a:	440a      	add	r2, r1
 8009d9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009da0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009da4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	791b      	ldrb	r3, [r3, #4]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d015      	beq.n	8009dda <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 814e 	beq.w	800a054 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	f003 030f 	and.w	r3, r3, #15
 8009dc8:	2101      	movs	r1, #1
 8009dca:	fa01 f303 	lsl.w	r3, r1, r3
 8009dce:	69f9      	ldr	r1, [r7, #28]
 8009dd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	634b      	str	r3, [r1, #52]	@ 0x34
 8009dd8:	e13c      	b.n	800a054 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d110      	bne.n	8009e0c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	015a      	lsls	r2, r3, #5
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	69ba      	ldr	r2, [r7, #24]
 8009dfa:	0151      	lsls	r1, r2, #5
 8009dfc:	69fa      	ldr	r2, [r7, #28]
 8009dfe:	440a      	add	r2, r1
 8009e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	e00f      	b.n	8009e2c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	0151      	lsls	r1, r2, #5
 8009e1e:	69fa      	ldr	r2, [r7, #28]
 8009e20:	440a      	add	r2, r1
 8009e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e2a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	68d9      	ldr	r1, [r3, #12]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	781a      	ldrb	r2, [r3, #0]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	b298      	uxth	r0, r3
 8009e3a:	79fb      	ldrb	r3, [r7, #7]
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	4603      	mov	r3, r0
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f000 f9b9 	bl	800a1b8 <USB_WritePacket>
 8009e46:	e105      	b.n	800a054 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	0151      	lsls	r1, r2, #5
 8009e5a:	69fa      	ldr	r2, [r7, #28]
 8009e5c:	440a      	add	r2, r1
 8009e5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e62:	0cdb      	lsrs	r3, r3, #19
 8009e64:	04db      	lsls	r3, r3, #19
 8009e66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	69ba      	ldr	r2, [r7, #24]
 8009e78:	0151      	lsls	r1, r2, #5
 8009e7a:	69fa      	ldr	r2, [r7, #28]
 8009e7c:	440a      	add	r2, r1
 8009e7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e82:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e86:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e8a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d132      	bne.n	8009ef8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	689a      	ldr	r2, [r3, #8]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	689a      	ldr	r2, [r3, #8]
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb6:	691a      	ldr	r2, [r3, #16]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ec0:	69b9      	ldr	r1, [r7, #24]
 8009ec2:	0148      	lsls	r0, r1, #5
 8009ec4:	69f9      	ldr	r1, [r7, #28]
 8009ec6:	4401      	add	r1, r0
 8009ec8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	69ba      	ldr	r2, [r7, #24]
 8009ee0:	0151      	lsls	r1, r2, #5
 8009ee2:	69fa      	ldr	r2, [r7, #28]
 8009ee4:	440a      	add	r2, r1
 8009ee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009eee:	6113      	str	r3, [r2, #16]
 8009ef0:	e062      	b.n	8009fb8 <USB_EPStartXfer+0x490>
 8009ef2:	bf00      	nop
 8009ef4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d123      	bne.n	8009f48 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f0c:	691a      	ldr	r2, [r3, #16]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f16:	69b9      	ldr	r1, [r7, #24]
 8009f18:	0148      	lsls	r0, r1, #5
 8009f1a:	69f9      	ldr	r1, [r7, #28]
 8009f1c:	4401      	add	r1, r0
 8009f1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f22:	4313      	orrs	r3, r2
 8009f24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	69ba      	ldr	r2, [r7, #24]
 8009f36:	0151      	lsls	r1, r2, #5
 8009f38:	69fa      	ldr	r2, [r7, #28]
 8009f3a:	440a      	add	r2, r1
 8009f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f44:	6113      	str	r3, [r2, #16]
 8009f46:	e037      	b.n	8009fb8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	691a      	ldr	r2, [r3, #16]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	4413      	add	r3, r2
 8009f52:	1e5a      	subs	r2, r3, #1
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f5c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	8afa      	ldrh	r2, [r7, #22]
 8009f64:	fb03 f202 	mul.w	r2, r3, r2
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f78:	691a      	ldr	r2, [r3, #16]
 8009f7a:	8afb      	ldrh	r3, [r7, #22]
 8009f7c:	04d9      	lsls	r1, r3, #19
 8009f7e:	4b38      	ldr	r3, [pc, #224]	@ (800a060 <USB_EPStartXfer+0x538>)
 8009f80:	400b      	ands	r3, r1
 8009f82:	69b9      	ldr	r1, [r7, #24]
 8009f84:	0148      	lsls	r0, r1, #5
 8009f86:	69f9      	ldr	r1, [r7, #28]
 8009f88:	4401      	add	r1, r0
 8009f8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f9e:	691a      	ldr	r2, [r3, #16]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fa8:	69b9      	ldr	r1, [r7, #24]
 8009faa:	0148      	lsls	r0, r1, #5
 8009fac:	69f9      	ldr	r1, [r7, #28]
 8009fae:	4401      	add	r1, r0
 8009fb0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009fb8:	79fb      	ldrb	r3, [r7, #7]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d10d      	bne.n	8009fda <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d009      	beq.n	8009fda <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	68d9      	ldr	r1, [r3, #12]
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd6:	460a      	mov	r2, r1
 8009fd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	791b      	ldrb	r3, [r3, #4]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d128      	bne.n	800a034 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d110      	bne.n	800a014 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	015a      	lsls	r2, r3, #5
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	0151      	lsls	r1, r2, #5
 800a004:	69fa      	ldr	r2, [r7, #28]
 800a006:	440a      	add	r2, r1
 800a008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a00c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a010:	6013      	str	r3, [r2, #0]
 800a012:	e00f      	b.n	800a034 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	015a      	lsls	r2, r3, #5
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	4413      	add	r3, r2
 800a01c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	0151      	lsls	r1, r2, #5
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	440a      	add	r2, r1
 800a02a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a02e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a032:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	0151      	lsls	r1, r2, #5
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	440a      	add	r2, r1
 800a04a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a04e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a052:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3720      	adds	r7, #32
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	1ff80000 	.word	0x1ff80000

0800a064 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	785b      	ldrb	r3, [r3, #1]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d14a      	bne.n	800a118 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a09a:	f040 8086 	bne.w	800a1aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	015a      	lsls	r2, r3, #5
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	7812      	ldrb	r2, [r2, #0]
 800a0b2:	0151      	lsls	r1, r2, #5
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	440a      	add	r2, r1
 800a0b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	7812      	ldrb	r2, [r2, #0]
 800a0d6:	0151      	lsls	r1, r2, #5
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	440a      	add	r2, r1
 800a0dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d902      	bls.n	800a0fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	75fb      	strb	r3, [r7, #23]
          break;
 800a0fa:	e056      	b.n	800a1aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	4413      	add	r3, r2
 800a106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a110:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a114:	d0e7      	beq.n	800a0e6 <USB_EPStopXfer+0x82>
 800a116:	e048      	b.n	800a1aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	015a      	lsls	r2, r3, #5
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	4413      	add	r3, r2
 800a122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a12c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a130:	d13b      	bne.n	800a1aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	7812      	ldrb	r2, [r2, #0]
 800a146:	0151      	lsls	r1, r2, #5
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	440a      	add	r2, r1
 800a14c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a150:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a154:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	7812      	ldrb	r2, [r2, #0]
 800a16a:	0151      	lsls	r1, r2, #5
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	440a      	add	r2, r1
 800a170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a174:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a178:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3301      	adds	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a186:	4293      	cmp	r3, r2
 800a188:	d902      	bls.n	800a190 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	75fb      	strb	r3, [r7, #23]
          break;
 800a18e:	e00c      	b.n	800a1aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1a8:	d0e7      	beq.n	800a17a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a1aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	371c      	adds	r7, #28
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b089      	sub	sp, #36	@ 0x24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	71fb      	strb	r3, [r7, #7]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d123      	bne.n	800a226 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1de:	88bb      	ldrh	r3, [r7, #4]
 800a1e0:	3303      	adds	r3, #3
 800a1e2:	089b      	lsrs	r3, r3, #2
 800a1e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61bb      	str	r3, [r7, #24]
 800a1ea:	e018      	b.n	800a21e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	031a      	lsls	r2, r3, #12
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	3301      	adds	r3, #1
 800a204:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	3301      	adds	r3, #1
 800a20a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	3301      	adds	r3, #1
 800a210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	3301      	adds	r3, #1
 800a216:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	3301      	adds	r3, #1
 800a21c:	61bb      	str	r3, [r7, #24]
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	429a      	cmp	r2, r3
 800a224:	d3e2      	bcc.n	800a1ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3724      	adds	r7, #36	@ 0x24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a234:	b480      	push	{r7}
 800a236:	b08b      	sub	sp, #44	@ 0x2c
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	4613      	mov	r3, r2
 800a240:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a24a:	88fb      	ldrh	r3, [r7, #6]
 800a24c:	089b      	lsrs	r3, r3, #2
 800a24e:	b29b      	uxth	r3, r3
 800a250:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a252:	88fb      	ldrh	r3, [r7, #6]
 800a254:	f003 0303 	and.w	r3, r3, #3
 800a258:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a25a:	2300      	movs	r3, #0
 800a25c:	623b      	str	r3, [r7, #32]
 800a25e:	e014      	b.n	800a28a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26e:	3301      	adds	r3, #1
 800a270:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a274:	3301      	adds	r3, #1
 800a276:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27a:	3301      	adds	r3, #1
 800a27c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a280:	3301      	adds	r3, #1
 800a282:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	3301      	adds	r3, #1
 800a288:	623b      	str	r3, [r7, #32]
 800a28a:	6a3a      	ldr	r2, [r7, #32]
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d3e6      	bcc.n	800a260 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a292:	8bfb      	ldrh	r3, [r7, #30]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d01e      	beq.n	800a2d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f107 0310 	add.w	r3, r7, #16
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	701a      	strb	r2, [r3, #0]
      i++;
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a2ca:	8bfb      	ldrh	r3, [r7, #30]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2d0:	8bfb      	ldrh	r3, [r7, #30]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1ea      	bne.n	800a2ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	372c      	adds	r7, #44	@ 0x2c
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	785b      	ldrb	r3, [r3, #1]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d12c      	bne.n	800a35a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	015a      	lsls	r2, r3, #5
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4413      	add	r3, r2
 800a308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	db12      	blt.n	800a338 <USB_EPSetStall+0x54>
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00f      	beq.n	800a338 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	0151      	lsls	r1, r2, #5
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	440a      	add	r2, r1
 800a32e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a332:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a336:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68ba      	ldr	r2, [r7, #8]
 800a348:	0151      	lsls	r1, r2, #5
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	440a      	add	r2, r1
 800a34e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a352:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	e02b      	b.n	800a3b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4413      	add	r3, r2
 800a362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	db12      	blt.n	800a392 <USB_EPSetStall+0xae>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00f      	beq.n	800a392 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	0151      	lsls	r1, r2, #5
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	440a      	add	r2, r1
 800a388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a38c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a390:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	0151      	lsls	r1, r2, #5
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	440a      	add	r2, r1
 800a3a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a3b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	785b      	ldrb	r3, [r3, #1]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d128      	bne.n	800a42e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	0151      	lsls	r1, r2, #5
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	440a      	add	r2, r1
 800a3f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a3fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	791b      	ldrb	r3, [r3, #4]
 800a400:	2b03      	cmp	r3, #3
 800a402:	d003      	beq.n	800a40c <USB_EPClearStall+0x4c>
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	791b      	ldrb	r3, [r3, #4]
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d138      	bne.n	800a47e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	0151      	lsls	r1, r2, #5
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	440a      	add	r2, r1
 800a422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	e027      	b.n	800a47e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	015a      	lsls	r2, r3, #5
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4413      	add	r3, r2
 800a436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	0151      	lsls	r1, r2, #5
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	440a      	add	r2, r1
 800a444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a448:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a44c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	791b      	ldrb	r3, [r3, #4]
 800a452:	2b03      	cmp	r3, #3
 800a454:	d003      	beq.n	800a45e <USB_EPClearStall+0x9e>
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	791b      	ldrb	r3, [r3, #4]
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d10f      	bne.n	800a47e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	4413      	add	r3, r2
 800a466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	0151      	lsls	r1, r2, #5
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	440a      	add	r2, r1
 800a474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a47c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3714      	adds	r7, #20
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4aa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a4ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a4c0:	68f9      	ldr	r1, [r7, #12]
 800a4c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4f2:	f023 0303 	bic.w	r3, r3, #3
 800a4f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a506:	f023 0302 	bic.w	r3, r3, #2
 800a50a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b085      	sub	sp, #20
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a534:	f023 0303 	bic.w	r3, r3, #3
 800a538:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a548:	f043 0302 	orr.w	r3, r3, #2
 800a54c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	4013      	ands	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a574:	68fb      	ldr	r3, [r7, #12]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a582:	b480      	push	{r7}
 800a584:	b085      	sub	sp, #20
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a59e:	69db      	ldr	r3, [r3, #28]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	0c1b      	lsrs	r3, r3, #16
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b085      	sub	sp, #20
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	b29b      	uxth	r3, r3
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b085      	sub	sp, #20
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	015a      	lsls	r2, r3, #5
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	4413      	add	r3, r2
 800a602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	4013      	ands	r3, r2
 800a616:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a618:	68bb      	ldr	r3, [r7, #8]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a626:	b480      	push	{r7}
 800a628:	b087      	sub	sp, #28
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	460b      	mov	r3, r1
 800a630:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a648:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a64a:	78fb      	ldrb	r3, [r7, #3]
 800a64c:	f003 030f 	and.w	r3, r3, #15
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	fa22 f303 	lsr.w	r3, r2, r3
 800a656:	01db      	lsls	r3, r3, #7
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	4413      	add	r3, r2
 800a668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	4013      	ands	r3, r2
 800a672:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a674:	68bb      	ldr	r3, [r7, #8]
}
 800a676:	4618      	mov	r0, r3
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	f003 0301 	and.w	r3, r3, #1
}
 800a692:	4618      	mov	r0, r3
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b085      	sub	sp, #20
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a6bc:	f023 0307 	bic.w	r3, r3, #7
 800a6c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	333c      	adds	r3, #60	@ 0x3c
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	4a26      	ldr	r2, [pc, #152]	@ (800a79c <USB_EP0_OutStart+0xb8>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d90a      	bls.n	800a71e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a718:	d101      	bne.n	800a71e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	e037      	b.n	800a78e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a724:	461a      	mov	r2, r3
 800a726:	2300      	movs	r3, #0
 800a728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a738:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a73c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a74c:	f043 0318 	orr.w	r3, r3, #24
 800a750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a760:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a764:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a766:	7afb      	ldrb	r3, [r7, #11]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d10f      	bne.n	800a78c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a772:	461a      	mov	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a786:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a78a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	371c      	adds	r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	4f54300a 	.word	0x4f54300a

0800a7a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7b8:	d901      	bls.n	800a7be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e01b      	b.n	800a7f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	daf2      	bge.n	800a7ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	f043 0201 	orr.w	r2, r3, #1
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7e2:	d901      	bls.n	800a7e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	e006      	b.n	800a7f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d0f0      	beq.n	800a7d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
	...

0800a804 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a810:	2010      	movs	r0, #16
 800a812:	f002 f921 	bl	800ca58 <USBD_static_malloc>
 800a816:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d109      	bne.n	800a832 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	32b0      	adds	r2, #176	@ 0xb0
 800a828:	2100      	movs	r1, #0
 800a82a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a82e:	2302      	movs	r3, #2
 800a830:	e048      	b.n	800a8c4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	32b0      	adds	r2, #176	@ 0xb0
 800a83c:	68f9      	ldr	r1, [r7, #12]
 800a83e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	32b0      	adds	r2, #176	@ 0xb0
 800a84c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	7c1b      	ldrb	r3, [r3, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10d      	bne.n	800a87a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800a85e:	4b1b      	ldr	r3, [pc, #108]	@ (800a8cc <USBD_HID_Init+0xc8>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	f003 020f 	and.w	r2, r3, #15
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	440b      	add	r3, r1
 800a872:	3326      	adds	r3, #38	@ 0x26
 800a874:	2207      	movs	r2, #7
 800a876:	801a      	strh	r2, [r3, #0]
 800a878:	e00c      	b.n	800a894 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800a87a:	4b14      	ldr	r3, [pc, #80]	@ (800a8cc <USBD_HID_Init+0xc8>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	f003 020f 	and.w	r2, r3, #15
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	4613      	mov	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	440b      	add	r3, r1
 800a88e:	3326      	adds	r3, #38	@ 0x26
 800a890:	220a      	movs	r2, #10
 800a892:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a894:	4b0d      	ldr	r3, [pc, #52]	@ (800a8cc <USBD_HID_Init+0xc8>)
 800a896:	7819      	ldrb	r1, [r3, #0]
 800a898:	2304      	movs	r3, #4
 800a89a:	2203      	movs	r2, #3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 ffca 	bl	800c836 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800a8a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a8cc <USBD_HID_Init+0xc8>)
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	f003 020f 	and.w	r2, r3, #15
 800a8aa:	6879      	ldr	r1, [r7, #4]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	440b      	add	r3, r1
 800a8b6:	3324      	adds	r3, #36	@ 0x24
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	200000bf 	.word	0x200000bf

0800a8d0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800a8dc:	4b1f      	ldr	r3, [pc, #124]	@ (800a95c <USBD_HID_DeInit+0x8c>)
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f001 ffcd 	bl	800c882 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800a8e8:	4b1c      	ldr	r3, [pc, #112]	@ (800a95c <USBD_HID_DeInit+0x8c>)
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	f003 020f 	and.w	r2, r3, #15
 800a8f0:	6879      	ldr	r1, [r7, #4]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	440b      	add	r3, r1
 800a8fc:	3324      	adds	r3, #36	@ 0x24
 800a8fe:	2200      	movs	r2, #0
 800a900:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800a902:	4b16      	ldr	r3, [pc, #88]	@ (800a95c <USBD_HID_DeInit+0x8c>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	f003 020f 	and.w	r2, r3, #15
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	3326      	adds	r3, #38	@ 0x26
 800a918:	2200      	movs	r2, #0
 800a91a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	32b0      	adds	r2, #176	@ 0xb0
 800a926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d011      	beq.n	800a952 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	32b0      	adds	r2, #176	@ 0xb0
 800a938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f002 f899 	bl	800ca74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	32b0      	adds	r2, #176	@ 0xb0
 800a94c:	2100      	movs	r1, #0
 800a94e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	200000bf 	.word	0x200000bf

0800a960 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	32b0      	adds	r2, #176	@ 0xb0
 800a974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a978:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a988:	2303      	movs	r3, #3
 800a98a:	e0e8      	b.n	800ab5e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a994:	2b00      	cmp	r3, #0
 800a996:	d046      	beq.n	800aa26 <USBD_HID_Setup+0xc6>
 800a998:	2b20      	cmp	r3, #32
 800a99a:	f040 80d8 	bne.w	800ab4e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	785b      	ldrb	r3, [r3, #1]
 800a9a2:	3b02      	subs	r3, #2
 800a9a4:	2b09      	cmp	r3, #9
 800a9a6:	d836      	bhi.n	800aa16 <USBD_HID_Setup+0xb6>
 800a9a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b0 <USBD_HID_Setup+0x50>)
 800a9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ae:	bf00      	nop
 800a9b0:	0800aa07 	.word	0x0800aa07
 800a9b4:	0800a9e7 	.word	0x0800a9e7
 800a9b8:	0800aa17 	.word	0x0800aa17
 800a9bc:	0800aa17 	.word	0x0800aa17
 800a9c0:	0800aa17 	.word	0x0800aa17
 800a9c4:	0800aa17 	.word	0x0800aa17
 800a9c8:	0800aa17 	.word	0x0800aa17
 800a9cc:	0800aa17 	.word	0x0800aa17
 800a9d0:	0800a9f5 	.word	0x0800a9f5
 800a9d4:	0800a9d9 	.word	0x0800a9d9
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	885b      	ldrh	r3, [r3, #2]
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	461a      	mov	r2, r3
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	601a      	str	r2, [r3, #0]
          break;
 800a9e4:	e01e      	b.n	800aa24 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 fbe5 	bl	800c1bc <USBD_CtlSendData>
          break;
 800a9f2:	e017      	b.n	800aa24 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	885b      	ldrh	r3, [r3, #2]
 800a9f8:	0a1b      	lsrs	r3, r3, #8
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	461a      	mov	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	605a      	str	r2, [r3, #4]
          break;
 800aa04:	e00e      	b.n	800aa24 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 fbd4 	bl	800c1bc <USBD_CtlSendData>
          break;
 800aa14:	e006      	b.n	800aa24 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 fb52 	bl	800c0c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	75fb      	strb	r3, [r7, #23]
          break;
 800aa22:	bf00      	nop
      }
      break;
 800aa24:	e09a      	b.n	800ab5c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	2b0b      	cmp	r3, #11
 800aa2c:	f200 8086 	bhi.w	800ab3c <USBD_HID_Setup+0x1dc>
 800aa30:	a201      	add	r2, pc, #4	@ (adr r2, 800aa38 <USBD_HID_Setup+0xd8>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aa69 	.word	0x0800aa69
 800aa3c:	0800ab4b 	.word	0x0800ab4b
 800aa40:	0800ab3d 	.word	0x0800ab3d
 800aa44:	0800ab3d 	.word	0x0800ab3d
 800aa48:	0800ab3d 	.word	0x0800ab3d
 800aa4c:	0800ab3d 	.word	0x0800ab3d
 800aa50:	0800aa93 	.word	0x0800aa93
 800aa54:	0800ab3d 	.word	0x0800ab3d
 800aa58:	0800ab3d 	.word	0x0800ab3d
 800aa5c:	0800ab3d 	.word	0x0800ab3d
 800aa60:	0800aaeb 	.word	0x0800aaeb
 800aa64:	0800ab15 	.word	0x0800ab15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b03      	cmp	r3, #3
 800aa72:	d107      	bne.n	800aa84 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa74:	f107 030a 	add.w	r3, r7, #10
 800aa78:	2202      	movs	r2, #2
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f001 fb9d 	bl	800c1bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa82:	e063      	b.n	800ab4c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f001 fb1b 	bl	800c0c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	75fb      	strb	r3, [r7, #23]
          break;
 800aa90:	e05c      	b.n	800ab4c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	885b      	ldrh	r3, [r3, #2]
 800aa96:	0a1b      	lsrs	r3, r3, #8
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	2b22      	cmp	r3, #34	@ 0x22
 800aa9c:	d108      	bne.n	800aab0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	88db      	ldrh	r3, [r3, #6]
 800aaa2:	2b3f      	cmp	r3, #63	@ 0x3f
 800aaa4:	bf28      	it	cs
 800aaa6:	233f      	movcs	r3, #63	@ 0x3f
 800aaa8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800aaaa:	4b2f      	ldr	r3, [pc, #188]	@ (800ab68 <USBD_HID_Setup+0x208>)
 800aaac:	613b      	str	r3, [r7, #16]
 800aaae:	e015      	b.n	800aadc <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	885b      	ldrh	r3, [r3, #2]
 800aab4:	0a1b      	lsrs	r3, r3, #8
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	2b21      	cmp	r3, #33	@ 0x21
 800aaba:	d108      	bne.n	800aace <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800aabc:	4b2b      	ldr	r3, [pc, #172]	@ (800ab6c <USBD_HID_Setup+0x20c>)
 800aabe:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	88db      	ldrh	r3, [r3, #6]
 800aac4:	2b09      	cmp	r3, #9
 800aac6:	bf28      	it	cs
 800aac8:	2309      	movcs	r3, #9
 800aaca:	82bb      	strh	r3, [r7, #20]
 800aacc:	e006      	b.n	800aadc <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f001 faf6 	bl	800c0c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aad6:	2303      	movs	r3, #3
 800aad8:	75fb      	strb	r3, [r7, #23]
            break;
 800aada:	e037      	b.n	800ab4c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800aadc:	8abb      	ldrh	r3, [r7, #20]
 800aade:	461a      	mov	r2, r3
 800aae0:	6939      	ldr	r1, [r7, #16]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 fb6a 	bl	800c1bc <USBD_CtlSendData>
          break;
 800aae8:	e030      	b.n	800ab4c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	d107      	bne.n	800ab06 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3308      	adds	r3, #8
 800aafa:	2201      	movs	r2, #1
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f001 fb5c 	bl	800c1bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab04:	e022      	b.n	800ab4c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f001 fada 	bl	800c0c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	75fb      	strb	r3, [r7, #23]
          break;
 800ab12:	e01b      	b.n	800ab4c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b03      	cmp	r3, #3
 800ab1e:	d106      	bne.n	800ab2e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	885b      	ldrh	r3, [r3, #2]
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	461a      	mov	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab2c:	e00e      	b.n	800ab4c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f001 fac6 	bl	800c0c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab36:	2303      	movs	r3, #3
 800ab38:	75fb      	strb	r3, [r7, #23]
          break;
 800ab3a:	e007      	b.n	800ab4c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f001 fabf 	bl	800c0c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800ab44:	2303      	movs	r3, #3
 800ab46:	75fb      	strb	r3, [r7, #23]
          break;
 800ab48:	e000      	b.n	800ab4c <USBD_HID_Setup+0x1ec>
          break;
 800ab4a:	bf00      	nop
      }
      break;
 800ab4c:	e006      	b.n	800ab5c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f001 fab6 	bl	800c0c2 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab56:	2303      	movs	r3, #3
 800ab58:	75fb      	strb	r3, [r7, #23]
      break;
 800ab5a:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	20000080 	.word	0x20000080
 800ab6c:	20000068 	.word	0x20000068

0800ab70 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	32b0      	adds	r2, #176	@ 0xb0
 800ab88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e014      	b.n	800abc2 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	2b03      	cmp	r3, #3
 800aba2:	d10d      	bne.n	800abc0 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	7b1b      	ldrb	r3, [r3, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d109      	bne.n	800abc0 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2201      	movs	r2, #1
 800abb0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800abb2:	4b06      	ldr	r3, [pc, #24]	@ (800abcc <USBD_HID_SendReport+0x5c>)
 800abb4:	7819      	ldrb	r1, [r3, #0]
 800abb6:	88fb      	ldrh	r3, [r7, #6]
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f001 ff09 	bl	800c9d2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	200000bf 	.word	0x200000bf

0800abd0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800abd8:	2181      	movs	r1, #129	@ 0x81
 800abda:	4809      	ldr	r0, [pc, #36]	@ (800ac00 <USBD_HID_GetFSCfgDesc+0x30>)
 800abdc:	f000 fc3b 	bl	800b456 <USBD_GetEpDesc>
 800abe0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	220a      	movs	r2, #10
 800abec:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2222      	movs	r2, #34	@ 0x22
 800abf2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800abf4:	4b02      	ldr	r3, [pc, #8]	@ (800ac00 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	20000044 	.word	0x20000044

0800ac04 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800ac0c:	2181      	movs	r1, #129	@ 0x81
 800ac0e:	4809      	ldr	r0, [pc, #36]	@ (800ac34 <USBD_HID_GetHSCfgDesc+0x30>)
 800ac10:	f000 fc21 	bl	800b456 <USBD_GetEpDesc>
 800ac14:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2207      	movs	r2, #7
 800ac20:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2222      	movs	r2, #34	@ 0x22
 800ac26:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800ac28:	4b02      	ldr	r3, [pc, #8]	@ (800ac34 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20000044 	.word	0x20000044

0800ac38 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800ac40:	2181      	movs	r1, #129	@ 0x81
 800ac42:	4809      	ldr	r0, [pc, #36]	@ (800ac68 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800ac44:	f000 fc07 	bl	800b456 <USBD_GetEpDesc>
 800ac48:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	220a      	movs	r2, #10
 800ac54:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2222      	movs	r2, #34	@ 0x22
 800ac5a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800ac5c:	4b02      	ldr	r3, [pc, #8]	@ (800ac68 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	20000044 	.word	0x20000044

0800ac6c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	32b0      	adds	r2, #176	@ 0xb0
 800ac82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac86:	2200      	movs	r2, #0
 800ac88:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	220a      	movs	r2, #10
 800aca4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800aca6:	4b03      	ldr	r3, [pc, #12]	@ (800acb4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	20000074 	.word	0x20000074

0800acb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	4613      	mov	r3, r2
 800acc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d101      	bne.n	800acd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800accc:	2303      	movs	r3, #3
 800acce:	e01f      	b.n	800ad10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	79fa      	ldrb	r2, [r7, #7]
 800ad02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f001 fd2f 	bl	800c768 <USBD_LL_Init>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3718      	adds	r7, #24
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad22:	2300      	movs	r3, #0
 800ad24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	e025      	b.n	800ad7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	32ae      	adds	r2, #174	@ 0xae
 800ad42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00f      	beq.n	800ad6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	32ae      	adds	r2, #174	@ 0xae
 800ad56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5c:	f107 020e 	add.w	r2, r7, #14
 800ad60:	4610      	mov	r0, r2
 800ad62:	4798      	blx	r3
 800ad64:	4602      	mov	r2, r0
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f001 fd37 	bl	800c800 <USBD_LL_Start>
 800ad92:	4603      	mov	r3, r0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ada4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d009      	beq.n	800ade0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	78fa      	ldrb	r2, [r7, #3]
 800add6:	4611      	mov	r1, r2
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	4798      	blx	r3
 800addc:	4603      	mov	r3, r0
 800adde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	460b      	mov	r3, r1
 800adf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	78fa      	ldrb	r2, [r7, #3]
 800ae04:	4611      	mov	r1, r2
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	4798      	blx	r3
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ae10:	2303      	movs	r3, #3
 800ae12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f001 f90c 	bl	800c04e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ae44:	461a      	mov	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ae52:	f003 031f 	and.w	r3, r3, #31
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d01a      	beq.n	800ae90 <USBD_LL_SetupStage+0x72>
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d822      	bhi.n	800aea4 <USBD_LL_SetupStage+0x86>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d002      	beq.n	800ae68 <USBD_LL_SetupStage+0x4a>
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d00a      	beq.n	800ae7c <USBD_LL_SetupStage+0x5e>
 800ae66:	e01d      	b.n	800aea4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fb63 	bl	800b53c <USBD_StdDevReq>
 800ae76:	4603      	mov	r3, r0
 800ae78:	73fb      	strb	r3, [r7, #15]
      break;
 800ae7a:	e020      	b.n	800aebe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fbcb 	bl	800b620 <USBD_StdItfReq>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae8e:	e016      	b.n	800aebe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fc2d 	bl	800b6f8 <USBD_StdEPReq>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73fb      	strb	r3, [r7, #15]
      break;
 800aea2:	e00c      	b.n	800aebe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aeaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 fd04 	bl	800c8c0 <USBD_LL_StallEP>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]
      break;
 800aebc:	bf00      	nop
  }

  return ret;
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	460b      	mov	r3, r1
 800aed2:	607a      	str	r2, [r7, #4]
 800aed4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800aeda:	7afb      	ldrb	r3, [r7, #11]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d16e      	bne.n	800afbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800aee6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aeee:	2b03      	cmp	r3, #3
 800aef0:	f040 8098 	bne.w	800b024 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d913      	bls.n	800af28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	689a      	ldr	r2, [r3, #8]
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	1ad2      	subs	r2, r2, r3
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	68da      	ldr	r2, [r3, #12]
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	4293      	cmp	r3, r2
 800af18:	bf28      	it	cs
 800af1a:	4613      	movcs	r3, r2
 800af1c:	461a      	mov	r2, r3
 800af1e:	6879      	ldr	r1, [r7, #4]
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f001 f977 	bl	800c214 <USBD_CtlContinueRx>
 800af26:	e07d      	b.n	800b024 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af2e:	f003 031f 	and.w	r3, r3, #31
 800af32:	2b02      	cmp	r3, #2
 800af34:	d014      	beq.n	800af60 <USBD_LL_DataOutStage+0x98>
 800af36:	2b02      	cmp	r3, #2
 800af38:	d81d      	bhi.n	800af76 <USBD_LL_DataOutStage+0xae>
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d002      	beq.n	800af44 <USBD_LL_DataOutStage+0x7c>
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d003      	beq.n	800af4a <USBD_LL_DataOutStage+0x82>
 800af42:	e018      	b.n	800af76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800af44:	2300      	movs	r3, #0
 800af46:	75bb      	strb	r3, [r7, #22]
            break;
 800af48:	e018      	b.n	800af7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800af50:	b2db      	uxtb	r3, r3
 800af52:	4619      	mov	r1, r3
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 fa64 	bl	800b422 <USBD_CoreFindIF>
 800af5a:	4603      	mov	r3, r0
 800af5c:	75bb      	strb	r3, [r7, #22]
            break;
 800af5e:	e00d      	b.n	800af7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800af66:	b2db      	uxtb	r3, r3
 800af68:	4619      	mov	r1, r3
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f000 fa66 	bl	800b43c <USBD_CoreFindEP>
 800af70:	4603      	mov	r3, r0
 800af72:	75bb      	strb	r3, [r7, #22]
            break;
 800af74:	e002      	b.n	800af7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800af76:	2300      	movs	r3, #0
 800af78:	75bb      	strb	r3, [r7, #22]
            break;
 800af7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800af7c:	7dbb      	ldrb	r3, [r7, #22]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d119      	bne.n	800afb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b03      	cmp	r3, #3
 800af8c:	d113      	bne.n	800afb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800af8e:	7dba      	ldrb	r2, [r7, #22]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	32ae      	adds	r2, #174	@ 0xae
 800af94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00b      	beq.n	800afb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800af9e:	7dba      	ldrb	r2, [r7, #22]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800afa6:	7dba      	ldrb	r2, [r7, #22]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	32ae      	adds	r2, #174	@ 0xae
 800afac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f001 f93d 	bl	800c236 <USBD_CtlSendStatus>
 800afbc:	e032      	b.n	800b024 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800afbe:	7afb      	ldrb	r3, [r7, #11]
 800afc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	4619      	mov	r1, r3
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f000 fa37 	bl	800b43c <USBD_CoreFindEP>
 800afce:	4603      	mov	r3, r0
 800afd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afd2:	7dbb      	ldrb	r3, [r7, #22]
 800afd4:	2bff      	cmp	r3, #255	@ 0xff
 800afd6:	d025      	beq.n	800b024 <USBD_LL_DataOutStage+0x15c>
 800afd8:	7dbb      	ldrb	r3, [r7, #22]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d122      	bne.n	800b024 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d117      	bne.n	800b01a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800afea:	7dba      	ldrb	r2, [r7, #22]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	32ae      	adds	r2, #174	@ 0xae
 800aff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00f      	beq.n	800b01a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800affa:	7dba      	ldrb	r2, [r7, #22]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b002:	7dba      	ldrb	r2, [r7, #22]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	32ae      	adds	r2, #174	@ 0xae
 800b008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00c:	699b      	ldr	r3, [r3, #24]
 800b00e:	7afa      	ldrb	r2, [r7, #11]
 800b010:	4611      	mov	r1, r2
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	4798      	blx	r3
 800b016:	4603      	mov	r3, r0
 800b018:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	e000      	b.n	800b026 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3718      	adds	r7, #24
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b086      	sub	sp, #24
 800b032:	af00      	add	r7, sp, #0
 800b034:	60f8      	str	r0, [r7, #12]
 800b036:	460b      	mov	r3, r1
 800b038:	607a      	str	r2, [r7, #4]
 800b03a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b03c:	7afb      	ldrb	r3, [r7, #11]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d16f      	bne.n	800b122 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3314      	adds	r3, #20
 800b046:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d15a      	bne.n	800b108 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	689a      	ldr	r2, [r3, #8]
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d914      	bls.n	800b088 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	689a      	ldr	r2, [r3, #8]
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	1ad2      	subs	r2, r2, r3
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	461a      	mov	r2, r3
 800b072:	6879      	ldr	r1, [r7, #4]
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f001 f8bc 	bl	800c1f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b07a:	2300      	movs	r3, #0
 800b07c:	2200      	movs	r2, #0
 800b07e:	2100      	movs	r1, #0
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f001 fcc7 	bl	800ca14 <USBD_LL_PrepareReceive>
 800b086:	e03f      	b.n	800b108 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	68da      	ldr	r2, [r3, #12]
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	429a      	cmp	r2, r3
 800b092:	d11c      	bne.n	800b0ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d316      	bcc.n	800b0ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	685a      	ldr	r2, [r3, #4]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d20f      	bcs.n	800b0ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f001 f89d 	bl	800c1f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f001 fca4 	bl	800ca14 <USBD_LL_PrepareReceive>
 800b0cc:	e01c      	b.n	800b108 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d10f      	bne.n	800b0fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d009      	beq.n	800b0fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0fa:	2180      	movs	r1, #128	@ 0x80
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f001 fbdf 	bl	800c8c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f001 f8aa 	bl	800c25c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d03a      	beq.n	800b188 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7ff fe42 	bl	800ad9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b120:	e032      	b.n	800b188 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b122:	7afb      	ldrb	r3, [r7, #11]
 800b124:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	4619      	mov	r1, r3
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 f985 	bl	800b43c <USBD_CoreFindEP>
 800b132:	4603      	mov	r3, r0
 800b134:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b136:	7dfb      	ldrb	r3, [r7, #23]
 800b138:	2bff      	cmp	r3, #255	@ 0xff
 800b13a:	d025      	beq.n	800b188 <USBD_LL_DataInStage+0x15a>
 800b13c:	7dfb      	ldrb	r3, [r7, #23]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d122      	bne.n	800b188 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	d11c      	bne.n	800b188 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b14e:	7dfa      	ldrb	r2, [r7, #23]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	32ae      	adds	r2, #174	@ 0xae
 800b154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d014      	beq.n	800b188 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b15e:	7dfa      	ldrb	r2, [r7, #23]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b166:	7dfa      	ldrb	r2, [r7, #23]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	32ae      	adds	r2, #174	@ 0xae
 800b16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	7afa      	ldrb	r2, [r7, #11]
 800b174:	4611      	mov	r1, r2
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	4798      	blx	r3
 800b17a:	4603      	mov	r3, r0
 800b17c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b17e:	7dbb      	ldrb	r3, [r7, #22]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b184:	7dbb      	ldrb	r3, [r7, #22]
 800b186:	e000      	b.n	800b18a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d014      	beq.n	800b1f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00e      	beq.n	800b1f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	6852      	ldr	r2, [r2, #4]
 800b1e6:	b2d2      	uxtb	r2, r2
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	4798      	blx	r3
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1f8:	2340      	movs	r3, #64	@ 0x40
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f001 fb19 	bl	800c836 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2240      	movs	r2, #64	@ 0x40
 800b210:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b214:	2340      	movs	r3, #64	@ 0x40
 800b216:	2200      	movs	r2, #0
 800b218:	2180      	movs	r1, #128	@ 0x80
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f001 fb0b 	bl	800c836 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2240      	movs	r2, #64	@ 0x40
 800b22a:	621a      	str	r2, [r3, #32]

  return ret;
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b236:	b480      	push	{r7}
 800b238:	b083      	sub	sp, #12
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	460b      	mov	r3, r1
 800b240:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	78fa      	ldrb	r2, [r7, #3]
 800b246:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	370c      	adds	r7, #12
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b256:	b480      	push	{r7}
 800b258:	b083      	sub	sp, #12
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b04      	cmp	r3, #4
 800b268:	d006      	beq.n	800b278 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b270:	b2da      	uxtb	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2204      	movs	r2, #4
 800b27c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b04      	cmp	r3, #4
 800b2a0:	d106      	bne.n	800b2b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	d110      	bne.n	800b2f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d005      	beq.n	800b2f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2ee:	69db      	ldr	r3, [r3, #28]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b082      	sub	sp, #8
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	460b      	mov	r3, r1
 800b308:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	32ae      	adds	r2, #174	@ 0xae
 800b314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e01c      	b.n	800b35a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b326:	b2db      	uxtb	r3, r3
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d115      	bne.n	800b358 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	32ae      	adds	r2, #174	@ 0xae
 800b336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b33a:	6a1b      	ldr	r3, [r3, #32]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00b      	beq.n	800b358 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	32ae      	adds	r2, #174	@ 0xae
 800b34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	78fa      	ldrb	r2, [r7, #3]
 800b352:	4611      	mov	r1, r2
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b082      	sub	sp, #8
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	460b      	mov	r3, r1
 800b36c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	32ae      	adds	r2, #174	@ 0xae
 800b378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b380:	2303      	movs	r3, #3
 800b382:	e01c      	b.n	800b3be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	2b03      	cmp	r3, #3
 800b38e:	d115      	bne.n	800b3bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	32ae      	adds	r2, #174	@ 0xae
 800b39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00b      	beq.n	800b3bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	32ae      	adds	r2, #174	@ 0xae
 800b3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b4:	78fa      	ldrb	r2, [r7, #3]
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00e      	beq.n	800b418 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	6852      	ldr	r2, [r2, #4]
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	4611      	mov	r1, r2
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	4798      	blx	r3
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b414:	2303      	movs	r3, #3
 800b416:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b418:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b422:	b480      	push	{r7}
 800b424:	b083      	sub	sp, #12
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	460b      	mov	r3, r1
 800b42c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b42e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b430:	4618      	mov	r0, r3
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b448:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr

0800b456 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b086      	sub	sp, #24
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	460b      	mov	r3, r1
 800b460:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	885b      	ldrh	r3, [r3, #2]
 800b472:	b29b      	uxth	r3, r3
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	7812      	ldrb	r2, [r2, #0]
 800b478:	4293      	cmp	r3, r2
 800b47a:	d91f      	bls.n	800b4bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b482:	e013      	b.n	800b4ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b484:	f107 030a 	add.w	r3, r7, #10
 800b488:	4619      	mov	r1, r3
 800b48a:	6978      	ldr	r0, [r7, #20]
 800b48c:	f000 f81b 	bl	800b4c6 <USBD_GetNextDesc>
 800b490:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	785b      	ldrb	r3, [r3, #1]
 800b496:	2b05      	cmp	r3, #5
 800b498:	d108      	bne.n	800b4ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	789b      	ldrb	r3, [r3, #2]
 800b4a2:	78fa      	ldrb	r2, [r7, #3]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d008      	beq.n	800b4ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	885b      	ldrh	r3, [r3, #2]
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	897b      	ldrh	r3, [r7, #10]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d8e5      	bhi.n	800b484 <USBD_GetEpDesc+0x2e>
 800b4b8:	e000      	b.n	800b4bc <USBD_GetEpDesc+0x66>
          break;
 800b4ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b4bc:	693b      	ldr	r3, [r7, #16]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3718      	adds	r7, #24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b085      	sub	sp, #20
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	881b      	ldrh	r3, [r3, #0]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	7812      	ldrb	r2, [r2, #0]
 800b4dc:	4413      	add	r3, r2
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b087      	sub	sp, #28
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	3301      	adds	r3, #1
 800b514:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b51c:	8a3b      	ldrh	r3, [r7, #16]
 800b51e:	021b      	lsls	r3, r3, #8
 800b520:	b21a      	sxth	r2, r3
 800b522:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b526:	4313      	orrs	r3, r2
 800b528:	b21b      	sxth	r3, r3
 800b52a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b52c:	89fb      	ldrh	r3, [r7, #14]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
	...

0800b53c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b552:	2b40      	cmp	r3, #64	@ 0x40
 800b554:	d005      	beq.n	800b562 <USBD_StdDevReq+0x26>
 800b556:	2b40      	cmp	r3, #64	@ 0x40
 800b558:	d857      	bhi.n	800b60a <USBD_StdDevReq+0xce>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00f      	beq.n	800b57e <USBD_StdDevReq+0x42>
 800b55e:	2b20      	cmp	r3, #32
 800b560:	d153      	bne.n	800b60a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	32ae      	adds	r2, #174	@ 0xae
 800b56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	4798      	blx	r3
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]
      break;
 800b57c:	e04a      	b.n	800b614 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	785b      	ldrb	r3, [r3, #1]
 800b582:	2b09      	cmp	r3, #9
 800b584:	d83b      	bhi.n	800b5fe <USBD_StdDevReq+0xc2>
 800b586:	a201      	add	r2, pc, #4	@ (adr r2, 800b58c <USBD_StdDevReq+0x50>)
 800b588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58c:	0800b5e1 	.word	0x0800b5e1
 800b590:	0800b5f5 	.word	0x0800b5f5
 800b594:	0800b5ff 	.word	0x0800b5ff
 800b598:	0800b5eb 	.word	0x0800b5eb
 800b59c:	0800b5ff 	.word	0x0800b5ff
 800b5a0:	0800b5bf 	.word	0x0800b5bf
 800b5a4:	0800b5b5 	.word	0x0800b5b5
 800b5a8:	0800b5ff 	.word	0x0800b5ff
 800b5ac:	0800b5d7 	.word	0x0800b5d7
 800b5b0:	0800b5c9 	.word	0x0800b5c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fa3c 	bl	800ba34 <USBD_GetDescriptor>
          break;
 800b5bc:	e024      	b.n	800b608 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fba1 	bl	800bd08 <USBD_SetAddress>
          break;
 800b5c6:	e01f      	b.n	800b608 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fbe0 	bl	800bd90 <USBD_SetConfig>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	73fb      	strb	r3, [r7, #15]
          break;
 800b5d4:	e018      	b.n	800b608 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fc83 	bl	800bee4 <USBD_GetConfig>
          break;
 800b5de:	e013      	b.n	800b608 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fcb4 	bl	800bf50 <USBD_GetStatus>
          break;
 800b5e8:	e00e      	b.n	800b608 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fce3 	bl	800bfb8 <USBD_SetFeature>
          break;
 800b5f2:	e009      	b.n	800b608 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fd07 	bl	800c00a <USBD_ClrFeature>
          break;
 800b5fc:	e004      	b.n	800b608 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fd5e 	bl	800c0c2 <USBD_CtlError>
          break;
 800b606:	bf00      	nop
      }
      break;
 800b608:	e004      	b.n	800b614 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fd58 	bl	800c0c2 <USBD_CtlError>
      break;
 800b612:	bf00      	nop
  }

  return ret;
 800b614:	7bfb      	ldrb	r3, [r7, #15]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop

0800b620 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b636:	2b40      	cmp	r3, #64	@ 0x40
 800b638:	d005      	beq.n	800b646 <USBD_StdItfReq+0x26>
 800b63a:	2b40      	cmp	r3, #64	@ 0x40
 800b63c:	d852      	bhi.n	800b6e4 <USBD_StdItfReq+0xc4>
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <USBD_StdItfReq+0x26>
 800b642:	2b20      	cmp	r3, #32
 800b644:	d14e      	bne.n	800b6e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	3b01      	subs	r3, #1
 800b650:	2b02      	cmp	r3, #2
 800b652:	d840      	bhi.n	800b6d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	889b      	ldrh	r3, [r3, #4]
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d836      	bhi.n	800b6cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	889b      	ldrh	r3, [r3, #4]
 800b662:	b2db      	uxtb	r3, r3
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff fedb 	bl	800b422 <USBD_CoreFindIF>
 800b66c:	4603      	mov	r3, r0
 800b66e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	2bff      	cmp	r3, #255	@ 0xff
 800b674:	d01d      	beq.n	800b6b2 <USBD_StdItfReq+0x92>
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d11a      	bne.n	800b6b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b67c:	7bba      	ldrb	r2, [r7, #14]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	32ae      	adds	r2, #174	@ 0xae
 800b682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00f      	beq.n	800b6ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b68c:	7bba      	ldrb	r2, [r7, #14]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b694:	7bba      	ldrb	r2, [r7, #14]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	32ae      	adds	r2, #174	@ 0xae
 800b69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	4798      	blx	r3
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b6aa:	e004      	b.n	800b6b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b6b0:	e001      	b.n	800b6b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	88db      	ldrh	r3, [r3, #6]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d110      	bne.n	800b6e0 <USBD_StdItfReq+0xc0>
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10d      	bne.n	800b6e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fdb6 	bl	800c236 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b6ca:	e009      	b.n	800b6e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fcf7 	bl	800c0c2 <USBD_CtlError>
          break;
 800b6d4:	e004      	b.n	800b6e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fcf2 	bl	800c0c2 <USBD_CtlError>
          break;
 800b6de:	e000      	b.n	800b6e2 <USBD_StdItfReq+0xc2>
          break;
 800b6e0:	bf00      	nop
      }
      break;
 800b6e2:	e004      	b.n	800b6ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fceb 	bl	800c0c2 <USBD_CtlError>
      break;
 800b6ec:	bf00      	nop
  }

  return ret;
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	889b      	ldrh	r3, [r3, #4]
 800b70a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b714:	2b40      	cmp	r3, #64	@ 0x40
 800b716:	d007      	beq.n	800b728 <USBD_StdEPReq+0x30>
 800b718:	2b40      	cmp	r3, #64	@ 0x40
 800b71a:	f200 817f 	bhi.w	800ba1c <USBD_StdEPReq+0x324>
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d02a      	beq.n	800b778 <USBD_StdEPReq+0x80>
 800b722:	2b20      	cmp	r3, #32
 800b724:	f040 817a 	bne.w	800ba1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b728:	7bbb      	ldrb	r3, [r7, #14]
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7ff fe85 	bl	800b43c <USBD_CoreFindEP>
 800b732:	4603      	mov	r3, r0
 800b734:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b736:	7b7b      	ldrb	r3, [r7, #13]
 800b738:	2bff      	cmp	r3, #255	@ 0xff
 800b73a:	f000 8174 	beq.w	800ba26 <USBD_StdEPReq+0x32e>
 800b73e:	7b7b      	ldrb	r3, [r7, #13]
 800b740:	2b00      	cmp	r3, #0
 800b742:	f040 8170 	bne.w	800ba26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b746:	7b7a      	ldrb	r2, [r7, #13]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b74e:	7b7a      	ldrb	r2, [r7, #13]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	32ae      	adds	r2, #174	@ 0xae
 800b754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f000 8163 	beq.w	800ba26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b760:	7b7a      	ldrb	r2, [r7, #13]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	32ae      	adds	r2, #174	@ 0xae
 800b766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	4798      	blx	r3
 800b772:	4603      	mov	r3, r0
 800b774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b776:	e156      	b.n	800ba26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	785b      	ldrb	r3, [r3, #1]
 800b77c:	2b03      	cmp	r3, #3
 800b77e:	d008      	beq.n	800b792 <USBD_StdEPReq+0x9a>
 800b780:	2b03      	cmp	r3, #3
 800b782:	f300 8145 	bgt.w	800ba10 <USBD_StdEPReq+0x318>
 800b786:	2b00      	cmp	r3, #0
 800b788:	f000 809b 	beq.w	800b8c2 <USBD_StdEPReq+0x1ca>
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d03c      	beq.n	800b80a <USBD_StdEPReq+0x112>
 800b790:	e13e      	b.n	800ba10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d002      	beq.n	800b7a4 <USBD_StdEPReq+0xac>
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d016      	beq.n	800b7d0 <USBD_StdEPReq+0xd8>
 800b7a2:	e02c      	b.n	800b7fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7a4:	7bbb      	ldrb	r3, [r7, #14]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00d      	beq.n	800b7c6 <USBD_StdEPReq+0xce>
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	2b80      	cmp	r3, #128	@ 0x80
 800b7ae:	d00a      	beq.n	800b7c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f001 f883 	bl	800c8c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7ba:	2180      	movs	r1, #128	@ 0x80
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f001 f87f 	bl	800c8c0 <USBD_LL_StallEP>
 800b7c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b7c4:	e020      	b.n	800b808 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fc7a 	bl	800c0c2 <USBD_CtlError>
              break;
 800b7ce:	e01b      	b.n	800b808 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	885b      	ldrh	r3, [r3, #2]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10e      	bne.n	800b7f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00b      	beq.n	800b7f6 <USBD_StdEPReq+0xfe>
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	2b80      	cmp	r3, #128	@ 0x80
 800b7e2:	d008      	beq.n	800b7f6 <USBD_StdEPReq+0xfe>
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	88db      	ldrh	r3, [r3, #6]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d104      	bne.n	800b7f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7ec:	7bbb      	ldrb	r3, [r7, #14]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f001 f865 	bl	800c8c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fd1d 	bl	800c236 <USBD_CtlSendStatus>

              break;
 800b7fc:	e004      	b.n	800b808 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fc5e 	bl	800c0c2 <USBD_CtlError>
              break;
 800b806:	bf00      	nop
          }
          break;
 800b808:	e107      	b.n	800ba1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b02      	cmp	r3, #2
 800b814:	d002      	beq.n	800b81c <USBD_StdEPReq+0x124>
 800b816:	2b03      	cmp	r3, #3
 800b818:	d016      	beq.n	800b848 <USBD_StdEPReq+0x150>
 800b81a:	e04b      	b.n	800b8b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00d      	beq.n	800b83e <USBD_StdEPReq+0x146>
 800b822:	7bbb      	ldrb	r3, [r7, #14]
 800b824:	2b80      	cmp	r3, #128	@ 0x80
 800b826:	d00a      	beq.n	800b83e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f001 f847 	bl	800c8c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b832:	2180      	movs	r1, #128	@ 0x80
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f001 f843 	bl	800c8c0 <USBD_LL_StallEP>
 800b83a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b83c:	e040      	b.n	800b8c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fc3e 	bl	800c0c2 <USBD_CtlError>
              break;
 800b846:	e03b      	b.n	800b8c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	885b      	ldrh	r3, [r3, #2]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d136      	bne.n	800b8be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b850:	7bbb      	ldrb	r3, [r7, #14]
 800b852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b856:	2b00      	cmp	r3, #0
 800b858:	d004      	beq.n	800b864 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b85a:	7bbb      	ldrb	r3, [r7, #14]
 800b85c:	4619      	mov	r1, r3
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f001 f84d 	bl	800c8fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fce6 	bl	800c236 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b86a:	7bbb      	ldrb	r3, [r7, #14]
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff fde4 	bl	800b43c <USBD_CoreFindEP>
 800b874:	4603      	mov	r3, r0
 800b876:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b878:	7b7b      	ldrb	r3, [r7, #13]
 800b87a:	2bff      	cmp	r3, #255	@ 0xff
 800b87c:	d01f      	beq.n	800b8be <USBD_StdEPReq+0x1c6>
 800b87e:	7b7b      	ldrb	r3, [r7, #13]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d11c      	bne.n	800b8be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b884:	7b7a      	ldrb	r2, [r7, #13]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b88c:	7b7a      	ldrb	r2, [r7, #13]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	32ae      	adds	r2, #174	@ 0xae
 800b892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d010      	beq.n	800b8be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b89c:	7b7a      	ldrb	r2, [r7, #13]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	32ae      	adds	r2, #174	@ 0xae
 800b8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b8b2:	e004      	b.n	800b8be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fc03 	bl	800c0c2 <USBD_CtlError>
              break;
 800b8bc:	e000      	b.n	800b8c0 <USBD_StdEPReq+0x1c8>
              break;
 800b8be:	bf00      	nop
          }
          break;
 800b8c0:	e0ab      	b.n	800ba1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d002      	beq.n	800b8d4 <USBD_StdEPReq+0x1dc>
 800b8ce:	2b03      	cmp	r3, #3
 800b8d0:	d032      	beq.n	800b938 <USBD_StdEPReq+0x240>
 800b8d2:	e097      	b.n	800ba04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8d4:	7bbb      	ldrb	r3, [r7, #14]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d007      	beq.n	800b8ea <USBD_StdEPReq+0x1f2>
 800b8da:	7bbb      	ldrb	r3, [r7, #14]
 800b8dc:	2b80      	cmp	r3, #128	@ 0x80
 800b8de:	d004      	beq.n	800b8ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fbed 	bl	800c0c2 <USBD_CtlError>
                break;
 800b8e8:	e091      	b.n	800ba0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	da0b      	bge.n	800b90a <USBD_StdEPReq+0x212>
 800b8f2:	7bbb      	ldrb	r3, [r7, #14]
 800b8f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	3310      	adds	r3, #16
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	4413      	add	r3, r2
 800b906:	3304      	adds	r3, #4
 800b908:	e00b      	b.n	800b922 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b90a:	7bbb      	ldrb	r3, [r7, #14]
 800b90c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b910:	4613      	mov	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	4413      	add	r3, r2
 800b920:	3304      	adds	r3, #4
 800b922:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	2202      	movs	r2, #2
 800b92e:	4619      	mov	r1, r3
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fc43 	bl	800c1bc <USBD_CtlSendData>
              break;
 800b936:	e06a      	b.n	800ba0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	da11      	bge.n	800b964 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b940:	7bbb      	ldrb	r3, [r7, #14]
 800b942:	f003 020f 	and.w	r2, r3, #15
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	440b      	add	r3, r1
 800b952:	3324      	adds	r3, #36	@ 0x24
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d117      	bne.n	800b98a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fbb0 	bl	800c0c2 <USBD_CtlError>
                  break;
 800b962:	e054      	b.n	800ba0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b964:	7bbb      	ldrb	r3, [r7, #14]
 800b966:	f003 020f 	and.w	r2, r3, #15
 800b96a:	6879      	ldr	r1, [r7, #4]
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	440b      	add	r3, r1
 800b976:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b97a:	881b      	ldrh	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d104      	bne.n	800b98a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fb9d 	bl	800c0c2 <USBD_CtlError>
                  break;
 800b988:	e041      	b.n	800ba0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b98a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	da0b      	bge.n	800b9aa <USBD_StdEPReq+0x2b2>
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b998:	4613      	mov	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4413      	add	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	3310      	adds	r3, #16
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	e00b      	b.n	800b9c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9aa:	7bbb      	ldrb	r3, [r7, #14]
 800b9ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	4413      	add	r3, r2
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b9c4:	7bbb      	ldrb	r3, [r7, #14]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <USBD_StdEPReq+0x2d8>
 800b9ca:	7bbb      	ldrb	r3, [r7, #14]
 800b9cc:	2b80      	cmp	r3, #128	@ 0x80
 800b9ce:	d103      	bne.n	800b9d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	e00e      	b.n	800b9f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 ffad 	bl	800c93c <USBD_LL_IsStallEP>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d003      	beq.n	800b9f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	e002      	b.n	800b9f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fbdd 	bl	800c1bc <USBD_CtlSendData>
              break;
 800ba02:	e004      	b.n	800ba0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fb5b 	bl	800c0c2 <USBD_CtlError>
              break;
 800ba0c:	bf00      	nop
          }
          break;
 800ba0e:	e004      	b.n	800ba1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fb55 	bl	800c0c2 <USBD_CtlError>
          break;
 800ba18:	bf00      	nop
      }
      break;
 800ba1a:	e005      	b.n	800ba28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fb4f 	bl	800c0c2 <USBD_CtlError>
      break;
 800ba24:	e000      	b.n	800ba28 <USBD_StdEPReq+0x330>
      break;
 800ba26:	bf00      	nop
  }

  return ret;
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba46:	2300      	movs	r3, #0
 800ba48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	885b      	ldrh	r3, [r3, #2]
 800ba4e:	0a1b      	lsrs	r3, r3, #8
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	3b01      	subs	r3, #1
 800ba54:	2b06      	cmp	r3, #6
 800ba56:	f200 8128 	bhi.w	800bcaa <USBD_GetDescriptor+0x276>
 800ba5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba60 <USBD_GetDescriptor+0x2c>)
 800ba5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba60:	0800ba7d 	.word	0x0800ba7d
 800ba64:	0800ba95 	.word	0x0800ba95
 800ba68:	0800bad5 	.word	0x0800bad5
 800ba6c:	0800bcab 	.word	0x0800bcab
 800ba70:	0800bcab 	.word	0x0800bcab
 800ba74:	0800bc4b 	.word	0x0800bc4b
 800ba78:	0800bc77 	.word	0x0800bc77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	7c12      	ldrb	r2, [r2, #16]
 800ba88:	f107 0108 	add.w	r1, r7, #8
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	4798      	blx	r3
 800ba90:	60f8      	str	r0, [r7, #12]
      break;
 800ba92:	e112      	b.n	800bcba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	7c1b      	ldrb	r3, [r3, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10d      	bne.n	800bab8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa4:	f107 0208 	add.w	r2, r7, #8
 800baa8:	4610      	mov	r0, r2
 800baaa:	4798      	blx	r3
 800baac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	3301      	adds	r3, #1
 800bab2:	2202      	movs	r2, #2
 800bab4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bab6:	e100      	b.n	800bcba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800babe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac0:	f107 0208 	add.w	r2, r7, #8
 800bac4:	4610      	mov	r0, r2
 800bac6:	4798      	blx	r3
 800bac8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	3301      	adds	r3, #1
 800bace:	2202      	movs	r2, #2
 800bad0:	701a      	strb	r2, [r3, #0]
      break;
 800bad2:	e0f2      	b.n	800bcba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	885b      	ldrh	r3, [r3, #2]
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2b05      	cmp	r3, #5
 800badc:	f200 80ac 	bhi.w	800bc38 <USBD_GetDescriptor+0x204>
 800bae0:	a201      	add	r2, pc, #4	@ (adr r2, 800bae8 <USBD_GetDescriptor+0xb4>)
 800bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae6:	bf00      	nop
 800bae8:	0800bb01 	.word	0x0800bb01
 800baec:	0800bb35 	.word	0x0800bb35
 800baf0:	0800bb69 	.word	0x0800bb69
 800baf4:	0800bb9d 	.word	0x0800bb9d
 800baf8:	0800bbd1 	.word	0x0800bbd1
 800bafc:	0800bc05 	.word	0x0800bc05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00b      	beq.n	800bb24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	7c12      	ldrb	r2, [r2, #16]
 800bb18:	f107 0108 	add.w	r1, r7, #8
 800bb1c:	4610      	mov	r0, r2
 800bb1e:	4798      	blx	r3
 800bb20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb22:	e091      	b.n	800bc48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb24:	6839      	ldr	r1, [r7, #0]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 facb 	bl	800c0c2 <USBD_CtlError>
            err++;
 800bb2c:	7afb      	ldrb	r3, [r7, #11]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	72fb      	strb	r3, [r7, #11]
          break;
 800bb32:	e089      	b.n	800bc48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00b      	beq.n	800bb58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	7c12      	ldrb	r2, [r2, #16]
 800bb4c:	f107 0108 	add.w	r1, r7, #8
 800bb50:	4610      	mov	r0, r2
 800bb52:	4798      	blx	r3
 800bb54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb56:	e077      	b.n	800bc48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fab1 	bl	800c0c2 <USBD_CtlError>
            err++;
 800bb60:	7afb      	ldrb	r3, [r7, #11]
 800bb62:	3301      	adds	r3, #1
 800bb64:	72fb      	strb	r3, [r7, #11]
          break;
 800bb66:	e06f      	b.n	800bc48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00b      	beq.n	800bb8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	7c12      	ldrb	r2, [r2, #16]
 800bb80:	f107 0108 	add.w	r1, r7, #8
 800bb84:	4610      	mov	r0, r2
 800bb86:	4798      	blx	r3
 800bb88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb8a:	e05d      	b.n	800bc48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb8c:	6839      	ldr	r1, [r7, #0]
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fa97 	bl	800c0c2 <USBD_CtlError>
            err++;
 800bb94:	7afb      	ldrb	r3, [r7, #11]
 800bb96:	3301      	adds	r3, #1
 800bb98:	72fb      	strb	r3, [r7, #11]
          break;
 800bb9a:	e055      	b.n	800bc48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00b      	beq.n	800bbc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	7c12      	ldrb	r2, [r2, #16]
 800bbb4:	f107 0108 	add.w	r1, r7, #8
 800bbb8:	4610      	mov	r0, r2
 800bbba:	4798      	blx	r3
 800bbbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbbe:	e043      	b.n	800bc48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fa7d 	bl	800c0c2 <USBD_CtlError>
            err++;
 800bbc8:	7afb      	ldrb	r3, [r7, #11]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	72fb      	strb	r3, [r7, #11]
          break;
 800bbce:	e03b      	b.n	800bc48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00b      	beq.n	800bbf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbe2:	695b      	ldr	r3, [r3, #20]
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	7c12      	ldrb	r2, [r2, #16]
 800bbe8:	f107 0108 	add.w	r1, r7, #8
 800bbec:	4610      	mov	r0, r2
 800bbee:	4798      	blx	r3
 800bbf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbf2:	e029      	b.n	800bc48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fa63 	bl	800c0c2 <USBD_CtlError>
            err++;
 800bbfc:	7afb      	ldrb	r3, [r7, #11]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	72fb      	strb	r3, [r7, #11]
          break;
 800bc02:	e021      	b.n	800bc48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc16:	699b      	ldr	r3, [r3, #24]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	7c12      	ldrb	r2, [r2, #16]
 800bc1c:	f107 0108 	add.w	r1, r7, #8
 800bc20:	4610      	mov	r0, r2
 800bc22:	4798      	blx	r3
 800bc24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc26:	e00f      	b.n	800bc48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fa49 	bl	800c0c2 <USBD_CtlError>
            err++;
 800bc30:	7afb      	ldrb	r3, [r7, #11]
 800bc32:	3301      	adds	r3, #1
 800bc34:	72fb      	strb	r3, [r7, #11]
          break;
 800bc36:	e007      	b.n	800bc48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fa41 	bl	800c0c2 <USBD_CtlError>
          err++;
 800bc40:	7afb      	ldrb	r3, [r7, #11]
 800bc42:	3301      	adds	r3, #1
 800bc44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bc46:	bf00      	nop
      }
      break;
 800bc48:	e037      	b.n	800bcba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	7c1b      	ldrb	r3, [r3, #16]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d109      	bne.n	800bc66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc5a:	f107 0208 	add.w	r2, r7, #8
 800bc5e:	4610      	mov	r0, r2
 800bc60:	4798      	blx	r3
 800bc62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc64:	e029      	b.n	800bcba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fa2a 	bl	800c0c2 <USBD_CtlError>
        err++;
 800bc6e:	7afb      	ldrb	r3, [r7, #11]
 800bc70:	3301      	adds	r3, #1
 800bc72:	72fb      	strb	r3, [r7, #11]
      break;
 800bc74:	e021      	b.n	800bcba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	7c1b      	ldrb	r3, [r3, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10d      	bne.n	800bc9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc86:	f107 0208 	add.w	r2, r7, #8
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	4798      	blx	r3
 800bc8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	3301      	adds	r3, #1
 800bc94:	2207      	movs	r2, #7
 800bc96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc98:	e00f      	b.n	800bcba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fa10 	bl	800c0c2 <USBD_CtlError>
        err++;
 800bca2:	7afb      	ldrb	r3, [r7, #11]
 800bca4:	3301      	adds	r3, #1
 800bca6:	72fb      	strb	r3, [r7, #11]
      break;
 800bca8:	e007      	b.n	800bcba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 fa08 	bl	800c0c2 <USBD_CtlError>
      err++;
 800bcb2:	7afb      	ldrb	r3, [r7, #11]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	72fb      	strb	r3, [r7, #11]
      break;
 800bcb8:	bf00      	nop
  }

  if (err != 0U)
 800bcba:	7afb      	ldrb	r3, [r7, #11]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d11e      	bne.n	800bcfe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	88db      	ldrh	r3, [r3, #6]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d016      	beq.n	800bcf6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bcc8:	893b      	ldrh	r3, [r7, #8]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00e      	beq.n	800bcec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	88da      	ldrh	r2, [r3, #6]
 800bcd2:	893b      	ldrh	r3, [r7, #8]
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	bf28      	it	cs
 800bcd8:	4613      	movcs	r3, r2
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bcde:	893b      	ldrh	r3, [r7, #8]
 800bce0:	461a      	mov	r2, r3
 800bce2:	68f9      	ldr	r1, [r7, #12]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fa69 	bl	800c1bc <USBD_CtlSendData>
 800bcea:	e009      	b.n	800bd00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bcec:	6839      	ldr	r1, [r7, #0]
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f9e7 	bl	800c0c2 <USBD_CtlError>
 800bcf4:	e004      	b.n	800bd00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fa9d 	bl	800c236 <USBD_CtlSendStatus>
 800bcfc:	e000      	b.n	800bd00 <USBD_GetDescriptor+0x2cc>
    return;
 800bcfe:	bf00      	nop
  }
}
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop

0800bd08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	889b      	ldrh	r3, [r3, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d131      	bne.n	800bd7e <USBD_SetAddress+0x76>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	88db      	ldrh	r3, [r3, #6]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d12d      	bne.n	800bd7e <USBD_SetAddress+0x76>
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	885b      	ldrh	r3, [r3, #2]
 800bd26:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd28:	d829      	bhi.n	800bd7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	885b      	ldrh	r3, [r3, #2]
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d104      	bne.n	800bd4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bd42:	6839      	ldr	r1, [r7, #0]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f9bc 	bl	800c0c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd4a:	e01d      	b.n	800bd88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	7bfa      	ldrb	r2, [r7, #15]
 800bd50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 fe1b 	bl	800c994 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fa69 	bl	800c236 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d004      	beq.n	800bd74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd72:	e009      	b.n	800bd88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd7c:	e004      	b.n	800bd88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 f99e 	bl	800c0c2 <USBD_CtlError>
  }
}
 800bd86:	bf00      	nop
 800bd88:	bf00      	nop
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	885b      	ldrh	r3, [r3, #2]
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	4b4e      	ldr	r3, [pc, #312]	@ (800bee0 <USBD_SetConfig+0x150>)
 800bda6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bda8:	4b4d      	ldr	r3, [pc, #308]	@ (800bee0 <USBD_SetConfig+0x150>)
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d905      	bls.n	800bdbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f985 	bl	800c0c2 <USBD_CtlError>
    return USBD_FAIL;
 800bdb8:	2303      	movs	r3, #3
 800bdba:	e08c      	b.n	800bed6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d002      	beq.n	800bdce <USBD_SetConfig+0x3e>
 800bdc8:	2b03      	cmp	r3, #3
 800bdca:	d029      	beq.n	800be20 <USBD_SetConfig+0x90>
 800bdcc:	e075      	b.n	800beba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bdce:	4b44      	ldr	r3, [pc, #272]	@ (800bee0 <USBD_SetConfig+0x150>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d020      	beq.n	800be18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bdd6:	4b42      	ldr	r3, [pc, #264]	@ (800bee0 <USBD_SetConfig+0x150>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bde0:	4b3f      	ldr	r3, [pc, #252]	@ (800bee0 <USBD_SetConfig+0x150>)
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	4619      	mov	r1, r3
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7fe ffe3 	bl	800adb2 <USBD_SetClassConfig>
 800bdec:	4603      	mov	r3, r0
 800bdee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bdf0:	7bfb      	ldrb	r3, [r7, #15]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d008      	beq.n	800be08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f962 	bl	800c0c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2202      	movs	r2, #2
 800be02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be06:	e065      	b.n	800bed4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fa14 	bl	800c236 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2203      	movs	r2, #3
 800be12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800be16:	e05d      	b.n	800bed4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fa0c 	bl	800c236 <USBD_CtlSendStatus>
      break;
 800be1e:	e059      	b.n	800bed4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800be20:	4b2f      	ldr	r3, [pc, #188]	@ (800bee0 <USBD_SetConfig+0x150>)
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d112      	bne.n	800be4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2202      	movs	r2, #2
 800be2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800be30:	4b2b      	ldr	r3, [pc, #172]	@ (800bee0 <USBD_SetConfig+0x150>)
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	461a      	mov	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be3a:	4b29      	ldr	r3, [pc, #164]	@ (800bee0 <USBD_SetConfig+0x150>)
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7fe ffd2 	bl	800adea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f9f5 	bl	800c236 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be4c:	e042      	b.n	800bed4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800be4e:	4b24      	ldr	r3, [pc, #144]	@ (800bee0 <USBD_SetConfig+0x150>)
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d02a      	beq.n	800beb2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	b2db      	uxtb	r3, r3
 800be62:	4619      	mov	r1, r3
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f7fe ffc0 	bl	800adea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800be6a:	4b1d      	ldr	r3, [pc, #116]	@ (800bee0 <USBD_SetConfig+0x150>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	461a      	mov	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be74:	4b1a      	ldr	r3, [pc, #104]	@ (800bee0 <USBD_SetConfig+0x150>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	4619      	mov	r1, r3
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7fe ff99 	bl	800adb2 <USBD_SetClassConfig>
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be84:	7bfb      	ldrb	r3, [r7, #15]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00f      	beq.n	800beaa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 f918 	bl	800c0c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	b2db      	uxtb	r3, r3
 800be98:	4619      	mov	r1, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7fe ffa5 	bl	800adea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2202      	movs	r2, #2
 800bea4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bea8:	e014      	b.n	800bed4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f9c3 	bl	800c236 <USBD_CtlSendStatus>
      break;
 800beb0:	e010      	b.n	800bed4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f9bf 	bl	800c236 <USBD_CtlSendStatus>
      break;
 800beb8:	e00c      	b.n	800bed4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f900 	bl	800c0c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bec2:	4b07      	ldr	r3, [pc, #28]	@ (800bee0 <USBD_SetConfig+0x150>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	4619      	mov	r1, r3
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7fe ff8e 	bl	800adea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bece:	2303      	movs	r3, #3
 800bed0:	73fb      	strb	r3, [r7, #15]
      break;
 800bed2:	bf00      	nop
  }

  return ret;
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	20001388 	.word	0x20001388

0800bee4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	88db      	ldrh	r3, [r3, #6]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d004      	beq.n	800bf00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f8e2 	bl	800c0c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800befe:	e023      	b.n	800bf48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	dc02      	bgt.n	800bf12 <USBD_GetConfig+0x2e>
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	dc03      	bgt.n	800bf18 <USBD_GetConfig+0x34>
 800bf10:	e015      	b.n	800bf3e <USBD_GetConfig+0x5a>
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d00b      	beq.n	800bf2e <USBD_GetConfig+0x4a>
 800bf16:	e012      	b.n	800bf3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	3308      	adds	r3, #8
 800bf22:	2201      	movs	r2, #1
 800bf24:	4619      	mov	r1, r3
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f948 	bl	800c1bc <USBD_CtlSendData>
        break;
 800bf2c:	e00c      	b.n	800bf48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	3304      	adds	r3, #4
 800bf32:	2201      	movs	r2, #1
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f940 	bl	800c1bc <USBD_CtlSendData>
        break;
 800bf3c:	e004      	b.n	800bf48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bf3e:	6839      	ldr	r1, [r7, #0]
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f8be 	bl	800c0c2 <USBD_CtlError>
        break;
 800bf46:	bf00      	nop
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	3b01      	subs	r3, #1
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d81e      	bhi.n	800bfa6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	88db      	ldrh	r3, [r3, #6]
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d004      	beq.n	800bf7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f8a5 	bl	800c0c2 <USBD_CtlError>
        break;
 800bf78:	e01a      	b.n	800bfb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d005      	beq.n	800bf96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	f043 0202 	orr.w	r2, r3, #2
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	330c      	adds	r3, #12
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f90c 	bl	800c1bc <USBD_CtlSendData>
      break;
 800bfa4:	e004      	b.n	800bfb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f88a 	bl	800c0c2 <USBD_CtlError>
      break;
 800bfae:	bf00      	nop
  }
}
 800bfb0:	bf00      	nop
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	885b      	ldrh	r3, [r3, #2]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d107      	bne.n	800bfda <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f92f 	bl	800c236 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bfd8:	e013      	b.n	800c002 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	885b      	ldrh	r3, [r3, #2]
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d10b      	bne.n	800bffa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	889b      	ldrh	r3, [r3, #4]
 800bfe6:	0a1b      	lsrs	r3, r3, #8
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f91f 	bl	800c236 <USBD_CtlSendStatus>
}
 800bff8:	e003      	b.n	800c002 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f860 	bl	800c0c2 <USBD_CtlError>
}
 800c002:	bf00      	nop
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b082      	sub	sp, #8
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	3b01      	subs	r3, #1
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d80b      	bhi.n	800c03a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	885b      	ldrh	r3, [r3, #2]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d10c      	bne.n	800c044 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 f8ff 	bl	800c236 <USBD_CtlSendStatus>
      }
      break;
 800c038:	e004      	b.n	800c044 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 f840 	bl	800c0c2 <USBD_CtlError>
      break;
 800c042:	e000      	b.n	800c046 <USBD_ClrFeature+0x3c>
      break;
 800c044:	bf00      	nop
  }
}
 800c046:	bf00      	nop
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	781a      	ldrb	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	3301      	adds	r3, #1
 800c068:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	781a      	ldrb	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3301      	adds	r3, #1
 800c076:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7ff fa40 	bl	800b4fe <SWAPBYTE>
 800c07e:	4603      	mov	r3, r0
 800c080:	461a      	mov	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	3301      	adds	r3, #1
 800c08a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3301      	adds	r3, #1
 800c090:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f7ff fa33 	bl	800b4fe <SWAPBYTE>
 800c098:	4603      	mov	r3, r0
 800c09a:	461a      	mov	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f7ff fa26 	bl	800b4fe <SWAPBYTE>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	80da      	strh	r2, [r3, #6]
}
 800c0ba:	bf00      	nop
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b082      	sub	sp, #8
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0cc:	2180      	movs	r1, #128	@ 0x80
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fbf6 	bl	800c8c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fbf2 	bl	800c8c0 <USBD_LL_StallEP>
}
 800c0dc:	bf00      	nop
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d042      	beq.n	800c180 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c0fe:	6938      	ldr	r0, [r7, #16]
 800c100:	f000 f842 	bl	800c188 <USBD_GetLen>
 800c104:	4603      	mov	r3, r0
 800c106:	3301      	adds	r3, #1
 800c108:	005b      	lsls	r3, r3, #1
 800c10a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c10e:	d808      	bhi.n	800c122 <USBD_GetString+0x3e>
 800c110:	6938      	ldr	r0, [r7, #16]
 800c112:	f000 f839 	bl	800c188 <USBD_GetLen>
 800c116:	4603      	mov	r3, r0
 800c118:	3301      	adds	r3, #1
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	005b      	lsls	r3, r3, #1
 800c11e:	b29a      	uxth	r2, r3
 800c120:	e001      	b.n	800c126 <USBD_GetString+0x42>
 800c122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c12a:	7dfb      	ldrb	r3, [r7, #23]
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	4413      	add	r3, r2
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	7812      	ldrb	r2, [r2, #0]
 800c134:	701a      	strb	r2, [r3, #0]
  idx++;
 800c136:	7dfb      	ldrb	r3, [r7, #23]
 800c138:	3301      	adds	r3, #1
 800c13a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	4413      	add	r3, r2
 800c142:	2203      	movs	r2, #3
 800c144:	701a      	strb	r2, [r3, #0]
  idx++;
 800c146:	7dfb      	ldrb	r3, [r7, #23]
 800c148:	3301      	adds	r3, #1
 800c14a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c14c:	e013      	b.n	800c176 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c14e:	7dfb      	ldrb	r3, [r7, #23]
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	4413      	add	r3, r2
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	7812      	ldrb	r2, [r2, #0]
 800c158:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	3301      	adds	r3, #1
 800c15e:	613b      	str	r3, [r7, #16]
    idx++;
 800c160:	7dfb      	ldrb	r3, [r7, #23]
 800c162:	3301      	adds	r3, #1
 800c164:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c166:	7dfb      	ldrb	r3, [r7, #23]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	4413      	add	r3, r2
 800c16c:	2200      	movs	r2, #0
 800c16e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c170:	7dfb      	ldrb	r3, [r7, #23]
 800c172:	3301      	adds	r3, #1
 800c174:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1e7      	bne.n	800c14e <USBD_GetString+0x6a>
 800c17e:	e000      	b.n	800c182 <USBD_GetString+0x9e>
    return;
 800c180:	bf00      	nop
  }
}
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c198:	e005      	b.n	800c1a6 <USBD_GetLen+0x1e>
  {
    len++;
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
 800c19c:	3301      	adds	r3, #1
 800c19e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1f5      	bne.n	800c19a <USBD_GetLen+0x12>
  }

  return len;
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3714      	adds	r7, #20
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f000 fbf5 	bl	800c9d2 <USBD_LL_Transmit>

  return USBD_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b084      	sub	sp, #16
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	60f8      	str	r0, [r7, #12]
 800c1fa:	60b9      	str	r1, [r7, #8]
 800c1fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	2100      	movs	r1, #0
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f000 fbe4 	bl	800c9d2 <USBD_LL_Transmit>

  return USBD_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	2100      	movs	r1, #0
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f000 fbf4 	bl	800ca14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b082      	sub	sp, #8
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2204      	movs	r2, #4
 800c242:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c246:	2300      	movs	r3, #0
 800c248:	2200      	movs	r2, #0
 800c24a:	2100      	movs	r1, #0
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 fbc0 	bl	800c9d2 <USBD_LL_Transmit>

  return USBD_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2205      	movs	r2, #5
 800c268:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c26c:	2300      	movs	r3, #0
 800c26e:	2200      	movs	r2, #0
 800c270:	2100      	movs	r1, #0
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fbce 	bl	800ca14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c288:	2200      	movs	r2, #0
 800c28a:	490e      	ldr	r1, [pc, #56]	@ (800c2c4 <MX_USB_DEVICE_Init+0x40>)
 800c28c:	480e      	ldr	r0, [pc, #56]	@ (800c2c8 <MX_USB_DEVICE_Init+0x44>)
 800c28e:	f7fe fd13 	bl	800acb8 <USBD_Init>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d001      	beq.n	800c29c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c298:	f7fa f976 	bl	8006588 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800c29c:	490b      	ldr	r1, [pc, #44]	@ (800c2cc <MX_USB_DEVICE_Init+0x48>)
 800c29e:	480a      	ldr	r0, [pc, #40]	@ (800c2c8 <MX_USB_DEVICE_Init+0x44>)
 800c2a0:	f7fe fd3a 	bl	800ad18 <USBD_RegisterClass>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d001      	beq.n	800c2ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c2aa:	f7fa f96d 	bl	8006588 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c2ae:	4806      	ldr	r0, [pc, #24]	@ (800c2c8 <MX_USB_DEVICE_Init+0x44>)
 800c2b0:	f7fe fd68 	bl	800ad84 <USBD_Start>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800c2ba:	f7fa f965 	bl	8006588 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c2be:	bf00      	nop
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	200000c0 	.word	0x200000c0
 800c2c8:	2000138c 	.word	0x2000138c
 800c2cc:	2000000c 	.word	0x2000000c

0800c2d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	6039      	str	r1, [r7, #0]
 800c2da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	2212      	movs	r2, #18
 800c2e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c2e2:	4b03      	ldr	r3, [pc, #12]	@ (800c2f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	200000dc 	.word	0x200000dc

0800c2f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	6039      	str	r1, [r7, #0]
 800c2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	2204      	movs	r2, #4
 800c304:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c306:	4b03      	ldr	r3, [pc, #12]	@ (800c314 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c308:	4618      	mov	r0, r3
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	200000f0 	.word	0x200000f0

0800c318 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	4603      	mov	r3, r0
 800c320:	6039      	str	r1, [r7, #0]
 800c322:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c324:	79fb      	ldrb	r3, [r7, #7]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d105      	bne.n	800c336 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	4907      	ldr	r1, [pc, #28]	@ (800c34c <USBD_FS_ProductStrDescriptor+0x34>)
 800c32e:	4808      	ldr	r0, [pc, #32]	@ (800c350 <USBD_FS_ProductStrDescriptor+0x38>)
 800c330:	f7ff fed8 	bl	800c0e4 <USBD_GetString>
 800c334:	e004      	b.n	800c340 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	4904      	ldr	r1, [pc, #16]	@ (800c34c <USBD_FS_ProductStrDescriptor+0x34>)
 800c33a:	4805      	ldr	r0, [pc, #20]	@ (800c350 <USBD_FS_ProductStrDescriptor+0x38>)
 800c33c:	f7ff fed2 	bl	800c0e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c340:	4b02      	ldr	r3, [pc, #8]	@ (800c34c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	20001668 	.word	0x20001668
 800c350:	080114c0 	.word	0x080114c0

0800c354 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	6039      	str	r1, [r7, #0]
 800c35e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c360:	683a      	ldr	r2, [r7, #0]
 800c362:	4904      	ldr	r1, [pc, #16]	@ (800c374 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c364:	4804      	ldr	r0, [pc, #16]	@ (800c378 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c366:	f7ff febd 	bl	800c0e4 <USBD_GetString>
  return USBD_StrDesc;
 800c36a:	4b02      	ldr	r3, [pc, #8]	@ (800c374 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	20001668 	.word	0x20001668
 800c378:	080114d8 	.word	0x080114d8

0800c37c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	6039      	str	r1, [r7, #0]
 800c386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	221a      	movs	r2, #26
 800c38c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c38e:	f000 f843 	bl	800c418 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c392:	4b02      	ldr	r3, [pc, #8]	@ (800c39c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c394:	4618      	mov	r0, r3
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	200000f4 	.word	0x200000f4

0800c3a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	6039      	str	r1, [r7, #0]
 800c3aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c3ac:	79fb      	ldrb	r3, [r7, #7]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d105      	bne.n	800c3be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	4907      	ldr	r1, [pc, #28]	@ (800c3d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c3b6:	4808      	ldr	r0, [pc, #32]	@ (800c3d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3b8:	f7ff fe94 	bl	800c0e4 <USBD_GetString>
 800c3bc:	e004      	b.n	800c3c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3be:	683a      	ldr	r2, [r7, #0]
 800c3c0:	4904      	ldr	r1, [pc, #16]	@ (800c3d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c3c2:	4805      	ldr	r0, [pc, #20]	@ (800c3d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3c4:	f7ff fe8e 	bl	800c0e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3c8:	4b02      	ldr	r3, [pc, #8]	@ (800c3d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20001668 	.word	0x20001668
 800c3d8:	080114ec 	.word	0x080114ec

0800c3dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	6039      	str	r1, [r7, #0]
 800c3e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3e8:	79fb      	ldrb	r3, [r7, #7]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d105      	bne.n	800c3fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	4907      	ldr	r1, [pc, #28]	@ (800c410 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c3f2:	4808      	ldr	r0, [pc, #32]	@ (800c414 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c3f4:	f7ff fe76 	bl	800c0e4 <USBD_GetString>
 800c3f8:	e004      	b.n	800c404 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c3fa:	683a      	ldr	r2, [r7, #0]
 800c3fc:	4904      	ldr	r1, [pc, #16]	@ (800c410 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c3fe:	4805      	ldr	r0, [pc, #20]	@ (800c414 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c400:	f7ff fe70 	bl	800c0e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c404:	4b02      	ldr	r3, [pc, #8]	@ (800c410 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c406:	4618      	mov	r0, r3
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	20001668 	.word	0x20001668
 800c414:	080114f8 	.word	0x080114f8

0800c418 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c41e:	4b0f      	ldr	r3, [pc, #60]	@ (800c45c <Get_SerialNum+0x44>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c424:	4b0e      	ldr	r3, [pc, #56]	@ (800c460 <Get_SerialNum+0x48>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c42a:	4b0e      	ldr	r3, [pc, #56]	@ (800c464 <Get_SerialNum+0x4c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4413      	add	r3, r2
 800c436:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d009      	beq.n	800c452 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c43e:	2208      	movs	r2, #8
 800c440:	4909      	ldr	r1, [pc, #36]	@ (800c468 <Get_SerialNum+0x50>)
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f000 f814 	bl	800c470 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c448:	2204      	movs	r2, #4
 800c44a:	4908      	ldr	r1, [pc, #32]	@ (800c46c <Get_SerialNum+0x54>)
 800c44c:	68b8      	ldr	r0, [r7, #8]
 800c44e:	f000 f80f 	bl	800c470 <IntToUnicode>
  }
}
 800c452:	bf00      	nop
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	1fff7a10 	.word	0x1fff7a10
 800c460:	1fff7a14 	.word	0x1fff7a14
 800c464:	1fff7a18 	.word	0x1fff7a18
 800c468:	200000f6 	.word	0x200000f6
 800c46c:	20000106 	.word	0x20000106

0800c470 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c470:	b480      	push	{r7}
 800c472:	b087      	sub	sp, #28
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	4613      	mov	r3, r2
 800c47c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c47e:	2300      	movs	r3, #0
 800c480:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c482:	2300      	movs	r3, #0
 800c484:	75fb      	strb	r3, [r7, #23]
 800c486:	e027      	b.n	800c4d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	0f1b      	lsrs	r3, r3, #28
 800c48c:	2b09      	cmp	r3, #9
 800c48e:	d80b      	bhi.n	800c4a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	0f1b      	lsrs	r3, r3, #28
 800c494:	b2da      	uxtb	r2, r3
 800c496:	7dfb      	ldrb	r3, [r7, #23]
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	4619      	mov	r1, r3
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	440b      	add	r3, r1
 800c4a0:	3230      	adds	r2, #48	@ 0x30
 800c4a2:	b2d2      	uxtb	r2, r2
 800c4a4:	701a      	strb	r2, [r3, #0]
 800c4a6:	e00a      	b.n	800c4be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	0f1b      	lsrs	r3, r3, #28
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
 800c4b0:	005b      	lsls	r3, r3, #1
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	440b      	add	r3, r1
 800c4b8:	3237      	adds	r2, #55	@ 0x37
 800c4ba:	b2d2      	uxtb	r2, r2
 800c4bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	011b      	lsls	r3, r3, #4
 800c4c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
 800c4c6:	005b      	lsls	r3, r3, #1
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c4d2:	7dfb      	ldrb	r3, [r7, #23]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	75fb      	strb	r3, [r7, #23]
 800c4d8:	7dfa      	ldrb	r2, [r7, #23]
 800c4da:	79fb      	ldrb	r3, [r7, #7]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d3d3      	bcc.n	800c488 <IntToUnicode+0x18>
  }
}
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	371c      	adds	r7, #28
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
	...

0800c4f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08a      	sub	sp, #40	@ 0x28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4f8:	f107 0314 	add.w	r3, r7, #20
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	601a      	str	r2, [r3, #0]
 800c500:	605a      	str	r2, [r3, #4]
 800c502:	609a      	str	r2, [r3, #8]
 800c504:	60da      	str	r2, [r3, #12]
 800c506:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c510:	d13a      	bne.n	800c588 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c512:	2300      	movs	r3, #0
 800c514:	613b      	str	r3, [r7, #16]
 800c516:	4b1e      	ldr	r3, [pc, #120]	@ (800c590 <HAL_PCD_MspInit+0xa0>)
 800c518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c51a:	4a1d      	ldr	r2, [pc, #116]	@ (800c590 <HAL_PCD_MspInit+0xa0>)
 800c51c:	f043 0301 	orr.w	r3, r3, #1
 800c520:	6313      	str	r3, [r2, #48]	@ 0x30
 800c522:	4b1b      	ldr	r3, [pc, #108]	@ (800c590 <HAL_PCD_MspInit+0xa0>)
 800c524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c526:	f003 0301 	and.w	r3, r3, #1
 800c52a:	613b      	str	r3, [r7, #16]
 800c52c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c52e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c534:	2302      	movs	r3, #2
 800c536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c538:	2300      	movs	r3, #0
 800c53a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c53c:	2303      	movs	r3, #3
 800c53e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c540:	230a      	movs	r3, #10
 800c542:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c544:	f107 0314 	add.w	r3, r7, #20
 800c548:	4619      	mov	r1, r3
 800c54a:	4812      	ldr	r0, [pc, #72]	@ (800c594 <HAL_PCD_MspInit+0xa4>)
 800c54c:	f7fa fb58 	bl	8006c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c550:	4b0f      	ldr	r3, [pc, #60]	@ (800c590 <HAL_PCD_MspInit+0xa0>)
 800c552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c554:	4a0e      	ldr	r2, [pc, #56]	@ (800c590 <HAL_PCD_MspInit+0xa0>)
 800c556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c55a:	6353      	str	r3, [r2, #52]	@ 0x34
 800c55c:	2300      	movs	r3, #0
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	4b0b      	ldr	r3, [pc, #44]	@ (800c590 <HAL_PCD_MspInit+0xa0>)
 800c562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c564:	4a0a      	ldr	r2, [pc, #40]	@ (800c590 <HAL_PCD_MspInit+0xa0>)
 800c566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c56a:	6453      	str	r3, [r2, #68]	@ 0x44
 800c56c:	4b08      	ldr	r3, [pc, #32]	@ (800c590 <HAL_PCD_MspInit+0xa0>)
 800c56e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c574:	60fb      	str	r3, [r7, #12]
 800c576:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c578:	2200      	movs	r2, #0
 800c57a:	2100      	movs	r1, #0
 800c57c:	2043      	movs	r0, #67	@ 0x43
 800c57e:	f7fa fb08 	bl	8006b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c582:	2043      	movs	r0, #67	@ 0x43
 800c584:	f7fa fb21 	bl	8006bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c588:	bf00      	nop
 800c58a:	3728      	adds	r7, #40	@ 0x28
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	40023800 	.word	0x40023800
 800c594:	40020000 	.word	0x40020000

0800c598 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	f7fe fc35 	bl	800ae1e <USBD_LL_SetupStage>
}
 800c5b4:	bf00      	nop
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c5ce:	78fa      	ldrb	r2, [r7, #3]
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	440b      	add	r3, r1
 800c5dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	78fb      	ldrb	r3, [r7, #3]
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f7fe fc6f 	bl	800aec8 <USBD_LL_DataOutStage>
}
 800c5ea:	bf00      	nop
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b082      	sub	sp, #8
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c604:	78fa      	ldrb	r2, [r7, #3]
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	4613      	mov	r3, r2
 800c60a:	00db      	lsls	r3, r3, #3
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	440b      	add	r3, r1
 800c612:	3320      	adds	r3, #32
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	78fb      	ldrb	r3, [r7, #3]
 800c618:	4619      	mov	r1, r3
 800c61a:	f7fe fd08 	bl	800b02e <USBD_LL_DataInStage>
}
 800c61e:	bf00      	nop
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b082      	sub	sp, #8
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c634:	4618      	mov	r0, r3
 800c636:	f7fe fe42 	bl	800b2be <USBD_LL_SOF>
}
 800c63a:	bf00      	nop
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c64a:	2301      	movs	r3, #1
 800c64c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	79db      	ldrb	r3, [r3, #7]
 800c652:	2b02      	cmp	r3, #2
 800c654:	d001      	beq.n	800c65a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c656:	f7f9 ff97 	bl	8006588 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c660:	7bfa      	ldrb	r2, [r7, #15]
 800c662:	4611      	mov	r1, r2
 800c664:	4618      	mov	r0, r3
 800c666:	f7fe fde6 	bl	800b236 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c670:	4618      	mov	r0, r3
 800c672:	f7fe fd8e 	bl	800b192 <USBD_LL_Reset>
}
 800c676:	bf00      	nop
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fe fde1 	bl	800b256 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	6812      	ldr	r2, [r2, #0]
 800c6a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c6a6:	f043 0301 	orr.w	r3, r3, #1
 800c6aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	7adb      	ldrb	r3, [r3, #11]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d005      	beq.n	800c6c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c6b4:	4b04      	ldr	r3, [pc, #16]	@ (800c6c8 <HAL_PCD_SuspendCallback+0x48>)
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	4a03      	ldr	r2, [pc, #12]	@ (800c6c8 <HAL_PCD_SuspendCallback+0x48>)
 800c6ba:	f043 0306 	orr.w	r3, r3, #6
 800c6be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	e000ed00 	.word	0xe000ed00

0800c6cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe fdd7 	bl	800b28e <USBD_LL_Resume>
}
 800c6e0:	bf00      	nop
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6fa:	78fa      	ldrb	r2, [r7, #3]
 800c6fc:	4611      	mov	r1, r2
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe fe2f 	bl	800b362 <USBD_LL_IsoOUTIncomplete>
}
 800c704:	bf00      	nop
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	460b      	mov	r3, r1
 800c716:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c71e:	78fa      	ldrb	r2, [r7, #3]
 800c720:	4611      	mov	r1, r2
 800c722:	4618      	mov	r0, r3
 800c724:	f7fe fdeb 	bl	800b2fe <USBD_LL_IsoINIncomplete>
}
 800c728:	bf00      	nop
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fe fe41 	bl	800b3c6 <USBD_LL_DevConnected>
}
 800c744:	bf00      	nop
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe fe3e 	bl	800b3dc <USBD_LL_DevDisconnected>
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d13c      	bne.n	800c7f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c778:	4a20      	ldr	r2, [pc, #128]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a1e      	ldr	r2, [pc, #120]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c784:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c788:	4b1c      	ldr	r3, [pc, #112]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c78a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c78e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c790:	4b1a      	ldr	r3, [pc, #104]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c792:	2204      	movs	r2, #4
 800c794:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c796:	4b19      	ldr	r3, [pc, #100]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c798:	2202      	movs	r2, #2
 800c79a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c79c:	4b17      	ldr	r3, [pc, #92]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c7a2:	4b16      	ldr	r3, [pc, #88]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c7a4:	2202      	movs	r2, #2
 800c7a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c7a8:	4b14      	ldr	r3, [pc, #80]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c7ae:	4b13      	ldr	r3, [pc, #76]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c7b4:	4b11      	ldr	r3, [pc, #68]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c7ba:	4b10      	ldr	r3, [pc, #64]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c7c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c7c6:	480d      	ldr	r0, [pc, #52]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c7c8:	f7fa fbcf 	bl	8006f6a <HAL_PCD_Init>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c7d2:	f7f9 fed9 	bl	8006588 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c7d6:	2180      	movs	r1, #128	@ 0x80
 800c7d8:	4808      	ldr	r0, [pc, #32]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c7da:	f7fb fde4 	bl	80083a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c7de:	2240      	movs	r2, #64	@ 0x40
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	4806      	ldr	r0, [pc, #24]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c7e4:	f7fb fd98 	bl	8008318 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c7e8:	2280      	movs	r2, #128	@ 0x80
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	4803      	ldr	r0, [pc, #12]	@ (800c7fc <USBD_LL_Init+0x94>)
 800c7ee:	f7fb fd93 	bl	8008318 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20001868 	.word	0x20001868

0800c800 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c80c:	2300      	movs	r3, #0
 800c80e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c816:	4618      	mov	r0, r3
 800c818:	f7fa fcb6 	bl	8007188 <HAL_PCD_Start>
 800c81c:	4603      	mov	r3, r0
 800c81e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c820:	7bfb      	ldrb	r3, [r7, #15]
 800c822:	4618      	mov	r0, r3
 800c824:	f000 f930 	bl	800ca88 <USBD_Get_USB_Status>
 800c828:	4603      	mov	r3, r0
 800c82a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c82c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b084      	sub	sp, #16
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
 800c83e:	4608      	mov	r0, r1
 800c840:	4611      	mov	r1, r2
 800c842:	461a      	mov	r2, r3
 800c844:	4603      	mov	r3, r0
 800c846:	70fb      	strb	r3, [r7, #3]
 800c848:	460b      	mov	r3, r1
 800c84a:	70bb      	strb	r3, [r7, #2]
 800c84c:	4613      	mov	r3, r2
 800c84e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c850:	2300      	movs	r3, #0
 800c852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c854:	2300      	movs	r3, #0
 800c856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c85e:	78bb      	ldrb	r3, [r7, #2]
 800c860:	883a      	ldrh	r2, [r7, #0]
 800c862:	78f9      	ldrb	r1, [r7, #3]
 800c864:	f7fb f98a 	bl	8007b7c <HAL_PCD_EP_Open>
 800c868:	4603      	mov	r3, r0
 800c86a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 f90a 	bl	800ca88 <USBD_Get_USB_Status>
 800c874:	4603      	mov	r3, r0
 800c876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c878:	7bbb      	ldrb	r3, [r7, #14]
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b084      	sub	sp, #16
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	460b      	mov	r3, r1
 800c88c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c892:	2300      	movs	r3, #0
 800c894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c89c:	78fa      	ldrb	r2, [r7, #3]
 800c89e:	4611      	mov	r1, r2
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fb f9d5 	bl	8007c50 <HAL_PCD_EP_Close>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f000 f8eb 	bl	800ca88 <USBD_Get_USB_Status>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8da:	78fa      	ldrb	r2, [r7, #3]
 800c8dc:	4611      	mov	r1, r2
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fb fa75 	bl	8007dce <HAL_PCD_EP_SetStall>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f000 f8cc 	bl	800ca88 <USBD_Get_USB_Status>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b084      	sub	sp, #16
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	460b      	mov	r3, r1
 800c908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c918:	78fa      	ldrb	r2, [r7, #3]
 800c91a:	4611      	mov	r1, r2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fb fab9 	bl	8007e94 <HAL_PCD_EP_ClrStall>
 800c922:	4603      	mov	r3, r0
 800c924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c926:	7bfb      	ldrb	r3, [r7, #15]
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 f8ad 	bl	800ca88 <USBD_Get_USB_Status>
 800c92e:	4603      	mov	r3, r0
 800c930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c932:	7bbb      	ldrb	r3, [r7, #14]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	460b      	mov	r3, r1
 800c946:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c94e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c954:	2b00      	cmp	r3, #0
 800c956:	da0b      	bge.n	800c970 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c958:	78fb      	ldrb	r3, [r7, #3]
 800c95a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c95e:	68f9      	ldr	r1, [r7, #12]
 800c960:	4613      	mov	r3, r2
 800c962:	00db      	lsls	r3, r3, #3
 800c964:	4413      	add	r3, r2
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	440b      	add	r3, r1
 800c96a:	3316      	adds	r3, #22
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	e00b      	b.n	800c988 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c970:	78fb      	ldrb	r3, [r7, #3]
 800c972:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c976:	68f9      	ldr	r1, [r7, #12]
 800c978:	4613      	mov	r3, r2
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	4413      	add	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	440b      	add	r3, r1
 800c982:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c986:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	460b      	mov	r3, r1
 800c99e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9ae:	78fa      	ldrb	r2, [r7, #3]
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fb f8be 	bl	8007b34 <HAL_PCD_SetAddress>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 f862 	bl	800ca88 <USBD_Get_USB_Status>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b086      	sub	sp, #24
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	60f8      	str	r0, [r7, #12]
 800c9da:	607a      	str	r2, [r7, #4]
 800c9dc:	603b      	str	r3, [r7, #0]
 800c9de:	460b      	mov	r3, r1
 800c9e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c9f0:	7af9      	ldrb	r1, [r7, #11]
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	f7fb f9b0 	bl	8007d5a <HAL_PCD_EP_Transmit>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f000 f841 	bl	800ca88 <USBD_Get_USB_Status>
 800ca06:	4603      	mov	r3, r0
 800ca08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3718      	adds	r7, #24
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	607a      	str	r2, [r7, #4]
 800ca1e:	603b      	str	r3, [r7, #0]
 800ca20:	460b      	mov	r3, r1
 800ca22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ca32:	7af9      	ldrb	r1, [r7, #11]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	f7fb f954 	bl	8007ce4 <HAL_PCD_EP_Receive>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca40:	7dfb      	ldrb	r3, [r7, #23]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 f820 	bl	800ca88 <USBD_Get_USB_Status>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3718      	adds	r7, #24
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
	...

0800ca58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca60:	4b03      	ldr	r3, [pc, #12]	@ (800ca70 <USBD_static_malloc+0x18>)
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	370c      	adds	r7, #12
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	20001d4c 	.word	0x20001d4c

0800ca74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]

}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	4603      	mov	r3, r0
 800ca90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca96:	79fb      	ldrb	r3, [r7, #7]
 800ca98:	2b03      	cmp	r3, #3
 800ca9a:	d817      	bhi.n	800cacc <USBD_Get_USB_Status+0x44>
 800ca9c:	a201      	add	r2, pc, #4	@ (adr r2, 800caa4 <USBD_Get_USB_Status+0x1c>)
 800ca9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa2:	bf00      	nop
 800caa4:	0800cab5 	.word	0x0800cab5
 800caa8:	0800cabb 	.word	0x0800cabb
 800caac:	0800cac1 	.word	0x0800cac1
 800cab0:	0800cac7 	.word	0x0800cac7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cab4:	2300      	movs	r3, #0
 800cab6:	73fb      	strb	r3, [r7, #15]
    break;
 800cab8:	e00b      	b.n	800cad2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800caba:	2303      	movs	r3, #3
 800cabc:	73fb      	strb	r3, [r7, #15]
    break;
 800cabe:	e008      	b.n	800cad2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cac0:	2301      	movs	r3, #1
 800cac2:	73fb      	strb	r3, [r7, #15]
    break;
 800cac4:	e005      	b.n	800cad2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cac6:	2303      	movs	r3, #3
 800cac8:	73fb      	strb	r3, [r7, #15]
    break;
 800caca:	e002      	b.n	800cad2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cacc:	2303      	movs	r3, #3
 800cace:	73fb      	strb	r3, [r7, #15]
    break;
 800cad0:	bf00      	nop
  }
  return usb_status;
 800cad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <exit>:
 800cae0:	b508      	push	{r3, lr}
 800cae2:	4b06      	ldr	r3, [pc, #24]	@ (800cafc <exit+0x1c>)
 800cae4:	4604      	mov	r4, r0
 800cae6:	b113      	cbz	r3, 800caee <exit+0xe>
 800cae8:	2100      	movs	r1, #0
 800caea:	f3af 8000 	nop.w
 800caee:	4b04      	ldr	r3, [pc, #16]	@ (800cb00 <exit+0x20>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	b103      	cbz	r3, 800caf6 <exit+0x16>
 800caf4:	4798      	blx	r3
 800caf6:	4620      	mov	r0, r4
 800caf8:	f7f9 fdf0 	bl	80066dc <_exit>
 800cafc:	00000000 	.word	0x00000000
 800cb00:	20001ea0 	.word	0x20001ea0

0800cb04 <malloc>:
 800cb04:	4b02      	ldr	r3, [pc, #8]	@ (800cb10 <malloc+0xc>)
 800cb06:	4601      	mov	r1, r0
 800cb08:	6818      	ldr	r0, [r3, #0]
 800cb0a:	f000 b825 	b.w	800cb58 <_malloc_r>
 800cb0e:	bf00      	nop
 800cb10:	2000011c 	.word	0x2000011c

0800cb14 <sbrk_aligned>:
 800cb14:	b570      	push	{r4, r5, r6, lr}
 800cb16:	4e0f      	ldr	r6, [pc, #60]	@ (800cb54 <sbrk_aligned+0x40>)
 800cb18:	460c      	mov	r4, r1
 800cb1a:	6831      	ldr	r1, [r6, #0]
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	b911      	cbnz	r1, 800cb26 <sbrk_aligned+0x12>
 800cb20:	f000 faea 	bl	800d0f8 <_sbrk_r>
 800cb24:	6030      	str	r0, [r6, #0]
 800cb26:	4621      	mov	r1, r4
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f000 fae5 	bl	800d0f8 <_sbrk_r>
 800cb2e:	1c43      	adds	r3, r0, #1
 800cb30:	d103      	bne.n	800cb3a <sbrk_aligned+0x26>
 800cb32:	f04f 34ff 	mov.w	r4, #4294967295
 800cb36:	4620      	mov	r0, r4
 800cb38:	bd70      	pop	{r4, r5, r6, pc}
 800cb3a:	1cc4      	adds	r4, r0, #3
 800cb3c:	f024 0403 	bic.w	r4, r4, #3
 800cb40:	42a0      	cmp	r0, r4
 800cb42:	d0f8      	beq.n	800cb36 <sbrk_aligned+0x22>
 800cb44:	1a21      	subs	r1, r4, r0
 800cb46:	4628      	mov	r0, r5
 800cb48:	f000 fad6 	bl	800d0f8 <_sbrk_r>
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	d1f2      	bne.n	800cb36 <sbrk_aligned+0x22>
 800cb50:	e7ef      	b.n	800cb32 <sbrk_aligned+0x1e>
 800cb52:	bf00      	nop
 800cb54:	20001d60 	.word	0x20001d60

0800cb58 <_malloc_r>:
 800cb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb5c:	1ccd      	adds	r5, r1, #3
 800cb5e:	f025 0503 	bic.w	r5, r5, #3
 800cb62:	3508      	adds	r5, #8
 800cb64:	2d0c      	cmp	r5, #12
 800cb66:	bf38      	it	cc
 800cb68:	250c      	movcc	r5, #12
 800cb6a:	2d00      	cmp	r5, #0
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	db01      	blt.n	800cb74 <_malloc_r+0x1c>
 800cb70:	42a9      	cmp	r1, r5
 800cb72:	d904      	bls.n	800cb7e <_malloc_r+0x26>
 800cb74:	230c      	movs	r3, #12
 800cb76:	6033      	str	r3, [r6, #0]
 800cb78:	2000      	movs	r0, #0
 800cb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc54 <_malloc_r+0xfc>
 800cb82:	f000 f869 	bl	800cc58 <__malloc_lock>
 800cb86:	f8d8 3000 	ldr.w	r3, [r8]
 800cb8a:	461c      	mov	r4, r3
 800cb8c:	bb44      	cbnz	r4, 800cbe0 <_malloc_r+0x88>
 800cb8e:	4629      	mov	r1, r5
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7ff ffbf 	bl	800cb14 <sbrk_aligned>
 800cb96:	1c43      	adds	r3, r0, #1
 800cb98:	4604      	mov	r4, r0
 800cb9a:	d158      	bne.n	800cc4e <_malloc_r+0xf6>
 800cb9c:	f8d8 4000 	ldr.w	r4, [r8]
 800cba0:	4627      	mov	r7, r4
 800cba2:	2f00      	cmp	r7, #0
 800cba4:	d143      	bne.n	800cc2e <_malloc_r+0xd6>
 800cba6:	2c00      	cmp	r4, #0
 800cba8:	d04b      	beq.n	800cc42 <_malloc_r+0xea>
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	4639      	mov	r1, r7
 800cbae:	4630      	mov	r0, r6
 800cbb0:	eb04 0903 	add.w	r9, r4, r3
 800cbb4:	f000 faa0 	bl	800d0f8 <_sbrk_r>
 800cbb8:	4581      	cmp	r9, r0
 800cbba:	d142      	bne.n	800cc42 <_malloc_r+0xea>
 800cbbc:	6821      	ldr	r1, [r4, #0]
 800cbbe:	1a6d      	subs	r5, r5, r1
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	f7ff ffa6 	bl	800cb14 <sbrk_aligned>
 800cbc8:	3001      	adds	r0, #1
 800cbca:	d03a      	beq.n	800cc42 <_malloc_r+0xea>
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	442b      	add	r3, r5
 800cbd0:	6023      	str	r3, [r4, #0]
 800cbd2:	f8d8 3000 	ldr.w	r3, [r8]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	bb62      	cbnz	r2, 800cc34 <_malloc_r+0xdc>
 800cbda:	f8c8 7000 	str.w	r7, [r8]
 800cbde:	e00f      	b.n	800cc00 <_malloc_r+0xa8>
 800cbe0:	6822      	ldr	r2, [r4, #0]
 800cbe2:	1b52      	subs	r2, r2, r5
 800cbe4:	d420      	bmi.n	800cc28 <_malloc_r+0xd0>
 800cbe6:	2a0b      	cmp	r2, #11
 800cbe8:	d917      	bls.n	800cc1a <_malloc_r+0xc2>
 800cbea:	1961      	adds	r1, r4, r5
 800cbec:	42a3      	cmp	r3, r4
 800cbee:	6025      	str	r5, [r4, #0]
 800cbf0:	bf18      	it	ne
 800cbf2:	6059      	strne	r1, [r3, #4]
 800cbf4:	6863      	ldr	r3, [r4, #4]
 800cbf6:	bf08      	it	eq
 800cbf8:	f8c8 1000 	streq.w	r1, [r8]
 800cbfc:	5162      	str	r2, [r4, r5]
 800cbfe:	604b      	str	r3, [r1, #4]
 800cc00:	4630      	mov	r0, r6
 800cc02:	f000 f82f 	bl	800cc64 <__malloc_unlock>
 800cc06:	f104 000b 	add.w	r0, r4, #11
 800cc0a:	1d23      	adds	r3, r4, #4
 800cc0c:	f020 0007 	bic.w	r0, r0, #7
 800cc10:	1ac2      	subs	r2, r0, r3
 800cc12:	bf1c      	itt	ne
 800cc14:	1a1b      	subne	r3, r3, r0
 800cc16:	50a3      	strne	r3, [r4, r2]
 800cc18:	e7af      	b.n	800cb7a <_malloc_r+0x22>
 800cc1a:	6862      	ldr	r2, [r4, #4]
 800cc1c:	42a3      	cmp	r3, r4
 800cc1e:	bf0c      	ite	eq
 800cc20:	f8c8 2000 	streq.w	r2, [r8]
 800cc24:	605a      	strne	r2, [r3, #4]
 800cc26:	e7eb      	b.n	800cc00 <_malloc_r+0xa8>
 800cc28:	4623      	mov	r3, r4
 800cc2a:	6864      	ldr	r4, [r4, #4]
 800cc2c:	e7ae      	b.n	800cb8c <_malloc_r+0x34>
 800cc2e:	463c      	mov	r4, r7
 800cc30:	687f      	ldr	r7, [r7, #4]
 800cc32:	e7b6      	b.n	800cba2 <_malloc_r+0x4a>
 800cc34:	461a      	mov	r2, r3
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	d1fb      	bne.n	800cc34 <_malloc_r+0xdc>
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	6053      	str	r3, [r2, #4]
 800cc40:	e7de      	b.n	800cc00 <_malloc_r+0xa8>
 800cc42:	230c      	movs	r3, #12
 800cc44:	6033      	str	r3, [r6, #0]
 800cc46:	4630      	mov	r0, r6
 800cc48:	f000 f80c 	bl	800cc64 <__malloc_unlock>
 800cc4c:	e794      	b.n	800cb78 <_malloc_r+0x20>
 800cc4e:	6005      	str	r5, [r0, #0]
 800cc50:	e7d6      	b.n	800cc00 <_malloc_r+0xa8>
 800cc52:	bf00      	nop
 800cc54:	20001d64 	.word	0x20001d64

0800cc58 <__malloc_lock>:
 800cc58:	4801      	ldr	r0, [pc, #4]	@ (800cc60 <__malloc_lock+0x8>)
 800cc5a:	f000 ba9a 	b.w	800d192 <__retarget_lock_acquire_recursive>
 800cc5e:	bf00      	nop
 800cc60:	20001ea8 	.word	0x20001ea8

0800cc64 <__malloc_unlock>:
 800cc64:	4801      	ldr	r0, [pc, #4]	@ (800cc6c <__malloc_unlock+0x8>)
 800cc66:	f000 ba95 	b.w	800d194 <__retarget_lock_release_recursive>
 800cc6a:	bf00      	nop
 800cc6c:	20001ea8 	.word	0x20001ea8

0800cc70 <std>:
 800cc70:	2300      	movs	r3, #0
 800cc72:	b510      	push	{r4, lr}
 800cc74:	4604      	mov	r4, r0
 800cc76:	e9c0 3300 	strd	r3, r3, [r0]
 800cc7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc7e:	6083      	str	r3, [r0, #8]
 800cc80:	8181      	strh	r1, [r0, #12]
 800cc82:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc84:	81c2      	strh	r2, [r0, #14]
 800cc86:	6183      	str	r3, [r0, #24]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	2208      	movs	r2, #8
 800cc8c:	305c      	adds	r0, #92	@ 0x5c
 800cc8e:	f000 f9e3 	bl	800d058 <memset>
 800cc92:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc8 <std+0x58>)
 800cc94:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc96:	4b0d      	ldr	r3, [pc, #52]	@ (800cccc <std+0x5c>)
 800cc98:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd0 <std+0x60>)
 800cc9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd4 <std+0x64>)
 800cca0:	6323      	str	r3, [r4, #48]	@ 0x30
 800cca2:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd8 <std+0x68>)
 800cca4:	6224      	str	r4, [r4, #32]
 800cca6:	429c      	cmp	r4, r3
 800cca8:	d006      	beq.n	800ccb8 <std+0x48>
 800ccaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ccae:	4294      	cmp	r4, r2
 800ccb0:	d002      	beq.n	800ccb8 <std+0x48>
 800ccb2:	33d0      	adds	r3, #208	@ 0xd0
 800ccb4:	429c      	cmp	r4, r3
 800ccb6:	d105      	bne.n	800ccc4 <std+0x54>
 800ccb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ccbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc0:	f000 ba66 	b.w	800d190 <__retarget_lock_init_recursive>
 800ccc4:	bd10      	pop	{r4, pc}
 800ccc6:	bf00      	nop
 800ccc8:	0800cea9 	.word	0x0800cea9
 800cccc:	0800cecb 	.word	0x0800cecb
 800ccd0:	0800cf03 	.word	0x0800cf03
 800ccd4:	0800cf27 	.word	0x0800cf27
 800ccd8:	20001d68 	.word	0x20001d68

0800ccdc <stdio_exit_handler>:
 800ccdc:	4a02      	ldr	r2, [pc, #8]	@ (800cce8 <stdio_exit_handler+0xc>)
 800ccde:	4903      	ldr	r1, [pc, #12]	@ (800ccec <stdio_exit_handler+0x10>)
 800cce0:	4803      	ldr	r0, [pc, #12]	@ (800ccf0 <stdio_exit_handler+0x14>)
 800cce2:	f000 b869 	b.w	800cdb8 <_fwalk_sglue>
 800cce6:	bf00      	nop
 800cce8:	20000110 	.word	0x20000110
 800ccec:	0800d345 	.word	0x0800d345
 800ccf0:	20000120 	.word	0x20000120

0800ccf4 <cleanup_stdio>:
 800ccf4:	6841      	ldr	r1, [r0, #4]
 800ccf6:	4b0c      	ldr	r3, [pc, #48]	@ (800cd28 <cleanup_stdio+0x34>)
 800ccf8:	4299      	cmp	r1, r3
 800ccfa:	b510      	push	{r4, lr}
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	d001      	beq.n	800cd04 <cleanup_stdio+0x10>
 800cd00:	f000 fb20 	bl	800d344 <_fflush_r>
 800cd04:	68a1      	ldr	r1, [r4, #8]
 800cd06:	4b09      	ldr	r3, [pc, #36]	@ (800cd2c <cleanup_stdio+0x38>)
 800cd08:	4299      	cmp	r1, r3
 800cd0a:	d002      	beq.n	800cd12 <cleanup_stdio+0x1e>
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f000 fb19 	bl	800d344 <_fflush_r>
 800cd12:	68e1      	ldr	r1, [r4, #12]
 800cd14:	4b06      	ldr	r3, [pc, #24]	@ (800cd30 <cleanup_stdio+0x3c>)
 800cd16:	4299      	cmp	r1, r3
 800cd18:	d004      	beq.n	800cd24 <cleanup_stdio+0x30>
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd20:	f000 bb10 	b.w	800d344 <_fflush_r>
 800cd24:	bd10      	pop	{r4, pc}
 800cd26:	bf00      	nop
 800cd28:	20001d68 	.word	0x20001d68
 800cd2c:	20001dd0 	.word	0x20001dd0
 800cd30:	20001e38 	.word	0x20001e38

0800cd34 <global_stdio_init.part.0>:
 800cd34:	b510      	push	{r4, lr}
 800cd36:	4b0b      	ldr	r3, [pc, #44]	@ (800cd64 <global_stdio_init.part.0+0x30>)
 800cd38:	4c0b      	ldr	r4, [pc, #44]	@ (800cd68 <global_stdio_init.part.0+0x34>)
 800cd3a:	4a0c      	ldr	r2, [pc, #48]	@ (800cd6c <global_stdio_init.part.0+0x38>)
 800cd3c:	601a      	str	r2, [r3, #0]
 800cd3e:	4620      	mov	r0, r4
 800cd40:	2200      	movs	r2, #0
 800cd42:	2104      	movs	r1, #4
 800cd44:	f7ff ff94 	bl	800cc70 <std>
 800cd48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	2109      	movs	r1, #9
 800cd50:	f7ff ff8e 	bl	800cc70 <std>
 800cd54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd58:	2202      	movs	r2, #2
 800cd5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd5e:	2112      	movs	r1, #18
 800cd60:	f7ff bf86 	b.w	800cc70 <std>
 800cd64:	20001ea0 	.word	0x20001ea0
 800cd68:	20001d68 	.word	0x20001d68
 800cd6c:	0800ccdd 	.word	0x0800ccdd

0800cd70 <__sfp_lock_acquire>:
 800cd70:	4801      	ldr	r0, [pc, #4]	@ (800cd78 <__sfp_lock_acquire+0x8>)
 800cd72:	f000 ba0e 	b.w	800d192 <__retarget_lock_acquire_recursive>
 800cd76:	bf00      	nop
 800cd78:	20001ea9 	.word	0x20001ea9

0800cd7c <__sfp_lock_release>:
 800cd7c:	4801      	ldr	r0, [pc, #4]	@ (800cd84 <__sfp_lock_release+0x8>)
 800cd7e:	f000 ba09 	b.w	800d194 <__retarget_lock_release_recursive>
 800cd82:	bf00      	nop
 800cd84:	20001ea9 	.word	0x20001ea9

0800cd88 <__sinit>:
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	f7ff fff0 	bl	800cd70 <__sfp_lock_acquire>
 800cd90:	6a23      	ldr	r3, [r4, #32]
 800cd92:	b11b      	cbz	r3, 800cd9c <__sinit+0x14>
 800cd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd98:	f7ff bff0 	b.w	800cd7c <__sfp_lock_release>
 800cd9c:	4b04      	ldr	r3, [pc, #16]	@ (800cdb0 <__sinit+0x28>)
 800cd9e:	6223      	str	r3, [r4, #32]
 800cda0:	4b04      	ldr	r3, [pc, #16]	@ (800cdb4 <__sinit+0x2c>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1f5      	bne.n	800cd94 <__sinit+0xc>
 800cda8:	f7ff ffc4 	bl	800cd34 <global_stdio_init.part.0>
 800cdac:	e7f2      	b.n	800cd94 <__sinit+0xc>
 800cdae:	bf00      	nop
 800cdb0:	0800ccf5 	.word	0x0800ccf5
 800cdb4:	20001ea0 	.word	0x20001ea0

0800cdb8 <_fwalk_sglue>:
 800cdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdbc:	4607      	mov	r7, r0
 800cdbe:	4688      	mov	r8, r1
 800cdc0:	4614      	mov	r4, r2
 800cdc2:	2600      	movs	r6, #0
 800cdc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdc8:	f1b9 0901 	subs.w	r9, r9, #1
 800cdcc:	d505      	bpl.n	800cdda <_fwalk_sglue+0x22>
 800cdce:	6824      	ldr	r4, [r4, #0]
 800cdd0:	2c00      	cmp	r4, #0
 800cdd2:	d1f7      	bne.n	800cdc4 <_fwalk_sglue+0xc>
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdda:	89ab      	ldrh	r3, [r5, #12]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d907      	bls.n	800cdf0 <_fwalk_sglue+0x38>
 800cde0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cde4:	3301      	adds	r3, #1
 800cde6:	d003      	beq.n	800cdf0 <_fwalk_sglue+0x38>
 800cde8:	4629      	mov	r1, r5
 800cdea:	4638      	mov	r0, r7
 800cdec:	47c0      	blx	r8
 800cdee:	4306      	orrs	r6, r0
 800cdf0:	3568      	adds	r5, #104	@ 0x68
 800cdf2:	e7e9      	b.n	800cdc8 <_fwalk_sglue+0x10>

0800cdf4 <_fwrite_r>:
 800cdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf8:	9c08      	ldr	r4, [sp, #32]
 800cdfa:	468a      	mov	sl, r1
 800cdfc:	4690      	mov	r8, r2
 800cdfe:	fb02 f903 	mul.w	r9, r2, r3
 800ce02:	4606      	mov	r6, r0
 800ce04:	b118      	cbz	r0, 800ce0e <_fwrite_r+0x1a>
 800ce06:	6a03      	ldr	r3, [r0, #32]
 800ce08:	b90b      	cbnz	r3, 800ce0e <_fwrite_r+0x1a>
 800ce0a:	f7ff ffbd 	bl	800cd88 <__sinit>
 800ce0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce10:	07dd      	lsls	r5, r3, #31
 800ce12:	d405      	bmi.n	800ce20 <_fwrite_r+0x2c>
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	0598      	lsls	r0, r3, #22
 800ce18:	d402      	bmi.n	800ce20 <_fwrite_r+0x2c>
 800ce1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce1c:	f000 f9b9 	bl	800d192 <__retarget_lock_acquire_recursive>
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	0719      	lsls	r1, r3, #28
 800ce24:	d516      	bpl.n	800ce54 <_fwrite_r+0x60>
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	b1a3      	cbz	r3, 800ce54 <_fwrite_r+0x60>
 800ce2a:	2500      	movs	r5, #0
 800ce2c:	454d      	cmp	r5, r9
 800ce2e:	d01f      	beq.n	800ce70 <_fwrite_r+0x7c>
 800ce30:	68a7      	ldr	r7, [r4, #8]
 800ce32:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800ce36:	3f01      	subs	r7, #1
 800ce38:	2f00      	cmp	r7, #0
 800ce3a:	60a7      	str	r7, [r4, #8]
 800ce3c:	da04      	bge.n	800ce48 <_fwrite_r+0x54>
 800ce3e:	69a3      	ldr	r3, [r4, #24]
 800ce40:	429f      	cmp	r7, r3
 800ce42:	db0f      	blt.n	800ce64 <_fwrite_r+0x70>
 800ce44:	290a      	cmp	r1, #10
 800ce46:	d00d      	beq.n	800ce64 <_fwrite_r+0x70>
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	6022      	str	r2, [r4, #0]
 800ce4e:	7019      	strb	r1, [r3, #0]
 800ce50:	3501      	adds	r5, #1
 800ce52:	e7eb      	b.n	800ce2c <_fwrite_r+0x38>
 800ce54:	4621      	mov	r1, r4
 800ce56:	4630      	mov	r0, r6
 800ce58:	f000 f8a8 	bl	800cfac <__swsetup_r>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d0e4      	beq.n	800ce2a <_fwrite_r+0x36>
 800ce60:	2500      	movs	r5, #0
 800ce62:	e005      	b.n	800ce70 <_fwrite_r+0x7c>
 800ce64:	4622      	mov	r2, r4
 800ce66:	4630      	mov	r0, r6
 800ce68:	f000 f861 	bl	800cf2e <__swbuf_r>
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	d1ef      	bne.n	800ce50 <_fwrite_r+0x5c>
 800ce70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce72:	07da      	lsls	r2, r3, #31
 800ce74:	d405      	bmi.n	800ce82 <_fwrite_r+0x8e>
 800ce76:	89a3      	ldrh	r3, [r4, #12]
 800ce78:	059b      	lsls	r3, r3, #22
 800ce7a:	d402      	bmi.n	800ce82 <_fwrite_r+0x8e>
 800ce7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce7e:	f000 f989 	bl	800d194 <__retarget_lock_release_recursive>
 800ce82:	fbb5 f0f8 	udiv	r0, r5, r8
 800ce86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800ce8c <fwrite>:
 800ce8c:	b507      	push	{r0, r1, r2, lr}
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	4613      	mov	r3, r2
 800ce92:	460a      	mov	r2, r1
 800ce94:	4601      	mov	r1, r0
 800ce96:	4803      	ldr	r0, [pc, #12]	@ (800cea4 <fwrite+0x18>)
 800ce98:	6800      	ldr	r0, [r0, #0]
 800ce9a:	f7ff ffab 	bl	800cdf4 <_fwrite_r>
 800ce9e:	b003      	add	sp, #12
 800cea0:	f85d fb04 	ldr.w	pc, [sp], #4
 800cea4:	2000011c 	.word	0x2000011c

0800cea8 <__sread>:
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	460c      	mov	r4, r1
 800ceac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb0:	f000 f910 	bl	800d0d4 <_read_r>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	bfab      	itete	ge
 800ceb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ceba:	89a3      	ldrhlt	r3, [r4, #12]
 800cebc:	181b      	addge	r3, r3, r0
 800cebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cec2:	bfac      	ite	ge
 800cec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cec6:	81a3      	strhlt	r3, [r4, #12]
 800cec8:	bd10      	pop	{r4, pc}

0800ceca <__swrite>:
 800ceca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cece:	461f      	mov	r7, r3
 800ced0:	898b      	ldrh	r3, [r1, #12]
 800ced2:	05db      	lsls	r3, r3, #23
 800ced4:	4605      	mov	r5, r0
 800ced6:	460c      	mov	r4, r1
 800ced8:	4616      	mov	r6, r2
 800ceda:	d505      	bpl.n	800cee8 <__swrite+0x1e>
 800cedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee0:	2302      	movs	r3, #2
 800cee2:	2200      	movs	r2, #0
 800cee4:	f000 f8e4 	bl	800d0b0 <_lseek_r>
 800cee8:	89a3      	ldrh	r3, [r4, #12]
 800ceea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cef2:	81a3      	strh	r3, [r4, #12]
 800cef4:	4632      	mov	r2, r6
 800cef6:	463b      	mov	r3, r7
 800cef8:	4628      	mov	r0, r5
 800cefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cefe:	f000 b90b 	b.w	800d118 <_write_r>

0800cf02 <__sseek>:
 800cf02:	b510      	push	{r4, lr}
 800cf04:	460c      	mov	r4, r1
 800cf06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf0a:	f000 f8d1 	bl	800d0b0 <_lseek_r>
 800cf0e:	1c43      	adds	r3, r0, #1
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	bf15      	itete	ne
 800cf14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf1e:	81a3      	strheq	r3, [r4, #12]
 800cf20:	bf18      	it	ne
 800cf22:	81a3      	strhne	r3, [r4, #12]
 800cf24:	bd10      	pop	{r4, pc}

0800cf26 <__sclose>:
 800cf26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf2a:	f000 b8b1 	b.w	800d090 <_close_r>

0800cf2e <__swbuf_r>:
 800cf2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf30:	460e      	mov	r6, r1
 800cf32:	4614      	mov	r4, r2
 800cf34:	4605      	mov	r5, r0
 800cf36:	b118      	cbz	r0, 800cf40 <__swbuf_r+0x12>
 800cf38:	6a03      	ldr	r3, [r0, #32]
 800cf3a:	b90b      	cbnz	r3, 800cf40 <__swbuf_r+0x12>
 800cf3c:	f7ff ff24 	bl	800cd88 <__sinit>
 800cf40:	69a3      	ldr	r3, [r4, #24]
 800cf42:	60a3      	str	r3, [r4, #8]
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	071a      	lsls	r2, r3, #28
 800cf48:	d501      	bpl.n	800cf4e <__swbuf_r+0x20>
 800cf4a:	6923      	ldr	r3, [r4, #16]
 800cf4c:	b943      	cbnz	r3, 800cf60 <__swbuf_r+0x32>
 800cf4e:	4621      	mov	r1, r4
 800cf50:	4628      	mov	r0, r5
 800cf52:	f000 f82b 	bl	800cfac <__swsetup_r>
 800cf56:	b118      	cbz	r0, 800cf60 <__swbuf_r+0x32>
 800cf58:	f04f 37ff 	mov.w	r7, #4294967295
 800cf5c:	4638      	mov	r0, r7
 800cf5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf60:	6823      	ldr	r3, [r4, #0]
 800cf62:	6922      	ldr	r2, [r4, #16]
 800cf64:	1a98      	subs	r0, r3, r2
 800cf66:	6963      	ldr	r3, [r4, #20]
 800cf68:	b2f6      	uxtb	r6, r6
 800cf6a:	4283      	cmp	r3, r0
 800cf6c:	4637      	mov	r7, r6
 800cf6e:	dc05      	bgt.n	800cf7c <__swbuf_r+0x4e>
 800cf70:	4621      	mov	r1, r4
 800cf72:	4628      	mov	r0, r5
 800cf74:	f000 f9e6 	bl	800d344 <_fflush_r>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d1ed      	bne.n	800cf58 <__swbuf_r+0x2a>
 800cf7c:	68a3      	ldr	r3, [r4, #8]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	60a3      	str	r3, [r4, #8]
 800cf82:	6823      	ldr	r3, [r4, #0]
 800cf84:	1c5a      	adds	r2, r3, #1
 800cf86:	6022      	str	r2, [r4, #0]
 800cf88:	701e      	strb	r6, [r3, #0]
 800cf8a:	6962      	ldr	r2, [r4, #20]
 800cf8c:	1c43      	adds	r3, r0, #1
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d004      	beq.n	800cf9c <__swbuf_r+0x6e>
 800cf92:	89a3      	ldrh	r3, [r4, #12]
 800cf94:	07db      	lsls	r3, r3, #31
 800cf96:	d5e1      	bpl.n	800cf5c <__swbuf_r+0x2e>
 800cf98:	2e0a      	cmp	r6, #10
 800cf9a:	d1df      	bne.n	800cf5c <__swbuf_r+0x2e>
 800cf9c:	4621      	mov	r1, r4
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f000 f9d0 	bl	800d344 <_fflush_r>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d0d9      	beq.n	800cf5c <__swbuf_r+0x2e>
 800cfa8:	e7d6      	b.n	800cf58 <__swbuf_r+0x2a>
	...

0800cfac <__swsetup_r>:
 800cfac:	b538      	push	{r3, r4, r5, lr}
 800cfae:	4b29      	ldr	r3, [pc, #164]	@ (800d054 <__swsetup_r+0xa8>)
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	6818      	ldr	r0, [r3, #0]
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	b118      	cbz	r0, 800cfc0 <__swsetup_r+0x14>
 800cfb8:	6a03      	ldr	r3, [r0, #32]
 800cfba:	b90b      	cbnz	r3, 800cfc0 <__swsetup_r+0x14>
 800cfbc:	f7ff fee4 	bl	800cd88 <__sinit>
 800cfc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfc4:	0719      	lsls	r1, r3, #28
 800cfc6:	d422      	bmi.n	800d00e <__swsetup_r+0x62>
 800cfc8:	06da      	lsls	r2, r3, #27
 800cfca:	d407      	bmi.n	800cfdc <__swsetup_r+0x30>
 800cfcc:	2209      	movs	r2, #9
 800cfce:	602a      	str	r2, [r5, #0]
 800cfd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfd4:	81a3      	strh	r3, [r4, #12]
 800cfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfda:	e033      	b.n	800d044 <__swsetup_r+0x98>
 800cfdc:	0758      	lsls	r0, r3, #29
 800cfde:	d512      	bpl.n	800d006 <__swsetup_r+0x5a>
 800cfe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfe2:	b141      	cbz	r1, 800cff6 <__swsetup_r+0x4a>
 800cfe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfe8:	4299      	cmp	r1, r3
 800cfea:	d002      	beq.n	800cff2 <__swsetup_r+0x46>
 800cfec:	4628      	mov	r0, r5
 800cfee:	f000 f8db 	bl	800d1a8 <_free_r>
 800cff2:	2300      	movs	r3, #0
 800cff4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cffc:	81a3      	strh	r3, [r4, #12]
 800cffe:	2300      	movs	r3, #0
 800d000:	6063      	str	r3, [r4, #4]
 800d002:	6923      	ldr	r3, [r4, #16]
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	89a3      	ldrh	r3, [r4, #12]
 800d008:	f043 0308 	orr.w	r3, r3, #8
 800d00c:	81a3      	strh	r3, [r4, #12]
 800d00e:	6923      	ldr	r3, [r4, #16]
 800d010:	b94b      	cbnz	r3, 800d026 <__swsetup_r+0x7a>
 800d012:	89a3      	ldrh	r3, [r4, #12]
 800d014:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d01c:	d003      	beq.n	800d026 <__swsetup_r+0x7a>
 800d01e:	4621      	mov	r1, r4
 800d020:	4628      	mov	r0, r5
 800d022:	f000 f9dd 	bl	800d3e0 <__smakebuf_r>
 800d026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d02a:	f013 0201 	ands.w	r2, r3, #1
 800d02e:	d00a      	beq.n	800d046 <__swsetup_r+0x9a>
 800d030:	2200      	movs	r2, #0
 800d032:	60a2      	str	r2, [r4, #8]
 800d034:	6962      	ldr	r2, [r4, #20]
 800d036:	4252      	negs	r2, r2
 800d038:	61a2      	str	r2, [r4, #24]
 800d03a:	6922      	ldr	r2, [r4, #16]
 800d03c:	b942      	cbnz	r2, 800d050 <__swsetup_r+0xa4>
 800d03e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d042:	d1c5      	bne.n	800cfd0 <__swsetup_r+0x24>
 800d044:	bd38      	pop	{r3, r4, r5, pc}
 800d046:	0799      	lsls	r1, r3, #30
 800d048:	bf58      	it	pl
 800d04a:	6962      	ldrpl	r2, [r4, #20]
 800d04c:	60a2      	str	r2, [r4, #8]
 800d04e:	e7f4      	b.n	800d03a <__swsetup_r+0x8e>
 800d050:	2000      	movs	r0, #0
 800d052:	e7f7      	b.n	800d044 <__swsetup_r+0x98>
 800d054:	2000011c 	.word	0x2000011c

0800d058 <memset>:
 800d058:	4402      	add	r2, r0
 800d05a:	4603      	mov	r3, r0
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d100      	bne.n	800d062 <memset+0xa>
 800d060:	4770      	bx	lr
 800d062:	f803 1b01 	strb.w	r1, [r3], #1
 800d066:	e7f9      	b.n	800d05c <memset+0x4>

0800d068 <strncpy>:
 800d068:	b510      	push	{r4, lr}
 800d06a:	3901      	subs	r1, #1
 800d06c:	4603      	mov	r3, r0
 800d06e:	b132      	cbz	r2, 800d07e <strncpy+0x16>
 800d070:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d074:	f803 4b01 	strb.w	r4, [r3], #1
 800d078:	3a01      	subs	r2, #1
 800d07a:	2c00      	cmp	r4, #0
 800d07c:	d1f7      	bne.n	800d06e <strncpy+0x6>
 800d07e:	441a      	add	r2, r3
 800d080:	2100      	movs	r1, #0
 800d082:	4293      	cmp	r3, r2
 800d084:	d100      	bne.n	800d088 <strncpy+0x20>
 800d086:	bd10      	pop	{r4, pc}
 800d088:	f803 1b01 	strb.w	r1, [r3], #1
 800d08c:	e7f9      	b.n	800d082 <strncpy+0x1a>
	...

0800d090 <_close_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4d06      	ldr	r5, [pc, #24]	@ (800d0ac <_close_r+0x1c>)
 800d094:	2300      	movs	r3, #0
 800d096:	4604      	mov	r4, r0
 800d098:	4608      	mov	r0, r1
 800d09a:	602b      	str	r3, [r5, #0]
 800d09c:	f7f9 fb62 	bl	8006764 <_close>
 800d0a0:	1c43      	adds	r3, r0, #1
 800d0a2:	d102      	bne.n	800d0aa <_close_r+0x1a>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	b103      	cbz	r3, 800d0aa <_close_r+0x1a>
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	20001ea4 	.word	0x20001ea4

0800d0b0 <_lseek_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4d07      	ldr	r5, [pc, #28]	@ (800d0d0 <_lseek_r+0x20>)
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	4608      	mov	r0, r1
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	602a      	str	r2, [r5, #0]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	f7f9 fb77 	bl	80067b2 <_lseek>
 800d0c4:	1c43      	adds	r3, r0, #1
 800d0c6:	d102      	bne.n	800d0ce <_lseek_r+0x1e>
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	b103      	cbz	r3, 800d0ce <_lseek_r+0x1e>
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	bd38      	pop	{r3, r4, r5, pc}
 800d0d0:	20001ea4 	.word	0x20001ea4

0800d0d4 <_read_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4d07      	ldr	r5, [pc, #28]	@ (800d0f4 <_read_r+0x20>)
 800d0d8:	4604      	mov	r4, r0
 800d0da:	4608      	mov	r0, r1
 800d0dc:	4611      	mov	r1, r2
 800d0de:	2200      	movs	r2, #0
 800d0e0:	602a      	str	r2, [r5, #0]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	f7f9 fb05 	bl	80066f2 <_read>
 800d0e8:	1c43      	adds	r3, r0, #1
 800d0ea:	d102      	bne.n	800d0f2 <_read_r+0x1e>
 800d0ec:	682b      	ldr	r3, [r5, #0]
 800d0ee:	b103      	cbz	r3, 800d0f2 <_read_r+0x1e>
 800d0f0:	6023      	str	r3, [r4, #0]
 800d0f2:	bd38      	pop	{r3, r4, r5, pc}
 800d0f4:	20001ea4 	.word	0x20001ea4

0800d0f8 <_sbrk_r>:
 800d0f8:	b538      	push	{r3, r4, r5, lr}
 800d0fa:	4d06      	ldr	r5, [pc, #24]	@ (800d114 <_sbrk_r+0x1c>)
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	4604      	mov	r4, r0
 800d100:	4608      	mov	r0, r1
 800d102:	602b      	str	r3, [r5, #0]
 800d104:	f7f9 fb62 	bl	80067cc <_sbrk>
 800d108:	1c43      	adds	r3, r0, #1
 800d10a:	d102      	bne.n	800d112 <_sbrk_r+0x1a>
 800d10c:	682b      	ldr	r3, [r5, #0]
 800d10e:	b103      	cbz	r3, 800d112 <_sbrk_r+0x1a>
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	bd38      	pop	{r3, r4, r5, pc}
 800d114:	20001ea4 	.word	0x20001ea4

0800d118 <_write_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	4d07      	ldr	r5, [pc, #28]	@ (800d138 <_write_r+0x20>)
 800d11c:	4604      	mov	r4, r0
 800d11e:	4608      	mov	r0, r1
 800d120:	4611      	mov	r1, r2
 800d122:	2200      	movs	r2, #0
 800d124:	602a      	str	r2, [r5, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	f7f9 fb00 	bl	800672c <_write>
 800d12c:	1c43      	adds	r3, r0, #1
 800d12e:	d102      	bne.n	800d136 <_write_r+0x1e>
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	b103      	cbz	r3, 800d136 <_write_r+0x1e>
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	bd38      	pop	{r3, r4, r5, pc}
 800d138:	20001ea4 	.word	0x20001ea4

0800d13c <__errno>:
 800d13c:	4b01      	ldr	r3, [pc, #4]	@ (800d144 <__errno+0x8>)
 800d13e:	6818      	ldr	r0, [r3, #0]
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop
 800d144:	2000011c 	.word	0x2000011c

0800d148 <__libc_init_array>:
 800d148:	b570      	push	{r4, r5, r6, lr}
 800d14a:	4d0d      	ldr	r5, [pc, #52]	@ (800d180 <__libc_init_array+0x38>)
 800d14c:	4c0d      	ldr	r4, [pc, #52]	@ (800d184 <__libc_init_array+0x3c>)
 800d14e:	1b64      	subs	r4, r4, r5
 800d150:	10a4      	asrs	r4, r4, #2
 800d152:	2600      	movs	r6, #0
 800d154:	42a6      	cmp	r6, r4
 800d156:	d109      	bne.n	800d16c <__libc_init_array+0x24>
 800d158:	4d0b      	ldr	r5, [pc, #44]	@ (800d188 <__libc_init_array+0x40>)
 800d15a:	4c0c      	ldr	r4, [pc, #48]	@ (800d18c <__libc_init_array+0x44>)
 800d15c:	f000 f99e 	bl	800d49c <_init>
 800d160:	1b64      	subs	r4, r4, r5
 800d162:	10a4      	asrs	r4, r4, #2
 800d164:	2600      	movs	r6, #0
 800d166:	42a6      	cmp	r6, r4
 800d168:	d105      	bne.n	800d176 <__libc_init_array+0x2e>
 800d16a:	bd70      	pop	{r4, r5, r6, pc}
 800d16c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d170:	4798      	blx	r3
 800d172:	3601      	adds	r6, #1
 800d174:	e7ee      	b.n	800d154 <__libc_init_array+0xc>
 800d176:	f855 3b04 	ldr.w	r3, [r5], #4
 800d17a:	4798      	blx	r3
 800d17c:	3601      	adds	r6, #1
 800d17e:	e7f2      	b.n	800d166 <__libc_init_array+0x1e>
 800d180:	08011520 	.word	0x08011520
 800d184:	08011520 	.word	0x08011520
 800d188:	08011520 	.word	0x08011520
 800d18c:	08011524 	.word	0x08011524

0800d190 <__retarget_lock_init_recursive>:
 800d190:	4770      	bx	lr

0800d192 <__retarget_lock_acquire_recursive>:
 800d192:	4770      	bx	lr

0800d194 <__retarget_lock_release_recursive>:
 800d194:	4770      	bx	lr

0800d196 <strcpy>:
 800d196:	4603      	mov	r3, r0
 800d198:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d19c:	f803 2b01 	strb.w	r2, [r3], #1
 800d1a0:	2a00      	cmp	r2, #0
 800d1a2:	d1f9      	bne.n	800d198 <strcpy+0x2>
 800d1a4:	4770      	bx	lr
	...

0800d1a8 <_free_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4605      	mov	r5, r0
 800d1ac:	2900      	cmp	r1, #0
 800d1ae:	d041      	beq.n	800d234 <_free_r+0x8c>
 800d1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1b4:	1f0c      	subs	r4, r1, #4
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	bfb8      	it	lt
 800d1ba:	18e4      	addlt	r4, r4, r3
 800d1bc:	f7ff fd4c 	bl	800cc58 <__malloc_lock>
 800d1c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d238 <_free_r+0x90>)
 800d1c2:	6813      	ldr	r3, [r2, #0]
 800d1c4:	b933      	cbnz	r3, 800d1d4 <_free_r+0x2c>
 800d1c6:	6063      	str	r3, [r4, #4]
 800d1c8:	6014      	str	r4, [r2, #0]
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1d0:	f7ff bd48 	b.w	800cc64 <__malloc_unlock>
 800d1d4:	42a3      	cmp	r3, r4
 800d1d6:	d908      	bls.n	800d1ea <_free_r+0x42>
 800d1d8:	6820      	ldr	r0, [r4, #0]
 800d1da:	1821      	adds	r1, r4, r0
 800d1dc:	428b      	cmp	r3, r1
 800d1de:	bf01      	itttt	eq
 800d1e0:	6819      	ldreq	r1, [r3, #0]
 800d1e2:	685b      	ldreq	r3, [r3, #4]
 800d1e4:	1809      	addeq	r1, r1, r0
 800d1e6:	6021      	streq	r1, [r4, #0]
 800d1e8:	e7ed      	b.n	800d1c6 <_free_r+0x1e>
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	b10b      	cbz	r3, 800d1f4 <_free_r+0x4c>
 800d1f0:	42a3      	cmp	r3, r4
 800d1f2:	d9fa      	bls.n	800d1ea <_free_r+0x42>
 800d1f4:	6811      	ldr	r1, [r2, #0]
 800d1f6:	1850      	adds	r0, r2, r1
 800d1f8:	42a0      	cmp	r0, r4
 800d1fa:	d10b      	bne.n	800d214 <_free_r+0x6c>
 800d1fc:	6820      	ldr	r0, [r4, #0]
 800d1fe:	4401      	add	r1, r0
 800d200:	1850      	adds	r0, r2, r1
 800d202:	4283      	cmp	r3, r0
 800d204:	6011      	str	r1, [r2, #0]
 800d206:	d1e0      	bne.n	800d1ca <_free_r+0x22>
 800d208:	6818      	ldr	r0, [r3, #0]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	6053      	str	r3, [r2, #4]
 800d20e:	4408      	add	r0, r1
 800d210:	6010      	str	r0, [r2, #0]
 800d212:	e7da      	b.n	800d1ca <_free_r+0x22>
 800d214:	d902      	bls.n	800d21c <_free_r+0x74>
 800d216:	230c      	movs	r3, #12
 800d218:	602b      	str	r3, [r5, #0]
 800d21a:	e7d6      	b.n	800d1ca <_free_r+0x22>
 800d21c:	6820      	ldr	r0, [r4, #0]
 800d21e:	1821      	adds	r1, r4, r0
 800d220:	428b      	cmp	r3, r1
 800d222:	bf04      	itt	eq
 800d224:	6819      	ldreq	r1, [r3, #0]
 800d226:	685b      	ldreq	r3, [r3, #4]
 800d228:	6063      	str	r3, [r4, #4]
 800d22a:	bf04      	itt	eq
 800d22c:	1809      	addeq	r1, r1, r0
 800d22e:	6021      	streq	r1, [r4, #0]
 800d230:	6054      	str	r4, [r2, #4]
 800d232:	e7ca      	b.n	800d1ca <_free_r+0x22>
 800d234:	bd38      	pop	{r3, r4, r5, pc}
 800d236:	bf00      	nop
 800d238:	20001d64 	.word	0x20001d64

0800d23c <__sflush_r>:
 800d23c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d244:	0716      	lsls	r6, r2, #28
 800d246:	4605      	mov	r5, r0
 800d248:	460c      	mov	r4, r1
 800d24a:	d454      	bmi.n	800d2f6 <__sflush_r+0xba>
 800d24c:	684b      	ldr	r3, [r1, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	dc02      	bgt.n	800d258 <__sflush_r+0x1c>
 800d252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d254:	2b00      	cmp	r3, #0
 800d256:	dd48      	ble.n	800d2ea <__sflush_r+0xae>
 800d258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d25a:	2e00      	cmp	r6, #0
 800d25c:	d045      	beq.n	800d2ea <__sflush_r+0xae>
 800d25e:	2300      	movs	r3, #0
 800d260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d264:	682f      	ldr	r7, [r5, #0]
 800d266:	6a21      	ldr	r1, [r4, #32]
 800d268:	602b      	str	r3, [r5, #0]
 800d26a:	d030      	beq.n	800d2ce <__sflush_r+0x92>
 800d26c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d26e:	89a3      	ldrh	r3, [r4, #12]
 800d270:	0759      	lsls	r1, r3, #29
 800d272:	d505      	bpl.n	800d280 <__sflush_r+0x44>
 800d274:	6863      	ldr	r3, [r4, #4]
 800d276:	1ad2      	subs	r2, r2, r3
 800d278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d27a:	b10b      	cbz	r3, 800d280 <__sflush_r+0x44>
 800d27c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d27e:	1ad2      	subs	r2, r2, r3
 800d280:	2300      	movs	r3, #0
 800d282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d284:	6a21      	ldr	r1, [r4, #32]
 800d286:	4628      	mov	r0, r5
 800d288:	47b0      	blx	r6
 800d28a:	1c43      	adds	r3, r0, #1
 800d28c:	89a3      	ldrh	r3, [r4, #12]
 800d28e:	d106      	bne.n	800d29e <__sflush_r+0x62>
 800d290:	6829      	ldr	r1, [r5, #0]
 800d292:	291d      	cmp	r1, #29
 800d294:	d82b      	bhi.n	800d2ee <__sflush_r+0xb2>
 800d296:	4a2a      	ldr	r2, [pc, #168]	@ (800d340 <__sflush_r+0x104>)
 800d298:	410a      	asrs	r2, r1
 800d29a:	07d6      	lsls	r6, r2, #31
 800d29c:	d427      	bmi.n	800d2ee <__sflush_r+0xb2>
 800d29e:	2200      	movs	r2, #0
 800d2a0:	6062      	str	r2, [r4, #4]
 800d2a2:	04d9      	lsls	r1, r3, #19
 800d2a4:	6922      	ldr	r2, [r4, #16]
 800d2a6:	6022      	str	r2, [r4, #0]
 800d2a8:	d504      	bpl.n	800d2b4 <__sflush_r+0x78>
 800d2aa:	1c42      	adds	r2, r0, #1
 800d2ac:	d101      	bne.n	800d2b2 <__sflush_r+0x76>
 800d2ae:	682b      	ldr	r3, [r5, #0]
 800d2b0:	b903      	cbnz	r3, 800d2b4 <__sflush_r+0x78>
 800d2b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d2b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2b6:	602f      	str	r7, [r5, #0]
 800d2b8:	b1b9      	cbz	r1, 800d2ea <__sflush_r+0xae>
 800d2ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2be:	4299      	cmp	r1, r3
 800d2c0:	d002      	beq.n	800d2c8 <__sflush_r+0x8c>
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	f7ff ff70 	bl	800d1a8 <_free_r>
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2cc:	e00d      	b.n	800d2ea <__sflush_r+0xae>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	47b0      	blx	r6
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	1c50      	adds	r0, r2, #1
 800d2d8:	d1c9      	bne.n	800d26e <__sflush_r+0x32>
 800d2da:	682b      	ldr	r3, [r5, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d0c6      	beq.n	800d26e <__sflush_r+0x32>
 800d2e0:	2b1d      	cmp	r3, #29
 800d2e2:	d001      	beq.n	800d2e8 <__sflush_r+0xac>
 800d2e4:	2b16      	cmp	r3, #22
 800d2e6:	d11e      	bne.n	800d326 <__sflush_r+0xea>
 800d2e8:	602f      	str	r7, [r5, #0]
 800d2ea:	2000      	movs	r0, #0
 800d2ec:	e022      	b.n	800d334 <__sflush_r+0xf8>
 800d2ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2f2:	b21b      	sxth	r3, r3
 800d2f4:	e01b      	b.n	800d32e <__sflush_r+0xf2>
 800d2f6:	690f      	ldr	r7, [r1, #16]
 800d2f8:	2f00      	cmp	r7, #0
 800d2fa:	d0f6      	beq.n	800d2ea <__sflush_r+0xae>
 800d2fc:	0793      	lsls	r3, r2, #30
 800d2fe:	680e      	ldr	r6, [r1, #0]
 800d300:	bf08      	it	eq
 800d302:	694b      	ldreq	r3, [r1, #20]
 800d304:	600f      	str	r7, [r1, #0]
 800d306:	bf18      	it	ne
 800d308:	2300      	movne	r3, #0
 800d30a:	eba6 0807 	sub.w	r8, r6, r7
 800d30e:	608b      	str	r3, [r1, #8]
 800d310:	f1b8 0f00 	cmp.w	r8, #0
 800d314:	dde9      	ble.n	800d2ea <__sflush_r+0xae>
 800d316:	6a21      	ldr	r1, [r4, #32]
 800d318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d31a:	4643      	mov	r3, r8
 800d31c:	463a      	mov	r2, r7
 800d31e:	4628      	mov	r0, r5
 800d320:	47b0      	blx	r6
 800d322:	2800      	cmp	r0, #0
 800d324:	dc08      	bgt.n	800d338 <__sflush_r+0xfc>
 800d326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d32a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d32e:	81a3      	strh	r3, [r4, #12]
 800d330:	f04f 30ff 	mov.w	r0, #4294967295
 800d334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d338:	4407      	add	r7, r0
 800d33a:	eba8 0800 	sub.w	r8, r8, r0
 800d33e:	e7e7      	b.n	800d310 <__sflush_r+0xd4>
 800d340:	dfbffffe 	.word	0xdfbffffe

0800d344 <_fflush_r>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	690b      	ldr	r3, [r1, #16]
 800d348:	4605      	mov	r5, r0
 800d34a:	460c      	mov	r4, r1
 800d34c:	b913      	cbnz	r3, 800d354 <_fflush_r+0x10>
 800d34e:	2500      	movs	r5, #0
 800d350:	4628      	mov	r0, r5
 800d352:	bd38      	pop	{r3, r4, r5, pc}
 800d354:	b118      	cbz	r0, 800d35e <_fflush_r+0x1a>
 800d356:	6a03      	ldr	r3, [r0, #32]
 800d358:	b90b      	cbnz	r3, 800d35e <_fflush_r+0x1a>
 800d35a:	f7ff fd15 	bl	800cd88 <__sinit>
 800d35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d0f3      	beq.n	800d34e <_fflush_r+0xa>
 800d366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d368:	07d0      	lsls	r0, r2, #31
 800d36a:	d404      	bmi.n	800d376 <_fflush_r+0x32>
 800d36c:	0599      	lsls	r1, r3, #22
 800d36e:	d402      	bmi.n	800d376 <_fflush_r+0x32>
 800d370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d372:	f7ff ff0e 	bl	800d192 <__retarget_lock_acquire_recursive>
 800d376:	4628      	mov	r0, r5
 800d378:	4621      	mov	r1, r4
 800d37a:	f7ff ff5f 	bl	800d23c <__sflush_r>
 800d37e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d380:	07da      	lsls	r2, r3, #31
 800d382:	4605      	mov	r5, r0
 800d384:	d4e4      	bmi.n	800d350 <_fflush_r+0xc>
 800d386:	89a3      	ldrh	r3, [r4, #12]
 800d388:	059b      	lsls	r3, r3, #22
 800d38a:	d4e1      	bmi.n	800d350 <_fflush_r+0xc>
 800d38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d38e:	f7ff ff01 	bl	800d194 <__retarget_lock_release_recursive>
 800d392:	e7dd      	b.n	800d350 <_fflush_r+0xc>

0800d394 <__swhatbuf_r>:
 800d394:	b570      	push	{r4, r5, r6, lr}
 800d396:	460c      	mov	r4, r1
 800d398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d39c:	2900      	cmp	r1, #0
 800d39e:	b096      	sub	sp, #88	@ 0x58
 800d3a0:	4615      	mov	r5, r2
 800d3a2:	461e      	mov	r6, r3
 800d3a4:	da0d      	bge.n	800d3c2 <__swhatbuf_r+0x2e>
 800d3a6:	89a3      	ldrh	r3, [r4, #12]
 800d3a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d3ac:	f04f 0100 	mov.w	r1, #0
 800d3b0:	bf14      	ite	ne
 800d3b2:	2340      	movne	r3, #64	@ 0x40
 800d3b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	6031      	str	r1, [r6, #0]
 800d3bc:	602b      	str	r3, [r5, #0]
 800d3be:	b016      	add	sp, #88	@ 0x58
 800d3c0:	bd70      	pop	{r4, r5, r6, pc}
 800d3c2:	466a      	mov	r2, sp
 800d3c4:	f000 f848 	bl	800d458 <_fstat_r>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	dbec      	blt.n	800d3a6 <__swhatbuf_r+0x12>
 800d3cc:	9901      	ldr	r1, [sp, #4]
 800d3ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d3d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d3d6:	4259      	negs	r1, r3
 800d3d8:	4159      	adcs	r1, r3
 800d3da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3de:	e7eb      	b.n	800d3b8 <__swhatbuf_r+0x24>

0800d3e0 <__smakebuf_r>:
 800d3e0:	898b      	ldrh	r3, [r1, #12]
 800d3e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3e4:	079d      	lsls	r5, r3, #30
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	460c      	mov	r4, r1
 800d3ea:	d507      	bpl.n	800d3fc <__smakebuf_r+0x1c>
 800d3ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d3f0:	6023      	str	r3, [r4, #0]
 800d3f2:	6123      	str	r3, [r4, #16]
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	6163      	str	r3, [r4, #20]
 800d3f8:	b003      	add	sp, #12
 800d3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3fc:	ab01      	add	r3, sp, #4
 800d3fe:	466a      	mov	r2, sp
 800d400:	f7ff ffc8 	bl	800d394 <__swhatbuf_r>
 800d404:	9f00      	ldr	r7, [sp, #0]
 800d406:	4605      	mov	r5, r0
 800d408:	4639      	mov	r1, r7
 800d40a:	4630      	mov	r0, r6
 800d40c:	f7ff fba4 	bl	800cb58 <_malloc_r>
 800d410:	b948      	cbnz	r0, 800d426 <__smakebuf_r+0x46>
 800d412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d416:	059a      	lsls	r2, r3, #22
 800d418:	d4ee      	bmi.n	800d3f8 <__smakebuf_r+0x18>
 800d41a:	f023 0303 	bic.w	r3, r3, #3
 800d41e:	f043 0302 	orr.w	r3, r3, #2
 800d422:	81a3      	strh	r3, [r4, #12]
 800d424:	e7e2      	b.n	800d3ec <__smakebuf_r+0xc>
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	6020      	str	r0, [r4, #0]
 800d42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d42e:	81a3      	strh	r3, [r4, #12]
 800d430:	9b01      	ldr	r3, [sp, #4]
 800d432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d436:	b15b      	cbz	r3, 800d450 <__smakebuf_r+0x70>
 800d438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d43c:	4630      	mov	r0, r6
 800d43e:	f000 f81d 	bl	800d47c <_isatty_r>
 800d442:	b128      	cbz	r0, 800d450 <__smakebuf_r+0x70>
 800d444:	89a3      	ldrh	r3, [r4, #12]
 800d446:	f023 0303 	bic.w	r3, r3, #3
 800d44a:	f043 0301 	orr.w	r3, r3, #1
 800d44e:	81a3      	strh	r3, [r4, #12]
 800d450:	89a3      	ldrh	r3, [r4, #12]
 800d452:	431d      	orrs	r5, r3
 800d454:	81a5      	strh	r5, [r4, #12]
 800d456:	e7cf      	b.n	800d3f8 <__smakebuf_r+0x18>

0800d458 <_fstat_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	4d07      	ldr	r5, [pc, #28]	@ (800d478 <_fstat_r+0x20>)
 800d45c:	2300      	movs	r3, #0
 800d45e:	4604      	mov	r4, r0
 800d460:	4608      	mov	r0, r1
 800d462:	4611      	mov	r1, r2
 800d464:	602b      	str	r3, [r5, #0]
 800d466:	f7f9 f989 	bl	800677c <_fstat>
 800d46a:	1c43      	adds	r3, r0, #1
 800d46c:	d102      	bne.n	800d474 <_fstat_r+0x1c>
 800d46e:	682b      	ldr	r3, [r5, #0]
 800d470:	b103      	cbz	r3, 800d474 <_fstat_r+0x1c>
 800d472:	6023      	str	r3, [r4, #0]
 800d474:	bd38      	pop	{r3, r4, r5, pc}
 800d476:	bf00      	nop
 800d478:	20001ea4 	.word	0x20001ea4

0800d47c <_isatty_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4d06      	ldr	r5, [pc, #24]	@ (800d498 <_isatty_r+0x1c>)
 800d480:	2300      	movs	r3, #0
 800d482:	4604      	mov	r4, r0
 800d484:	4608      	mov	r0, r1
 800d486:	602b      	str	r3, [r5, #0]
 800d488:	f7f9 f988 	bl	800679c <_isatty>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	d102      	bne.n	800d496 <_isatty_r+0x1a>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	b103      	cbz	r3, 800d496 <_isatty_r+0x1a>
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	bd38      	pop	{r3, r4, r5, pc}
 800d498:	20001ea4 	.word	0x20001ea4

0800d49c <_init>:
 800d49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49e:	bf00      	nop
 800d4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4a2:	bc08      	pop	{r3}
 800d4a4:	469e      	mov	lr, r3
 800d4a6:	4770      	bx	lr

0800d4a8 <_fini>:
 800d4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4aa:	bf00      	nop
 800d4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ae:	bc08      	pop	{r3}
 800d4b0:	469e      	mov	lr, r3
 800d4b2:	4770      	bx	lr
