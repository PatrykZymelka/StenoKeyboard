
StenoKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008200  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08008398  08008398  00009398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b8  080084b8  0000a160  2**0
                  CONTENTS
  4 .ARM          00000008  080084b8  080084b8  000094b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084c0  080084c0  0000a160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c0  080084c0  000094c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084c4  080084c4  000094c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  080084c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ad8  20000160  08008628  0000a160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c38  08008628  0000ac38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012095  00000000  00000000  0000a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003018  00000000  00000000  0001c225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001f240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb9  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cb8  00000000  00000000  00020fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014867  00000000  00000000  00039c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902cc  00000000  00000000  0004e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de79c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004910  00000000  00000000  000de7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000e30f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000160 	.word	0x20000160
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008380 	.word	0x08008380

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000164 	.word	0x20000164
 80001d4:	08008380 	.word	0x08008380

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <Scan_KeyMatrix.3>:
  char result[22] = {};
  int activeTimeLimit = TIME_LIMIT;
  int activeTimer = 0;


  uint8_t Scan_KeyMatrix(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	f8c7 c004 	str.w	ip, [r7, #4]
        uint8_t key = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	73fb      	strb	r3, [r7, #15]

  		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2110      	movs	r1, #16
 80004fe:	48cf      	ldr	r0, [pc, #828]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000500:	f002 f868 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2120      	movs	r1, #32
 8000508:	48cc      	ldr	r0, [pc, #816]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800050a:	f002 f863 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2140      	movs	r1, #64	@ 0x40
 8000512:	48ca      	ldr	r0, [pc, #808]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000514:	f002 f85e 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2180      	movs	r1, #128	@ 0x80
 800051c:	48c7      	ldr	r0, [pc, #796]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800051e:	f002 f859 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	48c6      	ldr	r0, [pc, #792]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000528:	f002 f854 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	48c3      	ldr	r0, [pc, #780]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000532:	f002 f84f 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2104      	movs	r1, #4
 800053a:	48c1      	ldr	r0, [pc, #772]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800053c:	f002 f84a 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000546:	48be      	ldr	r0, [pc, #760]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000548:	f002 f844 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000552:	48bb      	ldr	r0, [pc, #748]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000554:	f002 f83e 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055e:	48b8      	ldr	r0, [pc, #736]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000560:	f002 f838 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800056a:	48b5      	ldr	r0, [pc, #724]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800056c:	f002 f832 	bl	80025d4 <HAL_GPIO_WritePin>


        if (HAL_GPIO_ReadPin(Row1_GPIO_Port, Row1_Pin) == 1) {
 8000570:	2101      	movs	r1, #1
 8000572:	48b2      	ldr	r0, [pc, #712]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000574:	f002 f816 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b01      	cmp	r3, #1
 800057c:	d101      	bne.n	8000582 <Scan_KeyMatrix.3+0x96>
            key = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000582:	2102      	movs	r1, #2
 8000584:	48ad      	ldr	r0, [pc, #692]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000586:	f002 f80d 	bl	80025a4 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d101      	bne.n	8000594 <Scan_KeyMatrix.3+0xa8>
            key = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000594:	2104      	movs	r1, #4
 8000596:	48a9      	ldr	r0, [pc, #676]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000598:	f002 f804 	bl	80025a4 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d101      	bne.n	80005a6 <Scan_KeyMatrix.3+0xba>
			key = 24;
 80005a2:	2318      	movs	r3, #24
 80005a4:	73fb      	strb	r3, [r7, #15]
        }

  		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2110      	movs	r1, #16
 80005aa:	48a4      	ldr	r0, [pc, #656]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005ac:	f002 f812 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2120      	movs	r1, #32
 80005b4:	48a1      	ldr	r0, [pc, #644]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005b6:	f002 f80d 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	489f      	ldr	r0, [pc, #636]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005c0:	f002 f808 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2180      	movs	r1, #128	@ 0x80
 80005c8:	489c      	ldr	r0, [pc, #624]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005ca:	f002 f803 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	489b      	ldr	r0, [pc, #620]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005d4:	f001 fffe 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	4898      	ldr	r0, [pc, #608]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005de:	f001 fff9 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2104      	movs	r1, #4
 80005e6:	4896      	ldr	r0, [pc, #600]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005e8:	f001 fff4 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f2:	4893      	ldr	r0, [pc, #588]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005f4:	f001 ffee 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fe:	4890      	ldr	r0, [pc, #576]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000600:	f001 ffe8 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060a:	488d      	ldr	r0, [pc, #564]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800060c:	f001 ffe2 	bl	80025d4 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000616:	488a      	ldr	r0, [pc, #552]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000618:	f001 ffdc 	bl	80025d4 <HAL_GPIO_WritePin>


        if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 800061c:	2102      	movs	r1, #2
 800061e:	4887      	ldr	r0, [pc, #540]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000620:	f001 ffc0 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d101      	bne.n	800062e <Scan_KeyMatrix.3+0x142>
            key = 3;
 800062a:	2303      	movs	r3, #3
 800062c:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 800062e:	2104      	movs	r1, #4
 8000630:	4882      	ldr	r0, [pc, #520]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000632:	f001 ffb7 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d101      	bne.n	8000640 <Scan_KeyMatrix.3+0x154>
			key = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	73fb      	strb	r3, [r7, #15]
        }

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	487d      	ldr	r0, [pc, #500]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000646:	f001 ffc5 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	487b      	ldr	r0, [pc, #492]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000650:	f001 ffc0 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	2140      	movs	r1, #64	@ 0x40
 8000658:	4878      	ldr	r0, [pc, #480]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800065a:	f001 ffbb 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	4876      	ldr	r0, [pc, #472]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000664:	f001 ffb6 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2101      	movs	r1, #1
 800066c:	4874      	ldr	r0, [pc, #464]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800066e:	f001 ffb1 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2102      	movs	r1, #2
 8000676:	4872      	ldr	r0, [pc, #456]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000678:	f001 ffac 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	486f      	ldr	r0, [pc, #444]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000682:	f001 ffa7 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068c:	486c      	ldr	r0, [pc, #432]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800068e:	f001 ffa1 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000698:	4869      	ldr	r0, [pc, #420]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800069a:	f001 ff9b 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a4:	4866      	ldr	r0, [pc, #408]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80006a6:	f001 ff95 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b0:	4863      	ldr	r0, [pc, #396]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80006b2:	f001 ff8f 	bl	80025d4 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80006b6:	2102      	movs	r1, #2
 80006b8:	4860      	ldr	r0, [pc, #384]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006ba:	f001 ff73 	bl	80025a4 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d101      	bne.n	80006c8 <Scan_KeyMatrix.3+0x1dc>
			key = 5;
 80006c4:	2305      	movs	r3, #5
 80006c6:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80006c8:	2104      	movs	r1, #4
 80006ca:	485c      	ldr	r0, [pc, #368]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006cc:	f001 ff6a 	bl	80025a4 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d101      	bne.n	80006da <Scan_KeyMatrix.3+0x1ee>
			key = 6;
 80006d6:	2306      	movs	r3, #6
 80006d8:	73fb      	strb	r3, [r7, #15]
		}
		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	4857      	ldr	r0, [pc, #348]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006e0:	f001 ff78 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	4854      	ldr	r0, [pc, #336]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006ea:	f001 ff73 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	@ 0x40
 80006f2:	4852      	ldr	r0, [pc, #328]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006f4:	f001 ff6e 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	484f      	ldr	r0, [pc, #316]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006fe:	f001 ff69 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2101      	movs	r1, #1
 8000706:	484e      	ldr	r0, [pc, #312]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000708:	f001 ff64 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	484b      	ldr	r0, [pc, #300]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000712:	f001 ff5f 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2104      	movs	r1, #4
 800071a:	4849      	ldr	r0, [pc, #292]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800071c:	f001 ff5a 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000726:	4846      	ldr	r0, [pc, #280]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000728:	f001 ff54 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000732:	4843      	ldr	r0, [pc, #268]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000734:	f001 ff4e 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073e:	4840      	ldr	r0, [pc, #256]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000740:	f001 ff48 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800074a:	483d      	ldr	r0, [pc, #244]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800074c:	f001 ff42 	bl	80025d4 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000750:	2102      	movs	r1, #2
 8000752:	483a      	ldr	r0, [pc, #232]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000754:	f001 ff26 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d101      	bne.n	8000762 <Scan_KeyMatrix.3+0x276>
			key = 7;
 800075e:	2307      	movs	r3, #7
 8000760:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000762:	2104      	movs	r1, #4
 8000764:	4835      	ldr	r0, [pc, #212]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000766:	f001 ff1d 	bl	80025a4 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d101      	bne.n	8000774 <Scan_KeyMatrix.3+0x288>
			key = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 8000774:	2108      	movs	r1, #8
 8000776:	4831      	ldr	r0, [pc, #196]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000778:	f001 ff14 	bl	80025a4 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d101      	bne.n	8000786 <Scan_KeyMatrix.3+0x29a>
			key = 9;
 8000782:	2309      	movs	r3, #9
 8000784:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	482c      	ldr	r0, [pc, #176]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800078c:	f001 ff22 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2120      	movs	r1, #32
 8000794:	4829      	ldr	r0, [pc, #164]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000796:	f001 ff1d 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	@ 0x40
 800079e:	4827      	ldr	r0, [pc, #156]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80007a0:	f001 ff18 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2180      	movs	r1, #128	@ 0x80
 80007a8:	4824      	ldr	r0, [pc, #144]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80007aa:	f001 ff13 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2101      	movs	r1, #1
 80007b2:	4823      	ldr	r0, [pc, #140]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007b4:	f001 ff0e 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2102      	movs	r1, #2
 80007bc:	4820      	ldr	r0, [pc, #128]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007be:	f001 ff09 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2104      	movs	r1, #4
 80007c6:	481e      	ldr	r0, [pc, #120]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007c8:	f001 ff04 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007d2:	481b      	ldr	r0, [pc, #108]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007d4:	f001 fefe 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007de:	4818      	ldr	r0, [pc, #96]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007e0:	f001 fef8 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ea:	4815      	ldr	r0, [pc, #84]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007ec:	f001 fef2 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007f6:	4812      	ldr	r0, [pc, #72]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007f8:	f001 feec 	bl	80025d4 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80007fc:	2104      	movs	r1, #4
 80007fe:	480f      	ldr	r0, [pc, #60]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000800:	f001 fed0 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d101      	bne.n	800080e <Scan_KeyMatrix.3+0x322>
			key = 11;
 800080a:	230b      	movs	r3, #11
 800080c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 800080e:	2108      	movs	r1, #8
 8000810:	480a      	ldr	r0, [pc, #40]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000812:	f001 fec7 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	d101      	bne.n	8000820 <Scan_KeyMatrix.3+0x334>
			key = 10;
 800081c:	230a      	movs	r3, #10
 800081e:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2110      	movs	r1, #16
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000826:	f001 fed5 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2120      	movs	r1, #32
 800082e:	4803      	ldr	r0, [pc, #12]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000830:	f001 fed0 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2140      	movs	r1, #64	@ 0x40
 8000838:	e004      	b.n	8000844 <Scan_KeyMatrix.3+0x358>
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020400 	.word	0x40020400
 8000844:	48cf      	ldr	r0, [pc, #828]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000846:	f001 fec5 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	48cd      	ldr	r0, [pc, #820]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000850:	f001 fec0 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	48cb      	ldr	r0, [pc, #812]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800085a:	f001 febb 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	48c9      	ldr	r0, [pc, #804]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000864:	f001 feb6 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	48c6      	ldr	r0, [pc, #792]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800086e:	f001 feb1 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000878:	48c3      	ldr	r0, [pc, #780]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800087a:	f001 feab 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000884:	48c0      	ldr	r0, [pc, #768]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000886:	f001 fea5 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000890:	48bd      	ldr	r0, [pc, #756]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000892:	f001 fe9f 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800089c:	48ba      	ldr	r0, [pc, #744]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800089e:	f001 fe99 	bl	80025d4 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80008a2:	2104      	movs	r1, #4
 80008a4:	48b7      	ldr	r0, [pc, #732]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008a6:	f001 fe7d 	bl	80025a4 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d101      	bne.n	80008b4 <Scan_KeyMatrix.3+0x3c8>
			key = 11;
 80008b0:	230b      	movs	r3, #11
 80008b2:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 80008b4:	2108      	movs	r1, #8
 80008b6:	48b3      	ldr	r0, [pc, #716]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008b8:	f001 fe74 	bl	80025a4 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d101      	bne.n	80008c6 <Scan_KeyMatrix.3+0x3da>
			key = 12;
 80008c2:	230c      	movs	r3, #12
 80008c4:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2110      	movs	r1, #16
 80008ca:	48ae      	ldr	r0, [pc, #696]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008cc:	f001 fe82 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2120      	movs	r1, #32
 80008d4:	48ab      	ldr	r0, [pc, #684]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008d6:	f001 fe7d 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	48a9      	ldr	r0, [pc, #676]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008e0:	f001 fe78 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	@ 0x80
 80008e8:	48a6      	ldr	r0, [pc, #664]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008ea:	f001 fe73 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2101      	movs	r1, #1
 80008f2:	48a5      	ldr	r0, [pc, #660]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80008f4:	f001 fe6e 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2102      	movs	r1, #2
 80008fc:	48a2      	ldr	r0, [pc, #648]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80008fe:	f001 fe69 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	2104      	movs	r1, #4
 8000906:	48a0      	ldr	r0, [pc, #640]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000908:	f001 fe64 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000912:	489d      	ldr	r0, [pc, #628]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000914:	f001 fe5e 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	489a      	ldr	r0, [pc, #616]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000920:	f001 fe58 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092a:	4897      	ldr	r0, [pc, #604]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800092c:	f001 fe52 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000936:	4894      	ldr	r0, [pc, #592]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000938:	f001 fe4c 	bl	80025d4 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 800093c:	2102      	movs	r1, #2
 800093e:	4891      	ldr	r0, [pc, #580]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000940:	f001 fe30 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <Scan_KeyMatrix.3+0x462>
			key = 14;
 800094a:	230e      	movs	r3, #14
 800094c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 800094e:	2104      	movs	r1, #4
 8000950:	488c      	ldr	r0, [pc, #560]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000952:	f001 fe27 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <Scan_KeyMatrix.3+0x474>
			key = 15;
 800095c:	230f      	movs	r3, #15
 800095e:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 8000960:	2108      	movs	r1, #8
 8000962:	4888      	ldr	r0, [pc, #544]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000964:	f001 fe1e 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d101      	bne.n	8000972 <Scan_KeyMatrix.3+0x486>
			key = 13;
 800096e:	230d      	movs	r3, #13
 8000970:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2110      	movs	r1, #16
 8000976:	4883      	ldr	r0, [pc, #524]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000978:	f001 fe2c 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2120      	movs	r1, #32
 8000980:	4880      	ldr	r0, [pc, #512]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000982:	f001 fe27 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	@ 0x40
 800098a:	487e      	ldr	r0, [pc, #504]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 800098c:	f001 fe22 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	487b      	ldr	r0, [pc, #492]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000996:	f001 fe1d 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2101      	movs	r1, #1
 800099e:	487a      	ldr	r0, [pc, #488]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009a0:	f001 fe18 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2102      	movs	r1, #2
 80009a8:	4877      	ldr	r0, [pc, #476]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009aa:	f001 fe13 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2104      	movs	r1, #4
 80009b2:	4875      	ldr	r0, [pc, #468]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009b4:	f001 fe0e 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009be:	4872      	ldr	r0, [pc, #456]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009c0:	f001 fe08 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ca:	486f      	ldr	r0, [pc, #444]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009cc:	f001 fe02 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d6:	486c      	ldr	r0, [pc, #432]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009d8:	f001 fdfc 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e2:	4869      	ldr	r0, [pc, #420]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009e4:	f001 fdf6 	bl	80025d4 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80009e8:	2102      	movs	r1, #2
 80009ea:	4866      	ldr	r0, [pc, #408]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80009ec:	f001 fdda 	bl	80025a4 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d101      	bne.n	80009fa <Scan_KeyMatrix.3+0x50e>
			key = 16;
 80009f6:	2310      	movs	r3, #16
 80009f8:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80009fa:	2104      	movs	r1, #4
 80009fc:	4861      	ldr	r0, [pc, #388]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80009fe:	f001 fdd1 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d101      	bne.n	8000a0c <Scan_KeyMatrix.3+0x520>
			key = 17;
 8000a08:	2311      	movs	r3, #17
 8000a0a:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2110      	movs	r1, #16
 8000a10:	485c      	ldr	r0, [pc, #368]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a12:	f001 fddf 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	485a      	ldr	r0, [pc, #360]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a1c:	f001 fdda 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2140      	movs	r1, #64	@ 0x40
 8000a24:	4857      	ldr	r0, [pc, #348]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a26:	f001 fdd5 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	4855      	ldr	r0, [pc, #340]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a30:	f001 fdd0 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	4853      	ldr	r0, [pc, #332]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a3a:	f001 fdcb 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2102      	movs	r1, #2
 8000a42:	4851      	ldr	r0, [pc, #324]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a44:	f001 fdc6 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	484e      	ldr	r0, [pc, #312]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a4e:	f001 fdc1 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a58:	484b      	ldr	r0, [pc, #300]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a5a:	f001 fdbb 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 1);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a64:	4848      	ldr	r0, [pc, #288]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a66:	f001 fdb5 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a70:	4845      	ldr	r0, [pc, #276]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a72:	f001 fdaf 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a7c:	4842      	ldr	r0, [pc, #264]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a7e:	f001 fda9 	bl	80025d4 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000a82:	2102      	movs	r1, #2
 8000a84:	483f      	ldr	r0, [pc, #252]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a86:	f001 fd8d 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <Scan_KeyMatrix.3+0x5a8>
			key = 18;
 8000a90:	2312      	movs	r3, #18
 8000a92:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000a94:	2104      	movs	r1, #4
 8000a96:	483b      	ldr	r0, [pc, #236]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a98:	f001 fd84 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d101      	bne.n	8000aa6 <Scan_KeyMatrix.3+0x5ba>
			key = 19;
 8000aa2:	2313      	movs	r3, #19
 8000aa4:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	4836      	ldr	r0, [pc, #216]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000aac:	f001 fd92 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4833      	ldr	r0, [pc, #204]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000ab6:	f001 fd8d 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2140      	movs	r1, #64	@ 0x40
 8000abe:	4831      	ldr	r0, [pc, #196]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000ac0:	f001 fd88 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	@ 0x80
 8000ac8:	482e      	ldr	r0, [pc, #184]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000aca:	f001 fd83 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	482d      	ldr	r0, [pc, #180]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ad4:	f001 fd7e 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	482a      	ldr	r0, [pc, #168]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ade:	f001 fd79 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4828      	ldr	r0, [pc, #160]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ae8:	f001 fd74 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af2:	4825      	ldr	r0, [pc, #148]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000af4:	f001 fd6e 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000afe:	4822      	ldr	r0, [pc, #136]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b00:	f001 fd68 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b0a:	481f      	ldr	r0, [pc, #124]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b0c:	f001 fd62 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b16:	481c      	ldr	r0, [pc, #112]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b18:	f001 fd5c 	bl	80025d4 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b20:	f001 fd40 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <Scan_KeyMatrix.3+0x642>
			key = 20;
 8000b2a:	2314      	movs	r3, #20
 8000b2c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000b2e:	2104      	movs	r1, #4
 8000b30:	4814      	ldr	r0, [pc, #80]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b32:	f001 fd37 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d101      	bne.n	8000b40 <Scan_KeyMatrix.3+0x654>
			key = 21;
 8000b3c:	2315      	movs	r3, #21
 8000b3e:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2110      	movs	r1, #16
 8000b44:	480f      	ldr	r0, [pc, #60]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b46:	f001 fd45 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b50:	f001 fd40 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2140      	movs	r1, #64	@ 0x40
 8000b58:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b5a:	f001 fd3b 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b64:	f001 fd36 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b6e:	f001 fd31 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2102      	movs	r1, #2
 8000b76:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b78:	f001 fd2c 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2104      	movs	r1, #4
 8000b80:	e004      	b.n	8000b8c <Scan_KeyMatrix.3+0x6a0>
 8000b82:	bf00      	nop
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	481d      	ldr	r0, [pc, #116]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000b8e:	f001 fd21 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b98:	481a      	ldr	r0, [pc, #104]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000b9a:	f001 fd1b 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba4:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000ba6:	f001 fd15 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb0:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000bb2:	f001 fd0f 	bl	80025d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 1);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bbc:	4811      	ldr	r0, [pc, #68]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000bbe:	f001 fd09 	bl	80025d4 <HAL_GPIO_WritePin>



        if (HAL_GPIO_ReadPin(Row1_GPIO_Port, Row1_Pin) == 1) {
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4810      	ldr	r0, [pc, #64]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bc6:	f001 fced 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d101      	bne.n	8000bd4 <Scan_KeyMatrix.3+0x6e8>
            key = 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
        }
		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bd8:	f001 fce4 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d101      	bne.n	8000be6 <Scan_KeyMatrix.3+0x6fa>
			key = 22;
 8000be2:	2316      	movs	r3, #22
 8000be4:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000be6:	2104      	movs	r1, #4
 8000be8:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bea:	f001 fcdb 	bl	80025a4 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d101      	bne.n	8000bf8 <Scan_KeyMatrix.3+0x70c>
			key = 23;
 8000bf4:	2317      	movs	r3, #23
 8000bf6:	73fb      	strb	r3, [r7, #15]
		}

        return key;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
    }
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40020000 	.word	0x40020000

08000c0c <main>:
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ac      	sub	sp, #176	@ 0xb0
 8000c10:	af00      	add	r7, sp, #0
int main(void)
 8000c12:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000c16:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_Init();
 8000c18:	f001 f998 	bl	8001f4c <HAL_Init>
  SystemClock_Config();
 8000c1c:	f000 ff4e 	bl	8001abc <SystemClock_Config>
  MX_GPIO_Init();
 8000c20:	f000 ffd8 	bl	8001bd4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c24:	f006 fe7c 	bl	8007920 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 8000c28:	f000 ffb0 	bl	8001b8c <MX_TIM10_Init>
  int counter1 = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int counter2 = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  int counter3 = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int counter4 = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int counter5 = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int counter6 = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  int counter7 = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int counter8 = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  int counter9 = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int counter10 = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int counter11 = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int counter12 = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int counter13 = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  int counter14 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  int counter15 = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
  int counter16 = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	677b      	str	r3, [r7, #116]	@ 0x74
  int counter17 = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	673b      	str	r3, [r7, #112]	@ 0x70
  int counter18 = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int counter19 = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  int counter20 = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	667b      	str	r3, [r7, #100]	@ 0x64
  int counter21 = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	663b      	str	r3, [r7, #96]	@ 0x60
  int counter22 = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int counter23 = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int counter24 = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	657b      	str	r3, [r7, #84]	@ 0x54
  int lastPress = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  int timeout = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  int previousChar = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  char charbuffer[22] = {};
 8000cb0:	4bd8      	ldr	r3, [pc, #864]	@ (8001014 <main+0x408>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000cb8:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	751a      	strb	r2, [r3, #20]
  int bufferItemsNumber = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  char result[22] = {};
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	821a      	strh	r2, [r3, #16]
  int activeTimeLimit = TIME_LIMIT;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	607b      	str	r3, [r7, #4]
  int activeTimer = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	653b      	str	r3, [r7, #80]	@ 0x50
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint8_t pressed_key;
    hashInit();
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	469c      	mov	ip, r3
 8000cee:	f000 fdbb 	bl	8001868 <hashInit.0>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  // Initialize GPIOs for keyboard matrix
    pressed_key = Scan_KeyMatrix();
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	469c      	mov	ip, r3
 8000cf6:	f7ff fbf9 	bl	80004ec <Scan_KeyMatrix.3>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

  	if(pressed_key != 0 && activeTimer == 0){
 8000d00:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d007      	beq.n	8000d18 <main+0x10c>
 8000d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d104      	bne.n	8000d18 <main+0x10c>
  		HAL_TIM_Base_Start_IT(&htim10);
 8000d0e:	48c2      	ldr	r0, [pc, #776]	@ (8001018 <main+0x40c>)
 8000d10:	f003 fb34 	bl	800437c <HAL_TIM_Base_Start_IT>
  		activeTimer = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	653b      	str	r3, [r7, #80]	@ 0x50
  	}
  	if(elapsedTime >= activeTimeLimit){
 8000d18:	4bc0      	ldr	r3, [pc, #768]	@ (800101c <main+0x410>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d314      	bcc.n	8000d4c <main+0x140>
  		HAL_TIM_Base_Stop_IT(&htim10);
 8000d22:	48bd      	ldr	r0, [pc, #756]	@ (8001018 <main+0x40c>)
 8000d24:	f003 fb8c 	bl	8004440 <HAL_TIM_Base_Stop_IT>
  		activeTimer = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	653b      	str	r3, [r7, #80]	@ 0x50
  		elapsedTime = 0;
 8000d2c:	4bbb      	ldr	r3, [pc, #748]	@ (800101c <main+0x410>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]

  		Set_Character(' ');
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	469c      	mov	ip, r3
 8000d36:	2020      	movs	r0, #32
 8000d38:	f000 faf2 	bl	8001320 <Set_Character.4>
		Send_Gate(1, ' ');
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	469c      	mov	ip, r3
 8000d40:	2120      	movs	r1, #32
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 fe7b 	bl	8001a3e <Send_Gate.5>
		lastPress = 1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
  	}
  	switch (pressed_key) {
 8000d4c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000d50:	3b01      	subs	r3, #1
 8000d52:	2b17      	cmp	r3, #23
 8000d54:	f200 8273 	bhi.w	800123e <main+0x632>
 8000d58:	a201      	add	r2, pc, #4	@ (adr r2, 8000d60 <main+0x154>)
 8000d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5e:	bf00      	nop
 8000d60:	08000dc1 	.word	0x08000dc1
 8000d64:	08000dc1 	.word	0x08000dc1
 8000d68:	08000df7 	.word	0x08000df7
 8000d6c:	08000e2d 	.word	0x08000e2d
 8000d70:	08000e63 	.word	0x08000e63
 8000d74:	08000e99 	.word	0x08000e99
 8000d78:	08000ecf 	.word	0x08000ecf
 8000d7c:	08000f05 	.word	0x08000f05
 8000d80:	08000f3b 	.word	0x08000f3b
 8000d84:	08000f71 	.word	0x08000f71
 8000d88:	08000fa7 	.word	0x08000fa7
 8000d8c:	08000fdd 	.word	0x08000fdd
 8000d90:	08001021 	.word	0x08001021
 8000d94:	08001057 	.word	0x08001057
 8000d98:	08001085 	.word	0x08001085
 8000d9c:	080010b3 	.word	0x080010b3
 8000da0:	080010e1 	.word	0x080010e1
 8000da4:	0800110f 	.word	0x0800110f
 8000da8:	0800113d 	.word	0x0800113d
 8000dac:	0800116b 	.word	0x0800116b
 8000db0:	08001199 	.word	0x08001199
 8000db4:	080011c5 	.word	0x080011c5
 8000db8:	080011f1 	.word	0x080011f1
 8000dbc:	0800121d 	.word	0x0800121d


  	    	*/

  	    case 2:
		  counter2 += 1;
 8000dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  if (counter2 >= 3) {
 8000dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	f340 8237 	ble.w	8001242 <main+0x636>
			Set_Character('S');
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	2053      	movs	r0, #83	@ 0x53
 8000dda:	f000 faa1 	bl	8001320 <Set_Character.4>
			Send_Gate(2, 'S');
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	469c      	mov	ip, r3
 8000de2:	2153      	movs	r1, #83	@ 0x53
 8000de4:	2002      	movs	r0, #2
 8000de6:	f000 fe2a 	bl	8001a3e <Send_Gate.5>
			lastPress = 2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
			  counter2 = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  }
  	        break;
 8000df4:	e225      	b.n	8001242 <main+0x636>
  	    case 3:
  		  counter3 += 1;
 8000df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  		  if (counter3 >= 3) {
 8000e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	f340 821e 	ble.w	8001246 <main+0x63a>
  			Set_Character('T');
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	469c      	mov	ip, r3
 8000e0e:	2054      	movs	r0, #84	@ 0x54
 8000e10:	f000 fa86 	bl	8001320 <Set_Character.4>
  			Send_Gate(3, 'T');
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	469c      	mov	ip, r3
 8000e18:	2154      	movs	r1, #84	@ 0x54
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f000 fe0f 	bl	8001a3e <Send_Gate.5>
  			lastPress = 3;
 8000e20:	2303      	movs	r3, #3
 8000e22:	60fb      	str	r3, [r7, #12]
  			  counter3 = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  		  }
  	        break;
 8000e2a:	e20c      	b.n	8001246 <main+0x63a>
  	    case 4:
		  counter4 += 1;
 8000e2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e30:	3301      	adds	r3, #1
 8000e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  if (counter4 >= 3) {
 8000e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	f340 8205 	ble.w	800124a <main+0x63e>
			  Set_Character('K');
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	469c      	mov	ip, r3
 8000e44:	204b      	movs	r0, #75	@ 0x4b
 8000e46:	f000 fa6b 	bl	8001320 <Set_Character.4>
			Send_Gate(4, 'K');
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	469c      	mov	ip, r3
 8000e4e:	214b      	movs	r1, #75	@ 0x4b
 8000e50:	2004      	movs	r0, #4
 8000e52:	f000 fdf4 	bl	8001a3e <Send_Gate.5>
			lastPress = 4;
 8000e56:	2304      	movs	r3, #4
 8000e58:	60fb      	str	r3, [r7, #12]
			  counter4 = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  }
  	        break;
 8000e60:	e1f3      	b.n	800124a <main+0x63e>
  	    case 5:
		  counter5 += 1;
 8000e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e66:	3301      	adds	r3, #1
 8000e68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		  if (counter5 >= 3) {
 8000e6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	f340 81ec 	ble.w	800124e <main+0x642>
			  Set_Character('P');
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	469c      	mov	ip, r3
 8000e7a:	2050      	movs	r0, #80	@ 0x50
 8000e7c:	f000 fa50 	bl	8001320 <Set_Character.4>
			Send_Gate(5, 'P');
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	469c      	mov	ip, r3
 8000e84:	2150      	movs	r1, #80	@ 0x50
 8000e86:	2005      	movs	r0, #5
 8000e88:	f000 fdd9 	bl	8001a3e <Send_Gate.5>
			lastPress = 5;
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	60fb      	str	r3, [r7, #12]
			  counter5 = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    		  }
  	        break;
 8000e96:	e1da      	b.n	800124e <main+0x642>
  	    case 6:
		  counter6 += 1;
 8000e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		if (counter6 >= 3) {
 8000ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	f340 81d3 	ble.w	8001252 <main+0x646>
			  Set_Character('W');
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	469c      	mov	ip, r3
 8000eb0:	2057      	movs	r0, #87	@ 0x57
 8000eb2:	f000 fa35 	bl	8001320 <Set_Character.4>
			Send_Gate(6, 'W');
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	469c      	mov	ip, r3
 8000eba:	2157      	movs	r1, #87	@ 0x57
 8000ebc:	2006      	movs	r0, #6
 8000ebe:	f000 fdbe 	bl	8001a3e <Send_Gate.5>
			lastPress = 6;
 8000ec2:	2306      	movs	r3, #6
 8000ec4:	60fb      	str	r3, [r7, #12]
			  counter6 = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    		  }
  	        break;
 8000ecc:	e1c1      	b.n	8001252 <main+0x646>
  	    case 7:
		  counter7 += 1;
 8000ece:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  if (counter7 >= 3) {
 8000ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	f340 81ba 	ble.w	8001256 <main+0x64a>
			  Set_Character('H');
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	2048      	movs	r0, #72	@ 0x48
 8000ee8:	f000 fa1a 	bl	8001320 <Set_Character.4>
			Send_Gate(7, 'H');
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	469c      	mov	ip, r3
 8000ef0:	2148      	movs	r1, #72	@ 0x48
 8000ef2:	2007      	movs	r0, #7
 8000ef4:	f000 fda3 	bl	8001a3e <Send_Gate.5>
			lastPress = 7;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]
			  counter7 = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    		  }
  	        break;
 8000f02:	e1a8      	b.n	8001256 <main+0x64a>
  	    case 8:
		  counter8 += 1;
 8000f04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		  if (counter8 >= 3) {
 8000f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	f340 81a1 	ble.w	800125a <main+0x64e>
			  Set_Character('R');
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	2052      	movs	r0, #82	@ 0x52
 8000f1e:	f000 f9ff 	bl	8001320 <Set_Character.4>
			Send_Gate(8, 'R');
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	469c      	mov	ip, r3
 8000f26:	2152      	movs	r1, #82	@ 0x52
 8000f28:	2008      	movs	r0, #8
 8000f2a:	f000 fd88 	bl	8001a3e <Send_Gate.5>
			lastPress = 8;
 8000f2e:	2308      	movs	r3, #8
 8000f30:	60fb      	str	r3, [r7, #12]
			  counter8 = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    		  }
  	        break;
 8000f38:	e18f      	b.n	800125a <main+0x64e>
  	    case 9:
		  counter9 += 1;
 8000f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  if (counter9 >= 3) {
 8000f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	f340 8188 	ble.w	800125e <main+0x652>
			  Set_Character('A');
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	469c      	mov	ip, r3
 8000f52:	2041      	movs	r0, #65	@ 0x41
 8000f54:	f000 f9e4 	bl	8001320 <Set_Character.4>
			Send_Gate(9, 'A');
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	2141      	movs	r1, #65	@ 0x41
 8000f5e:	2009      	movs	r0, #9
 8000f60:	f000 fd6d 	bl	8001a3e <Send_Gate.5>
			lastPress = 9;
 8000f64:	2309      	movs	r3, #9
 8000f66:	60fb      	str	r3, [r7, #12]
			  counter9 = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    		  }
  	        break;
 8000f6e:	e176      	b.n	800125e <main+0x652>
  	    case 10:
		  counter10 += 1;
 8000f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f74:	3301      	adds	r3, #1
 8000f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  if (counter10 >= 3) {
 8000f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	f340 816f 	ble.w	8001262 <main+0x656>
			  Set_Character('O');
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	469c      	mov	ip, r3
 8000f88:	204f      	movs	r0, #79	@ 0x4f
 8000f8a:	f000 f9c9 	bl	8001320 <Set_Character.4>
			Send_Gate(10, 'O');
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	469c      	mov	ip, r3
 8000f92:	214f      	movs	r1, #79	@ 0x4f
 8000f94:	200a      	movs	r0, #10
 8000f96:	f000 fd52 	bl	8001a3e <Send_Gate.5>
			lastPress = 10;
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	60fb      	str	r3, [r7, #12]
			  counter10 = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    		  }
  	        break;
 8000fa4:	e15d      	b.n	8001262 <main+0x656>
  	    case 11:
		  counter11 += 1;
 8000fa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		  if (counter11 >= 3) {
 8000fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	f340 8156 	ble.w	8001266 <main+0x65a>
			  Set_Character('*');
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	202a      	movs	r0, #42	@ 0x2a
 8000fc0:	f000 f9ae 	bl	8001320 <Set_Character.4>
			Send_Gate(11, '*');
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	212a      	movs	r1, #42	@ 0x2a
 8000fca:	200b      	movs	r0, #11
 8000fcc:	f000 fd37 	bl	8001a3e <Send_Gate.5>
			lastPress = 11;
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	60fb      	str	r3, [r7, #12]
			  counter11 = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    		  }
  	        break;
 8000fda:	e144      	b.n	8001266 <main+0x65a>
  	    case 12:
		  counter12 += 1;
 8000fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  if (counter12 >= 3) {
 8000fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	f340 813d 	ble.w	800126a <main+0x65e>
			  Set_Character('E');
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	469c      	mov	ip, r3
 8000ff4:	2045      	movs	r0, #69	@ 0x45
 8000ff6:	f000 f993 	bl	8001320 <Set_Character.4>
			Send_Gate(12, 'E');
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	2145      	movs	r1, #69	@ 0x45
 8001000:	200c      	movs	r0, #12
 8001002:	f000 fd1c 	bl	8001a3e <Send_Gate.5>
			lastPress = 12;
 8001006:	230c      	movs	r3, #12
 8001008:	60fb      	str	r3, [r7, #12]
			  counter12 = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    		  }
  	        break;
 8001010:	e12b      	b.n	800126a <main+0x65e>
 8001012:	bf00      	nop
 8001014:	08008398 	.word	0x08008398
 8001018:	2000017c 	.word	0x2000017c
 800101c:	2000210c 	.word	0x2000210c
  	    case 13:
		  counter13 += 1;
 8001020:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001024:	3301      	adds	r3, #1
 8001026:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  if (counter13 >= 3) {
 800102a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800102e:	2b02      	cmp	r3, #2
 8001030:	f340 811d 	ble.w	800126e <main+0x662>
			  Set_Character('U');
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	469c      	mov	ip, r3
 8001038:	2055      	movs	r0, #85	@ 0x55
 800103a:	f000 f971 	bl	8001320 <Set_Character.4>
			Send_Gate(13, 'U');
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	469c      	mov	ip, r3
 8001042:	2155      	movs	r1, #85	@ 0x55
 8001044:	200d      	movs	r0, #13
 8001046:	f000 fcfa 	bl	8001a3e <Send_Gate.5>
			lastPress = 13;
 800104a:	230d      	movs	r3, #13
 800104c:	60fb      	str	r3, [r7, #12]
			  counter13 = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  }
  	        break;
 8001054:	e10b      	b.n	800126e <main+0x662>
  	    case 14:
		  counter14 += 1;
 8001056:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001058:	3301      	adds	r3, #1
 800105a:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  if (counter14 >= 3) {
 800105c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800105e:	2b02      	cmp	r3, #2
 8001060:	f340 8107 	ble.w	8001272 <main+0x666>
			  Set_Character('F');
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	469c      	mov	ip, r3
 8001068:	2046      	movs	r0, #70	@ 0x46
 800106a:	f000 f959 	bl	8001320 <Set_Character.4>
			Send_Gate(14, 'F');
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	469c      	mov	ip, r3
 8001072:	2146      	movs	r1, #70	@ 0x46
 8001074:	200e      	movs	r0, #14
 8001076:	f000 fce2 	bl	8001a3e <Send_Gate.5>
			lastPress = 14;
 800107a:	230e      	movs	r3, #14
 800107c:	60fb      	str	r3, [r7, #12]
			  counter14 = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  }
  	        break;
 8001082:	e0f6      	b.n	8001272 <main+0x666>
  	    case 15:
		  counter15 += 1;
 8001084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001086:	3301      	adds	r3, #1
 8001088:	67bb      	str	r3, [r7, #120]	@ 0x78
		  if (counter15 >= 3) {
 800108a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800108c:	2b02      	cmp	r3, #2
 800108e:	f340 80f2 	ble.w	8001276 <main+0x66a>
			  Set_Character('R');
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	469c      	mov	ip, r3
 8001096:	2052      	movs	r0, #82	@ 0x52
 8001098:	f000 f942 	bl	8001320 <Set_Character.4>
			Send_Gate(15, 'R');
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	469c      	mov	ip, r3
 80010a0:	2152      	movs	r1, #82	@ 0x52
 80010a2:	200f      	movs	r0, #15
 80010a4:	f000 fccb 	bl	8001a3e <Send_Gate.5>
			lastPress = 15;
 80010a8:	230f      	movs	r3, #15
 80010aa:	60fb      	str	r3, [r7, #12]
			  counter15 = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	67bb      	str	r3, [r7, #120]	@ 0x78
		  }
  	        break;
 80010b0:	e0e1      	b.n	8001276 <main+0x66a>
  	    case 16:
		  counter16 += 1;
 80010b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010b4:	3301      	adds	r3, #1
 80010b6:	677b      	str	r3, [r7, #116]	@ 0x74
		  if (counter16 >= 3) {
 80010b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	f340 80dd 	ble.w	800127a <main+0x66e>
			  Set_Character('P');
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	469c      	mov	ip, r3
 80010c4:	2050      	movs	r0, #80	@ 0x50
 80010c6:	f000 f92b 	bl	8001320 <Set_Character.4>
			Send_Gate(16, 'P');
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	469c      	mov	ip, r3
 80010ce:	2150      	movs	r1, #80	@ 0x50
 80010d0:	2010      	movs	r0, #16
 80010d2:	f000 fcb4 	bl	8001a3e <Send_Gate.5>
			lastPress = 16;
 80010d6:	2310      	movs	r3, #16
 80010d8:	60fb      	str	r3, [r7, #12]
			  counter16 = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	677b      	str	r3, [r7, #116]	@ 0x74
		  }
  	        break;
 80010de:	e0cc      	b.n	800127a <main+0x66e>
  	    case 17:
		  counter17 += 1;
 80010e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010e2:	3301      	adds	r3, #1
 80010e4:	673b      	str	r3, [r7, #112]	@ 0x70
		  if (counter17 >= 3) {
 80010e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	f340 80c8 	ble.w	800127e <main+0x672>
			  Set_Character('B');
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	469c      	mov	ip, r3
 80010f2:	2042      	movs	r0, #66	@ 0x42
 80010f4:	f000 f914 	bl	8001320 <Set_Character.4>
			Send_Gate(17, 'B');
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	469c      	mov	ip, r3
 80010fc:	2142      	movs	r1, #66	@ 0x42
 80010fe:	2011      	movs	r0, #17
 8001100:	f000 fc9d 	bl	8001a3e <Send_Gate.5>
			lastPress = 17;
 8001104:	2311      	movs	r3, #17
 8001106:	60fb      	str	r3, [r7, #12]
			  counter17 = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	673b      	str	r3, [r7, #112]	@ 0x70
		  }
  	        break;
 800110c:	e0b7      	b.n	800127e <main+0x672>
  	    case 18:
		  counter18 += 1;
 800110e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001110:	3301      	adds	r3, #1
 8001112:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  if (counter18 >= 3) {
 8001114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001116:	2b02      	cmp	r3, #2
 8001118:	f340 80b3 	ble.w	8001282 <main+0x676>
			  Set_Character('L');
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	469c      	mov	ip, r3
 8001120:	204c      	movs	r0, #76	@ 0x4c
 8001122:	f000 f8fd 	bl	8001320 <Set_Character.4>
			Send_Gate(18, 'L');
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	469c      	mov	ip, r3
 800112a:	214c      	movs	r1, #76	@ 0x4c
 800112c:	2012      	movs	r0, #18
 800112e:	f000 fc86 	bl	8001a3e <Send_Gate.5>
			lastPress = 18;
 8001132:	2312      	movs	r3, #18
 8001134:	60fb      	str	r3, [r7, #12]
			  counter18 = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  }
  	        break;
 800113a:	e0a2      	b.n	8001282 <main+0x676>
  	    case 19:
		  counter19 += 1;
 800113c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800113e:	3301      	adds	r3, #1
 8001140:	66bb      	str	r3, [r7, #104]	@ 0x68
		  if (counter19 >= 3) {
 8001142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001144:	2b02      	cmp	r3, #2
 8001146:	f340 809e 	ble.w	8001286 <main+0x67a>
			  Set_Character('G');
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	469c      	mov	ip, r3
 800114e:	2047      	movs	r0, #71	@ 0x47
 8001150:	f000 f8e6 	bl	8001320 <Set_Character.4>
			Send_Gate(19, 'G');
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	469c      	mov	ip, r3
 8001158:	2147      	movs	r1, #71	@ 0x47
 800115a:	2013      	movs	r0, #19
 800115c:	f000 fc6f 	bl	8001a3e <Send_Gate.5>
			lastPress = 19;
 8001160:	2313      	movs	r3, #19
 8001162:	60fb      	str	r3, [r7, #12]
			  counter19 = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	66bb      	str	r3, [r7, #104]	@ 0x68
		  }
  	        break;
 8001168:	e08d      	b.n	8001286 <main+0x67a>
  	    case 20:
		  counter20 += 1;
 800116a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800116c:	3301      	adds	r3, #1
 800116e:	667b      	str	r3, [r7, #100]	@ 0x64
		  if (counter20 >= 3) {
 8001170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001172:	2b02      	cmp	r3, #2
 8001174:	f340 8089 	ble.w	800128a <main+0x67e>
			  Set_Character('T');
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	469c      	mov	ip, r3
 800117c:	2054      	movs	r0, #84	@ 0x54
 800117e:	f000 f8cf 	bl	8001320 <Set_Character.4>
			Send_Gate(20, 'T');
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	469c      	mov	ip, r3
 8001186:	2154      	movs	r1, #84	@ 0x54
 8001188:	2014      	movs	r0, #20
 800118a:	f000 fc58 	bl	8001a3e <Send_Gate.5>
			lastPress = 20;
 800118e:	2314      	movs	r3, #20
 8001190:	60fb      	str	r3, [r7, #12]
			  counter20 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	667b      	str	r3, [r7, #100]	@ 0x64
		  }
  	        break;
 8001196:	e078      	b.n	800128a <main+0x67e>
  	    case 21:
		  counter21 += 1;
 8001198:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800119a:	3301      	adds	r3, #1
 800119c:	663b      	str	r3, [r7, #96]	@ 0x60
		  if (counter21 >= 3) {
 800119e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	dd74      	ble.n	800128e <main+0x682>
			  Set_Character('S');
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	469c      	mov	ip, r3
 80011a8:	2053      	movs	r0, #83	@ 0x53
 80011aa:	f000 f8b9 	bl	8001320 <Set_Character.4>
			Send_Gate(21, 'S');
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	469c      	mov	ip, r3
 80011b2:	2153      	movs	r1, #83	@ 0x53
 80011b4:	2015      	movs	r0, #21
 80011b6:	f000 fc42 	bl	8001a3e <Send_Gate.5>
			lastPress = 21;
 80011ba:	2315      	movs	r3, #21
 80011bc:	60fb      	str	r3, [r7, #12]
			  counter21 = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	663b      	str	r3, [r7, #96]	@ 0x60
		  }
  	        break;
 80011c2:	e064      	b.n	800128e <main+0x682>
  	    case 22:
		  counter22 += 1;
 80011c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011c6:	3301      	adds	r3, #1
 80011c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  if (counter22 >= 3) {
 80011ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	dd60      	ble.n	8001292 <main+0x686>
			  Set_Character('D');
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	469c      	mov	ip, r3
 80011d4:	2044      	movs	r0, #68	@ 0x44
 80011d6:	f000 f8a3 	bl	8001320 <Set_Character.4>
			Send_Gate(22, 'D');
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	469c      	mov	ip, r3
 80011de:	2144      	movs	r1, #68	@ 0x44
 80011e0:	2016      	movs	r0, #22
 80011e2:	f000 fc2c 	bl	8001a3e <Send_Gate.5>
			lastPress = 22;
 80011e6:	2316      	movs	r3, #22
 80011e8:	60fb      	str	r3, [r7, #12]
			  counter22 = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  }
  	        break;
 80011ee:	e050      	b.n	8001292 <main+0x686>
  	    case 23:
		  counter23 += 1;
 80011f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011f2:	3301      	adds	r3, #1
 80011f4:	65bb      	str	r3, [r7, #88]	@ 0x58
		  if (counter23 >= 3) {
 80011f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	dd4c      	ble.n	8001296 <main+0x68a>
			  Set_Character('Z');
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	469c      	mov	ip, r3
 8001200:	205a      	movs	r0, #90	@ 0x5a
 8001202:	f000 f88d 	bl	8001320 <Set_Character.4>
			Send_Gate(23, 'Z');
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	469c      	mov	ip, r3
 800120a:	215a      	movs	r1, #90	@ 0x5a
 800120c:	2017      	movs	r0, #23
 800120e:	f000 fc16 	bl	8001a3e <Send_Gate.5>
			lastPress = 23;
 8001212:	2317      	movs	r3, #23
 8001214:	60fb      	str	r3, [r7, #12]
			  counter23 = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	65bb      	str	r3, [r7, #88]	@ 0x58
		  }
  	        break;
 800121a:	e03c      	b.n	8001296 <main+0x68a>
  	    case 24:
		  counter24 += 1;
 800121c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800121e:	3301      	adds	r3, #1
 8001220:	657b      	str	r3, [r7, #84]	@ 0x54
		  if (counter24 >= 3) {
 8001222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001224:	2b02      	cmp	r3, #2
 8001226:	dd38      	ble.n	800129a <main+0x68e>
			Send_Gate(24, '/');
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	469c      	mov	ip, r3
 800122c:	212f      	movs	r1, #47	@ 0x2f
 800122e:	2018      	movs	r0, #24
 8001230:	f000 fc05 	bl	8001a3e <Send_Gate.5>
			lastPress = 24;
 8001234:	2318      	movs	r3, #24
 8001236:	60fb      	str	r3, [r7, #12]
			  counter24 = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	657b      	str	r3, [r7, #84]	@ 0x54
		  }
				break;
 800123c:	e02d      	b.n	800129a <main+0x68e>
  	    default:
  	        break;
 800123e:	bf00      	nop
 8001240:	e557      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001242:	bf00      	nop
 8001244:	e555      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001246:	bf00      	nop
 8001248:	e553      	b.n	8000cf2 <main+0xe6>
  	        break;
 800124a:	bf00      	nop
 800124c:	e551      	b.n	8000cf2 <main+0xe6>
  	        break;
 800124e:	bf00      	nop
 8001250:	e54f      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001252:	bf00      	nop
 8001254:	e54d      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001256:	bf00      	nop
 8001258:	e54b      	b.n	8000cf2 <main+0xe6>
  	        break;
 800125a:	bf00      	nop
 800125c:	e549      	b.n	8000cf2 <main+0xe6>
  	        break;
 800125e:	bf00      	nop
 8001260:	e547      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001262:	bf00      	nop
 8001264:	e545      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001266:	bf00      	nop
 8001268:	e543      	b.n	8000cf2 <main+0xe6>
  	        break;
 800126a:	bf00      	nop
 800126c:	e541      	b.n	8000cf2 <main+0xe6>
  	        break;
 800126e:	bf00      	nop
 8001270:	e53f      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001272:	bf00      	nop
 8001274:	e53d      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001276:	bf00      	nop
 8001278:	e53b      	b.n	8000cf2 <main+0xe6>
  	        break;
 800127a:	bf00      	nop
 800127c:	e539      	b.n	8000cf2 <main+0xe6>
  	        break;
 800127e:	bf00      	nop
 8001280:	e537      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001282:	bf00      	nop
 8001284:	e535      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001286:	bf00      	nop
 8001288:	e533      	b.n	8000cf2 <main+0xe6>
  	        break;
 800128a:	bf00      	nop
 800128c:	e531      	b.n	8000cf2 <main+0xe6>
  	        break;
 800128e:	bf00      	nop
 8001290:	e52f      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001292:	bf00      	nop
 8001294:	e52d      	b.n	8000cf2 <main+0xe6>
  	        break;
 8001296:	bf00      	nop
 8001298:	e52b      	b.n	8000cf2 <main+0xe6>
				break;
 800129a:	bf00      	nop
    pressed_key = Scan_KeyMatrix();
 800129c:	e529      	b.n	8000cf2 <main+0xe6>
 800129e:	bf00      	nop

080012a0 <Clear_Buffer.10>:
  void Clear_Buffer(){
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4662      	mov	r2, ip
 80012a8:	f8c7 c004 	str.w	ip, [r7, #4]
  	  for (int i = 0; i < 22; i++) {
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e007      	b.n	80012c2 <Clear_Buffer.10+0x22>
  	  		          charbuffer[i] = '\0';
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	332a      	adds	r3, #42	@ 0x2a
 80012b8:	2100      	movs	r1, #0
 80012ba:	7019      	strb	r1, [r3, #0]
  	  for (int i = 0; i < 22; i++) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3301      	adds	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b15      	cmp	r3, #21
 80012c6:	ddf4      	ble.n	80012b2 <Clear_Buffer.10+0x12>
    }
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <Send_Character.9>:
  void Send_Character(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	f8c7 c004 	str.w	ip, [r7, #4]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80012e2:	2208      	movs	r2, #8
 80012e4:	490c      	ldr	r1, [pc, #48]	@ (8001318 <Send_Character.9+0x40>)
 80012e6:	480d      	ldr	r0, [pc, #52]	@ (800131c <Send_Character.9+0x44>)
 80012e8:	f004 ff90 	bl	800620c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80012ec:	2014      	movs	r0, #20
 80012ee:	f000 fe9f 	bl	8002030 <HAL_Delay>
	  keyBoardHIDsub.MODIFIER=0x00;
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <Send_Character.9+0x40>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
	  keyBoardHIDsub.KEYCODE2=0x00;
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <Send_Character.9+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80012fe:	2208      	movs	r2, #8
 8001300:	4905      	ldr	r1, [pc, #20]	@ (8001318 <Send_Character.9+0x40>)
 8001302:	4806      	ldr	r0, [pc, #24]	@ (800131c <Send_Character.9+0x44>)
 8001304:	f004 ff82 	bl	800620c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8001308:	2014      	movs	r0, #20
 800130a:	f000 fe91 	bl	8002030 <HAL_Delay>
	  }
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001c4 	.word	0x200001c4
 800131c:	2000211c 	.word	0x2000211c

08001320 <Set_Character.4>:
  void Set_Character(char i){
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	f8c7 c000 	str.w	ip, [r7]
	  switch(i){
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	3b20      	subs	r3, #32
 8001332:	2b5a      	cmp	r3, #90	@ 0x5a
 8001334:	f200 820a 	bhi.w	800174c <Set_Character.4+0x42c>
 8001338:	a201      	add	r2, pc, #4	@ (adr r2, 8001340 <Set_Character.4+0x20>)
 800133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	0800173f 	.word	0x0800173f
 8001344:	080016a5 	.word	0x080016a5
 8001348:	0800174d 	.word	0x0800174d
 800134c:	080016c1 	.word	0x080016c1
 8001350:	080016cf 	.word	0x080016cf
 8001354:	080016dd 	.word	0x080016dd
 8001358:	080016f9 	.word	0x080016f9
 800135c:	0800174d 	.word	0x0800174d
 8001360:	08001715 	.word	0x08001715
 8001364:	08001723 	.word	0x08001723
 8001368:	08001707 	.word	0x08001707
 800136c:	08001731 	.word	0x08001731
 8001370:	0800174d 	.word	0x0800174d
 8001374:	0800174d 	.word	0x0800174d
 8001378:	0800174d 	.word	0x0800174d
 800137c:	0800174d 	.word	0x0800174d
 8001380:	08001697 	.word	0x08001697
 8001384:	08001619 	.word	0x08001619
 8001388:	08001627 	.word	0x08001627
 800138c:	08001635 	.word	0x08001635
 8001390:	08001643 	.word	0x08001643
 8001394:	08001651 	.word	0x08001651
 8001398:	0800165f 	.word	0x0800165f
 800139c:	0800166d 	.word	0x0800166d
 80013a0:	0800167b 	.word	0x0800167b
 80013a4:	08001689 	.word	0x08001689
 80013a8:	0800174d 	.word	0x0800174d
 80013ac:	0800174d 	.word	0x0800174d
 80013b0:	0800174d 	.word	0x0800174d
 80013b4:	0800174d 	.word	0x0800174d
 80013b8:	0800174d 	.word	0x0800174d
 80013bc:	0800174d 	.word	0x0800174d
 80013c0:	080016b3 	.word	0x080016b3
 80013c4:	0800174d 	.word	0x0800174d
 80013c8:	0800174d 	.word	0x0800174d
 80013cc:	0800174d 	.word	0x0800174d
 80013d0:	0800174d 	.word	0x0800174d
 80013d4:	0800174d 	.word	0x0800174d
 80013d8:	0800174d 	.word	0x0800174d
 80013dc:	0800174d 	.word	0x0800174d
 80013e0:	0800174d 	.word	0x0800174d
 80013e4:	0800174d 	.word	0x0800174d
 80013e8:	0800174d 	.word	0x0800174d
 80013ec:	0800174d 	.word	0x0800174d
 80013f0:	0800174d 	.word	0x0800174d
 80013f4:	0800174d 	.word	0x0800174d
 80013f8:	0800174d 	.word	0x0800174d
 80013fc:	0800174d 	.word	0x0800174d
 8001400:	0800174d 	.word	0x0800174d
 8001404:	0800174d 	.word	0x0800174d
 8001408:	0800174d 	.word	0x0800174d
 800140c:	0800174d 	.word	0x0800174d
 8001410:	0800174d 	.word	0x0800174d
 8001414:	0800174d 	.word	0x0800174d
 8001418:	0800174d 	.word	0x0800174d
 800141c:	0800174d 	.word	0x0800174d
 8001420:	0800174d 	.word	0x0800174d
 8001424:	0800174d 	.word	0x0800174d
 8001428:	0800174d 	.word	0x0800174d
 800142c:	0800174d 	.word	0x0800174d
 8001430:	0800174d 	.word	0x0800174d
 8001434:	0800174d 	.word	0x0800174d
 8001438:	080016eb 	.word	0x080016eb
 800143c:	0800174d 	.word	0x0800174d
 8001440:	0800174d 	.word	0x0800174d
 8001444:	080014ad 	.word	0x080014ad
 8001448:	080014bb 	.word	0x080014bb
 800144c:	080014c9 	.word	0x080014c9
 8001450:	080014d7 	.word	0x080014d7
 8001454:	080014e5 	.word	0x080014e5
 8001458:	080014f3 	.word	0x080014f3
 800145c:	08001501 	.word	0x08001501
 8001460:	0800150f 	.word	0x0800150f
 8001464:	0800151d 	.word	0x0800151d
 8001468:	0800152b 	.word	0x0800152b
 800146c:	08001539 	.word	0x08001539
 8001470:	08001547 	.word	0x08001547
 8001474:	08001555 	.word	0x08001555
 8001478:	08001563 	.word	0x08001563
 800147c:	08001571 	.word	0x08001571
 8001480:	0800157f 	.word	0x0800157f
 8001484:	0800158d 	.word	0x0800158d
 8001488:	0800159b 	.word	0x0800159b
 800148c:	080015a9 	.word	0x080015a9
 8001490:	080015b7 	.word	0x080015b7
 8001494:	080015c5 	.word	0x080015c5
 8001498:	080015d3 	.word	0x080015d3
 800149c:	080015e1 	.word	0x080015e1
 80014a0:	080015ef 	.word	0x080015ef
 80014a4:	080015fd 	.word	0x080015fd
 80014a8:	0800160b 	.word	0x0800160b
					keyBoardHIDsub.MODIFIER=0x00;
 80014ac:	4bae      	ldr	r3, [pc, #696]	@ (8001768 <Set_Character.4+0x448>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	  			    keyBoardHIDsub.KEYCODE2=KEY_A;
 80014b2:	4bad      	ldr	r3, [pc, #692]	@ (8001768 <Set_Character.4+0x448>)
 80014b4:	2204      	movs	r2, #4
 80014b6:	70da      	strb	r2, [r3, #3]
	  			    break;
 80014b8:	e14f      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x00;
 80014ba:	4bab      	ldr	r3, [pc, #684]	@ (8001768 <Set_Character.4+0x448>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
	  	  		  	keyBoardHIDsub.KEYCODE2=KEY_B;
 80014c0:	4ba9      	ldr	r3, [pc, #676]	@ (8001768 <Set_Character.4+0x448>)
 80014c2:	2205      	movs	r2, #5
 80014c4:	70da      	strb	r2, [r3, #3]
	  	  		  	break;
 80014c6:	e148      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80014c8:	4ba7      	ldr	r3, [pc, #668]	@ (8001768 <Set_Character.4+0x448>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_C;
 80014ce:	4ba6      	ldr	r3, [pc, #664]	@ (8001768 <Set_Character.4+0x448>)
 80014d0:	2206      	movs	r2, #6
 80014d2:	70da      	strb	r2, [r3, #3]
	    			break;
 80014d4:	e141      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80014d6:	4ba4      	ldr	r3, [pc, #656]	@ (8001768 <Set_Character.4+0x448>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_D;
 80014dc:	4ba2      	ldr	r3, [pc, #648]	@ (8001768 <Set_Character.4+0x448>)
 80014de:	2207      	movs	r2, #7
 80014e0:	70da      	strb	r2, [r3, #3]
	  			break;
 80014e2:	e13a      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80014e4:	4ba0      	ldr	r3, [pc, #640]	@ (8001768 <Set_Character.4+0x448>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_E;
 80014ea:	4b9f      	ldr	r3, [pc, #636]	@ (8001768 <Set_Character.4+0x448>)
 80014ec:	2208      	movs	r2, #8
 80014ee:	70da      	strb	r2, [r3, #3]
	  			break;
 80014f0:	e133      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80014f2:	4b9d      	ldr	r3, [pc, #628]	@ (8001768 <Set_Character.4+0x448>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_F;
 80014f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001768 <Set_Character.4+0x448>)
 80014fa:	2209      	movs	r2, #9
 80014fc:	70da      	strb	r2, [r3, #3]
	  			break;
 80014fe:	e12c      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001500:	4b99      	ldr	r3, [pc, #612]	@ (8001768 <Set_Character.4+0x448>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_G;
 8001506:	4b98      	ldr	r3, [pc, #608]	@ (8001768 <Set_Character.4+0x448>)
 8001508:	220a      	movs	r2, #10
 800150a:	70da      	strb	r2, [r3, #3]
	  			break;
 800150c:	e125      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 800150e:	4b96      	ldr	r3, [pc, #600]	@ (8001768 <Set_Character.4+0x448>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_H;
 8001514:	4b94      	ldr	r3, [pc, #592]	@ (8001768 <Set_Character.4+0x448>)
 8001516:	220b      	movs	r2, #11
 8001518:	70da      	strb	r2, [r3, #3]
	  			break;
 800151a:	e11e      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 800151c:	4b92      	ldr	r3, [pc, #584]	@ (8001768 <Set_Character.4+0x448>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_I;
 8001522:	4b91      	ldr	r3, [pc, #580]	@ (8001768 <Set_Character.4+0x448>)
 8001524:	220c      	movs	r2, #12
 8001526:	70da      	strb	r2, [r3, #3]
	  			break;
 8001528:	e117      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 800152a:	4b8f      	ldr	r3, [pc, #572]	@ (8001768 <Set_Character.4+0x448>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_J;
 8001530:	4b8d      	ldr	r3, [pc, #564]	@ (8001768 <Set_Character.4+0x448>)
 8001532:	220d      	movs	r2, #13
 8001534:	70da      	strb	r2, [r3, #3]
					break;
 8001536:	e110      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001538:	4b8b      	ldr	r3, [pc, #556]	@ (8001768 <Set_Character.4+0x448>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_K;
 800153e:	4b8a      	ldr	r3, [pc, #552]	@ (8001768 <Set_Character.4+0x448>)
 8001540:	220e      	movs	r2, #14
 8001542:	70da      	strb	r2, [r3, #3]
	  			break;
 8001544:	e109      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001546:	4b88      	ldr	r3, [pc, #544]	@ (8001768 <Set_Character.4+0x448>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_L;
 800154c:	4b86      	ldr	r3, [pc, #536]	@ (8001768 <Set_Character.4+0x448>)
 800154e:	220f      	movs	r2, #15
 8001550:	70da      	strb	r2, [r3, #3]
	  			break;
 8001552:	e102      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001554:	4b84      	ldr	r3, [pc, #528]	@ (8001768 <Set_Character.4+0x448>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_M;
 800155a:	4b83      	ldr	r3, [pc, #524]	@ (8001768 <Set_Character.4+0x448>)
 800155c:	2210      	movs	r2, #16
 800155e:	70da      	strb	r2, [r3, #3]
	  			break;
 8001560:	e0fb      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001562:	4b81      	ldr	r3, [pc, #516]	@ (8001768 <Set_Character.4+0x448>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_N;
 8001568:	4b7f      	ldr	r3, [pc, #508]	@ (8001768 <Set_Character.4+0x448>)
 800156a:	2211      	movs	r2, #17
 800156c:	70da      	strb	r2, [r3, #3]
	  			break;
 800156e:	e0f4      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001570:	4b7d      	ldr	r3, [pc, #500]	@ (8001768 <Set_Character.4+0x448>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_O;
 8001576:	4b7c      	ldr	r3, [pc, #496]	@ (8001768 <Set_Character.4+0x448>)
 8001578:	2212      	movs	r2, #18
 800157a:	70da      	strb	r2, [r3, #3]
	  			break;
 800157c:	e0ed      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 800157e:	4b7a      	ldr	r3, [pc, #488]	@ (8001768 <Set_Character.4+0x448>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_P;
 8001584:	4b78      	ldr	r3, [pc, #480]	@ (8001768 <Set_Character.4+0x448>)
 8001586:	2213      	movs	r2, #19
 8001588:	70da      	strb	r2, [r3, #3]
	  			break;
 800158a:	e0e6      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 800158c:	4b76      	ldr	r3, [pc, #472]	@ (8001768 <Set_Character.4+0x448>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_Q;
 8001592:	4b75      	ldr	r3, [pc, #468]	@ (8001768 <Set_Character.4+0x448>)
 8001594:	2214      	movs	r2, #20
 8001596:	70da      	strb	r2, [r3, #3]
	  			break;
 8001598:	e0df      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 800159a:	4b73      	ldr	r3, [pc, #460]	@ (8001768 <Set_Character.4+0x448>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_R;
 80015a0:	4b71      	ldr	r3, [pc, #452]	@ (8001768 <Set_Character.4+0x448>)
 80015a2:	2215      	movs	r2, #21
 80015a4:	70da      	strb	r2, [r3, #3]
	  			break;
 80015a6:	e0d8      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80015a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001768 <Set_Character.4+0x448>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_S;
 80015ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001768 <Set_Character.4+0x448>)
 80015b0:	2216      	movs	r2, #22
 80015b2:	70da      	strb	r2, [r3, #3]
	  			break;
 80015b4:	e0d1      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80015b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001768 <Set_Character.4+0x448>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_T;
 80015bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001768 <Set_Character.4+0x448>)
 80015be:	2217      	movs	r2, #23
 80015c0:	70da      	strb	r2, [r3, #3]
	  			break;
 80015c2:	e0ca      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80015c4:	4b68      	ldr	r3, [pc, #416]	@ (8001768 <Set_Character.4+0x448>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_U;
 80015ca:	4b67      	ldr	r3, [pc, #412]	@ (8001768 <Set_Character.4+0x448>)
 80015cc:	2218      	movs	r2, #24
 80015ce:	70da      	strb	r2, [r3, #3]
	  			break;
 80015d0:	e0c3      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80015d2:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <Set_Character.4+0x448>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_V;
 80015d8:	4b63      	ldr	r3, [pc, #396]	@ (8001768 <Set_Character.4+0x448>)
 80015da:	2219      	movs	r2, #25
 80015dc:	70da      	strb	r2, [r3, #3]
	  			break;
 80015de:	e0bc      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80015e0:	4b61      	ldr	r3, [pc, #388]	@ (8001768 <Set_Character.4+0x448>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_W;
 80015e6:	4b60      	ldr	r3, [pc, #384]	@ (8001768 <Set_Character.4+0x448>)
 80015e8:	221a      	movs	r2, #26
 80015ea:	70da      	strb	r2, [r3, #3]
				break;
 80015ec:	e0b5      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80015ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001768 <Set_Character.4+0x448>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_X;
 80015f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001768 <Set_Character.4+0x448>)
 80015f6:	221b      	movs	r2, #27
 80015f8:	70da      	strb	r2, [r3, #3]
				break;
 80015fa:	e0ae      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 80015fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001768 <Set_Character.4+0x448>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_Y;
 8001602:	4b59      	ldr	r3, [pc, #356]	@ (8001768 <Set_Character.4+0x448>)
 8001604:	221c      	movs	r2, #28
 8001606:	70da      	strb	r2, [r3, #3]
				break;
 8001608:	e0a7      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 800160a:	4b57      	ldr	r3, [pc, #348]	@ (8001768 <Set_Character.4+0x448>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_Z;
 8001610:	4b55      	ldr	r3, [pc, #340]	@ (8001768 <Set_Character.4+0x448>)
 8001612:	221d      	movs	r2, #29
 8001614:	70da      	strb	r2, [r3, #3]
				break;
 8001616:	e0a0      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001618:	4b53      	ldr	r3, [pc, #332]	@ (8001768 <Set_Character.4+0x448>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_1;
 800161e:	4b52      	ldr	r3, [pc, #328]	@ (8001768 <Set_Character.4+0x448>)
 8001620:	221e      	movs	r2, #30
 8001622:	70da      	strb	r2, [r3, #3]
				break;
 8001624:	e099      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001626:	4b50      	ldr	r3, [pc, #320]	@ (8001768 <Set_Character.4+0x448>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_2;
 800162c:	4b4e      	ldr	r3, [pc, #312]	@ (8001768 <Set_Character.4+0x448>)
 800162e:	221f      	movs	r2, #31
 8001630:	70da      	strb	r2, [r3, #3]
				break;
 8001632:	e092      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001634:	4b4c      	ldr	r3, [pc, #304]	@ (8001768 <Set_Character.4+0x448>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_3;
 800163a:	4b4b      	ldr	r3, [pc, #300]	@ (8001768 <Set_Character.4+0x448>)
 800163c:	2220      	movs	r2, #32
 800163e:	70da      	strb	r2, [r3, #3]
				break;
 8001640:	e08b      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001642:	4b49      	ldr	r3, [pc, #292]	@ (8001768 <Set_Character.4+0x448>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_4;
 8001648:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <Set_Character.4+0x448>)
 800164a:	2221      	movs	r2, #33	@ 0x21
 800164c:	70da      	strb	r2, [r3, #3]
				break;
 800164e:	e084      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001650:	4b45      	ldr	r3, [pc, #276]	@ (8001768 <Set_Character.4+0x448>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_5;
 8001656:	4b44      	ldr	r3, [pc, #272]	@ (8001768 <Set_Character.4+0x448>)
 8001658:	2222      	movs	r2, #34	@ 0x22
 800165a:	70da      	strb	r2, [r3, #3]
				break;
 800165c:	e07d      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 800165e:	4b42      	ldr	r3, [pc, #264]	@ (8001768 <Set_Character.4+0x448>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_6;
 8001664:	4b40      	ldr	r3, [pc, #256]	@ (8001768 <Set_Character.4+0x448>)
 8001666:	2223      	movs	r2, #35	@ 0x23
 8001668:	70da      	strb	r2, [r3, #3]
				break;
 800166a:	e076      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 800166c:	4b3e      	ldr	r3, [pc, #248]	@ (8001768 <Set_Character.4+0x448>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_7;
 8001672:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <Set_Character.4+0x448>)
 8001674:	2224      	movs	r2, #36	@ 0x24
 8001676:	70da      	strb	r2, [r3, #3]
				break;
 8001678:	e06f      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 800167a:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <Set_Character.4+0x448>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_8;
 8001680:	4b39      	ldr	r3, [pc, #228]	@ (8001768 <Set_Character.4+0x448>)
 8001682:	2225      	movs	r2, #37	@ 0x25
 8001684:	70da      	strb	r2, [r3, #3]
				break;
 8001686:	e068      	b.n	800175a <Set_Character.4+0x43a>
				keyBoardHIDsub.MODIFIER=0x00;
 8001688:	4b37      	ldr	r3, [pc, #220]	@ (8001768 <Set_Character.4+0x448>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_9;
 800168e:	4b36      	ldr	r3, [pc, #216]	@ (8001768 <Set_Character.4+0x448>)
 8001690:	2226      	movs	r2, #38	@ 0x26
 8001692:	70da      	strb	r2, [r3, #3]
				break;
 8001694:	e061      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x00;
 8001696:	4b34      	ldr	r3, [pc, #208]	@ (8001768 <Set_Character.4+0x448>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_0;
 800169c:	4b32      	ldr	r3, [pc, #200]	@ (8001768 <Set_Character.4+0x448>)
 800169e:	2227      	movs	r2, #39	@ 0x27
 80016a0:	70da      	strb	r2, [r3, #3]
				break;
 80016a2:	e05a      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 80016a4:	4b30      	ldr	r3, [pc, #192]	@ (8001768 <Set_Character.4+0x448>)
 80016a6:	2202      	movs	r2, #2
 80016a8:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_1;
 80016aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001768 <Set_Character.4+0x448>)
 80016ac:	221e      	movs	r2, #30
 80016ae:	70da      	strb	r2, [r3, #3]
				break;
 80016b0:	e053      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 80016b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <Set_Character.4+0x448>)
 80016b4:	2202      	movs	r2, #2
 80016b6:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_2;
 80016b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001768 <Set_Character.4+0x448>)
 80016ba:	221f      	movs	r2, #31
 80016bc:	70da      	strb	r2, [r3, #3]
				break;
 80016be:	e04c      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 80016c0:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <Set_Character.4+0x448>)
 80016c2:	2202      	movs	r2, #2
 80016c4:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_3;
 80016c6:	4b28      	ldr	r3, [pc, #160]	@ (8001768 <Set_Character.4+0x448>)
 80016c8:	2220      	movs	r2, #32
 80016ca:	70da      	strb	r2, [r3, #3]
				break;
 80016cc:	e045      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 80016ce:	4b26      	ldr	r3, [pc, #152]	@ (8001768 <Set_Character.4+0x448>)
 80016d0:	2202      	movs	r2, #2
 80016d2:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_4;
 80016d4:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <Set_Character.4+0x448>)
 80016d6:	2221      	movs	r2, #33	@ 0x21
 80016d8:	70da      	strb	r2, [r3, #3]
				break;
 80016da:	e03e      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 80016dc:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <Set_Character.4+0x448>)
 80016de:	2202      	movs	r2, #2
 80016e0:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_5;
 80016e2:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <Set_Character.4+0x448>)
 80016e4:	2222      	movs	r2, #34	@ 0x22
 80016e6:	70da      	strb	r2, [r3, #3]
				break;
 80016e8:	e037      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 80016ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <Set_Character.4+0x448>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_6;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <Set_Character.4+0x448>)
 80016f2:	2223      	movs	r2, #35	@ 0x23
 80016f4:	70da      	strb	r2, [r3, #3]
				break;
 80016f6:	e030      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <Set_Character.4+0x448>)
 80016fa:	2202      	movs	r2, #2
 80016fc:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_7;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <Set_Character.4+0x448>)
 8001700:	2224      	movs	r2, #36	@ 0x24
 8001702:	70da      	strb	r2, [r3, #3]
				break;
 8001704:	e029      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <Set_Character.4+0x448>)
 8001708:	2202      	movs	r2, #2
 800170a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_8;
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <Set_Character.4+0x448>)
 800170e:	2225      	movs	r2, #37	@ 0x25
 8001710:	70da      	strb	r2, [r3, #3]
				break;
 8001712:	e022      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <Set_Character.4+0x448>)
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_9;
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <Set_Character.4+0x448>)
 800171c:	2226      	movs	r2, #38	@ 0x26
 800171e:	70da      	strb	r2, [r3, #3]
				break;
 8001720:	e01b      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <Set_Character.4+0x448>)
 8001724:	2202      	movs	r2, #2
 8001726:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_0;
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <Set_Character.4+0x448>)
 800172a:	2227      	movs	r2, #39	@ 0x27
 800172c:	70da      	strb	r2, [r3, #3]
				break;
 800172e:	e014      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x02;
 8001730:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <Set_Character.4+0x448>)
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_SPACE;
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <Set_Character.4+0x448>)
 8001738:	222c      	movs	r2, #44	@ 0x2c
 800173a:	70da      	strb	r2, [r3, #3]
				break;
 800173c:	e00d      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x00;
 800173e:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <Set_Character.4+0x448>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_SPACE;
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <Set_Character.4+0x448>)
 8001746:	222c      	movs	r2, #44	@ 0x2c
 8001748:	70da      	strb	r2, [r3, #3]
				break;
 800174a:	e006      	b.n	800175a <Set_Character.4+0x43a>
					keyBoardHIDsub.MODIFIER=0x00;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <Set_Character.4+0x448>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=0x00;
 8001752:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <Set_Character.4+0x448>)
 8001754:	2200      	movs	r2, #0
 8001756:	70da      	strb	r2, [r3, #3]
				break;
 8001758:	bf00      	nop
  }
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	200001c4 	.word	0x200001c4

0800176c <hashFunction.2>:
  unsigned int hashFunction(const char *key) {
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	f8c7 c000 	str.w	ip, [r7]
      unsigned int hash = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
      while (*key) {
 800177c:	e007      	b.n	800178e <hashFunction.2+0x22>
          hash = (hash << 5) + *key++;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	1c59      	adds	r1, r3, #1
 8001786:	6079      	str	r1, [r7, #4]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
      while (*key) {
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f3      	bne.n	800177e <hashFunction.2+0x12>
      return hash % TABLE_SIZE;
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <hashFunction.2+0x4c>)
 800179a:	fba3 1302 	umull	r1, r3, r3, r2
 800179e:	09db      	lsrs	r3, r3, #7
 80017a0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	1ad3      	subs	r3, r2, r3
  }
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	10624dd3 	.word	0x10624dd3

080017bc <insert.1>:
  void insert(const char *key, const char *value) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	4663      	mov	r3, ip
 80017c8:	f8c7 c004 	str.w	ip, [r7, #4]
      unsigned int index = hashFunction(key);
 80017cc:	469c      	mov	ip, r3
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff ffcc 	bl	800176c <hashFunction.2>
 80017d4:	6178      	str	r0, [r7, #20]
      HashEntry *entry = (HashEntry *)malloc(sizeof(HashEntry));
 80017d6:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80017da:	f006 fccf 	bl	800817c <malloc>
 80017de:	4603      	mov	r3, r0
 80017e0:	613b      	str	r3, [r7, #16]
      strcpy(entry->key, key);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f006 fdc2 	bl	8008370 <strcpy>
      strcpy(entry->value, value);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f006 fdbb 	bl	8008370 <strcpy>
      hashTable[index] = entry;
 80017fa:	4904      	ldr	r1, [pc, #16]	@ (800180c <insert.1+0x50>)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200001cc 	.word	0x200001cc

08001810 <search.8>:
  const char *search(const char *key) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	4663      	mov	r3, ip
 800181a:	f8c7 c000 	str.w	ip, [r7]
      unsigned int index = hashFunction(key);
 800181e:	469c      	mov	ip, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffa3 	bl	800176c <hashFunction.2>
 8001826:	60f8      	str	r0, [r7, #12]
      if (hashTable[index] != NULL && strcmp(hashTable[index]->key, key) == 0) {
 8001828:	4a0e      	ldr	r2, [pc, #56]	@ (8001864 <search.8+0x54>)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d011      	beq.n	8001858 <search.8+0x48>
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <search.8+0x54>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fcca 	bl	80001d8 <strcmp>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <search.8+0x48>
          return hashTable[index]->value;
 800184a:	4a06      	ldr	r2, [pc, #24]	@ (8001864 <search.8+0x54>)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001856:	e000      	b.n	800185a <search.8+0x4a>
      return NULL;
 8001858:	2300      	movs	r3, #0
  }
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200001cc 	.word	0x200001cc

08001868 <hashInit.0>:
  void hashInit(){
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	4664      	mov	r4, ip
 8001870:	f8c7 c004 	str.w	ip, [r7, #4]
	    for (int i = 0; i < TABLE_SIZE; i++) {
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e007      	b.n	800188a <hashInit.0+0x22>
	        hashTable[i] = NULL;
 800187a:	4a26      	ldr	r2, [pc, #152]	@ (8001914 <hashInit.0+0xac>)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2100      	movs	r1, #0
 8001880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    for (int i = 0; i < TABLE_SIZE; i++) {
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3301      	adds	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001890:	dbf3      	blt.n	800187a <hashInit.0+0x12>
	    insert("S", "is");
 8001892:	46a4      	mov	ip, r4
 8001894:	4920      	ldr	r1, [pc, #128]	@ (8001918 <hashInit.0+0xb0>)
 8001896:	4821      	ldr	r0, [pc, #132]	@ (800191c <hashInit.0+0xb4>)
 8001898:	f7ff ff90 	bl	80017bc <insert.1>
	    insert("ST", "is it");
 800189c:	46a4      	mov	ip, r4
 800189e:	4920      	ldr	r1, [pc, #128]	@ (8001920 <hashInit.0+0xb8>)
 80018a0:	4820      	ldr	r0, [pc, #128]	@ (8001924 <hashInit.0+0xbc>)
 80018a2:	f7ff ff8b 	bl	80017bc <insert.1>
	    insert("STK", "and");
 80018a6:	46a4      	mov	ip, r4
 80018a8:	491f      	ldr	r1, [pc, #124]	@ (8001928 <hashInit.0+0xc0>)
 80018aa:	4820      	ldr	r0, [pc, #128]	@ (800192c <hashInit.0+0xc4>)
 80018ac:	f7ff ff86 	bl	80017bc <insert.1>
	    insert("SAOU", "sue");
 80018b0:	46a4      	mov	ip, r4
 80018b2:	491f      	ldr	r1, [pc, #124]	@ (8001930 <hashInit.0+0xc8>)
 80018b4:	481f      	ldr	r0, [pc, #124]	@ (8001934 <hashInit.0+0xcc>)
 80018b6:	f7ff ff81 	bl	80017bc <insert.1>
	    insert("SAOPB", "soon");
 80018ba:	46a4      	mov	ip, r4
 80018bc:	491e      	ldr	r1, [pc, #120]	@ (8001938 <hashInit.0+0xd0>)
 80018be:	481f      	ldr	r0, [pc, #124]	@ (800193c <hashInit.0+0xd4>)
 80018c0:	f7ff ff7c 	bl	80017bc <insert.1>
	    insert("P", "about");
 80018c4:	46a4      	mov	ip, r4
 80018c6:	491e      	ldr	r1, [pc, #120]	@ (8001940 <hashInit.0+0xd8>)
 80018c8:	481e      	ldr	r0, [pc, #120]	@ (8001944 <hashInit.0+0xdc>)
 80018ca:	f7ff ff77 	bl	80017bc <insert.1>
	    insert("KOD", "cod");
 80018ce:	46a4      	mov	ip, r4
 80018d0:	491d      	ldr	r1, [pc, #116]	@ (8001948 <hashInit.0+0xe0>)
 80018d2:	481e      	ldr	r0, [pc, #120]	@ (800194c <hashInit.0+0xe4>)
 80018d4:	f7ff ff72 	bl	80017bc <insert.1>
	    insert("TAO*E", "ty");
 80018d8:	46a4      	mov	ip, r4
 80018da:	491d      	ldr	r1, [pc, #116]	@ (8001950 <hashInit.0+0xe8>)
 80018dc:	481d      	ldr	r0, [pc, #116]	@ (8001954 <hashInit.0+0xec>)
 80018de:	f7ff ff6d 	bl	80017bc <insert.1>
	    insert("STRA/TA", "strata");
 80018e2:	46a4      	mov	ip, r4
 80018e4:	491c      	ldr	r1, [pc, #112]	@ (8001958 <hashInit.0+0xf0>)
 80018e6:	481d      	ldr	r0, [pc, #116]	@ (800195c <hashInit.0+0xf4>)
 80018e8:	f7ff ff68 	bl	80017bc <insert.1>
	    insert("STA/TAOU/KWOE", "status quo");
 80018ec:	46a4      	mov	ip, r4
 80018ee:	491c      	ldr	r1, [pc, #112]	@ (8001960 <hashInit.0+0xf8>)
 80018f0:	481c      	ldr	r0, [pc, #112]	@ (8001964 <hashInit.0+0xfc>)
 80018f2:	f7ff ff63 	bl	80017bc <insert.1>
	    insert("STA/TAOU", "statue");
 80018f6:	46a4      	mov	ip, r4
 80018f8:	491b      	ldr	r1, [pc, #108]	@ (8001968 <hashInit.0+0x100>)
 80018fa:	481c      	ldr	r0, [pc, #112]	@ (800196c <hashInit.0+0x104>)
 80018fc:	f7ff ff5e 	bl	80017bc <insert.1>
	    insert("STAT/WET", "statuette");
 8001900:	46a4      	mov	ip, r4
 8001902:	491b      	ldr	r1, [pc, #108]	@ (8001970 <hashInit.0+0x108>)
 8001904:	481b      	ldr	r0, [pc, #108]	@ (8001974 <hashInit.0+0x10c>)
 8001906:	f7ff ff59 	bl	80017bc <insert.1>
  }
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	bf00      	nop
 8001914:	200001cc 	.word	0x200001cc
 8001918:	080083b0 	.word	0x080083b0
 800191c:	080083b4 	.word	0x080083b4
 8001920:	080083b8 	.word	0x080083b8
 8001924:	080083c0 	.word	0x080083c0
 8001928:	080083c4 	.word	0x080083c4
 800192c:	080083c8 	.word	0x080083c8
 8001930:	080083cc 	.word	0x080083cc
 8001934:	080083d0 	.word	0x080083d0
 8001938:	080083d8 	.word	0x080083d8
 800193c:	080083e0 	.word	0x080083e0
 8001940:	080083e8 	.word	0x080083e8
 8001944:	080083f0 	.word	0x080083f0
 8001948:	080083f4 	.word	0x080083f4
 800194c:	080083f8 	.word	0x080083f8
 8001950:	080083fc 	.word	0x080083fc
 8001954:	08008400 	.word	0x08008400
 8001958:	08008408 	.word	0x08008408
 800195c:	08008410 	.word	0x08008410
 8001960:	08008418 	.word	0x08008418
 8001964:	08008424 	.word	0x08008424
 8001968:	08008434 	.word	0x08008434
 800196c:	0800843c 	.word	0x0800843c
 8001970:	08008448 	.word	0x08008448
 8001974:	08008454 	.word	0x08008454

08001978 <sendBuffer.7>:
  void sendBuffer(){
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4664      	mov	r4, ip
 8001980:	f8c7 c004 	str.w	ip, [r7, #4]
	  for(int n = 0; n < bufferItemsNumber; n++){
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e00f      	b.n	80019aa <sendBuffer.7+0x32>
			strcpy(result, (search(charbuffer)));
 800198a:	f104 0514 	add.w	r5, r4, #20
 800198e:	f104 032a 	add.w	r3, r4, #42	@ 0x2a
 8001992:	46a4      	mov	ip, r4
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff3b 	bl	8001810 <search.8>
 800199a:	4603      	mov	r3, r0
 800199c:	4619      	mov	r1, r3
 800199e:	4628      	mov	r0, r5
 80019a0:	f006 fce6 	bl	8008370 <strcpy>
	  for(int n = 0; n < bufferItemsNumber; n++){
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3301      	adds	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	6923      	ldr	r3, [r4, #16]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbeb      	blt.n	800198a <sendBuffer.7+0x12>
		  for(int n = 0; n < strlen(result); n++){
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	e00d      	b.n	80019d4 <sendBuffer.7+0x5c>
		  Set_Character(result[n]);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4423      	add	r3, r4
 80019bc:	3314      	adds	r3, #20
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	46a4      	mov	ip, r4
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fcac 	bl	8001320 <Set_Character.4>
		  Send_Character();
 80019c8:	46a4      	mov	ip, r4
 80019ca:	f7ff fc85 	bl	80012d8 <Send_Character.9>
		  for(int n = 0; n < strlen(result); n++){
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	f104 0314 	add.w	r3, r4, #20
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fc07 	bl	80001ec <strlen>
 80019de:	4602      	mov	r2, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d8e8      	bhi.n	80019b8 <sendBuffer.7+0x40>
		  Set_Character(' ');
 80019e6:	46a4      	mov	ip, r4
 80019e8:	2020      	movs	r0, #32
 80019ea:	f7ff fc99 	bl	8001320 <Set_Character.4>
		  Send_Character();
 80019ee:	46a4      	mov	ip, r4
 80019f0:	f7ff fc72 	bl	80012d8 <Send_Character.9>
		  bufferItemsNumber = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	6123      	str	r3, [r4, #16]
		  Clear_Buffer();
 80019f8:	46a4      	mov	ip, r4
 80019fa:	f7ff fc51 	bl	80012a0 <Clear_Buffer.10>
  }
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdb0      	pop	{r4, r5, r7, pc}

08001a06 <translation.6>:
  void translation(int n, char c){
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	72fb      	strb	r3, [r7, #11]
 8001a12:	4663      	mov	r3, ip
 8001a14:	f8c7 c004 	str.w	ip, [r7, #4]
  	  if(n == 1){
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	2a01      	cmp	r2, #1
 8001a1c:	d103      	bne.n	8001a26 <translation.6+0x20>
  		  sendBuffer();
 8001a1e:	469c      	mov	ip, r3
 8001a20:	f7ff ffaa 	bl	8001978 <sendBuffer.7>
    }
 8001a24:	e007      	b.n	8001a36 <translation.6+0x30>
  		  charbuffer[bufferItemsNumber] = c;
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	441a      	add	r2, r3
 8001a2a:	7af9      	ldrb	r1, [r7, #11]
 8001a2c:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
  		  bufferItemsNumber += 1;
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	3201      	adds	r2, #1
 8001a34:	611a      	str	r2, [r3, #16]
    }
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <Send_Gate.5>:
  void Send_Gate(int n, char c) {
 8001a3e:	b590      	push	{r4, r7, lr}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	460b      	mov	r3, r1
 8001a48:	72fb      	strb	r3, [r7, #11]
 8001a4a:	4664      	mov	r4, ip
 8001a4c:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(previousChar == 0 && n == 24){
 8001a50:	68e3      	ldr	r3, [r4, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <Send_Gate.5+0x1e>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b18      	cmp	r3, #24
 8001a5a:	d02b      	beq.n	8001ab4 <Send_Gate.5+0x76>
  	  if(previousChar < n || n == 1 || n == 24){
 8001a5c:	68e2      	ldr	r2, [r4, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	db05      	blt.n	8001a70 <Send_Gate.5+0x32>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d002      	beq.n	8001a70 <Send_Gate.5+0x32>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b18      	cmp	r3, #24
 8001a6e:	d122      	bne.n	8001ab6 <Send_Gate.5+0x78>
  		  if(n != lastPress){
 8001a70:	68a3      	ldr	r3, [r4, #8]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d002      	beq.n	8001a7e <Send_Gate.5+0x40>
  			  timeout = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	6063      	str	r3, [r4, #4]
 8001a7c:	e002      	b.n	8001a84 <Send_Gate.5+0x46>
  			  timeout +=1;
 8001a7e:	6863      	ldr	r3, [r4, #4]
 8001a80:	3301      	adds	r3, #1
 8001a82:	6063      	str	r3, [r4, #4]
  		  if(timeout >= 1200 || timeout == 0){
 8001a84:	6863      	ldr	r3, [r4, #4]
 8001a86:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001a8a:	da02      	bge.n	8001a92 <Send_Gate.5+0x54>
 8001a8c:	6863      	ldr	r3, [r4, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <Send_Gate.5+0x60>
  			  translation(n, c);
 8001a92:	7afb      	ldrb	r3, [r7, #11]
 8001a94:	46a4      	mov	ip, r4
 8001a96:	4619      	mov	r1, r3
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff ffb4 	bl	8001a06 <translation.6>
  		  previousChar = n;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	60e3      	str	r3, [r4, #12]
  		  if(n == 24){
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b18      	cmp	r3, #24
 8001aa6:	d106      	bne.n	8001ab6 <Send_Gate.5+0x78>
			  previousChar = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60e3      	str	r3, [r4, #12]
			  activeTimeLimit = activeTimeLimit + TIME_LIMIT;
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	6023      	str	r3, [r4, #0]
 8001ab2:	e000      	b.n	8001ab6 <Send_Gate.5+0x78>
		  return;
 8001ab4:	bf00      	nop
    }
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd90      	pop	{r4, r7, pc}

08001abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b094      	sub	sp, #80	@ 0x50
 8001ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac2:	f107 0320 	add.w	r3, r7, #32
 8001ac6:	2230      	movs	r2, #48	@ 0x30
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f006 fc0c 	bl	80082e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <SystemClock_Config+0xc8>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	4a26      	ldr	r2, [pc, #152]	@ (8001b84 <SystemClock_Config+0xc8>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af0:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <SystemClock_Config+0xc8>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <SystemClock_Config+0xcc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a20      	ldr	r2, [pc, #128]	@ (8001b88 <SystemClock_Config+0xcc>)
 8001b06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b88 <SystemClock_Config+0xcc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b22:	2302      	movs	r3, #2
 8001b24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b2c:	2319      	movs	r3, #25
 8001b2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b30:	23c0      	movs	r3, #192	@ 0xc0
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b34:	2302      	movs	r3, #2
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 ff9b 	bl	8003a7c <HAL_RCC_OscConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b4c:	f000 f8f2 	bl	8001d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b50:	230f      	movs	r3, #15
 8001b52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b54:	2302      	movs	r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	2103      	movs	r1, #3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 f9fd 	bl	8003f6c <HAL_RCC_ClockConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b78:	f000 f8dc 	bl	8001d34 <Error_Handler>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3750      	adds	r7, #80	@ 0x50
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40007000 	.word	0x40007000

08001b8c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <MX_TIM10_Init+0x40>)
 8001b92:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd0 <MX_TIM10_Init+0x44>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000 - 1;
 8001b96:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <MX_TIM10_Init+0x40>)
 8001b98:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b9c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <MX_TIM10_Init+0x40>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000 - 1;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <MX_TIM10_Init+0x40>)
 8001ba6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001baa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <MX_TIM10_Init+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <MX_TIM10_Init+0x40>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <MX_TIM10_Init+0x40>)
 8001bba:	f002 fb8f 	bl	80042dc <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001bc4:	f000 f8b6 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000017c 	.word	0x2000017c
 8001bd0:	40014400 	.word	0x40014400

08001bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	@ 0x28
 8001bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b41      	ldr	r3, [pc, #260]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a40      	ldr	r2, [pc, #256]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a39      	ldr	r2, [pc, #228]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b37      	ldr	r3, [pc, #220]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a32      	ldr	r2, [pc, #200]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <MX_GPIO_Init+0x120>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c60:	4825      	ldr	r0, [pc, #148]	@ (8001cf8 <MX_GPIO_Init+0x124>)
 8001c62:	f000 fcb7 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	21f0      	movs	r1, #240	@ 0xf0
 8001c6a:	4824      	ldr	r0, [pc, #144]	@ (8001cfc <MX_GPIO_Init+0x128>)
 8001c6c:	f000 fcb2 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Column5_Pin|Column6_Pin|Column7_Pin|Column8_Pin
 8001c70:	2200      	movs	r2, #0
 8001c72:	f247 4107 	movw	r1, #29703	@ 0x7407
 8001c76:	4822      	ldr	r0, [pc, #136]	@ (8001d00 <MX_GPIO_Init+0x12c>)
 8001c78:	f000 fcac 	bl	80025d4 <HAL_GPIO_WritePin>
                          |Column11_Pin|Column10_Pin|Column9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4818      	ldr	r0, [pc, #96]	@ (8001cf8 <MX_GPIO_Init+0x124>)
 8001c96:	f000 fb01 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : Row1_Pin Row2_Pin Row3_Pin Row4_Pin */
  GPIO_InitStruct.Pin = Row1_Pin|Row2_Pin|Row3_Pin|Row4_Pin;
 8001c9a:	230f      	movs	r3, #15
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4813      	ldr	r0, [pc, #76]	@ (8001cfc <MX_GPIO_Init+0x128>)
 8001cae:	f000 faf5 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : Column1_Pin Column2_Pin Column3_Pin Column4_Pin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 8001cb2:	23f0      	movs	r3, #240	@ 0xf0
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <MX_GPIO_Init+0x128>)
 8001cca:	f000 fae7 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : Column5_Pin Column6_Pin Column7_Pin Column8_Pin
                           Column11_Pin Column10_Pin Column9_Pin */
  GPIO_InitStruct.Pin = Column5_Pin|Column6_Pin|Column7_Pin|Column8_Pin
 8001cce:	f247 4307 	movw	r3, #29703	@ 0x7407
 8001cd2:	617b      	str	r3, [r7, #20]
                          |Column11_Pin|Column10_Pin|Column9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4806      	ldr	r0, [pc, #24]	@ (8001d00 <MX_GPIO_Init+0x12c>)
 8001ce8:	f000 fad8 	bl	800229c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	@ 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400

08001d04 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
    		if(htim == &htim10){
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d104      	bne.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0x1a>
    			elapsedTime++;
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d1c:	6013      	str	r3, [r2, #0]
    		}
    	}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2000017c 	.word	0x2000017c
 8001d30:	2000210c 	.word	0x2000210c

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <Error_Handler+0x8>

08001d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a08      	ldr	r2, [pc, #32]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x48>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d115      	bne.n	8001dce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <HAL_TIM_Base_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a0c      	ldr	r2, [pc, #48]	@ (8001ddc <HAL_TIM_Base_MspInit+0x4c>)
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_TIM_Base_MspInit+0x4c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2019      	movs	r0, #25
 8001dc4:	f000 fa33 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dc8:	2019      	movs	r0, #25
 8001dca:	f000 fa4c 	bl	8002266 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40014400 	.word	0x40014400
 8001ddc:	40023800 	.word	0x40023800

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <NMI_Handler+0x4>

08001de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <MemManage_Handler+0x4>

08001df8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e36:	f000 f8db 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e46:	f002 fb2a 	bl	800449e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000017c 	.word	0x2000017c

08001e54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <OTG_FS_IRQHandler+0x10>)
 8001e5a:	f000 fd18 	bl	800288e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200025f8 	.word	0x200025f8

08001e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e70:	4a14      	ldr	r2, [pc, #80]	@ (8001ec4 <_sbrk+0x5c>)
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <_sbrk+0x60>)
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e98:	f006 fa3e 	bl	8008318 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	@ (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20020000 	.word	0x20020000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	20002110 	.word	0x20002110
 8001ed0:	20002c38 	.word	0x20002c38

08001ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <SystemInit+0x20>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <SystemInit+0x20>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001efc:	f7ff ffea 	bl	8001ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f00:	480c      	ldr	r0, [pc, #48]	@ (8001f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f02:	490d      	ldr	r1, [pc, #52]	@ (8001f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f04:	4a0d      	ldr	r2, [pc, #52]	@ (8001f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f18:	4c0a      	ldr	r4, [pc, #40]	@ (8001f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f26:	f006 f9fd 	bl	8008324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2a:	f7fe fe6f 	bl	8000c0c <main>
  bx  lr    
 8001f2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001f3c:	080084c8 	.word	0x080084c8
  ldr r2, =_sbss
 8001f40:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001f44:	20002c38 	.word	0x20002c38

08001f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0d      	ldr	r2, [pc, #52]	@ (8001f8c <HAL_Init+0x40>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <HAL_Init+0x40>)
 8001f62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	@ (8001f8c <HAL_Init+0x40>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f000 f94f 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	f000 f808 	bl	8001f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f80:	f7ff fede 	bl	8001d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <HAL_InitTick+0x54>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_InitTick+0x58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f967 	bl	8002282 <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00e      	b.n	8001fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d80a      	bhi.n	8001fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f000 f92f 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd0:	4a06      	ldr	r2, [pc, #24]	@ (8001fec <HAL_InitTick+0x5c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_IncTick+0x20>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_IncTick+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <HAL_IncTick+0x24>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008
 8002014:	20002114 	.word	0x20002114

08002018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <HAL_GetTick+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20002114 	.word	0x20002114

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff ffee 	bl	8002018 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d005      	beq.n	8002056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_Delay+0x44>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002056:	bf00      	nop
 8002058:	f7ff ffde 	bl	8002018 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8f7      	bhi.n	8002058 <HAL_Delay+0x28>
  {
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0b      	blt.n	8002106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4907      	ldr	r1, [pc, #28]	@ (8002114 <__NVIC_EnableIRQ+0x38>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	@ (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	@ (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	@ 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
         );
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff8e 	bl	8002118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff29 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff3e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff8e 	bl	800216c <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5d 	bl	8002118 <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff31 	bl	80020dc <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	@ 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e159      	b.n	800256c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8148 	bne.w	8002566 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d017      	beq.n	800238c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a2 	beq.w	8002566 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b57      	ldr	r3, [pc, #348]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	4a56      	ldr	r2, [pc, #344]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002430:	6453      	str	r3, [r2, #68]	@ 0x44
 8002432:	4b54      	ldr	r3, [pc, #336]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a52      	ldr	r2, [pc, #328]	@ (8002588 <HAL_GPIO_Init+0x2ec>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a49      	ldr	r2, [pc, #292]	@ (800258c <HAL_GPIO_Init+0x2f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d019      	beq.n	800249e <HAL_GPIO_Init+0x202>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a48      	ldr	r2, [pc, #288]	@ (8002590 <HAL_GPIO_Init+0x2f4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0x1fe>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a47      	ldr	r2, [pc, #284]	@ (8002594 <HAL_GPIO_Init+0x2f8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00d      	beq.n	8002496 <HAL_GPIO_Init+0x1fa>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a46      	ldr	r2, [pc, #280]	@ (8002598 <HAL_GPIO_Init+0x2fc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x1f6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a45      	ldr	r2, [pc, #276]	@ (800259c <HAL_GPIO_Init+0x300>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_GPIO_Init+0x1f2>
 800248a:	2304      	movs	r3, #4
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800248e:	2307      	movs	r3, #7
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	@ (8002588 <HAL_GPIO_Init+0x2ec>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a2f      	ldr	r2, [pc, #188]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a24      	ldr	r2, [pc, #144]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002512:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002536:	4a1a      	ldr	r2, [pc, #104]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253c:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002560:	4a0f      	ldr	r2, [pc, #60]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f aea2 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40013c00 	.word	0x40013c00

080025a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	e001      	b.n	80025c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
 80025e0:	4613      	mov	r3, r2
 80025e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e4:	787b      	ldrb	r3, [r7, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f0:	e003      	b.n	80025fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	041a      	lsls	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	619a      	str	r2, [r3, #24]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af02      	add	r7, sp, #8
 800260c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e101      	b.n	800281c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f005 faaa 	bl	8007b8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2203      	movs	r2, #3
 800263c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002646:	d102      	bne.n	800264e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f002 f9f3 	bl	8004a3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7c1a      	ldrb	r2, [r3, #16]
 8002660:	f88d 2000 	strb.w	r2, [sp]
 8002664:	3304      	adds	r3, #4
 8002666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002668:	f002 f8d2 	bl	8004810 <USB_CoreInit>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2202      	movs	r2, #2
 8002676:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0ce      	b.n	800281c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f002 f9eb 	bl	8004a60 <USB_SetCurrentMode>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0bf      	b.n	800281c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e04a      	b.n	8002738 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	3315      	adds	r3, #21
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	3314      	adds	r3, #20
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	b298      	uxth	r0, r3
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	332e      	adds	r3, #46	@ 0x2e
 80026de:	4602      	mov	r2, r0
 80026e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3318      	adds	r3, #24
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	331c      	adds	r3, #28
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3320      	adds	r3, #32
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3324      	adds	r3, #36	@ 0x24
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	3301      	adds	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	791b      	ldrb	r3, [r3, #4]
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	429a      	cmp	r2, r3
 8002740:	d3af      	bcc.n	80026a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e044      	b.n	80027d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	3301      	adds	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d3b5      	bcc.n	8002748 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7c1a      	ldrb	r2, [r3, #16]
 80027e4:	f88d 2000 	strb.w	r2, [sp]
 80027e8:	3304      	adds	r3, #4
 80027ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ec:	f002 f984 	bl	8004af8 <USB_DevInit>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e00c      	b.n	800281c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f003 f9ce 	bl	8005bb6 <USB_DevDisconnect>

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_PCD_Start+0x1c>
 800283c:	2302      	movs	r3, #2
 800283e:	e022      	b.n	8002886 <HAL_PCD_Start+0x62>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f002 f8d5 	bl	8004a1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 f97c 	bl	8005b74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800288e:	b590      	push	{r4, r7, lr}
 8002890:	b08d      	sub	sp, #52	@ 0x34
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 fa3a 	bl	8005d1e <USB_GetMode>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 848c 	bne.w	80031ca <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 f99e 	bl	8005bf8 <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8482 	beq.w	80031c8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 f98b 	bl	8005bf8 <USB_ReadInterrupts>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d107      	bne.n	80028fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f002 0202 	and.w	r2, r2, #2
 80028fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f003 f979 	bl	8005bf8 <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b10      	cmp	r3, #16
 800290e:	d161      	bne.n	80029d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0210 	bic.w	r2, r2, #16
 800291e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	4413      	add	r3, r2
 800293c:	3304      	adds	r3, #4
 800293e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	0c5b      	lsrs	r3, r3, #17
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	2b02      	cmp	r3, #2
 800294a:	d124      	bne.n	8002996 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d035      	beq.n	80029c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6a38      	ldr	r0, [r7, #32]
 800296c:	f002 ffb0 	bl	80058d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800297c:	441a      	add	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800298e:	441a      	add	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	615a      	str	r2, [r3, #20]
 8002994:	e016      	b.n	80029c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	0c5b      	lsrs	r3, r3, #17
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d110      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029a8:	2208      	movs	r2, #8
 80029aa:	4619      	mov	r1, r3
 80029ac:	6a38      	ldr	r0, [r7, #32]
 80029ae:	f002 ff8f 	bl	80058d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029be:	441a      	add	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0210 	orr.w	r2, r2, #16
 80029d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 f90d 	bl	8005bf8 <USB_ReadInterrupts>
 80029de:	4603      	mov	r3, r0
 80029e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029e8:	f040 80a7 	bne.w	8002b3a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 f912 	bl	8005c1e <USB_ReadDevAllOutEpInterrupt>
 80029fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80029fc:	e099      	b.n	8002b32 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 808e 	beq.w	8002b26 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f003 f936 	bl	8005c86 <USB_ReadDevOutEPInterrupt>
 8002a1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a32:	461a      	mov	r2, r3
 8002a34:	2301      	movs	r3, #1
 8002a36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fe8c 	bl	8003758 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a56:	461a      	mov	r2, r3
 8002a58:	2308      	movs	r3, #8
 8002a5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 ff62 	bl	8003928 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d030      	beq.n	8002aec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b80      	cmp	r3, #128	@ 0x80
 8002a94:	d109      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aa4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aa8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	78db      	ldrb	r3, [r3, #3]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d108      	bne.n	8002ada <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2200      	movs	r2, #0
 8002acc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f005 f955 	bl	8007d84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2302      	movs	r3, #2
 8002aea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b02:	461a      	mov	r2, r3
 8002b04:	2320      	movs	r3, #32
 8002b06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	3301      	adds	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f af62 	bne.w	80029fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 f85a 	bl	8005bf8 <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b4e:	f040 80db 	bne.w	8002d08 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 f87b 	bl	8005c52 <USB_ReadDevAllInEpInterrupt>
 8002b5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b62:	e0cd      	b.n	8002d00 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80c2 	beq.w	8002cf4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 f8a1 	bl	8005cc2 <USB_ReadDevInEPInterrupt>
 8002b80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d057      	beq.n	8002c3c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	2201      	movs	r2, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69f9      	ldr	r1, [r7, #28]
 8002ba8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002bac:	4013      	ands	r3, r2
 8002bae:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	799b      	ldrb	r3, [r3, #6]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d132      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3320      	adds	r3, #32
 8002bda:	6819      	ldr	r1, [r3, #0]
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4403      	add	r3, r0
 8002bea:	331c      	adds	r3, #28
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4419      	add	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4403      	add	r3, r0
 8002bfe:	3320      	adds	r3, #32
 8002c00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d113      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x3a2>
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3324      	adds	r3, #36	@ 0x24
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	f003 f8a8 	bl	8005d80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f005 f829 	bl	8007c8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c52:	461a      	mov	r2, r3
 8002c54:	2308      	movs	r3, #8
 8002c56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2310      	movs	r3, #16
 8002c72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2340      	movs	r3, #64	@ 0x40
 8002c8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d023      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c9c:	6a38      	ldr	r0, [r7, #32]
 8002c9e:	f002 f88f 	bl	8004dc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	3310      	adds	r3, #16
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	78db      	ldrb	r3, [r3, #3]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d108      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f005 f86c 	bl	8007da8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2302      	movs	r3, #2
 8002ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fca5 	bl	800363e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f47f af2e 	bne.w	8002b64 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 ff73 	bl	8005bf8 <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d1c:	d122      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d108      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d44:	2100      	movs	r1, #0
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fe8c 	bl	8003a64 <HAL_PCDEx_LPM_Callback>
 8002d4c:	e002      	b.n	8002d54 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f005 f80a 	bl	8007d68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 ff45 	bl	8005bf8 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d78:	d112      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f004 ffc6 	bl	8007d1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d9e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 ff27 	bl	8005bf8 <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db4:	f040 80b7 	bne.w	8002f26 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 fff4 	bl	8004dc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ddc:	e046      	b.n	8002e6c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dea:	461a      	mov	r2, r3
 8002dec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002df0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e02:	0151      	lsls	r1, r2, #5
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	440a      	add	r2, r1
 8002e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e24:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e36:	0151      	lsls	r1, r2, #5
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	440a      	add	r2, r1
 8002e3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e56:	0151      	lsls	r1, r2, #5
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	440a      	add	r2, r1
 8002e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e68:	3301      	adds	r3, #1
 8002e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	791b      	ldrb	r3, [r3, #4]
 8002e70:	461a      	mov	r2, r3
 8002e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d3b2      	bcc.n	8002dde <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e86:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e8a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7bdb      	ldrb	r3, [r3, #15]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ea4:	f043 030b 	orr.w	r3, r3, #11
 8002ea8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eba:	f043 030b 	orr.w	r3, r3, #11
 8002ebe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec0:	e015      	b.n	8002eee <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ed0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ed4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ed8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ee8:	f043 030b 	orr.w	r3, r3, #11
 8002eec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002efc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f00:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f10:	461a      	mov	r2, r3
 8002f12:	f002 ff35 	bl	8005d80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 fe64 	bl	8005bf8 <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f3a:	d123      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f002 fefa 	bl	8005d3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 ffb1 	bl	8004eb2 <USB_GetDevSpeed>
 8002f50:	4603      	mov	r3, r0
 8002f52:	461a      	mov	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681c      	ldr	r4, [r3, #0]
 8002f5c:	f001 f9b2 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 8002f60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f66:	461a      	mov	r2, r3
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f001 fcb5 	bl	80048d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f004 feb5 	bl	8007cde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f002 fe35 	bl	8005bf8 <USB_ReadInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d10a      	bne.n	8002fae <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f004 fe92 	bl	8007cc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 0208 	and.w	r2, r2, #8
 8002fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f002 fe20 	bl	8005bf8 <USB_ReadInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbe:	2b80      	cmp	r3, #128	@ 0x80
 8002fc0:	d123      	bne.n	800300a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fce:	2301      	movs	r3, #1
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd2:	e014      	b.n	8002ffe <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 faf2 	bl	80035dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	791b      	ldrb	r3, [r3, #4]
 8003002:	461a      	mov	r2, r3
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	4293      	cmp	r3, r2
 8003008:	d3e4      	bcc.n	8002fd4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f002 fdf2 	bl	8005bf8 <USB_ReadInterrupts>
 8003014:	4603      	mov	r3, r0
 8003016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800301a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800301e:	d13c      	bne.n	800309a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003020:	2301      	movs	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
 8003024:	e02b      	b.n	800307e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3318      	adds	r3, #24
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d115      	bne.n	8003078 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800304c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800304e:	2b00      	cmp	r3, #0
 8003050:	da12      	bge.n	8003078 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3317      	adds	r3, #23
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800306e:	b2db      	uxtb	r3, r3
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fab2 	bl	80035dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	3301      	adds	r3, #1
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	791b      	ldrb	r3, [r3, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	4293      	cmp	r3, r2
 8003088:	d3cd      	bcc.n	8003026 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f002 fdaa 	bl	8005bf8 <USB_ReadInterrupts>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030ae:	d156      	bne.n	800315e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030b0:	2301      	movs	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b4:	e045      	b.n	8003142 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d12e      	bne.n	800313c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da2b      	bge.n	800313c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80030f0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d121      	bne.n	800313c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003134:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003138:	6053      	str	r3, [r2, #4]
            break;
 800313a:	e008      	b.n	800314e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	3301      	adds	r3, #1
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	791b      	ldrb	r3, [r3, #4]
 8003146:	461a      	mov	r2, r3
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	4293      	cmp	r3, r2
 800314c:	d3b3      	bcc.n	80030b6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800315c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f002 fd48 	bl	8005bf8 <USB_ReadInterrupts>
 8003168:	4603      	mov	r3, r0
 800316a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003172:	d10a      	bne.n	800318a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f004 fe29 	bl	8007dcc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f002 fd32 	bl	8005bf8 <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d115      	bne.n	80031ca <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f004 fe19 	bl	8007de8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e000      	b.n	80031ca <HAL_PCD_IRQHandler+0x93c>
      return;
 80031c8:	bf00      	nop
    }
  }
}
 80031ca:	3734      	adds	r7, #52	@ 0x34
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd90      	pop	{r4, r7, pc}

080031d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_PCD_SetAddress+0x1a>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e012      	b.n	8003210 <HAL_PCD_SetAddress+0x40>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fc91 	bl	8005b28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	4608      	mov	r0, r1
 8003222:	4611      	mov	r1, r2
 8003224:	461a      	mov	r2, r3
 8003226:	4603      	mov	r3, r0
 8003228:	70fb      	strb	r3, [r7, #3]
 800322a:	460b      	mov	r3, r1
 800322c:	803b      	strh	r3, [r7, #0]
 800322e:	4613      	mov	r3, r2
 8003230:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323a:	2b00      	cmp	r3, #0
 800323c:	da0f      	bge.n	800325e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	3310      	adds	r3, #16
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	3304      	adds	r3, #4
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	705a      	strb	r2, [r3, #1]
 800325c:	e00f      	b.n	800327e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	3304      	adds	r3, #4
 8003276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800328a:	883b      	ldrh	r3, [r7, #0]
 800328c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	78ba      	ldrb	r2, [r7, #2]
 8003298:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032ac:	78bb      	ldrb	r3, [r7, #2]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d102      	bne.n	80032b8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_PCD_EP_Open+0xae>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e00e      	b.n	80032e4 <HAL_PCD_EP_Open+0xcc>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 fe11 	bl	8004efc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80032e2:	7afb      	ldrb	r3, [r7, #11]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da0f      	bge.n	8003320 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	3310      	adds	r3, #16
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	705a      	strb	r2, [r3, #1]
 800331e:	e00f      	b.n	8003340 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_PCD_EP_Close+0x6e>
 8003356:	2302      	movs	r3, #2
 8003358:	e00e      	b.n	8003378 <HAL_PCD_EP_Close+0x8c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	4618      	mov	r0, r3
 800336a:	f001 fe4f 	bl	800500c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	460b      	mov	r3, r1
 800338e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	f003 020f 	and.w	r2, r3, #15
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	3304      	adds	r3, #4
 80033a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2200      	movs	r2, #0
 80033c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	799b      	ldrb	r3, [r3, #6]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	799b      	ldrb	r3, [r3, #6]
 80033e4:	461a      	mov	r2, r3
 80033e6:	6979      	ldr	r1, [r7, #20]
 80033e8:	f001 feec 	bl	80051c4 <USB_EPStartXfer>

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	460b      	mov	r3, r1
 8003404:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003406:	7afb      	ldrb	r3, [r7, #11]
 8003408:	f003 020f 	and.w	r2, r3, #15
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	3310      	adds	r3, #16
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2200      	movs	r2, #0
 800342e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2201      	movs	r2, #1
 8003434:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003436:	7afb      	ldrb	r3, [r7, #11]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	b2da      	uxtb	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	799b      	ldrb	r3, [r3, #6]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	799b      	ldrb	r3, [r3, #6]
 8003458:	461a      	mov	r2, r3
 800345a:	6979      	ldr	r1, [r7, #20]
 800345c:	f001 feb2 	bl	80051c4 <USB_EPStartXfer>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	7912      	ldrb	r2, [r2, #4]
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e04f      	b.n	8003528 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348c:	2b00      	cmp	r3, #0
 800348e:	da0f      	bge.n	80034b0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	3310      	adds	r3, #16
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	705a      	strb	r2, [r3, #1]
 80034ae:	e00d      	b.n	80034cc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	3304      	adds	r3, #4
 80034c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_PCD_EP_SetStall+0x82>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e01d      	b.n	8003528 <HAL_PCD_EP_SetStall+0xbe>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68f9      	ldr	r1, [r7, #12]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 fa40 	bl	8005980 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	7999      	ldrb	r1, [r3, #6]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003518:	461a      	mov	r2, r3
 800351a:	f002 fc31 	bl	8005d80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	7912      	ldrb	r2, [r2, #4]
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e042      	b.n	80035d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800354e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003552:	2b00      	cmp	r3, #0
 8003554:	da0f      	bge.n	8003576 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 020f 	and.w	r2, r3, #15
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	3310      	adds	r3, #16
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	3304      	adds	r3, #4
 800356c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	705a      	strb	r2, [r3, #1]
 8003574:	e00f      	b.n	8003596 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 020f 	and.w	r2, r3, #15
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	3304      	adds	r3, #4
 800358e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_EP_ClrStall+0x86>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e00e      	b.n	80035d4 <HAL_PCD_EP_ClrStall+0xa4>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fa49 	bl	8005a5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da0c      	bge.n	800360a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	3310      	adds	r3, #16
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	3304      	adds	r3, #4
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e00c      	b.n	8003624 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	f003 020f 	and.w	r2, r3, #15
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68f9      	ldr	r1, [r7, #12]
 800362a:	4618      	mov	r0, r3
 800362c:	f002 f868 	bl	8005700 <USB_EPStopXfer>
 8003630:	4603      	mov	r3, r0
 8003632:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003634:	7afb      	ldrb	r3, [r7, #11]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b08a      	sub	sp, #40	@ 0x28
 8003642:	af02      	add	r7, sp, #8
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	3310      	adds	r3, #16
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	429a      	cmp	r2, r3
 8003670:	d901      	bls.n	8003676 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e06b      	b.n	800374e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	429a      	cmp	r2, r3
 800368a:	d902      	bls.n	8003692 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3303      	adds	r3, #3
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800369a:	e02a      	b.n	80036f2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d902      	bls.n	80036b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	3303      	adds	r3, #3
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68d9      	ldr	r1, [r3, #12]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	4603      	mov	r3, r0
 80036d4:	6978      	ldr	r0, [r7, #20]
 80036d6:	f002 f8bd 	bl	8005854 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	441a      	add	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	441a      	add	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	d809      	bhi.n	800371c <PCD_WriteEmptyTxFifo+0xde>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003710:	429a      	cmp	r2, r3
 8003712:	d203      	bcs.n	800371c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1bf      	bne.n	800369c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	429a      	cmp	r2, r3
 8003726:	d811      	bhi.n	800374c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	2201      	movs	r2, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800373c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	43db      	mvns	r3, r3
 8003742:	6939      	ldr	r1, [r7, #16]
 8003744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003748:	4013      	ands	r3, r2
 800374a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3720      	adds	r7, #32
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	333c      	adds	r3, #60	@ 0x3c
 8003770:	3304      	adds	r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	799b      	ldrb	r3, [r3, #6]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d17b      	bne.n	8003886 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d015      	beq.n	80037c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	4a61      	ldr	r2, [pc, #388]	@ (8003920 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	f240 80b9 	bls.w	8003914 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80b3 	beq.w	8003914 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ba:	461a      	mov	r2, r3
 80037bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037c0:	6093      	str	r3, [r2, #8]
 80037c2:	e0a7      	b.n	8003914 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037da:	461a      	mov	r2, r3
 80037dc:	2320      	movs	r3, #32
 80037de:	6093      	str	r3, [r2, #8]
 80037e0:	e098      	b.n	8003914 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f040 8093 	bne.w	8003914 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003920 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d90f      	bls.n	8003816 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380c:	461a      	mov	r2, r3
 800380e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003812:	6093      	str	r3, [r2, #8]
 8003814:	e07e      	b.n	8003914 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	3304      	adds	r3, #4
 800382a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	0159      	lsls	r1, r3, #5
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	440b      	add	r3, r1
 8003838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003842:	1ad2      	subs	r2, r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d114      	bne.n	8003878 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003860:	461a      	mov	r2, r3
 8003862:	2101      	movs	r1, #1
 8003864:	f002 fa8c 	bl	8005d80 <USB_EP0_OutStart>
 8003868:	e006      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	441a      	add	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	4619      	mov	r1, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f004 f9ea 	bl	8007c58 <HAL_PCD_DataOutStageCallback>
 8003884:	e046      	b.n	8003914 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	4a26      	ldr	r2, [pc, #152]	@ (8003924 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d124      	bne.n	80038d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a4:	461a      	mov	r2, r3
 80038a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038aa:	6093      	str	r3, [r2, #8]
 80038ac:	e032      	b.n	8003914 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c4:	461a      	mov	r2, r3
 80038c6:	2320      	movs	r3, #32
 80038c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	4619      	mov	r1, r3
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f004 f9c1 	bl	8007c58 <HAL_PCD_DataOutStageCallback>
 80038d6:	e01d      	b.n	8003914 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d114      	bne.n	8003908 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d108      	bne.n	8003908 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003900:	461a      	mov	r2, r3
 8003902:	2100      	movs	r1, #0
 8003904:	f002 fa3c 	bl	8005d80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f004 f9a2 	bl	8007c58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	4f54300a 	.word	0x4f54300a
 8003924:	4f54310a 	.word	0x4f54310a

08003928 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	333c      	adds	r3, #60	@ 0x3c
 8003940:	3304      	adds	r3, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a15      	ldr	r2, [pc, #84]	@ (80039b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d90e      	bls.n	800397c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003974:	461a      	mov	r2, r3
 8003976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800397a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f004 f959 	bl	8007c34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d90c      	bls.n	80039a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	799b      	ldrb	r3, [r3, #6]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d108      	bne.n	80039a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800399c:	461a      	mov	r2, r3
 800399e:	2101      	movs	r1, #1
 80039a0:	f002 f9ee 	bl	8005d80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	4f54300a 	.word	0x4f54300a

080039b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
 80039c0:	4613      	mov	r3, r2
 80039c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d107      	bne.n	80039e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039d2:	883b      	ldrh	r3, [r7, #0]
 80039d4:	0419      	lsls	r1, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	430a      	orrs	r2, r1
 80039de:	629a      	str	r2, [r3, #40]	@ 0x28
 80039e0:	e028      	b.n	8003a34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e00d      	b.n	8003a12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	3340      	adds	r3, #64	@ 0x40
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	7bfa      	ldrb	r2, [r7, #15]
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3ec      	bcc.n	80039f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a1c:	883b      	ldrh	r3, [r7, #0]
 8003a1e:	0418      	lsls	r0, r3, #16
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	4302      	orrs	r2, r0
 8003a2c:	3340      	adds	r3, #64	@ 0x40
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	887a      	ldrh	r2, [r7, #2]
 8003a54:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e267      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d075      	beq.n	8003b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a9a:	4b88      	ldr	r3, [pc, #544]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d00c      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa6:	4b85      	ldr	r3, [pc, #532]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d112      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab2:	4b82      	ldr	r3, [pc, #520]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003abe:	d10b      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d05b      	beq.n	8003b84 <HAL_RCC_OscConfig+0x108>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d157      	bne.n	8003b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e242      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae0:	d106      	bne.n	8003af0 <HAL_RCC_OscConfig+0x74>
 8003ae2:	4b76      	ldr	r3, [pc, #472]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a75      	ldr	r2, [pc, #468]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e01d      	b.n	8003b2c <HAL_RCC_OscConfig+0xb0>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x98>
 8003afa:	4b70      	ldr	r3, [pc, #448]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6f      	ldr	r2, [pc, #444]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b6d      	ldr	r3, [pc, #436]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e00b      	b.n	8003b2c <HAL_RCC_OscConfig+0xb0>
 8003b14:	4b69      	ldr	r3, [pc, #420]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a68      	ldr	r2, [pc, #416]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4b66      	ldr	r3, [pc, #408]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a65      	ldr	r2, [pc, #404]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe fa70 	bl	8002018 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fe fa6c 	bl	8002018 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	@ 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e207      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0xc0>
 8003b5a:	e014      	b.n	8003b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fa5c 	bl	8002018 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fe fa58 	bl	8002018 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e1f3      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b76:	4b51      	ldr	r3, [pc, #324]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0xe8>
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d063      	beq.n	8003c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b92:	4b4a      	ldr	r3, [pc, #296]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9e:	4b47      	ldr	r3, [pc, #284]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d11c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b44      	ldr	r3, [pc, #272]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d116      	bne.n	8003be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb6:	4b41      	ldr	r3, [pc, #260]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_RCC_OscConfig+0x152>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e1c7      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bce:	4b3b      	ldr	r3, [pc, #236]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4937      	ldr	r1, [pc, #220]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be2:	e03a      	b.n	8003c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d020      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bec:	4b34      	ldr	r3, [pc, #208]	@ (8003cc0 <HAL_RCC_OscConfig+0x244>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fe fa11 	bl	8002018 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfa:	f7fe fa0d 	bl	8002018 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e1a8      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	4b28      	ldr	r3, [pc, #160]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4925      	ldr	r1, [pc, #148]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]
 8003c2c:	e015      	b.n	8003c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2e:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <HAL_RCC_OscConfig+0x244>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe f9f0 	bl	8002018 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3c:	f7fe f9ec 	bl	8002018 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e187      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d036      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d016      	beq.n	8003c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6e:	4b15      	ldr	r3, [pc, #84]	@ (8003cc4 <HAL_RCC_OscConfig+0x248>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fe f9d0 	bl	8002018 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7c:	f7fe f9cc 	bl	8002018 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e167      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x200>
 8003c9a:	e01b      	b.n	8003cd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9c:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <HAL_RCC_OscConfig+0x248>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca2:	f7fe f9b9 	bl	8002018 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca8:	e00e      	b.n	8003cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003caa:	f7fe f9b5 	bl	8002018 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d907      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e150      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	42470000 	.word	0x42470000
 8003cc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	4b88      	ldr	r3, [pc, #544]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ea      	bne.n	8003caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8097 	beq.w	8003e10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce6:	4b81      	ldr	r3, [pc, #516]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d02:	4b7a      	ldr	r3, [pc, #488]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d12:	4b77      	ldr	r3, [pc, #476]	@ (8003ef0 <HAL_RCC_OscConfig+0x474>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d118      	bne.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1e:	4b74      	ldr	r3, [pc, #464]	@ (8003ef0 <HAL_RCC_OscConfig+0x474>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a73      	ldr	r2, [pc, #460]	@ (8003ef0 <HAL_RCC_OscConfig+0x474>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe f975 	bl	8002018 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d32:	f7fe f971 	bl	8002018 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e10c      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef0 <HAL_RCC_OscConfig+0x474>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x2ea>
 8003d58:	4b64      	ldr	r3, [pc, #400]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5c:	4a63      	ldr	r2, [pc, #396]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d64:	e01c      	b.n	8003da0 <HAL_RCC_OscConfig+0x324>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x30c>
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d72:	4a5e      	ldr	r2, [pc, #376]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d74:	f043 0304 	orr.w	r3, r3, #4
 8003d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0x324>
 8003d88:	4b58      	ldr	r3, [pc, #352]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	4a57      	ldr	r2, [pc, #348]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d94:	4b55      	ldr	r3, [pc, #340]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d98:	4a54      	ldr	r2, [pc, #336]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d9a:	f023 0304 	bic.w	r3, r3, #4
 8003d9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d015      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fe f936 	bl	8002018 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fe f932 	bl	8002018 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0cb      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc6:	4b49      	ldr	r3, [pc, #292]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0ee      	beq.n	8003db0 <HAL_RCC_OscConfig+0x334>
 8003dd2:	e014      	b.n	8003dfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd4:	f7fe f920 	bl	8002018 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dda:	e00a      	b.n	8003df2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ddc:	f7fe f91c 	bl	8002018 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e0b5      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df2:	4b3e      	ldr	r3, [pc, #248]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ee      	bne.n	8003ddc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d105      	bne.n	8003e10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e04:	4b39      	ldr	r3, [pc, #228]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	4a38      	ldr	r2, [pc, #224]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003e0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80a1 	beq.w	8003f5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e1a:	4b34      	ldr	r3, [pc, #208]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d05c      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d141      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	4b31      	ldr	r3, [pc, #196]	@ (8003ef4 <HAL_RCC_OscConfig+0x478>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe f8f0 	bl	8002018 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fe f8ec 	bl	8002018 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e087      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	4b27      	ldr	r3, [pc, #156]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	019b      	lsls	r3, r3, #6
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	3b01      	subs	r3, #1
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	491b      	ldr	r1, [pc, #108]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e84:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef4 <HAL_RCC_OscConfig+0x478>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8a:	f7fe f8c5 	bl	8002018 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e92:	f7fe f8c1 	bl	8002018 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e05c      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea4:	4b11      	ldr	r3, [pc, #68]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x416>
 8003eb0:	e054      	b.n	8003f5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <HAL_RCC_OscConfig+0x478>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fe f8ae 	bl	8002018 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fe f8aa 	bl	8002018 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e045      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x444>
 8003ede:	e03d      	b.n	8003f5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e038      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <HAL_RCC_OscConfig+0x4ec>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d028      	beq.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d121      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d11a      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d111      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	3b01      	subs	r3, #1
 8003f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800

08003f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0cc      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f80:	4b68      	ldr	r3, [pc, #416]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d90c      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8e:	4b65      	ldr	r3, [pc, #404]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b63      	ldr	r3, [pc, #396]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0b8      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d020      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc0:	4b59      	ldr	r3, [pc, #356]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a58      	ldr	r2, [pc, #352]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd8:	4b53      	ldr	r3, [pc, #332]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a52      	ldr	r2, [pc, #328]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe4:	4b50      	ldr	r3, [pc, #320]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	494d      	ldr	r1, [pc, #308]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d044      	beq.n	800408c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d107      	bne.n	800401a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b47      	ldr	r3, [pc, #284]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d119      	bne.n	800404a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e07f      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d003      	beq.n	800402a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	2b03      	cmp	r3, #3
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402a:	4b3f      	ldr	r3, [pc, #252]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e06f      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403a:	4b3b      	ldr	r3, [pc, #236]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e067      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404a:	4b37      	ldr	r3, [pc, #220]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 0203 	bic.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4934      	ldr	r1, [pc, #208]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800405c:	f7fd ffdc 	bl	8002018 <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	e00a      	b.n	800407a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004064:	f7fd ffd8 	bl	8002018 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e04f      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	4b2b      	ldr	r3, [pc, #172]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 020c 	and.w	r2, r3, #12
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	429a      	cmp	r2, r3
 800408a:	d1eb      	bne.n	8004064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800408c:	4b25      	ldr	r3, [pc, #148]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d20c      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b22      	ldr	r3, [pc, #136]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b20      	ldr	r3, [pc, #128]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e032      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c0:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4916      	ldr	r1, [pc, #88]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040de:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	490e      	ldr	r1, [pc, #56]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040f2:	f000 f821 	bl	8004138 <HAL_RCC_GetSysClockFreq>
 80040f6:	4602      	mov	r2, r0
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	490a      	ldr	r1, [pc, #40]	@ (800412c <HAL_RCC_ClockConfig+0x1c0>)
 8004104:	5ccb      	ldrb	r3, [r1, r3]
 8004106:	fa22 f303 	lsr.w	r3, r2, r3
 800410a:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800410e:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd ff3c 	bl	8001f90 <HAL_InitTick>

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023c00 	.word	0x40023c00
 8004128:	40023800 	.word	0x40023800
 800412c:	080084a8 	.word	0x080084a8
 8004130:	20000000 	.word	0x20000000
 8004134:	20000004 	.word	0x20000004

08004138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800413c:	b090      	sub	sp, #64	@ 0x40
 800413e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004150:	4b59      	ldr	r3, [pc, #356]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 030c 	and.w	r3, r3, #12
 8004158:	2b08      	cmp	r3, #8
 800415a:	d00d      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x40>
 800415c:	2b08      	cmp	r3, #8
 800415e:	f200 80a1 	bhi.w	80042a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x34>
 8004166:	2b04      	cmp	r3, #4
 8004168:	d003      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x3a>
 800416a:	e09b      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800416c:	4b53      	ldr	r3, [pc, #332]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x184>)
 800416e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004170:	e09b      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004172:	4b53      	ldr	r3, [pc, #332]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004174:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004176:	e098      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004178:	4b4f      	ldr	r3, [pc, #316]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004180:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004182:	4b4d      	ldr	r3, [pc, #308]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d028      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418e:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	2200      	movs	r2, #0
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	627a      	str	r2, [r7, #36]	@ 0x24
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041a0:	2100      	movs	r1, #0
 80041a2:	4b47      	ldr	r3, [pc, #284]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041a4:	fb03 f201 	mul.w	r2, r3, r1
 80041a8:	2300      	movs	r3, #0
 80041aa:	fb00 f303 	mul.w	r3, r0, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	4a43      	ldr	r2, [pc, #268]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041b2:	fba0 1202 	umull	r1, r2, r0, r2
 80041b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041b8:	460a      	mov	r2, r1
 80041ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041be:	4413      	add	r3, r2
 80041c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c4:	2200      	movs	r2, #0
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	61fa      	str	r2, [r7, #28]
 80041ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041d2:	f7fc f813 	bl	80001fc <__aeabi_uldivmod>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4613      	mov	r3, r2
 80041dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041de:	e053      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e0:	4b35      	ldr	r3, [pc, #212]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	2200      	movs	r2, #0
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	617a      	str	r2, [r7, #20]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041f2:	f04f 0b00 	mov.w	fp, #0
 80041f6:	4652      	mov	r2, sl
 80041f8:	465b      	mov	r3, fp
 80041fa:	f04f 0000 	mov.w	r0, #0
 80041fe:	f04f 0100 	mov.w	r1, #0
 8004202:	0159      	lsls	r1, r3, #5
 8004204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004208:	0150      	lsls	r0, r2, #5
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	ebb2 080a 	subs.w	r8, r2, sl
 8004212:	eb63 090b 	sbc.w	r9, r3, fp
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004222:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004226:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800422a:	ebb2 0408 	subs.w	r4, r2, r8
 800422e:	eb63 0509 	sbc.w	r5, r3, r9
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	00eb      	lsls	r3, r5, #3
 800423c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004240:	00e2      	lsls	r2, r4, #3
 8004242:	4614      	mov	r4, r2
 8004244:	461d      	mov	r5, r3
 8004246:	eb14 030a 	adds.w	r3, r4, sl
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	eb45 030b 	adc.w	r3, r5, fp
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800425e:	4629      	mov	r1, r5
 8004260:	028b      	lsls	r3, r1, #10
 8004262:	4621      	mov	r1, r4
 8004264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004268:	4621      	mov	r1, r4
 800426a:	028a      	lsls	r2, r1, #10
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004272:	2200      	movs	r2, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	60fa      	str	r2, [r7, #12]
 8004278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800427c:	f7fb ffbe 	bl	80001fc <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4613      	mov	r3, r2
 8004286:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004288:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	3301      	adds	r3, #1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042a2:	e002      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x184>)
 80042a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3740      	adds	r7, #64	@ 0x40
 80042b0:	46bd      	mov	sp, r7
 80042b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
 80042bc:	00f42400 	.word	0x00f42400
 80042c0:	017d7840 	.word	0x017d7840

080042c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c8:	4b03      	ldr	r3, [pc, #12]	@ (80042d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ca:	681b      	ldr	r3, [r3, #0]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000000 	.word	0x20000000

080042dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e041      	b.n	8004372 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd fd44 	bl	8001d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 f9d8 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d001      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e044      	b.n	800441e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	@ (800442c <HAL_TIM_Base_Start_IT+0xb0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d018      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x6c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043be:	d013      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x6c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <HAL_TIM_Base_Start_IT+0xb4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x6c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <HAL_TIM_Base_Start_IT+0xb8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x6c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a17      	ldr	r2, [pc, #92]	@ (8004438 <HAL_TIM_Base_Start_IT+0xbc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x6c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a16      	ldr	r2, [pc, #88]	@ (800443c <HAL_TIM_Base_Start_IT+0xc0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d111      	bne.n	800440c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d010      	beq.n	800441c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440a:	e007      	b.n	800441c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40014000 	.word	0x40014000

08004440 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0201 	bic.w	r2, r2, #1
 8004456:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10f      	bne.n	8004488 <HAL_TIM_Base_Stop_IT+0x48>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6a1a      	ldr	r2, [r3, #32]
 800446e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <HAL_TIM_Base_Stop_IT+0x48>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d020      	beq.n	8004502 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d01b      	beq.n	8004502 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f06f 0202 	mvn.w	r2, #2
 80044d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f8d2 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 80044ee:	e005      	b.n	80044fc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8c4 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8d5 	bl	80046a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01b      	beq.n	800454e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0204 	mvn.w	r2, #4
 800451e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f8ac 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 800453a:	e005      	b.n	8004548 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f89e 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8af 	bl	80046a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01b      	beq.n	800459a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f06f 0208 	mvn.w	r2, #8
 800456a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2204      	movs	r2, #4
 8004570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f886 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 8004586:	e005      	b.n	8004594 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f878 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f889 	bl	80046a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01b      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0210 	mvn.w	r2, #16
 80045b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2208      	movs	r2, #8
 80045bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f860 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 80045d2:	e005      	b.n	80045e0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f852 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f863 	bl	80046a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00c      	beq.n	800460a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f06f 0201 	mvn.w	r2, #1
 8004602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fd fb7d 	bl	8001d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00c      	beq.n	800462e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8e7 	bl	80047fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00c      	beq.n	8004652 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d007      	beq.n	8004652 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800464a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f834 	bl	80046ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00c      	beq.n	8004676 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f06f 0220 	mvn.w	r2, #32
 800466e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f8b9 	bl	80047e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a3a      	ldr	r2, [pc, #232]	@ (80047cc <TIM_Base_SetConfig+0xfc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00f      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ee:	d00b      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a37      	ldr	r2, [pc, #220]	@ (80047d0 <TIM_Base_SetConfig+0x100>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a36      	ldr	r2, [pc, #216]	@ (80047d4 <TIM_Base_SetConfig+0x104>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a35      	ldr	r2, [pc, #212]	@ (80047d8 <TIM_Base_SetConfig+0x108>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d108      	bne.n	800471a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a2b      	ldr	r2, [pc, #172]	@ (80047cc <TIM_Base_SetConfig+0xfc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01b      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004728:	d017      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a28      	ldr	r2, [pc, #160]	@ (80047d0 <TIM_Base_SetConfig+0x100>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a27      	ldr	r2, [pc, #156]	@ (80047d4 <TIM_Base_SetConfig+0x104>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00f      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a26      	ldr	r2, [pc, #152]	@ (80047d8 <TIM_Base_SetConfig+0x108>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00b      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a25      	ldr	r2, [pc, #148]	@ (80047dc <TIM_Base_SetConfig+0x10c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a24      	ldr	r2, [pc, #144]	@ (80047e0 <TIM_Base_SetConfig+0x110>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_Base_SetConfig+0x8a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a23      	ldr	r2, [pc, #140]	@ (80047e4 <TIM_Base_SetConfig+0x114>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a0e      	ldr	r2, [pc, #56]	@ (80047cc <TIM_Base_SetConfig+0xfc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d103      	bne.n	80047a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d105      	bne.n	80047be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f023 0201 	bic.w	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	611a      	str	r2, [r3, #16]
  }
}
 80047be:	bf00      	nop
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40000800 	.word	0x40000800
 80047d8:	40000c00 	.word	0x40000c00
 80047dc:	40014000 	.word	0x40014000
 80047e0:	40014400 	.word	0x40014400
 80047e4:	40014800 	.word	0x40014800

080047e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004810:	b084      	sub	sp, #16
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	f107 001c 	add.w	r0, r7, #28
 800481e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004822:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004826:	2b01      	cmp	r3, #1
 8004828:	d123      	bne.n	8004872 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800483e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004852:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004856:	2b01      	cmp	r3, #1
 8004858:	d105      	bne.n	8004866 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f001 fae8 	bl	8005e3c <USB_CoreReset>
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e01b      	b.n	80048aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 fadc 	bl	8005e3c <USB_CoreReset>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004888:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004894:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	@ 0x38
 800489c:	e005      	b.n	80048aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048aa:	7fbb      	ldrb	r3, [r7, #30]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10b      	bne.n	80048c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f043 0206 	orr.w	r2, r3, #6
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048d4:	b004      	add	sp, #16
 80048d6:	4770      	bx	lr

080048d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d165      	bne.n	80049b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4a41      	ldr	r2, [pc, #260]	@ (80049f4 <USB_SetTurnaroundTime+0x11c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d906      	bls.n	8004902 <USB_SetTurnaroundTime+0x2a>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a40      	ldr	r2, [pc, #256]	@ (80049f8 <USB_SetTurnaroundTime+0x120>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d202      	bcs.n	8004902 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048fc:	230f      	movs	r3, #15
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e062      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4a3c      	ldr	r2, [pc, #240]	@ (80049f8 <USB_SetTurnaroundTime+0x120>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d306      	bcc.n	8004918 <USB_SetTurnaroundTime+0x40>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4a3b      	ldr	r2, [pc, #236]	@ (80049fc <USB_SetTurnaroundTime+0x124>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d202      	bcs.n	8004918 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004912:	230e      	movs	r3, #14
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e057      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4a38      	ldr	r2, [pc, #224]	@ (80049fc <USB_SetTurnaroundTime+0x124>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d306      	bcc.n	800492e <USB_SetTurnaroundTime+0x56>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4a37      	ldr	r2, [pc, #220]	@ (8004a00 <USB_SetTurnaroundTime+0x128>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d202      	bcs.n	800492e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004928:	230d      	movs	r3, #13
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e04c      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4a33      	ldr	r2, [pc, #204]	@ (8004a00 <USB_SetTurnaroundTime+0x128>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d306      	bcc.n	8004944 <USB_SetTurnaroundTime+0x6c>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4a32      	ldr	r2, [pc, #200]	@ (8004a04 <USB_SetTurnaroundTime+0x12c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d802      	bhi.n	8004944 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800493e:	230c      	movs	r3, #12
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e041      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a2f      	ldr	r2, [pc, #188]	@ (8004a04 <USB_SetTurnaroundTime+0x12c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d906      	bls.n	800495a <USB_SetTurnaroundTime+0x82>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4a2e      	ldr	r2, [pc, #184]	@ (8004a08 <USB_SetTurnaroundTime+0x130>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d802      	bhi.n	800495a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004954:	230b      	movs	r3, #11
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e036      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a08 <USB_SetTurnaroundTime+0x130>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d906      	bls.n	8004970 <USB_SetTurnaroundTime+0x98>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4a29      	ldr	r2, [pc, #164]	@ (8004a0c <USB_SetTurnaroundTime+0x134>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d802      	bhi.n	8004970 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800496a:	230a      	movs	r3, #10
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e02b      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4a26      	ldr	r2, [pc, #152]	@ (8004a0c <USB_SetTurnaroundTime+0x134>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d906      	bls.n	8004986 <USB_SetTurnaroundTime+0xae>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4a25      	ldr	r2, [pc, #148]	@ (8004a10 <USB_SetTurnaroundTime+0x138>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d202      	bcs.n	8004986 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004980:	2309      	movs	r3, #9
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e020      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4a21      	ldr	r2, [pc, #132]	@ (8004a10 <USB_SetTurnaroundTime+0x138>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d306      	bcc.n	800499c <USB_SetTurnaroundTime+0xc4>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4a20      	ldr	r2, [pc, #128]	@ (8004a14 <USB_SetTurnaroundTime+0x13c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d802      	bhi.n	800499c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004996:	2308      	movs	r3, #8
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	e015      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a14 <USB_SetTurnaroundTime+0x13c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d906      	bls.n	80049b2 <USB_SetTurnaroundTime+0xda>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a18 <USB_SetTurnaroundTime+0x140>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d202      	bcs.n	80049b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80049ac:	2307      	movs	r3, #7
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e00a      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80049b2:	2306      	movs	r3, #6
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e007      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80049be:	2309      	movs	r3, #9
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e001      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80049c4:	2309      	movs	r3, #9
 80049c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	029b      	lsls	r3, r3, #10
 80049dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	00d8acbf 	.word	0x00d8acbf
 80049f8:	00e4e1c0 	.word	0x00e4e1c0
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	01067380 	.word	0x01067380
 8004a04:	011a499f 	.word	0x011a499f
 8004a08:	01312cff 	.word	0x01312cff
 8004a0c:	014ca43f 	.word	0x014ca43f
 8004a10:	016e3600 	.word	0x016e3600
 8004a14:	01a6ab1f 	.word	0x01a6ab1f
 8004a18:	01e84800 	.word	0x01e84800

08004a1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f043 0201 	orr.w	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d115      	bne.n	8004aae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a8e:	200a      	movs	r0, #10
 8004a90:	f7fd face 	bl	8002030 <HAL_Delay>
      ms += 10U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	330a      	adds	r3, #10
 8004a98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 f93f 	bl	8005d1e <USB_GetMode>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d01e      	beq.n	8004ae4 <USB_SetCurrentMode+0x84>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004aaa:	d9f0      	bls.n	8004a8e <USB_SetCurrentMode+0x2e>
 8004aac:	e01a      	b.n	8004ae4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d115      	bne.n	8004ae0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ac0:	200a      	movs	r0, #10
 8004ac2:	f7fd fab5 	bl	8002030 <HAL_Delay>
      ms += 10U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	330a      	adds	r3, #10
 8004aca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f001 f926 	bl	8005d1e <USB_GetMode>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <USB_SetCurrentMode+0x84>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2bc7      	cmp	r3, #199	@ 0xc7
 8004adc:	d9f0      	bls.n	8004ac0 <USB_SetCurrentMode+0x60>
 8004ade:	e001      	b.n	8004ae4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e005      	b.n	8004af0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2bc8      	cmp	r3, #200	@ 0xc8
 8004ae8:	d101      	bne.n	8004aee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af8:	b084      	sub	sp, #16
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	e009      	b.n	8004b2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	3340      	adds	r3, #64	@ 0x40
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	2200      	movs	r2, #0
 8004b24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b0e      	cmp	r3, #14
 8004b30:	d9f2      	bls.n	8004b18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d11c      	bne.n	8004b74 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b72:	e00b      	b.n	8004b8c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10d      	bne.n	8004bbc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ba8:	2100      	movs	r1, #0
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f968 	bl	8004e80 <USB_SetDevSpeed>
 8004bb0:	e008      	b.n	8004bc4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f963 	bl	8004e80 <USB_SetDevSpeed>
 8004bba:	e003      	b.n	8004bc4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bbc:	2103      	movs	r1, #3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f95e 	bl	8004e80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bc4:	2110      	movs	r1, #16
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8fa 	bl	8004dc0 <USB_FlushTxFifo>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f924 	bl	8004e24 <USB_FlushRxFifo>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bec:	461a      	mov	r2, r3
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c04:	461a      	mov	r2, r3
 8004c06:	2300      	movs	r3, #0
 8004c08:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	e043      	b.n	8004c98 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c26:	d118      	bne.n	8004c5a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e013      	b.n	8004c6c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c50:	461a      	mov	r2, r3
 8004c52:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e008      	b.n	8004c6c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c66:	461a      	mov	r2, r3
 8004c68:	2300      	movs	r3, #0
 8004c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3301      	adds	r3, #1
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d3b5      	bcc.n	8004c10 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	e043      	b.n	8004d32 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cc0:	d118      	bne.n	8004cf4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	e013      	b.n	8004d06 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cea:	461a      	mov	r2, r3
 8004cec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e008      	b.n	8004d06 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d00:	461a      	mov	r2, r3
 8004d02:	2300      	movs	r3, #0
 8004d04:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d12:	461a      	mov	r2, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d24:	461a      	mov	r2, r3
 8004d26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d36:	461a      	mov	r2, r3
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d3b5      	bcc.n	8004caa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d50:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004d5e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d105      	bne.n	8004d74 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f043 0210 	orr.w	r2, r3, #16
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	4b10      	ldr	r3, [pc, #64]	@ (8004dbc <USB_DevInit+0x2c4>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	f043 0208 	orr.w	r2, r3, #8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d107      	bne.n	8004dac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db8:	b004      	add	sp, #16
 8004dba:	4770      	bx	lr
 8004dbc:	803c3800 	.word	0x803c3800

08004dc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dda:	d901      	bls.n	8004de0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e01b      	b.n	8004e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	daf2      	bge.n	8004dce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	019b      	lsls	r3, r3, #6
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e04:	d901      	bls.n	8004e0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e006      	b.n	8004e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d0f0      	beq.n	8004df8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e3c:	d901      	bls.n	8004e42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e018      	b.n	8004e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	daf2      	bge.n	8004e30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2210      	movs	r2, #16
 8004e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e60:	d901      	bls.n	8004e66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e006      	b.n	8004e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d0f0      	beq.n	8004e54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	68f9      	ldr	r1, [r7, #12]
 8004e9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b087      	sub	sp, #28
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0306 	and.w	r3, r3, #6
 8004eca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]
 8004ed6:	e00a      	b.n	8004eee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d002      	beq.n	8004ee4 <USB_GetDevSpeed+0x32>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b06      	cmp	r3, #6
 8004ee2:	d102      	bne.n	8004eea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	75fb      	strb	r3, [r7, #23]
 8004ee8:	e001      	b.n	8004eee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004eea:	230f      	movs	r3, #15
 8004eec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d13a      	bne.n	8004f8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	2101      	movs	r1, #1
 8004f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	68f9      	ldr	r1, [r7, #12]
 8004f32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f36:	4313      	orrs	r3, r2
 8004f38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d155      	bne.n	8004ffc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	791b      	ldrb	r3, [r3, #4]
 8004f6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	059b      	lsls	r3, r3, #22
 8004f72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f74:	4313      	orrs	r3, r2
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	e036      	b.n	8004ffc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f94:	69da      	ldr	r2, [r3, #28]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11a      	bne.n	8004ffc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	791b      	ldrb	r3, [r3, #4]
 8004fe0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	0151      	lsls	r1, r2, #5
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	440a      	add	r2, r1
 8004fee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d161      	bne.n	80050ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800503a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800503e:	d11f      	bne.n	8005080 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800505a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800505e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800507a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800507e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	f003 030f 	and.w	r3, r3, #15
 8005090:	2101      	movs	r1, #1
 8005092:	fa01 f303 	lsl.w	r3, r1, r3
 8005096:	b29b      	uxth	r3, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050a0:	4013      	ands	r3, r2
 80050a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050c4:	4013      	ands	r3, r2
 80050c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	0159      	lsls	r1, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	440b      	add	r3, r1
 80050de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e2:	4619      	mov	r1, r3
 80050e4:	4b35      	ldr	r3, [pc, #212]	@ (80051bc <USB_DeactivateEndpoint+0x1b0>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]
 80050ea:	e060      	b.n	80051ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005102:	d11f      	bne.n	8005144 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800511e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005122:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	440a      	add	r2, r1
 800513a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800513e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005142:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	2101      	movs	r1, #1
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	43db      	mvns	r3, r3
 800515e:	68f9      	ldr	r1, [r7, #12]
 8005160:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005164:	4013      	ands	r3, r2
 8005166:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	2101      	movs	r1, #1
 800517a:	fa01 f303 	lsl.w	r3, r1, r3
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	43db      	mvns	r3, r3
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005188:	4013      	ands	r3, r2
 800518a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	0159      	lsls	r1, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	440b      	add	r3, r1
 80051a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a6:	4619      	mov	r1, r3
 80051a8:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <USB_DeactivateEndpoint+0x1b4>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	ec337800 	.word	0xec337800
 80051c0:	eff37800 	.word	0xeff37800

080051c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	@ 0x28
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	f040 817f 	bne.w	80054e4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d132      	bne.n	8005254 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	440a      	add	r2, r1
 8005204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005208:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800520c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005210:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800522c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005230:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800524c:	0cdb      	lsrs	r3, r3, #19
 800524e:	04db      	lsls	r3, r3, #19
 8005250:	6113      	str	r3, [r2, #16]
 8005252:	e097      	b.n	8005384 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	440a      	add	r2, r1
 800526a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800526e:	0cdb      	lsrs	r3, r3, #19
 8005270:	04db      	lsls	r3, r3, #19
 8005272:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800528e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005292:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005296:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d11a      	bne.n	80052d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d903      	bls.n	80052b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052d0:	6113      	str	r3, [r2, #16]
 80052d2:	e044      	b.n	800535e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4413      	add	r3, r2
 80052de:	1e5a      	subs	r2, r3, #1
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	8afb      	ldrh	r3, [r7, #22]
 80052fa:	04d9      	lsls	r1, r3, #19
 80052fc:	4ba4      	ldr	r3, [pc, #656]	@ (8005590 <USB_EPStartXfer+0x3cc>)
 80052fe:	400b      	ands	r3, r1
 8005300:	69b9      	ldr	r1, [r7, #24]
 8005302:	0148      	lsls	r0, r1, #5
 8005304:	69f9      	ldr	r1, [r7, #28]
 8005306:	4401      	add	r1, r0
 8005308:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800530c:	4313      	orrs	r3, r2
 800530e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	791b      	ldrb	r3, [r3, #4]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d122      	bne.n	800535e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	440a      	add	r2, r1
 800532e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005332:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005336:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	8afb      	ldrh	r3, [r7, #22]
 8005348:	075b      	lsls	r3, r3, #29
 800534a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800534e:	69b9      	ldr	r1, [r7, #24]
 8005350:	0148      	lsls	r0, r1, #5
 8005352:	69f9      	ldr	r1, [r7, #28]
 8005354:	4401      	add	r1, r0
 8005356:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800535a:	4313      	orrs	r3, r2
 800535c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005374:	69b9      	ldr	r1, [r7, #24]
 8005376:	0148      	lsls	r0, r1, #5
 8005378:	69f9      	ldr	r1, [r7, #28]
 800537a:	4401      	add	r1, r0
 800537c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005380:	4313      	orrs	r3, r2
 8005382:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d14b      	bne.n	8005422 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539e:	461a      	mov	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	791b      	ldrb	r3, [r3, #4]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d128      	bne.n	8005400 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d110      	bne.n	80053e0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	e00f      	b.n	8005400 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800541a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	e166      	b.n	80056f0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	440a      	add	r2, r1
 8005438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800543c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005440:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	791b      	ldrb	r3, [r3, #4]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d015      	beq.n	8005476 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 814e 	beq.w	80056f0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f303 	lsl.w	r3, r1, r3
 800546a:	69f9      	ldr	r1, [r7, #28]
 800546c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005470:	4313      	orrs	r3, r2
 8005472:	634b      	str	r3, [r1, #52]	@ 0x34
 8005474:	e13c      	b.n	80056f0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d110      	bne.n	80054a8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e00f      	b.n	80054c8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	68d9      	ldr	r1, [r3, #12]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	781a      	ldrb	r2, [r3, #0]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	b298      	uxth	r0, r3
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	4603      	mov	r3, r0
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f9b9 	bl	8005854 <USB_WritePacket>
 80054e2:	e105      	b.n	80056f0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054fe:	0cdb      	lsrs	r3, r3, #19
 8005500:	04db      	lsls	r3, r3, #19
 8005502:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800551e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005522:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005526:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d132      	bne.n	8005594 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	0148      	lsls	r0, r1, #5
 8005560:	69f9      	ldr	r1, [r7, #28]
 8005562:	4401      	add	r1, r0
 8005564:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005568:	4313      	orrs	r3, r2
 800556a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	440a      	add	r2, r1
 8005582:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005586:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800558a:	6113      	str	r3, [r2, #16]
 800558c:	e062      	b.n	8005654 <USB_EPStartXfer+0x490>
 800558e:	bf00      	nop
 8005590:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d123      	bne.n	80055e4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b2:	69b9      	ldr	r1, [r7, #24]
 80055b4:	0148      	lsls	r0, r1, #5
 80055b6:	69f9      	ldr	r1, [r7, #28]
 80055b8:	4401      	add	r1, r0
 80055ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055be:	4313      	orrs	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055e0:	6113      	str	r3, [r2, #16]
 80055e2:	e037      	b.n	8005654 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	4413      	add	r3, r2
 80055ee:	1e5a      	subs	r2, r3, #1
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	8afa      	ldrh	r2, [r7, #22]
 8005600:	fb03 f202 	mul.w	r2, r3, r2
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	8afb      	ldrh	r3, [r7, #22]
 8005618:	04d9      	lsls	r1, r3, #19
 800561a:	4b38      	ldr	r3, [pc, #224]	@ (80056fc <USB_EPStartXfer+0x538>)
 800561c:	400b      	ands	r3, r1
 800561e:	69b9      	ldr	r1, [r7, #24]
 8005620:	0148      	lsls	r0, r1, #5
 8005622:	69f9      	ldr	r1, [r7, #28]
 8005624:	4401      	add	r1, r0
 8005626:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800562a:	4313      	orrs	r3, r2
 800562c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005644:	69b9      	ldr	r1, [r7, #24]
 8005646:	0148      	lsls	r0, r1, #5
 8005648:	69f9      	ldr	r1, [r7, #28]
 800564a:	4401      	add	r1, r0
 800564c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005650:	4313      	orrs	r3, r2
 8005652:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10d      	bne.n	8005676 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	68d9      	ldr	r1, [r3, #12]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005672:	460a      	mov	r2, r1
 8005674:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	791b      	ldrb	r3, [r3, #4]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d128      	bne.n	80056d0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568a:	2b00      	cmp	r3, #0
 800568c:	d110      	bne.n	80056b0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e00f      	b.n	80056d0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	1ff80000 	.word	0x1ff80000

08005700 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d14a      	bne.n	80057b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005732:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005736:	f040 8086 	bne.w	8005846 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	7812      	ldrb	r2, [r2, #0]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005758:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800575c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	7812      	ldrb	r2, [r2, #0]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800577c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005780:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800578e:	4293      	cmp	r3, r2
 8005790:	d902      	bls.n	8005798 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
          break;
 8005796:	e056      	b.n	8005846 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057b0:	d0e7      	beq.n	8005782 <USB_EPStopXfer+0x82>
 80057b2:	e048      	b.n	8005846 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057cc:	d13b      	bne.n	8005846 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	7812      	ldrb	r2, [r2, #0]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005810:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005814:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005822:	4293      	cmp	r3, r2
 8005824:	d902      	bls.n	800582c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	75fb      	strb	r3, [r7, #23]
          break;
 800582a:	e00c      	b.n	8005846 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005844:	d0e7      	beq.n	8005816 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005846:	7dfb      	ldrb	r3, [r7, #23]
}
 8005848:	4618      	mov	r0, r3
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005854:	b480      	push	{r7}
 8005856:	b089      	sub	sp, #36	@ 0x24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4611      	mov	r1, r2
 8005860:	461a      	mov	r2, r3
 8005862:	460b      	mov	r3, r1
 8005864:	71fb      	strb	r3, [r7, #7]
 8005866:	4613      	mov	r3, r2
 8005868:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005872:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005876:	2b00      	cmp	r3, #0
 8005878:	d123      	bne.n	80058c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800587a:	88bb      	ldrh	r3, [r7, #4]
 800587c:	3303      	adds	r3, #3
 800587e:	089b      	lsrs	r3, r3, #2
 8005880:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005882:	2300      	movs	r3, #0
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	e018      	b.n	80058ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	031a      	lsls	r2, r3, #12
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005894:	461a      	mov	r2, r3
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	3301      	adds	r3, #1
 80058a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	3301      	adds	r3, #1
 80058a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	3301      	adds	r3, #1
 80058ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	3301      	adds	r3, #1
 80058b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	3301      	adds	r3, #1
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d3e2      	bcc.n	8005888 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3724      	adds	r7, #36	@ 0x24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b08b      	sub	sp, #44	@ 0x2c
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	089b      	lsrs	r3, r3, #2
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	623b      	str	r3, [r7, #32]
 80058fa:	e014      	b.n	8005926 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	601a      	str	r2, [r3, #0]
    pDest++;
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	3301      	adds	r3, #1
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	3301      	adds	r3, #1
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	3301      	adds	r3, #1
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	3301      	adds	r3, #1
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	3301      	adds	r3, #1
 8005924:	623b      	str	r3, [r7, #32]
 8005926:	6a3a      	ldr	r2, [r7, #32]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	429a      	cmp	r2, r3
 800592c:	d3e6      	bcc.n	80058fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800592e:	8bfb      	ldrh	r3, [r7, #30]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01e      	beq.n	8005972 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800593e:	461a      	mov	r2, r3
 8005940:	f107 0310 	add.w	r3, r7, #16
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	fa22 f303 	lsr.w	r3, r2, r3
 8005954:	b2da      	uxtb	r2, r3
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	701a      	strb	r2, [r3, #0]
      i++;
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	3301      	adds	r3, #1
 800595e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	3301      	adds	r3, #1
 8005964:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005966:	8bfb      	ldrh	r3, [r7, #30]
 8005968:	3b01      	subs	r3, #1
 800596a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800596c:	8bfb      	ldrh	r3, [r7, #30]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1ea      	bne.n	8005948 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005974:	4618      	mov	r0, r3
 8005976:	372c      	adds	r7, #44	@ 0x2c
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d12c      	bne.n	80059f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	db12      	blt.n	80059d4 <USB_EPSetStall+0x54>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00f      	beq.n	80059d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	e02b      	b.n	8005a4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	db12      	blt.n	8005a2e <USB_EPSetStall+0xae>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00f      	beq.n	8005a2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d128      	bne.n	8005aca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	791b      	ldrb	r3, [r3, #4]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d003      	beq.n	8005aa8 <USB_EPClearStall+0x4c>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	791b      	ldrb	r3, [r3, #4]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d138      	bne.n	8005b1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	e027      	b.n	8005b1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ae4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ae8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	791b      	ldrb	r3, [r3, #4]
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d003      	beq.n	8005afa <USB_EPClearStall+0x9e>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	791b      	ldrb	r3, [r3, #4]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d10f      	bne.n	8005b1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b46:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005b4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b62:	4313      	orrs	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ba2:	f023 0302 	bic.w	r3, r3, #2
 8005ba6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005bd0:	f023 0303 	bic.w	r3, r3, #3
 8005bd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005be4:	f043 0302 	orr.w	r3, r3, #2
 8005be8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c10:	68fb      	ldr	r3, [r7, #12]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	0c1b      	lsrs	r3, r3, #16
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b085      	sub	sp, #20
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	4013      	ands	r3, r2
 8005c74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	b29b      	uxth	r3, r3
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b087      	sub	sp, #28
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf2:	01db      	lsls	r3, r3, #7
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d10:	68bb      	ldr	r3, [r7, #8]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d58:	f023 0307 	bic.w	r3, r3, #7
 8005d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	333c      	adds	r3, #60	@ 0x3c
 8005d96:	3304      	adds	r3, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4a26      	ldr	r2, [pc, #152]	@ (8005e38 <USB_EP0_OutStart+0xb8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d90a      	bls.n	8005dba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005db4:	d101      	bne.n	8005dba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e037      	b.n	8005e2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005dd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005de8:	f043 0318 	orr.w	r3, r3, #24
 8005dec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dfc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005e00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10f      	bne.n	8005e28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e22:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005e26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	4f54300a 	.word	0x4f54300a

08005e3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e54:	d901      	bls.n	8005e5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e01b      	b.n	8005e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	daf2      	bge.n	8005e48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f043 0201 	orr.w	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3301      	adds	r3, #1
 8005e76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e7e:	d901      	bls.n	8005e84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e006      	b.n	8005e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d0f0      	beq.n	8005e72 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
	...

08005ea0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005eac:	2010      	movs	r0, #16
 8005eae:	f002 f921 	bl	80080f4 <USBD_static_malloc>
 8005eb2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d109      	bne.n	8005ece <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	32b0      	adds	r2, #176	@ 0xb0
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e048      	b.n	8005f60 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	32b0      	adds	r2, #176	@ 0xb0
 8005ed8:	68f9      	ldr	r1, [r7, #12]
 8005eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	32b0      	adds	r2, #176	@ 0xb0
 8005ee8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	7c1b      	ldrb	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10d      	bne.n	8005f16 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005efa:	4b1b      	ldr	r3, [pc, #108]	@ (8005f68 <USBD_HID_Init+0xc8>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	f003 020f 	and.w	r2, r3, #15
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3326      	adds	r3, #38	@ 0x26
 8005f10:	2207      	movs	r2, #7
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	e00c      	b.n	8005f30 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005f16:	4b14      	ldr	r3, [pc, #80]	@ (8005f68 <USBD_HID_Init+0xc8>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	f003 020f 	and.w	r2, r3, #15
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	3326      	adds	r3, #38	@ 0x26
 8005f2c:	220a      	movs	r2, #10
 8005f2e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005f30:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <USBD_HID_Init+0xc8>)
 8005f32:	7819      	ldrb	r1, [r3, #0]
 8005f34:	2304      	movs	r3, #4
 8005f36:	2203      	movs	r2, #3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 ffca 	bl	8007ed2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f68 <USBD_HID_Init+0xc8>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 020f 	and.w	r2, r3, #15
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	3324      	adds	r3, #36	@ 0x24
 8005f54:	2201      	movs	r2, #1
 8005f56:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	200000bf 	.word	0x200000bf

08005f6c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005f78:	4b1f      	ldr	r3, [pc, #124]	@ (8005ff8 <USBD_HID_DeInit+0x8c>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f001 ffcd 	bl	8007f1e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005f84:	4b1c      	ldr	r3, [pc, #112]	@ (8005ff8 <USBD_HID_DeInit+0x8c>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 020f 	and.w	r2, r3, #15
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3324      	adds	r3, #36	@ 0x24
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005f9e:	4b16      	ldr	r3, [pc, #88]	@ (8005ff8 <USBD_HID_DeInit+0x8c>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f003 020f 	and.w	r2, r3, #15
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	3326      	adds	r3, #38	@ 0x26
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	32b0      	adds	r2, #176	@ 0xb0
 8005fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d011      	beq.n	8005fee <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	32b0      	adds	r2, #176	@ 0xb0
 8005fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f002 f899 	bl	8008110 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	32b0      	adds	r2, #176	@ 0xb0
 8005fe8:	2100      	movs	r1, #0
 8005fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	200000bf 	.word	0x200000bf

08005ffc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	32b0      	adds	r2, #176	@ 0xb0
 8006010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006014:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	e0e8      	b.n	80061fa <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006030:	2b00      	cmp	r3, #0
 8006032:	d046      	beq.n	80060c2 <USBD_HID_Setup+0xc6>
 8006034:	2b20      	cmp	r3, #32
 8006036:	f040 80d8 	bne.w	80061ea <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	3b02      	subs	r3, #2
 8006040:	2b09      	cmp	r3, #9
 8006042:	d836      	bhi.n	80060b2 <USBD_HID_Setup+0xb6>
 8006044:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <USBD_HID_Setup+0x50>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	080060a3 	.word	0x080060a3
 8006050:	08006083 	.word	0x08006083
 8006054:	080060b3 	.word	0x080060b3
 8006058:	080060b3 	.word	0x080060b3
 800605c:	080060b3 	.word	0x080060b3
 8006060:	080060b3 	.word	0x080060b3
 8006064:	080060b3 	.word	0x080060b3
 8006068:	080060b3 	.word	0x080060b3
 800606c:	08006091 	.word	0x08006091
 8006070:	08006075 	.word	0x08006075
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	885b      	ldrh	r3, [r3, #2]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]
          break;
 8006080:	e01e      	b.n	80060c0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 fbe5 	bl	8007858 <USBD_CtlSendData>
          break;
 800608e:	e017      	b.n	80060c0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	885b      	ldrh	r3, [r3, #2]
 8006094:	0a1b      	lsrs	r3, r3, #8
 8006096:	b29b      	uxth	r3, r3
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	605a      	str	r2, [r3, #4]
          break;
 80060a0:	e00e      	b.n	80060c0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3304      	adds	r3, #4
 80060a6:	2201      	movs	r2, #1
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 fbd4 	bl	8007858 <USBD_CtlSendData>
          break;
 80060b0:	e006      	b.n	80060c0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 fb52 	bl	800775e <USBD_CtlError>
          ret = USBD_FAIL;
 80060ba:	2303      	movs	r3, #3
 80060bc:	75fb      	strb	r3, [r7, #23]
          break;
 80060be:	bf00      	nop
      }
      break;
 80060c0:	e09a      	b.n	80061f8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	785b      	ldrb	r3, [r3, #1]
 80060c6:	2b0b      	cmp	r3, #11
 80060c8:	f200 8086 	bhi.w	80061d8 <USBD_HID_Setup+0x1dc>
 80060cc:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <USBD_HID_Setup+0xd8>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	08006105 	.word	0x08006105
 80060d8:	080061e7 	.word	0x080061e7
 80060dc:	080061d9 	.word	0x080061d9
 80060e0:	080061d9 	.word	0x080061d9
 80060e4:	080061d9 	.word	0x080061d9
 80060e8:	080061d9 	.word	0x080061d9
 80060ec:	0800612f 	.word	0x0800612f
 80060f0:	080061d9 	.word	0x080061d9
 80060f4:	080061d9 	.word	0x080061d9
 80060f8:	080061d9 	.word	0x080061d9
 80060fc:	08006187 	.word	0x08006187
 8006100:	080061b1 	.word	0x080061b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b03      	cmp	r3, #3
 800610e:	d107      	bne.n	8006120 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006110:	f107 030a 	add.w	r3, r7, #10
 8006114:	2202      	movs	r2, #2
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fb9d 	bl	8007858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800611e:	e063      	b.n	80061e8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fb1b 	bl	800775e <USBD_CtlError>
            ret = USBD_FAIL;
 8006128:	2303      	movs	r3, #3
 800612a:	75fb      	strb	r3, [r7, #23]
          break;
 800612c:	e05c      	b.n	80061e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	885b      	ldrh	r3, [r3, #2]
 8006132:	0a1b      	lsrs	r3, r3, #8
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b22      	cmp	r3, #34	@ 0x22
 8006138:	d108      	bne.n	800614c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	88db      	ldrh	r3, [r3, #6]
 800613e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006140:	bf28      	it	cs
 8006142:	233f      	movcs	r3, #63	@ 0x3f
 8006144:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006146:	4b2f      	ldr	r3, [pc, #188]	@ (8006204 <USBD_HID_Setup+0x208>)
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e015      	b.n	8006178 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	885b      	ldrh	r3, [r3, #2]
 8006150:	0a1b      	lsrs	r3, r3, #8
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b21      	cmp	r3, #33	@ 0x21
 8006156:	d108      	bne.n	800616a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006158:	4b2b      	ldr	r3, [pc, #172]	@ (8006208 <USBD_HID_Setup+0x20c>)
 800615a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	88db      	ldrh	r3, [r3, #6]
 8006160:	2b09      	cmp	r3, #9
 8006162:	bf28      	it	cs
 8006164:	2309      	movcs	r3, #9
 8006166:	82bb      	strh	r3, [r7, #20]
 8006168:	e006      	b.n	8006178 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 faf6 	bl	800775e <USBD_CtlError>
            ret = USBD_FAIL;
 8006172:	2303      	movs	r3, #3
 8006174:	75fb      	strb	r3, [r7, #23]
            break;
 8006176:	e037      	b.n	80061e8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006178:	8abb      	ldrh	r3, [r7, #20]
 800617a:	461a      	mov	r2, r3
 800617c:	6939      	ldr	r1, [r7, #16]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 fb6a 	bl	8007858 <USBD_CtlSendData>
          break;
 8006184:	e030      	b.n	80061e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b03      	cmp	r3, #3
 8006190:	d107      	bne.n	80061a2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3308      	adds	r3, #8
 8006196:	2201      	movs	r2, #1
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fb5c 	bl	8007858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061a0:	e022      	b.n	80061e8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 fada 	bl	800775e <USBD_CtlError>
            ret = USBD_FAIL;
 80061aa:	2303      	movs	r3, #3
 80061ac:	75fb      	strb	r3, [r7, #23]
          break;
 80061ae:	e01b      	b.n	80061e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d106      	bne.n	80061ca <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	885b      	ldrh	r3, [r3, #2]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061c8:	e00e      	b.n	80061e8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 fac6 	bl	800775e <USBD_CtlError>
            ret = USBD_FAIL;
 80061d2:	2303      	movs	r3, #3
 80061d4:	75fb      	strb	r3, [r7, #23]
          break;
 80061d6:	e007      	b.n	80061e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 fabf 	bl	800775e <USBD_CtlError>
          ret = USBD_FAIL;
 80061e0:	2303      	movs	r3, #3
 80061e2:	75fb      	strb	r3, [r7, #23]
          break;
 80061e4:	e000      	b.n	80061e8 <USBD_HID_Setup+0x1ec>
          break;
 80061e6:	bf00      	nop
      }
      break;
 80061e8:	e006      	b.n	80061f8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 fab6 	bl	800775e <USBD_CtlError>
      ret = USBD_FAIL;
 80061f2:	2303      	movs	r3, #3
 80061f4:	75fb      	strb	r3, [r7, #23]
      break;
 80061f6:	bf00      	nop
  }

  return (uint8_t)ret;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000080 	.word	0x20000080
 8006208:	20000068 	.word	0x20000068

0800620c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	32b0      	adds	r2, #176	@ 0xb0
 8006224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006228:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	e014      	b.n	800625e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b03      	cmp	r3, #3
 800623e:	d10d      	bne.n	800625c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	7b1b      	ldrb	r3, [r3, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2201      	movs	r2, #1
 800624c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800624e:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <USBD_HID_SendReport+0x5c>)
 8006250:	7819      	ldrb	r1, [r3, #0]
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f001 ff09 	bl	800806e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	200000bf 	.word	0x200000bf

0800626c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006274:	2181      	movs	r1, #129	@ 0x81
 8006276:	4809      	ldr	r0, [pc, #36]	@ (800629c <USBD_HID_GetFSCfgDesc+0x30>)
 8006278:	f000 fc3b 	bl	8006af2 <USBD_GetEpDesc>
 800627c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	220a      	movs	r2, #10
 8006288:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2222      	movs	r2, #34	@ 0x22
 800628e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006290:	4b02      	ldr	r3, [pc, #8]	@ (800629c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000044 	.word	0x20000044

080062a0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80062a8:	2181      	movs	r1, #129	@ 0x81
 80062aa:	4809      	ldr	r0, [pc, #36]	@ (80062d0 <USBD_HID_GetHSCfgDesc+0x30>)
 80062ac:	f000 fc21 	bl	8006af2 <USBD_GetEpDesc>
 80062b0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2207      	movs	r2, #7
 80062bc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2222      	movs	r2, #34	@ 0x22
 80062c2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80062c4:	4b02      	ldr	r3, [pc, #8]	@ (80062d0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000044 	.word	0x20000044

080062d4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80062dc:	2181      	movs	r1, #129	@ 0x81
 80062de:	4809      	ldr	r0, [pc, #36]	@ (8006304 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80062e0:	f000 fc07 	bl	8006af2 <USBD_GetEpDesc>
 80062e4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	220a      	movs	r2, #10
 80062f0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2222      	movs	r2, #34	@ 0x22
 80062f6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80062f8:	4b02      	ldr	r3, [pc, #8]	@ (8006304 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000044 	.word	0x20000044

08006308 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	32b0      	adds	r2, #176	@ 0xb0
 800631e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006322:	2200      	movs	r2, #0
 8006324:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	220a      	movs	r2, #10
 8006340:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006342:	4b03      	ldr	r3, [pc, #12]	@ (8006350 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20000074 	.word	0x20000074

08006354 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006368:	2303      	movs	r3, #3
 800636a:	e01f      	b.n	80063ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	79fa      	ldrb	r2, [r7, #7]
 800639e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f001 fd2f 	bl	8007e04 <USBD_LL_Init>
 80063a6:	4603      	mov	r3, r0
 80063a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e025      	b.n	8006418 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	32ae      	adds	r2, #174	@ 0xae
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00f      	beq.n	8006408 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	32ae      	adds	r2, #174	@ 0xae
 80063f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	f107 020e 	add.w	r2, r7, #14
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
 8006400:	4602      	mov	r2, r0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 fd37 	bl	8007e9c <USBD_LL_Start>
 800642e:	4603      	mov	r3, r0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006440:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006442:	4618      	mov	r0, r3
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006464:	2b00      	cmp	r3, #0
 8006466:	d009      	beq.n	800647c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	78fa      	ldrb	r2, [r7, #3]
 8006472:	4611      	mov	r1, r2
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4798      	blx	r3
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	78fa      	ldrb	r2, [r7, #3]
 80064a0:	4611      	mov	r1, r2
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	4798      	blx	r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 f90c 	bl	80076ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80064e0:	461a      	mov	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064ee:	f003 031f 	and.w	r3, r3, #31
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d01a      	beq.n	800652c <USBD_LL_SetupStage+0x72>
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d822      	bhi.n	8006540 <USBD_LL_SetupStage+0x86>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <USBD_LL_SetupStage+0x4a>
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d00a      	beq.n	8006518 <USBD_LL_SetupStage+0x5e>
 8006502:	e01d      	b.n	8006540 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fb63 	bl	8006bd8 <USBD_StdDevReq>
 8006512:	4603      	mov	r3, r0
 8006514:	73fb      	strb	r3, [r7, #15]
      break;
 8006516:	e020      	b.n	800655a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fbcb 	bl	8006cbc <USBD_StdItfReq>
 8006526:	4603      	mov	r3, r0
 8006528:	73fb      	strb	r3, [r7, #15]
      break;
 800652a:	e016      	b.n	800655a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fc2d 	bl	8006d94 <USBD_StdEPReq>
 800653a:	4603      	mov	r3, r0
 800653c:	73fb      	strb	r3, [r7, #15]
      break;
 800653e:	e00c      	b.n	800655a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006546:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800654a:	b2db      	uxtb	r3, r3
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fd04 	bl	8007f5c <USBD_LL_StallEP>
 8006554:	4603      	mov	r3, r0
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	bf00      	nop
  }

  return ret;
 800655a:	7bfb      	ldrb	r3, [r7, #15]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	460b      	mov	r3, r1
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d16e      	bne.n	800665a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006582:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800658a:	2b03      	cmp	r3, #3
 800658c:	f040 8098 	bne.w	80066c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	429a      	cmp	r2, r3
 800659a:	d913      	bls.n	80065c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	1ad2      	subs	r2, r2, r3
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	4293      	cmp	r3, r2
 80065b4:	bf28      	it	cs
 80065b6:	4613      	movcs	r3, r2
 80065b8:	461a      	mov	r2, r3
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f001 f977 	bl	80078b0 <USBD_CtlContinueRx>
 80065c2:	e07d      	b.n	80066c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80065ca:	f003 031f 	and.w	r3, r3, #31
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d014      	beq.n	80065fc <USBD_LL_DataOutStage+0x98>
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d81d      	bhi.n	8006612 <USBD_LL_DataOutStage+0xae>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <USBD_LL_DataOutStage+0x7c>
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d003      	beq.n	80065e6 <USBD_LL_DataOutStage+0x82>
 80065de:	e018      	b.n	8006612 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	75bb      	strb	r3, [r7, #22]
            break;
 80065e4:	e018      	b.n	8006618 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	4619      	mov	r1, r3
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fa64 	bl	8006abe <USBD_CoreFindIF>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75bb      	strb	r3, [r7, #22]
            break;
 80065fa:	e00d      	b.n	8006618 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006602:	b2db      	uxtb	r3, r3
 8006604:	4619      	mov	r1, r3
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 fa66 	bl	8006ad8 <USBD_CoreFindEP>
 800660c:	4603      	mov	r3, r0
 800660e:	75bb      	strb	r3, [r7, #22]
            break;
 8006610:	e002      	b.n	8006618 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	75bb      	strb	r3, [r7, #22]
            break;
 8006616:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006618:	7dbb      	ldrb	r3, [r7, #22]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d119      	bne.n	8006652 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b03      	cmp	r3, #3
 8006628:	d113      	bne.n	8006652 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800662a:	7dba      	ldrb	r2, [r7, #22]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	32ae      	adds	r2, #174	@ 0xae
 8006630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800663a:	7dba      	ldrb	r2, [r7, #22]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006642:	7dba      	ldrb	r2, [r7, #22]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	32ae      	adds	r2, #174	@ 0xae
 8006648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f001 f93d 	bl	80078d2 <USBD_CtlSendStatus>
 8006658:	e032      	b.n	80066c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800665a:	7afb      	ldrb	r3, [r7, #11]
 800665c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006660:	b2db      	uxtb	r3, r3
 8006662:	4619      	mov	r1, r3
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 fa37 	bl	8006ad8 <USBD_CoreFindEP>
 800666a:	4603      	mov	r3, r0
 800666c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800666e:	7dbb      	ldrb	r3, [r7, #22]
 8006670:	2bff      	cmp	r3, #255	@ 0xff
 8006672:	d025      	beq.n	80066c0 <USBD_LL_DataOutStage+0x15c>
 8006674:	7dbb      	ldrb	r3, [r7, #22]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d122      	bne.n	80066c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b03      	cmp	r3, #3
 8006684:	d117      	bne.n	80066b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006686:	7dba      	ldrb	r2, [r7, #22]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	32ae      	adds	r2, #174	@ 0xae
 800668c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00f      	beq.n	80066b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006696:	7dba      	ldrb	r2, [r7, #22]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800669e:	7dba      	ldrb	r2, [r7, #22]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	32ae      	adds	r2, #174	@ 0xae
 80066a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	7afa      	ldrb	r2, [r7, #11]
 80066ac:	4611      	mov	r1, r2
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	4798      	blx	r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	e000      	b.n	80066c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b086      	sub	sp, #24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	460b      	mov	r3, r1
 80066d4:	607a      	str	r2, [r7, #4]
 80066d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d16f      	bne.n	80067be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3314      	adds	r3, #20
 80066e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d15a      	bne.n	80067a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d914      	bls.n	8006724 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	461a      	mov	r2, r3
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f001 f8bc 	bl	800788e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006716:	2300      	movs	r3, #0
 8006718:	2200      	movs	r2, #0
 800671a:	2100      	movs	r1, #0
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f001 fcc7 	bl	80080b0 <USBD_LL_PrepareReceive>
 8006722:	e03f      	b.n	80067a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	429a      	cmp	r2, r3
 800672e:	d11c      	bne.n	800676a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006738:	429a      	cmp	r2, r3
 800673a:	d316      	bcc.n	800676a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006746:	429a      	cmp	r2, r3
 8006748:	d20f      	bcs.n	800676a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800674a:	2200      	movs	r2, #0
 800674c:	2100      	movs	r1, #0
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f001 f89d 	bl	800788e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800675c:	2300      	movs	r3, #0
 800675e:	2200      	movs	r2, #0
 8006760:	2100      	movs	r1, #0
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f001 fca4 	bl	80080b0 <USBD_LL_PrepareReceive>
 8006768:	e01c      	b.n	80067a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b03      	cmp	r3, #3
 8006774:	d10f      	bne.n	8006796 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006796:	2180      	movs	r1, #128	@ 0x80
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f001 fbdf 	bl	8007f5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f001 f8aa 	bl	80078f8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d03a      	beq.n	8006824 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fe42 	bl	8006438 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80067bc:	e032      	b.n	8006824 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80067be:	7afb      	ldrb	r3, [r7, #11]
 80067c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	4619      	mov	r1, r3
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f985 	bl	8006ad8 <USBD_CoreFindEP>
 80067ce:	4603      	mov	r3, r0
 80067d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	2bff      	cmp	r3, #255	@ 0xff
 80067d6:	d025      	beq.n	8006824 <USBD_LL_DataInStage+0x15a>
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d122      	bne.n	8006824 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d11c      	bne.n	8006824 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80067ea:	7dfa      	ldrb	r2, [r7, #23]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	32ae      	adds	r2, #174	@ 0xae
 80067f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80067fa:	7dfa      	ldrb	r2, [r7, #23]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006802:	7dfa      	ldrb	r2, [r7, #23]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	32ae      	adds	r2, #174	@ 0xae
 8006808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	7afa      	ldrb	r2, [r7, #11]
 8006810:	4611      	mov	r1, r2
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	4798      	blx	r3
 8006816:	4603      	mov	r3, r0
 8006818:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800681a:	7dbb      	ldrb	r3, [r7, #22]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006820:	7dbb      	ldrb	r3, [r7, #22]
 8006822:	e000      	b.n	8006826 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d014      	beq.n	8006894 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00e      	beq.n	8006894 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6852      	ldr	r2, [r2, #4]
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	4611      	mov	r1, r2
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006894:	2340      	movs	r3, #64	@ 0x40
 8006896:	2200      	movs	r2, #0
 8006898:	2100      	movs	r1, #0
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fb19 	bl	8007ed2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2240      	movs	r2, #64	@ 0x40
 80068ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068b0:	2340      	movs	r3, #64	@ 0x40
 80068b2:	2200      	movs	r2, #0
 80068b4:	2180      	movs	r1, #128	@ 0x80
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fb0b 	bl	8007ed2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2240      	movs	r2, #64	@ 0x40
 80068c6:	621a      	str	r2, [r3, #32]

  return ret;
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	78fa      	ldrb	r2, [r7, #3]
 80068e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b04      	cmp	r3, #4
 8006904:	d006      	beq.n	8006914 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800690c:	b2da      	uxtb	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2204      	movs	r2, #4
 8006918:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b04      	cmp	r3, #4
 800693c:	d106      	bne.n	800694c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006944:	b2da      	uxtb	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b03      	cmp	r3, #3
 800696c:	d110      	bne.n	8006990 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	32ae      	adds	r2, #174	@ 0xae
 80069b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e01c      	b.n	80069f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d115      	bne.n	80069f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	32ae      	adds	r2, #174	@ 0xae
 80069d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	32ae      	adds	r2, #174	@ 0xae
 80069e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	78fa      	ldrb	r2, [r7, #3]
 80069ee:	4611      	mov	r1, r2
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	32ae      	adds	r2, #174	@ 0xae
 8006a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e01c      	b.n	8006a5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d115      	bne.n	8006a58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	32ae      	adds	r2, #174	@ 0xae
 8006a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	32ae      	adds	r2, #174	@ 0xae
 8006a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	78fa      	ldrb	r2, [r7, #3]
 8006a52:	4611      	mov	r1, r2
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00e      	beq.n	8006ab4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6852      	ldr	r2, [r2, #4]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006aca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ae4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b086      	sub	sp, #24
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	460b      	mov	r3, r1
 8006afc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	885b      	ldrh	r3, [r3, #2]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d91f      	bls.n	8006b58 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b1e:	e013      	b.n	8006b48 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b20:	f107 030a 	add.w	r3, r7, #10
 8006b24:	4619      	mov	r1, r3
 8006b26:	6978      	ldr	r0, [r7, #20]
 8006b28:	f000 f81b 	bl	8006b62 <USBD_GetNextDesc>
 8006b2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	2b05      	cmp	r3, #5
 8006b34:	d108      	bne.n	8006b48 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	789b      	ldrb	r3, [r3, #2]
 8006b3e:	78fa      	ldrb	r2, [r7, #3]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d008      	beq.n	8006b56 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	885b      	ldrh	r3, [r3, #2]
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	897b      	ldrh	r3, [r7, #10]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d8e5      	bhi.n	8006b20 <USBD_GetEpDesc+0x2e>
 8006b54:	e000      	b.n	8006b58 <USBD_GetEpDesc+0x66>
          break;
 8006b56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006b58:	693b      	ldr	r3, [r7, #16]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	4413      	add	r3, r2
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4413      	add	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b087      	sub	sp, #28
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bb8:	8a3b      	ldrh	r3, [r7, #16]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	b21a      	sxth	r2, r3
 8006bbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	b21b      	sxth	r3, r3
 8006bc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bc8:	89fb      	ldrh	r3, [r7, #14]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bee:	2b40      	cmp	r3, #64	@ 0x40
 8006bf0:	d005      	beq.n	8006bfe <USBD_StdDevReq+0x26>
 8006bf2:	2b40      	cmp	r3, #64	@ 0x40
 8006bf4:	d857      	bhi.n	8006ca6 <USBD_StdDevReq+0xce>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00f      	beq.n	8006c1a <USBD_StdDevReq+0x42>
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d153      	bne.n	8006ca6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	32ae      	adds	r2, #174	@ 0xae
 8006c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
 8006c14:	4603      	mov	r3, r0
 8006c16:	73fb      	strb	r3, [r7, #15]
      break;
 8006c18:	e04a      	b.n	8006cb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	2b09      	cmp	r3, #9
 8006c20:	d83b      	bhi.n	8006c9a <USBD_StdDevReq+0xc2>
 8006c22:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <USBD_StdDevReq+0x50>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006c91 	.word	0x08006c91
 8006c30:	08006c9b 	.word	0x08006c9b
 8006c34:	08006c87 	.word	0x08006c87
 8006c38:	08006c9b 	.word	0x08006c9b
 8006c3c:	08006c5b 	.word	0x08006c5b
 8006c40:	08006c51 	.word	0x08006c51
 8006c44:	08006c9b 	.word	0x08006c9b
 8006c48:	08006c73 	.word	0x08006c73
 8006c4c:	08006c65 	.word	0x08006c65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa3c 	bl	80070d0 <USBD_GetDescriptor>
          break;
 8006c58:	e024      	b.n	8006ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fba1 	bl	80073a4 <USBD_SetAddress>
          break;
 8006c62:	e01f      	b.n	8006ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fbe0 	bl	800742c <USBD_SetConfig>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73fb      	strb	r3, [r7, #15]
          break;
 8006c70:	e018      	b.n	8006ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fc83 	bl	8007580 <USBD_GetConfig>
          break;
 8006c7a:	e013      	b.n	8006ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fcb4 	bl	80075ec <USBD_GetStatus>
          break;
 8006c84:	e00e      	b.n	8006ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fce3 	bl	8007654 <USBD_SetFeature>
          break;
 8006c8e:	e009      	b.n	8006ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fd07 	bl	80076a6 <USBD_ClrFeature>
          break;
 8006c98:	e004      	b.n	8006ca4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fd5e 	bl	800775e <USBD_CtlError>
          break;
 8006ca2:	bf00      	nop
      }
      break;
 8006ca4:	e004      	b.n	8006cb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fd58 	bl	800775e <USBD_CtlError>
      break;
 8006cae:	bf00      	nop
  }

  return ret;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop

08006cbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cd2:	2b40      	cmp	r3, #64	@ 0x40
 8006cd4:	d005      	beq.n	8006ce2 <USBD_StdItfReq+0x26>
 8006cd6:	2b40      	cmp	r3, #64	@ 0x40
 8006cd8:	d852      	bhi.n	8006d80 <USBD_StdItfReq+0xc4>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <USBD_StdItfReq+0x26>
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d14e      	bne.n	8006d80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d840      	bhi.n	8006d72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	889b      	ldrh	r3, [r3, #4]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d836      	bhi.n	8006d68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	889b      	ldrh	r3, [r3, #4]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fedb 	bl	8006abe <USBD_CoreFindIF>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	2bff      	cmp	r3, #255	@ 0xff
 8006d10:	d01d      	beq.n	8006d4e <USBD_StdItfReq+0x92>
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d11a      	bne.n	8006d4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d18:	7bba      	ldrb	r2, [r7, #14]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	32ae      	adds	r2, #174	@ 0xae
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00f      	beq.n	8006d48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d28:	7bba      	ldrb	r2, [r7, #14]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d30:	7bba      	ldrb	r2, [r7, #14]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	32ae      	adds	r2, #174	@ 0xae
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d46:	e004      	b.n	8006d52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d4c:	e001      	b.n	8006d52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	88db      	ldrh	r3, [r3, #6]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d110      	bne.n	8006d7c <USBD_StdItfReq+0xc0>
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10d      	bne.n	8006d7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fdb6 	bl	80078d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d66:	e009      	b.n	8006d7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fcf7 	bl	800775e <USBD_CtlError>
          break;
 8006d70:	e004      	b.n	8006d7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fcf2 	bl	800775e <USBD_CtlError>
          break;
 8006d7a:	e000      	b.n	8006d7e <USBD_StdItfReq+0xc2>
          break;
 8006d7c:	bf00      	nop
      }
      break;
 8006d7e:	e004      	b.n	8006d8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fceb 	bl	800775e <USBD_CtlError>
      break;
 8006d88:	bf00      	nop
  }

  return ret;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	889b      	ldrh	r3, [r3, #4]
 8006da6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006db0:	2b40      	cmp	r3, #64	@ 0x40
 8006db2:	d007      	beq.n	8006dc4 <USBD_StdEPReq+0x30>
 8006db4:	2b40      	cmp	r3, #64	@ 0x40
 8006db6:	f200 817f 	bhi.w	80070b8 <USBD_StdEPReq+0x324>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d02a      	beq.n	8006e14 <USBD_StdEPReq+0x80>
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	f040 817a 	bne.w	80070b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff fe85 	bl	8006ad8 <USBD_CoreFindEP>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dd2:	7b7b      	ldrb	r3, [r7, #13]
 8006dd4:	2bff      	cmp	r3, #255	@ 0xff
 8006dd6:	f000 8174 	beq.w	80070c2 <USBD_StdEPReq+0x32e>
 8006dda:	7b7b      	ldrb	r3, [r7, #13]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 8170 	bne.w	80070c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006de2:	7b7a      	ldrb	r2, [r7, #13]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006dea:	7b7a      	ldrb	r2, [r7, #13]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	32ae      	adds	r2, #174	@ 0xae
 8006df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 8163 	beq.w	80070c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006dfc:	7b7a      	ldrb	r2, [r7, #13]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	32ae      	adds	r2, #174	@ 0xae
 8006e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	4798      	blx	r3
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e12:	e156      	b.n	80070c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d008      	beq.n	8006e2e <USBD_StdEPReq+0x9a>
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	f300 8145 	bgt.w	80070ac <USBD_StdEPReq+0x318>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 809b 	beq.w	8006f5e <USBD_StdEPReq+0x1ca>
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d03c      	beq.n	8006ea6 <USBD_StdEPReq+0x112>
 8006e2c:	e13e      	b.n	80070ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d002      	beq.n	8006e40 <USBD_StdEPReq+0xac>
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d016      	beq.n	8006e6c <USBD_StdEPReq+0xd8>
 8006e3e:	e02c      	b.n	8006e9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00d      	beq.n	8006e62 <USBD_StdEPReq+0xce>
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	2b80      	cmp	r3, #128	@ 0x80
 8006e4a:	d00a      	beq.n	8006e62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 f883 	bl	8007f5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e56:	2180      	movs	r1, #128	@ 0x80
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 f87f 	bl	8007f5c <USBD_LL_StallEP>
 8006e5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e60:	e020      	b.n	8006ea4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fc7a 	bl	800775e <USBD_CtlError>
              break;
 8006e6a:	e01b      	b.n	8006ea4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	885b      	ldrh	r3, [r3, #2]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10e      	bne.n	8006e92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00b      	beq.n	8006e92 <USBD_StdEPReq+0xfe>
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b80      	cmp	r3, #128	@ 0x80
 8006e7e:	d008      	beq.n	8006e92 <USBD_StdEPReq+0xfe>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	88db      	ldrh	r3, [r3, #6]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 f865 	bl	8007f5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fd1d 	bl	80078d2 <USBD_CtlSendStatus>

              break;
 8006e98:	e004      	b.n	8006ea4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fc5e 	bl	800775e <USBD_CtlError>
              break;
 8006ea2:	bf00      	nop
          }
          break;
 8006ea4:	e107      	b.n	80070b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d002      	beq.n	8006eb8 <USBD_StdEPReq+0x124>
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d016      	beq.n	8006ee4 <USBD_StdEPReq+0x150>
 8006eb6:	e04b      	b.n	8006f50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00d      	beq.n	8006eda <USBD_StdEPReq+0x146>
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b80      	cmp	r3, #128	@ 0x80
 8006ec2:	d00a      	beq.n	8006eda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 f847 	bl	8007f5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ece:	2180      	movs	r1, #128	@ 0x80
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 f843 	bl	8007f5c <USBD_LL_StallEP>
 8006ed6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ed8:	e040      	b.n	8006f5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fc3e 	bl	800775e <USBD_CtlError>
              break;
 8006ee2:	e03b      	b.n	8006f5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	885b      	ldrh	r3, [r3, #2]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d136      	bne.n	8006f5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 f84d 	bl	8007f9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fce6 	bl	80078d2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff fde4 	bl	8006ad8 <USBD_CoreFindEP>
 8006f10:	4603      	mov	r3, r0
 8006f12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f14:	7b7b      	ldrb	r3, [r7, #13]
 8006f16:	2bff      	cmp	r3, #255	@ 0xff
 8006f18:	d01f      	beq.n	8006f5a <USBD_StdEPReq+0x1c6>
 8006f1a:	7b7b      	ldrb	r3, [r7, #13]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d11c      	bne.n	8006f5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f20:	7b7a      	ldrb	r2, [r7, #13]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f28:	7b7a      	ldrb	r2, [r7, #13]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	32ae      	adds	r2, #174	@ 0xae
 8006f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d010      	beq.n	8006f5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f38:	7b7a      	ldrb	r2, [r7, #13]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32ae      	adds	r2, #174	@ 0xae
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006f4e:	e004      	b.n	8006f5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fc03 	bl	800775e <USBD_CtlError>
              break;
 8006f58:	e000      	b.n	8006f5c <USBD_StdEPReq+0x1c8>
              break;
 8006f5a:	bf00      	nop
          }
          break;
 8006f5c:	e0ab      	b.n	80070b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d002      	beq.n	8006f70 <USBD_StdEPReq+0x1dc>
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d032      	beq.n	8006fd4 <USBD_StdEPReq+0x240>
 8006f6e:	e097      	b.n	80070a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <USBD_StdEPReq+0x1f2>
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	2b80      	cmp	r3, #128	@ 0x80
 8006f7a:	d004      	beq.n	8006f86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fbed 	bl	800775e <USBD_CtlError>
                break;
 8006f84:	e091      	b.n	80070aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	da0b      	bge.n	8006fa6 <USBD_StdEPReq+0x212>
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	3310      	adds	r3, #16
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	e00b      	b.n	8006fbe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	4413      	add	r3, r2
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fc43 	bl	8007858 <USBD_CtlSendData>
              break;
 8006fd2:	e06a      	b.n	80070aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	da11      	bge.n	8007000 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	f003 020f 	and.w	r2, r3, #15
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	3324      	adds	r3, #36	@ 0x24
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d117      	bne.n	8007026 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fbb0 	bl	800775e <USBD_CtlError>
                  break;
 8006ffe:	e054      	b.n	80070aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	f003 020f 	and.w	r2, r3, #15
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fb9d 	bl	800775e <USBD_CtlError>
                  break;
 8007024:	e041      	b.n	80070aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007026:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800702a:	2b00      	cmp	r3, #0
 800702c:	da0b      	bge.n	8007046 <USBD_StdEPReq+0x2b2>
 800702e:	7bbb      	ldrb	r3, [r7, #14]
 8007030:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	3310      	adds	r3, #16
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	4413      	add	r3, r2
 8007042:	3304      	adds	r3, #4
 8007044:	e00b      	b.n	800705e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	4413      	add	r3, r2
 800705c:	3304      	adds	r3, #4
 800705e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <USBD_StdEPReq+0x2d8>
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2b80      	cmp	r3, #128	@ 0x80
 800706a:	d103      	bne.n	8007074 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	e00e      	b.n	8007092 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 ffad 	bl	8007fd8 <USBD_LL_IsStallEP>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	e002      	b.n	8007092 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2202      	movs	r2, #2
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fbdd 	bl	8007858 <USBD_CtlSendData>
              break;
 800709e:	e004      	b.n	80070aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fb5b 	bl	800775e <USBD_CtlError>
              break;
 80070a8:	bf00      	nop
          }
          break;
 80070aa:	e004      	b.n	80070b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fb55 	bl	800775e <USBD_CtlError>
          break;
 80070b4:	bf00      	nop
      }
      break;
 80070b6:	e005      	b.n	80070c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fb4f 	bl	800775e <USBD_CtlError>
      break;
 80070c0:	e000      	b.n	80070c4 <USBD_StdEPReq+0x330>
      break;
 80070c2:	bf00      	nop
  }

  return ret;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	2b06      	cmp	r3, #6
 80070f2:	f200 8128 	bhi.w	8007346 <USBD_GetDescriptor+0x276>
 80070f6:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <USBD_GetDescriptor+0x2c>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	08007119 	.word	0x08007119
 8007100:	08007131 	.word	0x08007131
 8007104:	08007171 	.word	0x08007171
 8007108:	08007347 	.word	0x08007347
 800710c:	08007347 	.word	0x08007347
 8007110:	080072e7 	.word	0x080072e7
 8007114:	08007313 	.word	0x08007313
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	7c12      	ldrb	r2, [r2, #16]
 8007124:	f107 0108 	add.w	r1, r7, #8
 8007128:	4610      	mov	r0, r2
 800712a:	4798      	blx	r3
 800712c:	60f8      	str	r0, [r7, #12]
      break;
 800712e:	e112      	b.n	8007356 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	7c1b      	ldrb	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10d      	bne.n	8007154 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800713e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007140:	f107 0208 	add.w	r2, r7, #8
 8007144:	4610      	mov	r0, r2
 8007146:	4798      	blx	r3
 8007148:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	2202      	movs	r2, #2
 8007150:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007152:	e100      	b.n	8007356 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800715a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715c:	f107 0208 	add.w	r2, r7, #8
 8007160:	4610      	mov	r0, r2
 8007162:	4798      	blx	r3
 8007164:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3301      	adds	r3, #1
 800716a:	2202      	movs	r2, #2
 800716c:	701a      	strb	r2, [r3, #0]
      break;
 800716e:	e0f2      	b.n	8007356 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	885b      	ldrh	r3, [r3, #2]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b05      	cmp	r3, #5
 8007178:	f200 80ac 	bhi.w	80072d4 <USBD_GetDescriptor+0x204>
 800717c:	a201      	add	r2, pc, #4	@ (adr r2, 8007184 <USBD_GetDescriptor+0xb4>)
 800717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007182:	bf00      	nop
 8007184:	0800719d 	.word	0x0800719d
 8007188:	080071d1 	.word	0x080071d1
 800718c:	08007205 	.word	0x08007205
 8007190:	08007239 	.word	0x08007239
 8007194:	0800726d 	.word	0x0800726d
 8007198:	080072a1 	.word	0x080072a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00b      	beq.n	80071c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	7c12      	ldrb	r2, [r2, #16]
 80071b4:	f107 0108 	add.w	r1, r7, #8
 80071b8:	4610      	mov	r0, r2
 80071ba:	4798      	blx	r3
 80071bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071be:	e091      	b.n	80072e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 facb 	bl	800775e <USBD_CtlError>
            err++;
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	3301      	adds	r3, #1
 80071cc:	72fb      	strb	r3, [r7, #11]
          break;
 80071ce:	e089      	b.n	80072e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	7c12      	ldrb	r2, [r2, #16]
 80071e8:	f107 0108 	add.w	r1, r7, #8
 80071ec:	4610      	mov	r0, r2
 80071ee:	4798      	blx	r3
 80071f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071f2:	e077      	b.n	80072e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fab1 	bl	800775e <USBD_CtlError>
            err++;
 80071fc:	7afb      	ldrb	r3, [r7, #11]
 80071fe:	3301      	adds	r3, #1
 8007200:	72fb      	strb	r3, [r7, #11]
          break;
 8007202:	e06f      	b.n	80072e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00b      	beq.n	8007228 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	7c12      	ldrb	r2, [r2, #16]
 800721c:	f107 0108 	add.w	r1, r7, #8
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007226:	e05d      	b.n	80072e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa97 	bl	800775e <USBD_CtlError>
            err++;
 8007230:	7afb      	ldrb	r3, [r7, #11]
 8007232:	3301      	adds	r3, #1
 8007234:	72fb      	strb	r3, [r7, #11]
          break;
 8007236:	e055      	b.n	80072e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	7c12      	ldrb	r2, [r2, #16]
 8007250:	f107 0108 	add.w	r1, r7, #8
 8007254:	4610      	mov	r0, r2
 8007256:	4798      	blx	r3
 8007258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800725a:	e043      	b.n	80072e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa7d 	bl	800775e <USBD_CtlError>
            err++;
 8007264:	7afb      	ldrb	r3, [r7, #11]
 8007266:	3301      	adds	r3, #1
 8007268:	72fb      	strb	r3, [r7, #11]
          break;
 800726a:	e03b      	b.n	80072e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	7c12      	ldrb	r2, [r2, #16]
 8007284:	f107 0108 	add.w	r1, r7, #8
 8007288:	4610      	mov	r0, r2
 800728a:	4798      	blx	r3
 800728c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800728e:	e029      	b.n	80072e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fa63 	bl	800775e <USBD_CtlError>
            err++;
 8007298:	7afb      	ldrb	r3, [r7, #11]
 800729a:	3301      	adds	r3, #1
 800729c:	72fb      	strb	r3, [r7, #11]
          break;
 800729e:	e021      	b.n	80072e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	7c12      	ldrb	r2, [r2, #16]
 80072b8:	f107 0108 	add.w	r1, r7, #8
 80072bc:	4610      	mov	r0, r2
 80072be:	4798      	blx	r3
 80072c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072c2:	e00f      	b.n	80072e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa49 	bl	800775e <USBD_CtlError>
            err++;
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	3301      	adds	r3, #1
 80072d0:	72fb      	strb	r3, [r7, #11]
          break;
 80072d2:	e007      	b.n	80072e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa41 	bl	800775e <USBD_CtlError>
          err++;
 80072dc:	7afb      	ldrb	r3, [r7, #11]
 80072de:	3301      	adds	r3, #1
 80072e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80072e2:	bf00      	nop
      }
      break;
 80072e4:	e037      	b.n	8007356 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	7c1b      	ldrb	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d109      	bne.n	8007302 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f6:	f107 0208 	add.w	r2, r7, #8
 80072fa:	4610      	mov	r0, r2
 80072fc:	4798      	blx	r3
 80072fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007300:	e029      	b.n	8007356 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fa2a 	bl	800775e <USBD_CtlError>
        err++;
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	3301      	adds	r3, #1
 800730e:	72fb      	strb	r3, [r7, #11]
      break;
 8007310:	e021      	b.n	8007356 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	7c1b      	ldrb	r3, [r3, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10d      	bne.n	8007336 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007322:	f107 0208 	add.w	r2, r7, #8
 8007326:	4610      	mov	r0, r2
 8007328:	4798      	blx	r3
 800732a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	2207      	movs	r2, #7
 8007332:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007334:	e00f      	b.n	8007356 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fa10 	bl	800775e <USBD_CtlError>
        err++;
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	3301      	adds	r3, #1
 8007342:	72fb      	strb	r3, [r7, #11]
      break;
 8007344:	e007      	b.n	8007356 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fa08 	bl	800775e <USBD_CtlError>
      err++;
 800734e:	7afb      	ldrb	r3, [r7, #11]
 8007350:	3301      	adds	r3, #1
 8007352:	72fb      	strb	r3, [r7, #11]
      break;
 8007354:	bf00      	nop
  }

  if (err != 0U)
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d11e      	bne.n	800739a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	88db      	ldrh	r3, [r3, #6]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d016      	beq.n	8007392 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007364:	893b      	ldrh	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00e      	beq.n	8007388 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	88da      	ldrh	r2, [r3, #6]
 800736e:	893b      	ldrh	r3, [r7, #8]
 8007370:	4293      	cmp	r3, r2
 8007372:	bf28      	it	cs
 8007374:	4613      	movcs	r3, r2
 8007376:	b29b      	uxth	r3, r3
 8007378:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800737a:	893b      	ldrh	r3, [r7, #8]
 800737c:	461a      	mov	r2, r3
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa69 	bl	8007858 <USBD_CtlSendData>
 8007386:	e009      	b.n	800739c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f9e7 	bl	800775e <USBD_CtlError>
 8007390:	e004      	b.n	800739c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa9d 	bl	80078d2 <USBD_CtlSendStatus>
 8007398:	e000      	b.n	800739c <USBD_GetDescriptor+0x2cc>
    return;
 800739a:	bf00      	nop
  }
}
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop

080073a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	889b      	ldrh	r3, [r3, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d131      	bne.n	800741a <USBD_SetAddress+0x76>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	88db      	ldrh	r3, [r3, #6]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d12d      	bne.n	800741a <USBD_SetAddress+0x76>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	885b      	ldrh	r3, [r3, #2]
 80073c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80073c4:	d829      	bhi.n	800741a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	885b      	ldrh	r3, [r3, #2]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d104      	bne.n	80073e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f9bc 	bl	800775e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e6:	e01d      	b.n	8007424 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7bfa      	ldrb	r2, [r7, #15]
 80073ec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fe1b 	bl	8008030 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa69 	bl	80078d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2202      	movs	r2, #2
 800740a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740e:	e009      	b.n	8007424 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007418:	e004      	b.n	8007424 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f99e 	bl	800775e <USBD_CtlError>
  }
}
 8007422:	bf00      	nop
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	885b      	ldrh	r3, [r3, #2]
 800743e:	b2da      	uxtb	r2, r3
 8007440:	4b4e      	ldr	r3, [pc, #312]	@ (800757c <USBD_SetConfig+0x150>)
 8007442:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007444:	4b4d      	ldr	r3, [pc, #308]	@ (800757c <USBD_SetConfig+0x150>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d905      	bls.n	8007458 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f985 	bl	800775e <USBD_CtlError>
    return USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	e08c      	b.n	8007572 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d002      	beq.n	800746a <USBD_SetConfig+0x3e>
 8007464:	2b03      	cmp	r3, #3
 8007466:	d029      	beq.n	80074bc <USBD_SetConfig+0x90>
 8007468:	e075      	b.n	8007556 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800746a:	4b44      	ldr	r3, [pc, #272]	@ (800757c <USBD_SetConfig+0x150>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d020      	beq.n	80074b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007472:	4b42      	ldr	r3, [pc, #264]	@ (800757c <USBD_SetConfig+0x150>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800747c:	4b3f      	ldr	r3, [pc, #252]	@ (800757c <USBD_SetConfig+0x150>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fe ffe3 	bl	800644e <USBD_SetClassConfig>
 8007488:	4603      	mov	r3, r0
 800748a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d008      	beq.n	80074a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f962 	bl	800775e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074a2:	e065      	b.n	8007570 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fa14 	bl	80078d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2203      	movs	r2, #3
 80074ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80074b2:	e05d      	b.n	8007570 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fa0c 	bl	80078d2 <USBD_CtlSendStatus>
      break;
 80074ba:	e059      	b.n	8007570 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074bc:	4b2f      	ldr	r3, [pc, #188]	@ (800757c <USBD_SetConfig+0x150>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d112      	bne.n	80074ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80074cc:	4b2b      	ldr	r3, [pc, #172]	@ (800757c <USBD_SetConfig+0x150>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074d6:	4b29      	ldr	r3, [pc, #164]	@ (800757c <USBD_SetConfig+0x150>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fe ffd2 	bl	8006486 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f9f5 	bl	80078d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074e8:	e042      	b.n	8007570 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80074ea:	4b24      	ldr	r3, [pc, #144]	@ (800757c <USBD_SetConfig+0x150>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d02a      	beq.n	800754e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7fe ffc0 	bl	8006486 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007506:	4b1d      	ldr	r3, [pc, #116]	@ (800757c <USBD_SetConfig+0x150>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007510:	4b1a      	ldr	r3, [pc, #104]	@ (800757c <USBD_SetConfig+0x150>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fe ff99 	bl	800644e <USBD_SetClassConfig>
 800751c:	4603      	mov	r3, r0
 800751e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00f      	beq.n	8007546 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f918 	bl	800775e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fe ffa5 	bl	8006486 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007544:	e014      	b.n	8007570 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f9c3 	bl	80078d2 <USBD_CtlSendStatus>
      break;
 800754c:	e010      	b.n	8007570 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f9bf 	bl	80078d2 <USBD_CtlSendStatus>
      break;
 8007554:	e00c      	b.n	8007570 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f900 	bl	800775e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800755e:	4b07      	ldr	r3, [pc, #28]	@ (800757c <USBD_SetConfig+0x150>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7fe ff8e 	bl	8006486 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800756a:	2303      	movs	r3, #3
 800756c:	73fb      	strb	r3, [r7, #15]
      break;
 800756e:	bf00      	nop
  }

  return ret;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20002118 	.word	0x20002118

08007580 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	88db      	ldrh	r3, [r3, #6]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d004      	beq.n	800759c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f8e2 	bl	800775e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800759a:	e023      	b.n	80075e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	dc02      	bgt.n	80075ae <USBD_GetConfig+0x2e>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	dc03      	bgt.n	80075b4 <USBD_GetConfig+0x34>
 80075ac:	e015      	b.n	80075da <USBD_GetConfig+0x5a>
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d00b      	beq.n	80075ca <USBD_GetConfig+0x4a>
 80075b2:	e012      	b.n	80075da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3308      	adds	r3, #8
 80075be:	2201      	movs	r2, #1
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f948 	bl	8007858 <USBD_CtlSendData>
        break;
 80075c8:	e00c      	b.n	80075e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	2201      	movs	r2, #1
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f940 	bl	8007858 <USBD_CtlSendData>
        break;
 80075d8:	e004      	b.n	80075e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f8be 	bl	800775e <USBD_CtlError>
        break;
 80075e2:	bf00      	nop
}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	2b02      	cmp	r3, #2
 8007602:	d81e      	bhi.n	8007642 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	88db      	ldrh	r3, [r3, #6]
 8007608:	2b02      	cmp	r3, #2
 800760a:	d004      	beq.n	8007616 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f8a5 	bl	800775e <USBD_CtlError>
        break;
 8007614:	e01a      	b.n	800764c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f043 0202 	orr.w	r2, r3, #2
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	330c      	adds	r3, #12
 8007636:	2202      	movs	r2, #2
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f90c 	bl	8007858 <USBD_CtlSendData>
      break;
 8007640:	e004      	b.n	800764c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f88a 	bl	800775e <USBD_CtlError>
      break;
 800764a:	bf00      	nop
  }
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	885b      	ldrh	r3, [r3, #2]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d107      	bne.n	8007676 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f92f 	bl	80078d2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007674:	e013      	b.n	800769e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	885b      	ldrh	r3, [r3, #2]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d10b      	bne.n	8007696 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	889b      	ldrh	r3, [r3, #4]
 8007682:	0a1b      	lsrs	r3, r3, #8
 8007684:	b29b      	uxth	r3, r3
 8007686:	b2da      	uxtb	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f91f 	bl	80078d2 <USBD_CtlSendStatus>
}
 8007694:	e003      	b.n	800769e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f860 	bl	800775e <USBD_CtlError>
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d80b      	bhi.n	80076d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	885b      	ldrh	r3, [r3, #2]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d10c      	bne.n	80076e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f8ff 	bl	80078d2 <USBD_CtlSendStatus>
      }
      break;
 80076d4:	e004      	b.n	80076e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f840 	bl	800775e <USBD_CtlError>
      break;
 80076de:	e000      	b.n	80076e2 <USBD_ClrFeature+0x3c>
      break;
 80076e0:	bf00      	nop
  }
}
 80076e2:	bf00      	nop
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	781a      	ldrb	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3301      	adds	r3, #1
 8007704:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	781a      	ldrb	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3301      	adds	r3, #1
 8007712:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7ff fa40 	bl	8006b9a <SWAPBYTE>
 800771a:	4603      	mov	r3, r0
 800771c:	461a      	mov	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3301      	adds	r3, #1
 800772c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff fa33 	bl	8006b9a <SWAPBYTE>
 8007734:	4603      	mov	r3, r0
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3301      	adds	r3, #1
 8007740:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f7ff fa26 	bl	8006b9a <SWAPBYTE>
 800774e:	4603      	mov	r3, r0
 8007750:	461a      	mov	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	80da      	strh	r2, [r3, #6]
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007768:	2180      	movs	r1, #128	@ 0x80
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fbf6 	bl	8007f5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007770:	2100      	movs	r1, #0
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fbf2 	bl	8007f5c <USBD_LL_StallEP>
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d042      	beq.n	800781c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800779a:	6938      	ldr	r0, [r7, #16]
 800779c:	f000 f842 	bl	8007824 <USBD_GetLen>
 80077a0:	4603      	mov	r3, r0
 80077a2:	3301      	adds	r3, #1
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077aa:	d808      	bhi.n	80077be <USBD_GetString+0x3e>
 80077ac:	6938      	ldr	r0, [r7, #16]
 80077ae:	f000 f839 	bl	8007824 <USBD_GetLen>
 80077b2:	4603      	mov	r3, r0
 80077b4:	3301      	adds	r3, #1
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	e001      	b.n	80077c2 <USBD_GetString+0x42>
 80077be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	4413      	add	r3, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	7812      	ldrb	r2, [r2, #0]
 80077d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	3301      	adds	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	4413      	add	r3, r2
 80077de:	2203      	movs	r2, #3
 80077e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	3301      	adds	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077e8:	e013      	b.n	8007812 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	4413      	add	r3, r2
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	7812      	ldrb	r2, [r2, #0]
 80077f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	3301      	adds	r3, #1
 80077fa:	613b      	str	r3, [r7, #16]
    idx++;
 80077fc:	7dfb      	ldrb	r3, [r7, #23]
 80077fe:	3301      	adds	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	4413      	add	r3, r2
 8007808:	2200      	movs	r2, #0
 800780a:	701a      	strb	r2, [r3, #0]
    idx++;
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	3301      	adds	r3, #1
 8007810:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e7      	bne.n	80077ea <USBD_GetString+0x6a>
 800781a:	e000      	b.n	800781e <USBD_GetString+0x9e>
    return;
 800781c:	bf00      	nop
  }
}
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007834:	e005      	b.n	8007842 <USBD_GetLen+0x1e>
  {
    len++;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	3301      	adds	r3, #1
 800783a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	3301      	adds	r3, #1
 8007840:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f5      	bne.n	8007836 <USBD_GetLen+0x12>
  }

  return len;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2202      	movs	r2, #2
 8007868:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	2100      	movs	r1, #0
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 fbf5 	bl	800806e <USBD_LL_Transmit>

  return USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	2100      	movs	r1, #0
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fbe4 	bl	800806e <USBD_LL_Transmit>

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	2100      	movs	r1, #0
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fbf4 	bl	80080b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2204      	movs	r2, #4
 80078de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078e2:	2300      	movs	r3, #0
 80078e4:	2200      	movs	r2, #0
 80078e6:	2100      	movs	r1, #0
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fbc0 	bl	800806e <USBD_LL_Transmit>

  return USBD_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2205      	movs	r2, #5
 8007904:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007908:	2300      	movs	r3, #0
 800790a:	2200      	movs	r2, #0
 800790c:	2100      	movs	r1, #0
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fbce 	bl	80080b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007924:	2200      	movs	r2, #0
 8007926:	490e      	ldr	r1, [pc, #56]	@ (8007960 <MX_USB_DEVICE_Init+0x40>)
 8007928:	480e      	ldr	r0, [pc, #56]	@ (8007964 <MX_USB_DEVICE_Init+0x44>)
 800792a:	f7fe fd13 	bl	8006354 <USBD_Init>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007934:	f7fa f9fe 	bl	8001d34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007938:	490b      	ldr	r1, [pc, #44]	@ (8007968 <MX_USB_DEVICE_Init+0x48>)
 800793a:	480a      	ldr	r0, [pc, #40]	@ (8007964 <MX_USB_DEVICE_Init+0x44>)
 800793c:	f7fe fd3a 	bl	80063b4 <USBD_RegisterClass>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007946:	f7fa f9f5 	bl	8001d34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800794a:	4806      	ldr	r0, [pc, #24]	@ (8007964 <MX_USB_DEVICE_Init+0x44>)
 800794c:	f7fe fd68 	bl	8006420 <USBD_Start>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007956:	f7fa f9ed 	bl	8001d34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800795a:	bf00      	nop
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	200000c0 	.word	0x200000c0
 8007964:	2000211c 	.word	0x2000211c
 8007968:	2000000c 	.word	0x2000000c

0800796c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	6039      	str	r1, [r7, #0]
 8007976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2212      	movs	r2, #18
 800797c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800797e:	4b03      	ldr	r3, [pc, #12]	@ (800798c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	200000dc 	.word	0x200000dc

08007990 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	6039      	str	r1, [r7, #0]
 800799a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2204      	movs	r2, #4
 80079a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80079a2:	4b03      	ldr	r3, [pc, #12]	@ (80079b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	200000f0 	.word	0x200000f0

080079b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	6039      	str	r1, [r7, #0]
 80079be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d105      	bne.n	80079d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	4907      	ldr	r1, [pc, #28]	@ (80079e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80079ca:	4808      	ldr	r0, [pc, #32]	@ (80079ec <USBD_FS_ProductStrDescriptor+0x38>)
 80079cc:	f7ff fed8 	bl	8007780 <USBD_GetString>
 80079d0:	e004      	b.n	80079dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	4904      	ldr	r1, [pc, #16]	@ (80079e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80079d6:	4805      	ldr	r0, [pc, #20]	@ (80079ec <USBD_FS_ProductStrDescriptor+0x38>)
 80079d8:	f7ff fed2 	bl	8007780 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079dc:	4b02      	ldr	r3, [pc, #8]	@ (80079e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	200023f8 	.word	0x200023f8
 80079ec:	08008460 	.word	0x08008460

080079f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	4904      	ldr	r1, [pc, #16]	@ (8007a10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a00:	4804      	ldr	r0, [pc, #16]	@ (8007a14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a02:	f7ff febd 	bl	8007780 <USBD_GetString>
  return USBD_StrDesc;
 8007a06:	4b02      	ldr	r3, [pc, #8]	@ (8007a10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200023f8 	.word	0x200023f8
 8007a14:	08008478 	.word	0x08008478

08007a18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	221a      	movs	r2, #26
 8007a28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a2a:	f000 f843 	bl	8007ab4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a2e:	4b02      	ldr	r3, [pc, #8]	@ (8007a38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	200000f4 	.word	0x200000f4

08007a3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d105      	bne.n	8007a5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	4907      	ldr	r1, [pc, #28]	@ (8007a70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a52:	4808      	ldr	r0, [pc, #32]	@ (8007a74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a54:	f7ff fe94 	bl	8007780 <USBD_GetString>
 8007a58:	e004      	b.n	8007a64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	4904      	ldr	r1, [pc, #16]	@ (8007a70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a5e:	4805      	ldr	r0, [pc, #20]	@ (8007a74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a60:	f7ff fe8e 	bl	8007780 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a64:	4b02      	ldr	r3, [pc, #8]	@ (8007a70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	200023f8 	.word	0x200023f8
 8007a74:	0800848c 	.word	0x0800848c

08007a78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	6039      	str	r1, [r7, #0]
 8007a82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d105      	bne.n	8007a96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	4907      	ldr	r1, [pc, #28]	@ (8007aac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a8e:	4808      	ldr	r0, [pc, #32]	@ (8007ab0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a90:	f7ff fe76 	bl	8007780 <USBD_GetString>
 8007a94:	e004      	b.n	8007aa0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	4904      	ldr	r1, [pc, #16]	@ (8007aac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a9a:	4805      	ldr	r0, [pc, #20]	@ (8007ab0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a9c:	f7ff fe70 	bl	8007780 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007aa0:	4b02      	ldr	r3, [pc, #8]	@ (8007aac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	200023f8 	.word	0x200023f8
 8007ab0:	08008498 	.word	0x08008498

08007ab4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007aba:	4b0f      	ldr	r3, [pc, #60]	@ (8007af8 <Get_SerialNum+0x44>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8007afc <Get_SerialNum+0x48>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8007b00 <Get_SerialNum+0x4c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d009      	beq.n	8007aee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ada:	2208      	movs	r2, #8
 8007adc:	4909      	ldr	r1, [pc, #36]	@ (8007b04 <Get_SerialNum+0x50>)
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f814 	bl	8007b0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	4908      	ldr	r1, [pc, #32]	@ (8007b08 <Get_SerialNum+0x54>)
 8007ae8:	68b8      	ldr	r0, [r7, #8]
 8007aea:	f000 f80f 	bl	8007b0c <IntToUnicode>
  }
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	1fff7a10 	.word	0x1fff7a10
 8007afc:	1fff7a14 	.word	0x1fff7a14
 8007b00:	1fff7a18 	.word	0x1fff7a18
 8007b04:	200000f6 	.word	0x200000f6
 8007b08:	20000106 	.word	0x20000106

08007b0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b1e:	2300      	movs	r3, #0
 8007b20:	75fb      	strb	r3, [r7, #23]
 8007b22:	e027      	b.n	8007b74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	0f1b      	lsrs	r3, r3, #28
 8007b28:	2b09      	cmp	r3, #9
 8007b2a:	d80b      	bhi.n	8007b44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	0f1b      	lsrs	r3, r3, #28
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	4619      	mov	r1, r3
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	440b      	add	r3, r1
 8007b3c:	3230      	adds	r2, #48	@ 0x30
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	e00a      	b.n	8007b5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	0f1b      	lsrs	r3, r3, #28
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	4619      	mov	r1, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	440b      	add	r3, r1
 8007b54:	3237      	adds	r2, #55	@ 0x37
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	3301      	adds	r3, #1
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	4413      	add	r3, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	3301      	adds	r3, #1
 8007b72:	75fb      	strb	r3, [r7, #23]
 8007b74:	7dfa      	ldrb	r2, [r7, #23]
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d3d3      	bcc.n	8007b24 <IntToUnicode+0x18>
  }
}
 8007b7c:	bf00      	nop
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08a      	sub	sp, #40	@ 0x28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b94:	f107 0314 	add.w	r3, r7, #20
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	605a      	str	r2, [r3, #4]
 8007b9e:	609a      	str	r2, [r3, #8]
 8007ba0:	60da      	str	r2, [r3, #12]
 8007ba2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bac:	d13a      	bne.n	8007c24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c2c <HAL_PCD_MspInit+0xa0>)
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8007c2c <HAL_PCD_MspInit+0xa0>)
 8007bb8:	f043 0301 	orr.w	r3, r3, #1
 8007bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8007bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8007c2c <HAL_PCD_MspInit+0xa0>)
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	613b      	str	r3, [r7, #16]
 8007bc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007bca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007bdc:	230a      	movs	r3, #10
 8007bde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007be0:	f107 0314 	add.w	r3, r7, #20
 8007be4:	4619      	mov	r1, r3
 8007be6:	4812      	ldr	r0, [pc, #72]	@ (8007c30 <HAL_PCD_MspInit+0xa4>)
 8007be8:	f7fa fb58 	bl	800229c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bec:	4b0f      	ldr	r3, [pc, #60]	@ (8007c2c <HAL_PCD_MspInit+0xa0>)
 8007bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8007c2c <HAL_PCD_MspInit+0xa0>)
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf6:	6353      	str	r3, [r2, #52]	@ 0x34
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007c2c <HAL_PCD_MspInit+0xa0>)
 8007bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c00:	4a0a      	ldr	r2, [pc, #40]	@ (8007c2c <HAL_PCD_MspInit+0xa0>)
 8007c02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c06:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c08:	4b08      	ldr	r3, [pc, #32]	@ (8007c2c <HAL_PCD_MspInit+0xa0>)
 8007c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c14:	2200      	movs	r2, #0
 8007c16:	2100      	movs	r1, #0
 8007c18:	2043      	movs	r0, #67	@ 0x43
 8007c1a:	f7fa fb08 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c1e:	2043      	movs	r0, #67	@ 0x43
 8007c20:	f7fa fb21 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c24:	bf00      	nop
 8007c26:	3728      	adds	r7, #40	@ 0x28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	40023800 	.word	0x40023800
 8007c30:	40020000 	.word	0x40020000

08007c34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7fe fc35 	bl	80064ba <USBD_LL_SetupStage>
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007c6a:	78fa      	ldrb	r2, [r7, #3]
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	00db      	lsls	r3, r3, #3
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	440b      	add	r3, r1
 8007c78:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	4619      	mov	r1, r3
 8007c82:	f7fe fc6f 	bl	8006564 <USBD_LL_DataOutStage>
}
 8007c86:	bf00      	nop
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007ca0:	78fa      	ldrb	r2, [r7, #3]
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	00db      	lsls	r3, r3, #3
 8007ca8:	4413      	add	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	440b      	add	r3, r1
 8007cae:	3320      	adds	r3, #32
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f7fe fd08 	bl	80066ca <USBD_LL_DataInStage>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe fe42 	bl	800695a <USBD_LL_SOF>
}
 8007cd6:	bf00      	nop
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	79db      	ldrb	r3, [r3, #7]
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d001      	beq.n	8007cf6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007cf2:	f7fa f81f 	bl	8001d34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cfc:	7bfa      	ldrb	r2, [r7, #15]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe fde6 	bl	80068d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe fd8e 	bl	800682e <USBD_LL_Reset>
}
 8007d12:	bf00      	nop
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fde1 	bl	80068f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d42:	f043 0301 	orr.w	r3, r3, #1
 8007d46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	7adb      	ldrb	r3, [r3, #11]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d50:	4b04      	ldr	r3, [pc, #16]	@ (8007d64 <HAL_PCD_SuspendCallback+0x48>)
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	4a03      	ldr	r2, [pc, #12]	@ (8007d64 <HAL_PCD_SuspendCallback+0x48>)
 8007d56:	f043 0306 	orr.w	r3, r3, #6
 8007d5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	e000ed00 	.word	0xe000ed00

08007d68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fdd7 	bl	800692a <USBD_LL_Resume>
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d96:	78fa      	ldrb	r2, [r7, #3]
 8007d98:	4611      	mov	r1, r2
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fe2f 	bl	80069fe <USBD_LL_IsoOUTIncomplete>
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dba:	78fa      	ldrb	r2, [r7, #3]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fdeb 	bl	800699a <USBD_LL_IsoINIncomplete>
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fe41 	bl	8006a62 <USBD_LL_DevConnected>
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fe3e 	bl	8006a78 <USBD_LL_DevDisconnected>
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d13c      	bne.n	8007e8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e14:	4a20      	ldr	r2, [pc, #128]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e20:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e24:	4b1c      	ldr	r3, [pc, #112]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007e2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e2e:	2204      	movs	r2, #4
 8007e30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e32:	4b19      	ldr	r3, [pc, #100]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e34:	2202      	movs	r2, #2
 8007e36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e38:	4b17      	ldr	r3, [pc, #92]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e3e:	4b16      	ldr	r3, [pc, #88]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e40:	2202      	movs	r2, #2
 8007e42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e44:	4b14      	ldr	r3, [pc, #80]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e4a:	4b13      	ldr	r3, [pc, #76]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e50:	4b11      	ldr	r3, [pc, #68]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e56:	4b10      	ldr	r3, [pc, #64]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e62:	480d      	ldr	r0, [pc, #52]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e64:	f7fa fbcf 	bl	8002606 <HAL_PCD_Init>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e6e:	f7f9 ff61 	bl	8001d34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e72:	2180      	movs	r1, #128	@ 0x80
 8007e74:	4808      	ldr	r0, [pc, #32]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e76:	f7fb fde4 	bl	8003a42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e7a:	2240      	movs	r2, #64	@ 0x40
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4806      	ldr	r0, [pc, #24]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e80:	f7fb fd98 	bl	80039b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e84:	2280      	movs	r2, #128	@ 0x80
 8007e86:	2101      	movs	r1, #1
 8007e88:	4803      	ldr	r0, [pc, #12]	@ (8007e98 <USBD_LL_Init+0x94>)
 8007e8a:	f7fb fd93 	bl	80039b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	200025f8 	.word	0x200025f8

08007e9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fa fcb6 	bl	8002824 <HAL_PCD_Start>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 f930 	bl	8008124 <USBD_Get_USB_Status>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	4608      	mov	r0, r1
 8007edc:	4611      	mov	r1, r2
 8007ede:	461a      	mov	r2, r3
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	70fb      	strb	r3, [r7, #3]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70bb      	strb	r3, [r7, #2]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007efa:	78bb      	ldrb	r3, [r7, #2]
 8007efc:	883a      	ldrh	r2, [r7, #0]
 8007efe:	78f9      	ldrb	r1, [r7, #3]
 8007f00:	f7fb f98a 	bl	8003218 <HAL_PCD_EP_Open>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f90a 	bl	8008124 <USBD_Get_USB_Status>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	460b      	mov	r3, r1
 8007f28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fb f9d5 	bl	80032ec <HAL_PCD_EP_Close>
 8007f42:	4603      	mov	r3, r0
 8007f44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 f8eb 	bl	8008124 <USBD_Get_USB_Status>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f76:	78fa      	ldrb	r2, [r7, #3]
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fb fa75 	bl	800346a <HAL_PCD_EP_SetStall>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f8cc 	bl	8008124 <USBD_Get_USB_Status>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fb4:	78fa      	ldrb	r2, [r7, #3]
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fb fab9 	bl	8003530 <HAL_PCD_EP_ClrStall>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 f8ad 	bl	8008124 <USBD_Get_USB_Status>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	da0b      	bge.n	800800c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	3316      	adds	r3, #22
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	e00b      	b.n	8008024 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008012:	68f9      	ldr	r1, [r7, #12]
 8008014:	4613      	mov	r3, r2
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4413      	add	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008022:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f7fb f8be 	bl	80031d0 <HAL_PCD_SetAddress>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f862 	bl	8008124 <USBD_Get_USB_Status>
 8008060:	4603      	mov	r3, r0
 8008062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008064:	7bbb      	ldrb	r3, [r7, #14]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b086      	sub	sp, #24
 8008072:	af00      	add	r7, sp, #0
 8008074:	60f8      	str	r0, [r7, #12]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
 800807a:	460b      	mov	r3, r1
 800807c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800808c:	7af9      	ldrb	r1, [r7, #11]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	f7fb f9b0 	bl	80033f6 <HAL_PCD_EP_Transmit>
 8008096:	4603      	mov	r3, r0
 8008098:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	4618      	mov	r0, r3
 800809e:	f000 f841 	bl	8008124 <USBD_Get_USB_Status>
 80080a2:	4603      	mov	r3, r0
 80080a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	607a      	str	r2, [r7, #4]
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	460b      	mov	r3, r1
 80080be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80080ce:	7af9      	ldrb	r1, [r7, #11]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	f7fb f954 	bl	8003380 <HAL_PCD_EP_Receive>
 80080d8:	4603      	mov	r3, r0
 80080da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f820 	bl	8008124 <USBD_Get_USB_Status>
 80080e4:	4603      	mov	r3, r0
 80080e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080fc:	4b03      	ldr	r3, [pc, #12]	@ (800810c <USBD_static_malloc+0x18>)
}
 80080fe:	4618      	mov	r0, r3
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20002adc 	.word	0x20002adc

08008110 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]

}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	4603      	mov	r3, r0
 800812c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	2b03      	cmp	r3, #3
 8008136:	d817      	bhi.n	8008168 <USBD_Get_USB_Status+0x44>
 8008138:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <USBD_Get_USB_Status+0x1c>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008151 	.word	0x08008151
 8008144:	08008157 	.word	0x08008157
 8008148:	0800815d 	.word	0x0800815d
 800814c:	08008163 	.word	0x08008163
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
    break;
 8008154:	e00b      	b.n	800816e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008156:	2303      	movs	r3, #3
 8008158:	73fb      	strb	r3, [r7, #15]
    break;
 800815a:	e008      	b.n	800816e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
    break;
 8008160:	e005      	b.n	800816e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008162:	2303      	movs	r3, #3
 8008164:	73fb      	strb	r3, [r7, #15]
    break;
 8008166:	e002      	b.n	800816e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008168:	2303      	movs	r3, #3
 800816a:	73fb      	strb	r3, [r7, #15]
    break;
 800816c:	bf00      	nop
  }
  return usb_status;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <malloc>:
 800817c:	4b02      	ldr	r3, [pc, #8]	@ (8008188 <malloc+0xc>)
 800817e:	4601      	mov	r1, r0
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	f000 b825 	b.w	80081d0 <_malloc_r>
 8008186:	bf00      	nop
 8008188:	20000110 	.word	0x20000110

0800818c <sbrk_aligned>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	4e0f      	ldr	r6, [pc, #60]	@ (80081cc <sbrk_aligned+0x40>)
 8008190:	460c      	mov	r4, r1
 8008192:	6831      	ldr	r1, [r6, #0]
 8008194:	4605      	mov	r5, r0
 8008196:	b911      	cbnz	r1, 800819e <sbrk_aligned+0x12>
 8008198:	f000 f8ae 	bl	80082f8 <_sbrk_r>
 800819c:	6030      	str	r0, [r6, #0]
 800819e:	4621      	mov	r1, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 f8a9 	bl	80082f8 <_sbrk_r>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	d103      	bne.n	80081b2 <sbrk_aligned+0x26>
 80081aa:	f04f 34ff 	mov.w	r4, #4294967295
 80081ae:	4620      	mov	r0, r4
 80081b0:	bd70      	pop	{r4, r5, r6, pc}
 80081b2:	1cc4      	adds	r4, r0, #3
 80081b4:	f024 0403 	bic.w	r4, r4, #3
 80081b8:	42a0      	cmp	r0, r4
 80081ba:	d0f8      	beq.n	80081ae <sbrk_aligned+0x22>
 80081bc:	1a21      	subs	r1, r4, r0
 80081be:	4628      	mov	r0, r5
 80081c0:	f000 f89a 	bl	80082f8 <_sbrk_r>
 80081c4:	3001      	adds	r0, #1
 80081c6:	d1f2      	bne.n	80081ae <sbrk_aligned+0x22>
 80081c8:	e7ef      	b.n	80081aa <sbrk_aligned+0x1e>
 80081ca:	bf00      	nop
 80081cc:	20002af0 	.word	0x20002af0

080081d0 <_malloc_r>:
 80081d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	1ccd      	adds	r5, r1, #3
 80081d6:	f025 0503 	bic.w	r5, r5, #3
 80081da:	3508      	adds	r5, #8
 80081dc:	2d0c      	cmp	r5, #12
 80081de:	bf38      	it	cc
 80081e0:	250c      	movcc	r5, #12
 80081e2:	2d00      	cmp	r5, #0
 80081e4:	4606      	mov	r6, r0
 80081e6:	db01      	blt.n	80081ec <_malloc_r+0x1c>
 80081e8:	42a9      	cmp	r1, r5
 80081ea:	d904      	bls.n	80081f6 <_malloc_r+0x26>
 80081ec:	230c      	movs	r3, #12
 80081ee:	6033      	str	r3, [r6, #0]
 80081f0:	2000      	movs	r0, #0
 80081f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082cc <_malloc_r+0xfc>
 80081fa:	f000 f869 	bl	80082d0 <__malloc_lock>
 80081fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008202:	461c      	mov	r4, r3
 8008204:	bb44      	cbnz	r4, 8008258 <_malloc_r+0x88>
 8008206:	4629      	mov	r1, r5
 8008208:	4630      	mov	r0, r6
 800820a:	f7ff ffbf 	bl	800818c <sbrk_aligned>
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	4604      	mov	r4, r0
 8008212:	d158      	bne.n	80082c6 <_malloc_r+0xf6>
 8008214:	f8d8 4000 	ldr.w	r4, [r8]
 8008218:	4627      	mov	r7, r4
 800821a:	2f00      	cmp	r7, #0
 800821c:	d143      	bne.n	80082a6 <_malloc_r+0xd6>
 800821e:	2c00      	cmp	r4, #0
 8008220:	d04b      	beq.n	80082ba <_malloc_r+0xea>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	4639      	mov	r1, r7
 8008226:	4630      	mov	r0, r6
 8008228:	eb04 0903 	add.w	r9, r4, r3
 800822c:	f000 f864 	bl	80082f8 <_sbrk_r>
 8008230:	4581      	cmp	r9, r0
 8008232:	d142      	bne.n	80082ba <_malloc_r+0xea>
 8008234:	6821      	ldr	r1, [r4, #0]
 8008236:	1a6d      	subs	r5, r5, r1
 8008238:	4629      	mov	r1, r5
 800823a:	4630      	mov	r0, r6
 800823c:	f7ff ffa6 	bl	800818c <sbrk_aligned>
 8008240:	3001      	adds	r0, #1
 8008242:	d03a      	beq.n	80082ba <_malloc_r+0xea>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	442b      	add	r3, r5
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	f8d8 3000 	ldr.w	r3, [r8]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	bb62      	cbnz	r2, 80082ac <_malloc_r+0xdc>
 8008252:	f8c8 7000 	str.w	r7, [r8]
 8008256:	e00f      	b.n	8008278 <_malloc_r+0xa8>
 8008258:	6822      	ldr	r2, [r4, #0]
 800825a:	1b52      	subs	r2, r2, r5
 800825c:	d420      	bmi.n	80082a0 <_malloc_r+0xd0>
 800825e:	2a0b      	cmp	r2, #11
 8008260:	d917      	bls.n	8008292 <_malloc_r+0xc2>
 8008262:	1961      	adds	r1, r4, r5
 8008264:	42a3      	cmp	r3, r4
 8008266:	6025      	str	r5, [r4, #0]
 8008268:	bf18      	it	ne
 800826a:	6059      	strne	r1, [r3, #4]
 800826c:	6863      	ldr	r3, [r4, #4]
 800826e:	bf08      	it	eq
 8008270:	f8c8 1000 	streq.w	r1, [r8]
 8008274:	5162      	str	r2, [r4, r5]
 8008276:	604b      	str	r3, [r1, #4]
 8008278:	4630      	mov	r0, r6
 800827a:	f000 f82f 	bl	80082dc <__malloc_unlock>
 800827e:	f104 000b 	add.w	r0, r4, #11
 8008282:	1d23      	adds	r3, r4, #4
 8008284:	f020 0007 	bic.w	r0, r0, #7
 8008288:	1ac2      	subs	r2, r0, r3
 800828a:	bf1c      	itt	ne
 800828c:	1a1b      	subne	r3, r3, r0
 800828e:	50a3      	strne	r3, [r4, r2]
 8008290:	e7af      	b.n	80081f2 <_malloc_r+0x22>
 8008292:	6862      	ldr	r2, [r4, #4]
 8008294:	42a3      	cmp	r3, r4
 8008296:	bf0c      	ite	eq
 8008298:	f8c8 2000 	streq.w	r2, [r8]
 800829c:	605a      	strne	r2, [r3, #4]
 800829e:	e7eb      	b.n	8008278 <_malloc_r+0xa8>
 80082a0:	4623      	mov	r3, r4
 80082a2:	6864      	ldr	r4, [r4, #4]
 80082a4:	e7ae      	b.n	8008204 <_malloc_r+0x34>
 80082a6:	463c      	mov	r4, r7
 80082a8:	687f      	ldr	r7, [r7, #4]
 80082aa:	e7b6      	b.n	800821a <_malloc_r+0x4a>
 80082ac:	461a      	mov	r2, r3
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	d1fb      	bne.n	80082ac <_malloc_r+0xdc>
 80082b4:	2300      	movs	r3, #0
 80082b6:	6053      	str	r3, [r2, #4]
 80082b8:	e7de      	b.n	8008278 <_malloc_r+0xa8>
 80082ba:	230c      	movs	r3, #12
 80082bc:	6033      	str	r3, [r6, #0]
 80082be:	4630      	mov	r0, r6
 80082c0:	f000 f80c 	bl	80082dc <__malloc_unlock>
 80082c4:	e794      	b.n	80081f0 <_malloc_r+0x20>
 80082c6:	6005      	str	r5, [r0, #0]
 80082c8:	e7d6      	b.n	8008278 <_malloc_r+0xa8>
 80082ca:	bf00      	nop
 80082cc:	20002af4 	.word	0x20002af4

080082d0 <__malloc_lock>:
 80082d0:	4801      	ldr	r0, [pc, #4]	@ (80082d8 <__malloc_lock+0x8>)
 80082d2:	f000 b84b 	b.w	800836c <__retarget_lock_acquire_recursive>
 80082d6:	bf00      	nop
 80082d8:	20002c34 	.word	0x20002c34

080082dc <__malloc_unlock>:
 80082dc:	4801      	ldr	r0, [pc, #4]	@ (80082e4 <__malloc_unlock+0x8>)
 80082de:	f000 b846 	b.w	800836e <__retarget_lock_release_recursive>
 80082e2:	bf00      	nop
 80082e4:	20002c34 	.word	0x20002c34

080082e8 <memset>:
 80082e8:	4402      	add	r2, r0
 80082ea:	4603      	mov	r3, r0
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d100      	bne.n	80082f2 <memset+0xa>
 80082f0:	4770      	bx	lr
 80082f2:	f803 1b01 	strb.w	r1, [r3], #1
 80082f6:	e7f9      	b.n	80082ec <memset+0x4>

080082f8 <_sbrk_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d06      	ldr	r5, [pc, #24]	@ (8008314 <_sbrk_r+0x1c>)
 80082fc:	2300      	movs	r3, #0
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	f7f9 fdb0 	bl	8001e68 <_sbrk>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_sbrk_r+0x1a>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_sbrk_r+0x1a>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	20002c30 	.word	0x20002c30

08008318 <__errno>:
 8008318:	4b01      	ldr	r3, [pc, #4]	@ (8008320 <__errno+0x8>)
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	20000110 	.word	0x20000110

08008324 <__libc_init_array>:
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	4d0d      	ldr	r5, [pc, #52]	@ (800835c <__libc_init_array+0x38>)
 8008328:	4c0d      	ldr	r4, [pc, #52]	@ (8008360 <__libc_init_array+0x3c>)
 800832a:	1b64      	subs	r4, r4, r5
 800832c:	10a4      	asrs	r4, r4, #2
 800832e:	2600      	movs	r6, #0
 8008330:	42a6      	cmp	r6, r4
 8008332:	d109      	bne.n	8008348 <__libc_init_array+0x24>
 8008334:	4d0b      	ldr	r5, [pc, #44]	@ (8008364 <__libc_init_array+0x40>)
 8008336:	4c0c      	ldr	r4, [pc, #48]	@ (8008368 <__libc_init_array+0x44>)
 8008338:	f000 f822 	bl	8008380 <_init>
 800833c:	1b64      	subs	r4, r4, r5
 800833e:	10a4      	asrs	r4, r4, #2
 8008340:	2600      	movs	r6, #0
 8008342:	42a6      	cmp	r6, r4
 8008344:	d105      	bne.n	8008352 <__libc_init_array+0x2e>
 8008346:	bd70      	pop	{r4, r5, r6, pc}
 8008348:	f855 3b04 	ldr.w	r3, [r5], #4
 800834c:	4798      	blx	r3
 800834e:	3601      	adds	r6, #1
 8008350:	e7ee      	b.n	8008330 <__libc_init_array+0xc>
 8008352:	f855 3b04 	ldr.w	r3, [r5], #4
 8008356:	4798      	blx	r3
 8008358:	3601      	adds	r6, #1
 800835a:	e7f2      	b.n	8008342 <__libc_init_array+0x1e>
 800835c:	080084c0 	.word	0x080084c0
 8008360:	080084c0 	.word	0x080084c0
 8008364:	080084c0 	.word	0x080084c0
 8008368:	080084c4 	.word	0x080084c4

0800836c <__retarget_lock_acquire_recursive>:
 800836c:	4770      	bx	lr

0800836e <__retarget_lock_release_recursive>:
 800836e:	4770      	bx	lr

08008370 <strcpy>:
 8008370:	4603      	mov	r3, r0
 8008372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008376:	f803 2b01 	strb.w	r2, [r3], #1
 800837a:	2a00      	cmp	r2, #0
 800837c:	d1f9      	bne.n	8008372 <strcpy+0x2>
 800837e:	4770      	bx	lr

08008380 <_init>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr

0800838c <_fini>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	bf00      	nop
 8008390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008392:	bc08      	pop	{r3}
 8008394:	469e      	mov	lr, r3
 8008396:	4770      	bx	lr
