
StenoKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d324  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000406c  0800d4bc  0800d4bc  0000e4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011528  08011528  0001316c  2**0
                  CONTENTS
  4 .ARM          00000008  08011528  08011528  00012528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011530  08011530  0001316c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011530  08011530  00012530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011534  08011534  00012534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08011538  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d40  2000016c  080116a4  0001316c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eac  080116a4  00013eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001316c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e50  00000000  00000000  0001319c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003200  00000000  00000000  00025fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  000291f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d40  00000000  00000000  0002a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019919  00000000  00000000  0002b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015570  00000000  00000000  000449b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920db  00000000  00000000  00059f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc0  00000000  00000000  000ec048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f1008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000016c 	.word	0x2000016c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d4a4 	.word	0x0800d4a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000170 	.word	0x20000170
 80001d4:	0800d4a4 	.word	0x0800d4a4

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <Scan_KeyMatrix.3>:
  char result[22] = {};
  int activeTimeLimit = TIME_LIMIT;
  int activeTimer = 0;


  uint8_t Scan_KeyMatrix(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	f8c7 c004 	str.w	ip, [r7, #4]
        uint8_t key = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	73fb      	strb	r3, [r7, #15]

  		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2110      	movs	r1, #16
 80004fe:	48cf      	ldr	r0, [pc, #828]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000500:	f006 fd1e 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2120      	movs	r1, #32
 8000508:	48cc      	ldr	r0, [pc, #816]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800050a:	f006 fd19 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2140      	movs	r1, #64	@ 0x40
 8000512:	48ca      	ldr	r0, [pc, #808]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000514:	f006 fd14 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2180      	movs	r1, #128	@ 0x80
 800051c:	48c7      	ldr	r0, [pc, #796]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800051e:	f006 fd0f 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	48c6      	ldr	r0, [pc, #792]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000528:	f006 fd0a 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	48c3      	ldr	r0, [pc, #780]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000532:	f006 fd05 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2104      	movs	r1, #4
 800053a:	48c1      	ldr	r0, [pc, #772]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800053c:	f006 fd00 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000546:	48be      	ldr	r0, [pc, #760]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000548:	f006 fcfa 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000552:	48bb      	ldr	r0, [pc, #748]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000554:	f006 fcf4 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055e:	48b8      	ldr	r0, [pc, #736]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000560:	f006 fcee 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800056a:	48b5      	ldr	r0, [pc, #724]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800056c:	f006 fce8 	bl	8006f40 <HAL_GPIO_WritePin>


        if (HAL_GPIO_ReadPin(Row1_GPIO_Port, Row1_Pin) == 1) {
 8000570:	2101      	movs	r1, #1
 8000572:	48b2      	ldr	r0, [pc, #712]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000574:	f006 fccc 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b01      	cmp	r3, #1
 800057c:	d101      	bne.n	8000582 <Scan_KeyMatrix.3+0x96>
            key = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000582:	2102      	movs	r1, #2
 8000584:	48ad      	ldr	r0, [pc, #692]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000586:	f006 fcc3 	bl	8006f10 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d101      	bne.n	8000594 <Scan_KeyMatrix.3+0xa8>
            key = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000594:	2104      	movs	r1, #4
 8000596:	48a9      	ldr	r0, [pc, #676]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000598:	f006 fcba 	bl	8006f10 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d101      	bne.n	80005a6 <Scan_KeyMatrix.3+0xba>
			key = 24;
 80005a2:	2318      	movs	r3, #24
 80005a4:	73fb      	strb	r3, [r7, #15]
        }

  		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2110      	movs	r1, #16
 80005aa:	48a4      	ldr	r0, [pc, #656]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005ac:	f006 fcc8 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2120      	movs	r1, #32
 80005b4:	48a1      	ldr	r0, [pc, #644]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005b6:	f006 fcc3 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	489f      	ldr	r0, [pc, #636]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005c0:	f006 fcbe 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2180      	movs	r1, #128	@ 0x80
 80005c8:	489c      	ldr	r0, [pc, #624]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80005ca:	f006 fcb9 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	489b      	ldr	r0, [pc, #620]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005d4:	f006 fcb4 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	4898      	ldr	r0, [pc, #608]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005de:	f006 fcaf 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2104      	movs	r1, #4
 80005e6:	4896      	ldr	r0, [pc, #600]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005e8:	f006 fcaa 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f2:	4893      	ldr	r0, [pc, #588]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80005f4:	f006 fca4 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fe:	4890      	ldr	r0, [pc, #576]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000600:	f006 fc9e 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060a:	488d      	ldr	r0, [pc, #564]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800060c:	f006 fc98 	bl	8006f40 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000616:	488a      	ldr	r0, [pc, #552]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000618:	f006 fc92 	bl	8006f40 <HAL_GPIO_WritePin>


        if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 800061c:	2102      	movs	r1, #2
 800061e:	4887      	ldr	r0, [pc, #540]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000620:	f006 fc76 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d101      	bne.n	800062e <Scan_KeyMatrix.3+0x142>
            key = 3;
 800062a:	2303      	movs	r3, #3
 800062c:	73fb      	strb	r3, [r7, #15]
        }
        if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 800062e:	2104      	movs	r1, #4
 8000630:	4882      	ldr	r0, [pc, #520]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000632:	f006 fc6d 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d101      	bne.n	8000640 <Scan_KeyMatrix.3+0x154>
			key = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	73fb      	strb	r3, [r7, #15]
        }

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	487d      	ldr	r0, [pc, #500]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000646:	f006 fc7b 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	487b      	ldr	r0, [pc, #492]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000650:	f006 fc76 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	2140      	movs	r1, #64	@ 0x40
 8000658:	4878      	ldr	r0, [pc, #480]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800065a:	f006 fc71 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	4876      	ldr	r0, [pc, #472]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000664:	f006 fc6c 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2101      	movs	r1, #1
 800066c:	4874      	ldr	r0, [pc, #464]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800066e:	f006 fc67 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2102      	movs	r1, #2
 8000676:	4872      	ldr	r0, [pc, #456]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000678:	f006 fc62 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	486f      	ldr	r0, [pc, #444]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000682:	f006 fc5d 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068c:	486c      	ldr	r0, [pc, #432]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800068e:	f006 fc57 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000698:	4869      	ldr	r0, [pc, #420]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800069a:	f006 fc51 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a4:	4866      	ldr	r0, [pc, #408]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80006a6:	f006 fc4b 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b0:	4863      	ldr	r0, [pc, #396]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80006b2:	f006 fc45 	bl	8006f40 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80006b6:	2102      	movs	r1, #2
 80006b8:	4860      	ldr	r0, [pc, #384]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006ba:	f006 fc29 	bl	8006f10 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d101      	bne.n	80006c8 <Scan_KeyMatrix.3+0x1dc>
			key = 5;
 80006c4:	2305      	movs	r3, #5
 80006c6:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80006c8:	2104      	movs	r1, #4
 80006ca:	485c      	ldr	r0, [pc, #368]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006cc:	f006 fc20 	bl	8006f10 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d101      	bne.n	80006da <Scan_KeyMatrix.3+0x1ee>
			key = 6;
 80006d6:	2306      	movs	r3, #6
 80006d8:	73fb      	strb	r3, [r7, #15]
		}
		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	4857      	ldr	r0, [pc, #348]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006e0:	f006 fc2e 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	4854      	ldr	r0, [pc, #336]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006ea:	f006 fc29 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	@ 0x40
 80006f2:	4852      	ldr	r0, [pc, #328]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006f4:	f006 fc24 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	484f      	ldr	r0, [pc, #316]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80006fe:	f006 fc1f 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2101      	movs	r1, #1
 8000706:	484e      	ldr	r0, [pc, #312]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000708:	f006 fc1a 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	484b      	ldr	r0, [pc, #300]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000712:	f006 fc15 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2104      	movs	r1, #4
 800071a:	4849      	ldr	r0, [pc, #292]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800071c:	f006 fc10 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000726:	4846      	ldr	r0, [pc, #280]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000728:	f006 fc0a 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000732:	4843      	ldr	r0, [pc, #268]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000734:	f006 fc04 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073e:	4840      	ldr	r0, [pc, #256]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 8000740:	f006 fbfe 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800074a:	483d      	ldr	r0, [pc, #244]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 800074c:	f006 fbf8 	bl	8006f40 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000750:	2102      	movs	r1, #2
 8000752:	483a      	ldr	r0, [pc, #232]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000754:	f006 fbdc 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d101      	bne.n	8000762 <Scan_KeyMatrix.3+0x276>
			key = 7;
 800075e:	2307      	movs	r3, #7
 8000760:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000762:	2104      	movs	r1, #4
 8000764:	4835      	ldr	r0, [pc, #212]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000766:	f006 fbd3 	bl	8006f10 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d101      	bne.n	8000774 <Scan_KeyMatrix.3+0x288>
			key = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 8000774:	2108      	movs	r1, #8
 8000776:	4831      	ldr	r0, [pc, #196]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000778:	f006 fbca 	bl	8006f10 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d101      	bne.n	8000786 <Scan_KeyMatrix.3+0x29a>
			key = 9;
 8000782:	2309      	movs	r3, #9
 8000784:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	482c      	ldr	r0, [pc, #176]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 800078c:	f006 fbd8 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2120      	movs	r1, #32
 8000794:	4829      	ldr	r0, [pc, #164]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000796:	f006 fbd3 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	@ 0x40
 800079e:	4827      	ldr	r0, [pc, #156]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80007a0:	f006 fbce 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2180      	movs	r1, #128	@ 0x80
 80007a8:	4824      	ldr	r0, [pc, #144]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 80007aa:	f006 fbc9 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2101      	movs	r1, #1
 80007b2:	4823      	ldr	r0, [pc, #140]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007b4:	f006 fbc4 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2102      	movs	r1, #2
 80007bc:	4820      	ldr	r0, [pc, #128]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007be:	f006 fbbf 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2104      	movs	r1, #4
 80007c6:	481e      	ldr	r0, [pc, #120]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007c8:	f006 fbba 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007d2:	481b      	ldr	r0, [pc, #108]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007d4:	f006 fbb4 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007de:	4818      	ldr	r0, [pc, #96]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007e0:	f006 fbae 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ea:	4815      	ldr	r0, [pc, #84]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007ec:	f006 fba8 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007f6:	4812      	ldr	r0, [pc, #72]	@ (8000840 <Scan_KeyMatrix.3+0x354>)
 80007f8:	f006 fba2 	bl	8006f40 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80007fc:	2104      	movs	r1, #4
 80007fe:	480f      	ldr	r0, [pc, #60]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000800:	f006 fb86 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d101      	bne.n	800080e <Scan_KeyMatrix.3+0x322>
			key = 11;
 800080a:	230b      	movs	r3, #11
 800080c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 800080e:	2108      	movs	r1, #8
 8000810:	480a      	ldr	r0, [pc, #40]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000812:	f006 fb7d 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	d101      	bne.n	8000820 <Scan_KeyMatrix.3+0x334>
			key = 10;
 800081c:	230a      	movs	r3, #10
 800081e:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2110      	movs	r1, #16
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000826:	f006 fb8b 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2120      	movs	r1, #32
 800082e:	4803      	ldr	r0, [pc, #12]	@ (800083c <Scan_KeyMatrix.3+0x350>)
 8000830:	f006 fb86 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2140      	movs	r1, #64	@ 0x40
 8000838:	e004      	b.n	8000844 <Scan_KeyMatrix.3+0x358>
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020400 	.word	0x40020400
 8000844:	48cf      	ldr	r0, [pc, #828]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000846:	f006 fb7b 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	48cd      	ldr	r0, [pc, #820]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000850:	f006 fb76 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	48cb      	ldr	r0, [pc, #812]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800085a:	f006 fb71 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	48c9      	ldr	r0, [pc, #804]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000864:	f006 fb6c 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	48c6      	ldr	r0, [pc, #792]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800086e:	f006 fb67 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000878:	48c3      	ldr	r0, [pc, #780]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800087a:	f006 fb61 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000884:	48c0      	ldr	r0, [pc, #768]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000886:	f006 fb5b 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000890:	48bd      	ldr	r0, [pc, #756]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000892:	f006 fb55 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800089c:	48ba      	ldr	r0, [pc, #744]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800089e:	f006 fb4f 	bl	8006f40 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80008a2:	2104      	movs	r1, #4
 80008a4:	48b7      	ldr	r0, [pc, #732]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008a6:	f006 fb33 	bl	8006f10 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d101      	bne.n	80008b4 <Scan_KeyMatrix.3+0x3c8>
			key = 11;
 80008b0:	230b      	movs	r3, #11
 80008b2:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 80008b4:	2108      	movs	r1, #8
 80008b6:	48b3      	ldr	r0, [pc, #716]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008b8:	f006 fb2a 	bl	8006f10 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d101      	bne.n	80008c6 <Scan_KeyMatrix.3+0x3da>
			key = 12;
 80008c2:	230c      	movs	r3, #12
 80008c4:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2110      	movs	r1, #16
 80008ca:	48ae      	ldr	r0, [pc, #696]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008cc:	f006 fb38 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2120      	movs	r1, #32
 80008d4:	48ab      	ldr	r0, [pc, #684]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008d6:	f006 fb33 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	48a9      	ldr	r0, [pc, #676]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008e0:	f006 fb2e 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	@ 0x80
 80008e8:	48a6      	ldr	r0, [pc, #664]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80008ea:	f006 fb29 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2101      	movs	r1, #1
 80008f2:	48a5      	ldr	r0, [pc, #660]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80008f4:	f006 fb24 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2102      	movs	r1, #2
 80008fc:	48a2      	ldr	r0, [pc, #648]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80008fe:	f006 fb1f 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	2104      	movs	r1, #4
 8000906:	48a0      	ldr	r0, [pc, #640]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000908:	f006 fb1a 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000912:	489d      	ldr	r0, [pc, #628]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000914:	f006 fb14 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	489a      	ldr	r0, [pc, #616]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000920:	f006 fb0e 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092a:	4897      	ldr	r0, [pc, #604]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 800092c:	f006 fb08 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000936:	4894      	ldr	r0, [pc, #592]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000938:	f006 fb02 	bl	8006f40 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 800093c:	2102      	movs	r1, #2
 800093e:	4891      	ldr	r0, [pc, #580]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000940:	f006 fae6 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <Scan_KeyMatrix.3+0x462>
			key = 14;
 800094a:	230e      	movs	r3, #14
 800094c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 800094e:	2104      	movs	r1, #4
 8000950:	488c      	ldr	r0, [pc, #560]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000952:	f006 fadd 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <Scan_KeyMatrix.3+0x474>
			key = 15;
 800095c:	230f      	movs	r3, #15
 800095e:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row4_GPIO_Port, Row4_Pin) == 1) {
 8000960:	2108      	movs	r1, #8
 8000962:	4888      	ldr	r0, [pc, #544]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000964:	f006 fad4 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d101      	bne.n	8000972 <Scan_KeyMatrix.3+0x486>
			key = 13;
 800096e:	230d      	movs	r3, #13
 8000970:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2110      	movs	r1, #16
 8000976:	4883      	ldr	r0, [pc, #524]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000978:	f006 fae2 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2120      	movs	r1, #32
 8000980:	4880      	ldr	r0, [pc, #512]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000982:	f006 fadd 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	@ 0x40
 800098a:	487e      	ldr	r0, [pc, #504]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 800098c:	f006 fad8 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	487b      	ldr	r0, [pc, #492]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000996:	f006 fad3 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2101      	movs	r1, #1
 800099e:	487a      	ldr	r0, [pc, #488]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009a0:	f006 face 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2102      	movs	r1, #2
 80009a8:	4877      	ldr	r0, [pc, #476]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009aa:	f006 fac9 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2104      	movs	r1, #4
 80009b2:	4875      	ldr	r0, [pc, #468]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009b4:	f006 fac4 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009be:	4872      	ldr	r0, [pc, #456]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009c0:	f006 fabe 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ca:	486f      	ldr	r0, [pc, #444]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009cc:	f006 fab8 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d6:	486c      	ldr	r0, [pc, #432]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009d8:	f006 fab2 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e2:	4869      	ldr	r0, [pc, #420]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 80009e4:	f006 faac 	bl	8006f40 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 80009e8:	2102      	movs	r1, #2
 80009ea:	4866      	ldr	r0, [pc, #408]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80009ec:	f006 fa90 	bl	8006f10 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d101      	bne.n	80009fa <Scan_KeyMatrix.3+0x50e>
			key = 16;
 80009f6:	2310      	movs	r3, #16
 80009f8:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 80009fa:	2104      	movs	r1, #4
 80009fc:	4861      	ldr	r0, [pc, #388]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 80009fe:	f006 fa87 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d101      	bne.n	8000a0c <Scan_KeyMatrix.3+0x520>
			key = 17;
 8000a08:	2311      	movs	r3, #17
 8000a0a:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2110      	movs	r1, #16
 8000a10:	485c      	ldr	r0, [pc, #368]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a12:	f006 fa95 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	485a      	ldr	r0, [pc, #360]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a1c:	f006 fa90 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2140      	movs	r1, #64	@ 0x40
 8000a24:	4857      	ldr	r0, [pc, #348]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a26:	f006 fa8b 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	4855      	ldr	r0, [pc, #340]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a30:	f006 fa86 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	4853      	ldr	r0, [pc, #332]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a3a:	f006 fa81 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2102      	movs	r1, #2
 8000a42:	4851      	ldr	r0, [pc, #324]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a44:	f006 fa7c 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	484e      	ldr	r0, [pc, #312]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a4e:	f006 fa77 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a58:	484b      	ldr	r0, [pc, #300]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a5a:	f006 fa71 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 1);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a64:	4848      	ldr	r0, [pc, #288]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a66:	f006 fa6b 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a70:	4845      	ldr	r0, [pc, #276]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a72:	f006 fa65 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a7c:	4842      	ldr	r0, [pc, #264]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000a7e:	f006 fa5f 	bl	8006f40 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000a82:	2102      	movs	r1, #2
 8000a84:	483f      	ldr	r0, [pc, #252]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a86:	f006 fa43 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <Scan_KeyMatrix.3+0x5a8>
			key = 18;
 8000a90:	2312      	movs	r3, #18
 8000a92:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000a94:	2104      	movs	r1, #4
 8000a96:	483b      	ldr	r0, [pc, #236]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000a98:	f006 fa3a 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d101      	bne.n	8000aa6 <Scan_KeyMatrix.3+0x5ba>
			key = 19;
 8000aa2:	2313      	movs	r3, #19
 8000aa4:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	4836      	ldr	r0, [pc, #216]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000aac:	f006 fa48 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4833      	ldr	r0, [pc, #204]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000ab6:	f006 fa43 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2140      	movs	r1, #64	@ 0x40
 8000abe:	4831      	ldr	r0, [pc, #196]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000ac0:	f006 fa3e 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	@ 0x80
 8000ac8:	482e      	ldr	r0, [pc, #184]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000aca:	f006 fa39 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	482d      	ldr	r0, [pc, #180]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ad4:	f006 fa34 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	482a      	ldr	r0, [pc, #168]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ade:	f006 fa2f 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4828      	ldr	r0, [pc, #160]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000ae8:	f006 fa2a 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af2:	4825      	ldr	r0, [pc, #148]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000af4:	f006 fa24 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000afe:	4822      	ldr	r0, [pc, #136]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b00:	f006 fa1e 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b0a:	481f      	ldr	r0, [pc, #124]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b0c:	f006 fa18 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b16:	481c      	ldr	r0, [pc, #112]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b18:	f006 fa12 	bl	8006f40 <HAL_GPIO_WritePin>


		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b20:	f006 f9f6 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <Scan_KeyMatrix.3+0x642>
			key = 20;
 8000b2a:	2314      	movs	r3, #20
 8000b2c:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000b2e:	2104      	movs	r1, #4
 8000b30:	4814      	ldr	r0, [pc, #80]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b32:	f006 f9ed 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d101      	bne.n	8000b40 <Scan_KeyMatrix.3+0x654>
			key = 21;
 8000b3c:	2315      	movs	r3, #21
 8000b3e:	73fb      	strb	r3, [r7, #15]
		}

		HAL_GPIO_WritePin(Column1_GPIO_Port, Column1_Pin, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2110      	movs	r1, #16
 8000b44:	480f      	ldr	r0, [pc, #60]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b46:	f006 f9fb 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column2_GPIO_Port, Column2_Pin, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b50:	f006 f9f6 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column3_GPIO_Port, Column3_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2140      	movs	r1, #64	@ 0x40
 8000b58:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b5a:	f006 f9f1 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column4_GPIO_Port, Column4_Pin, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <Scan_KeyMatrix.3+0x698>)
 8000b64:	f006 f9ec 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column5_GPIO_Port, Column5_Pin, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b6e:	f006 f9e7 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column6_GPIO_Port, Column6_Pin, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2102      	movs	r1, #2
 8000b76:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <Scan_KeyMatrix.3+0x69c>)
 8000b78:	f006 f9e2 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column7_GPIO_Port, Column7_Pin, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2104      	movs	r1, #4
 8000b80:	e004      	b.n	8000b8c <Scan_KeyMatrix.3+0x6a0>
 8000b82:	bf00      	nop
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	481d      	ldr	r0, [pc, #116]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000b8e:	f006 f9d7 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column8_GPIO_Port, Column8_Pin, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b98:	481a      	ldr	r0, [pc, #104]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000b9a:	f006 f9d1 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column9_GPIO_Port, Column9_Pin, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba4:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000ba6:	f006 f9cb 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column10_GPIO_Port, Column10_Pin, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb0:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000bb2:	f006 f9c5 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Column11_GPIO_Port, Column11_Pin, 1);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bbc:	4811      	ldr	r0, [pc, #68]	@ (8000c04 <Scan_KeyMatrix.3+0x718>)
 8000bbe:	f006 f9bf 	bl	8006f40 <HAL_GPIO_WritePin>



        if (HAL_GPIO_ReadPin(Row1_GPIO_Port, Row1_Pin) == 1) {
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4810      	ldr	r0, [pc, #64]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bc6:	f006 f9a3 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d101      	bne.n	8000bd4 <Scan_KeyMatrix.3+0x6e8>
            key = 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
        }
		if (HAL_GPIO_ReadPin(Row2_GPIO_Port, Row2_Pin) == 1) {
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bd8:	f006 f99a 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d101      	bne.n	8000be6 <Scan_KeyMatrix.3+0x6fa>
			key = 22;
 8000be2:	2316      	movs	r3, #22
 8000be4:	73fb      	strb	r3, [r7, #15]
		}
		if (HAL_GPIO_ReadPin(Row3_GPIO_Port, Row3_Pin) == 1) {
 8000be6:	2104      	movs	r1, #4
 8000be8:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <Scan_KeyMatrix.3+0x71c>)
 8000bea:	f006 f991 	bl	8006f10 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d101      	bne.n	8000bf8 <Scan_KeyMatrix.3+0x70c>
			key = 23;
 8000bf4:	2317      	movs	r3, #23
 8000bf6:	73fb      	strb	r3, [r7, #15]
		}

        return key;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
    }
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40020000 	.word	0x40020000

08000c0c <main>:
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ac      	sub	sp, #176	@ 0xb0
 8000c10:	af00      	add	r7, sp, #0
int main(void)
 8000c12:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000c16:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_Init();
 8000c18:	f005 fe4e 	bl	80068b8 <HAL_Init>
  SystemClock_Config();
 8000c1c:	f005 fb7c 	bl	8006318 <SystemClock_Config>
  MX_GPIO_Init();
 8000c20:	f005 fc06 	bl	8006430 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c24:	f00b fb32 	bl	800c28c <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 8000c28:	f005 fbde 	bl	80063e8 <MX_TIM10_Init>
  int counter1 = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int counter2 = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  int counter3 = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int counter4 = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int counter5 = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int counter6 = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  int counter7 = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int counter8 = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  int counter9 = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int counter10 = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int counter11 = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int counter12 = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int counter13 = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  int counter14 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  int counter15 = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
  int counter16 = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	677b      	str	r3, [r7, #116]	@ 0x74
  int counter17 = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	673b      	str	r3, [r7, #112]	@ 0x70
  int counter18 = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int counter19 = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  int counter20 = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	667b      	str	r3, [r7, #100]	@ 0x64
  int counter21 = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	663b      	str	r3, [r7, #96]	@ 0x60
  int counter22 = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int counter23 = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int counter24 = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	657b      	str	r3, [r7, #84]	@ 0x54
  int lastPress = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  int timeout = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
  int timeoutB = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]
  int previousChar = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  char charbuffer[22] = {};
 8000cb4:	4bd0      	ldr	r3, [pc, #832]	@ (8000ff8 <main+0x3ec>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000cbc:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	751a      	strb	r2, [r3, #20]
  int bufferItemsNumber = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  char result[22] = {};
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	f107 0318 	add.w	r3, r7, #24
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	821a      	strh	r2, [r3, #16]
  int activeTimeLimit = TIME_LIMIT;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  int activeTimer = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	653b      	str	r3, [r7, #80]	@ 0x50
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint8_t pressed_key;
    hashInit();
 8000cee:	463b      	mov	r3, r7
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	f000 fdc1 	bl	8001878 <hashInit.0>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  // Initialize GPIOs for keyboard matrix
    pressed_key = Scan_KeyMatrix();
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	469c      	mov	ip, r3
 8000cfa:	f7ff fbf7 	bl	80004ec <Scan_KeyMatrix.3>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  	if(pressed_key != 0 && activeTimer == 0){
 8000d04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d007      	beq.n	8000d1c <main+0x110>
 8000d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <main+0x110>
  		HAL_TIM_Base_Start_IT(&htim10);
 8000d12:	48ba      	ldr	r0, [pc, #744]	@ (8000ffc <main+0x3f0>)
 8000d14:	f007 ffe8 	bl	8008ce8 <HAL_TIM_Base_Start_IT>
  		activeTimer = 1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	653b      	str	r3, [r7, #80]	@ 0x50
  	}
  	if(elapsedTime >= activeTimeLimit){
 8000d1c:	4bb8      	ldr	r3, [pc, #736]	@ (8001000 <main+0x3f4>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d30f      	bcc.n	8000d46 <main+0x13a>
  		HAL_TIM_Base_Stop_IT(&htim10);
 8000d26:	48b5      	ldr	r0, [pc, #724]	@ (8000ffc <main+0x3f0>)
 8000d28:	f008 f840 	bl	8008dac <HAL_TIM_Base_Stop_IT>
  		activeTimer = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	653b      	str	r3, [r7, #80]	@ 0x50
  		elapsedTime = 0;
 8000d30:	4bb3      	ldr	r3, [pc, #716]	@ (8001000 <main+0x3f4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]

		Send_Gate(1, ' ');
 8000d36:	463b      	mov	r3, r7
 8000d38:	469c      	mov	ip, r3
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f005 fa87 	bl	8006250 <Send_Gate.7>
		lastPress = 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
  	}
  	switch (pressed_key) {
 8000d46:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	2b17      	cmp	r3, #23
 8000d4e:	f200 8208 	bhi.w	8001162 <main+0x556>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <main+0x14c>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000db9 	.word	0x08000db9
 8000d5c:	08000dc3 	.word	0x08000dc3
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000e1b 	.word	0x08000e1b
 8000d68:	08000e47 	.word	0x08000e47
 8000d6c:	08000e73 	.word	0x08000e73
 8000d70:	08000e9f 	.word	0x08000e9f
 8000d74:	08000ecb 	.word	0x08000ecb
 8000d78:	08000ef7 	.word	0x08000ef7
 8000d7c:	08000f23 	.word	0x08000f23
 8000d80:	08000f4f 	.word	0x08000f4f
 8000d84:	08000f7b 	.word	0x08000f7b
 8000d88:	08000fa7 	.word	0x08000fa7
 8000d8c:	08000fd3 	.word	0x08000fd3
 8000d90:	08001005 	.word	0x08001005
 8000d94:	08001029 	.word	0x08001029
 8000d98:	0800104d 	.word	0x0800104d
 8000d9c:	08001071 	.word	0x08001071
 8000da0:	08001095 	.word	0x08001095
 8000da4:	080010b9 	.word	0x080010b9
 8000da8:	080010db 	.word	0x080010db
 8000dac:	080010fd 	.word	0x080010fd
 8000db0:	0800111f 	.word	0x0800111f
 8000db4:	08001141 	.word	0x08001141
  	    case 1:
  	    	BackSpace();
 8000db8:	463b      	mov	r3, r7
 8000dba:	469c      	mov	ip, r3
 8000dbc:	f005 fa87 	bl	80062ce <BackSpace.4>
			break;
 8000dc0:	e1fe      	b.n	80011c0 <main+0x5b4>
  	    case 2:
		  counter2 += 1;
 8000dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  if (counter2 >= 3) {
 8000dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	f340 81c8 	ble.w	8001166 <main+0x55a>
			Send_Gate(2, 'S');
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	469c      	mov	ip, r3
 8000dda:	2153      	movs	r1, #83	@ 0x53
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f005 fa37 	bl	8006250 <Send_Gate.7>
			lastPress = 2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	60bb      	str	r3, [r7, #8]
			  counter2 = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  }
  	        break;
 8000dec:	e1bb      	b.n	8001166 <main+0x55a>
  	    case 3:
  		  counter3 += 1;
 8000dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000df2:	3301      	adds	r3, #1
 8000df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  		  if (counter3 >= 3) {
 8000df8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	f340 81b4 	ble.w	800116a <main+0x55e>
  			Send_Gate(3, 'T');
 8000e02:	463b      	mov	r3, r7
 8000e04:	469c      	mov	ip, r3
 8000e06:	2154      	movs	r1, #84	@ 0x54
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f005 fa21 	bl	8006250 <Send_Gate.7>
  			lastPress = 3;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	60bb      	str	r3, [r7, #8]
  			  counter3 = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  		  }
  	        break;
 8000e18:	e1a7      	b.n	800116a <main+0x55e>
  	    case 4:
		  counter4 += 1;
 8000e1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  if (counter4 >= 3) {
 8000e24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	f340 81a0 	ble.w	800116e <main+0x562>
			Send_Gate(4, 'K');
 8000e2e:	463b      	mov	r3, r7
 8000e30:	469c      	mov	ip, r3
 8000e32:	214b      	movs	r1, #75	@ 0x4b
 8000e34:	2004      	movs	r0, #4
 8000e36:	f005 fa0b 	bl	8006250 <Send_Gate.7>
			lastPress = 4;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	60bb      	str	r3, [r7, #8]
			  counter4 = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  }
  	        break;
 8000e44:	e193      	b.n	800116e <main+0x562>
  	    case 5:
		  counter5 += 1;
 8000e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		  if (counter5 >= 3) {
 8000e50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	f340 818c 	ble.w	8001172 <main+0x566>
			Send_Gate(5, 'P');
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	2150      	movs	r1, #80	@ 0x50
 8000e60:	2005      	movs	r0, #5
 8000e62:	f005 f9f5 	bl	8006250 <Send_Gate.7>
			lastPress = 5;
 8000e66:	2305      	movs	r3, #5
 8000e68:	60bb      	str	r3, [r7, #8]
			  counter5 = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    		  }
  	        break;
 8000e70:	e17f      	b.n	8001172 <main+0x566>
  	    case 6:
		  counter6 += 1;
 8000e72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e76:	3301      	adds	r3, #1
 8000e78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		if (counter6 >= 3) {
 8000e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	f340 8178 	ble.w	8001176 <main+0x56a>
			Send_Gate(6, 'W');
 8000e86:	463b      	mov	r3, r7
 8000e88:	469c      	mov	ip, r3
 8000e8a:	2157      	movs	r1, #87	@ 0x57
 8000e8c:	2006      	movs	r0, #6
 8000e8e:	f005 f9df 	bl	8006250 <Send_Gate.7>
			lastPress = 6;
 8000e92:	2306      	movs	r3, #6
 8000e94:	60bb      	str	r3, [r7, #8]
			  counter6 = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    		  }
  	        break;
 8000e9c:	e16b      	b.n	8001176 <main+0x56a>
  	    case 7:
		  counter7 += 1;
 8000e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  if (counter7 >= 3) {
 8000ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	f340 8164 	ble.w	800117a <main+0x56e>
			Send_Gate(7, 'H');
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	469c      	mov	ip, r3
 8000eb6:	2148      	movs	r1, #72	@ 0x48
 8000eb8:	2007      	movs	r0, #7
 8000eba:	f005 f9c9 	bl	8006250 <Send_Gate.7>
			lastPress = 7;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	60bb      	str	r3, [r7, #8]
			  counter7 = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    		  }
  	        break;
 8000ec8:	e157      	b.n	800117a <main+0x56e>
  	    case 8:
		  counter8 += 1;
 8000eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		  if (counter8 >= 3) {
 8000ed4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	f340 8150 	ble.w	800117e <main+0x572>
			Send_Gate(8, 'R');
 8000ede:	463b      	mov	r3, r7
 8000ee0:	469c      	mov	ip, r3
 8000ee2:	2152      	movs	r1, #82	@ 0x52
 8000ee4:	2008      	movs	r0, #8
 8000ee6:	f005 f9b3 	bl	8006250 <Send_Gate.7>
			lastPress = 8;
 8000eea:	2308      	movs	r3, #8
 8000eec:	60bb      	str	r3, [r7, #8]
			  counter8 = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    		  }
  	        break;
 8000ef4:	e143      	b.n	800117e <main+0x572>
  	    case 9:
		  counter9 += 1;
 8000ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000efa:	3301      	adds	r3, #1
 8000efc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  if (counter9 >= 3) {
 8000f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	f340 813c 	ble.w	8001182 <main+0x576>
			Send_Gate(9, 'A');
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	469c      	mov	ip, r3
 8000f0e:	2141      	movs	r1, #65	@ 0x41
 8000f10:	2009      	movs	r0, #9
 8000f12:	f005 f99d 	bl	8006250 <Send_Gate.7>
			lastPress = 9;
 8000f16:	2309      	movs	r3, #9
 8000f18:	60bb      	str	r3, [r7, #8]
			  counter9 = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    		  }
  	        break;
 8000f20:	e12f      	b.n	8001182 <main+0x576>
  	    case 10:
		  counter10 += 1;
 8000f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f26:	3301      	adds	r3, #1
 8000f28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  if (counter10 >= 3) {
 8000f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	f340 8128 	ble.w	8001186 <main+0x57a>
			Send_Gate(10, 'O');
 8000f36:	463b      	mov	r3, r7
 8000f38:	469c      	mov	ip, r3
 8000f3a:	214f      	movs	r1, #79	@ 0x4f
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f005 f987 	bl	8006250 <Send_Gate.7>
			lastPress = 10;
 8000f42:	230a      	movs	r3, #10
 8000f44:	60bb      	str	r3, [r7, #8]
			  counter10 = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    		  }
  	        break;
 8000f4c:	e11b      	b.n	8001186 <main+0x57a>
  	    case 11:
		  counter11 += 1;
 8000f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f52:	3301      	adds	r3, #1
 8000f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		  if (counter11 >= 3) {
 8000f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	f340 8114 	ble.w	800118a <main+0x57e>
			Send_Gate(11, '*');
 8000f62:	463b      	mov	r3, r7
 8000f64:	469c      	mov	ip, r3
 8000f66:	212a      	movs	r1, #42	@ 0x2a
 8000f68:	200b      	movs	r0, #11
 8000f6a:	f005 f971 	bl	8006250 <Send_Gate.7>
			lastPress = 11;
 8000f6e:	230b      	movs	r3, #11
 8000f70:	60bb      	str	r3, [r7, #8]
			  counter11 = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    		  }
  	        break;
 8000f78:	e107      	b.n	800118a <main+0x57e>
  	    case 12:
		  counter12 += 1;
 8000f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  if (counter12 >= 3) {
 8000f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	f340 8100 	ble.w	800118e <main+0x582>
			Send_Gate(12, 'E');
 8000f8e:	463b      	mov	r3, r7
 8000f90:	469c      	mov	ip, r3
 8000f92:	2145      	movs	r1, #69	@ 0x45
 8000f94:	200c      	movs	r0, #12
 8000f96:	f005 f95b 	bl	8006250 <Send_Gate.7>
			lastPress = 12;
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	60bb      	str	r3, [r7, #8]
			  counter12 = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    		  }
  	        break;
 8000fa4:	e0f3      	b.n	800118e <main+0x582>
  	    case 13:
		  counter13 += 1;
 8000fa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  if (counter13 >= 3) {
 8000fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	f340 80ec 	ble.w	8001192 <main+0x586>
			Send_Gate(13, 'U');
 8000fba:	463b      	mov	r3, r7
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	2155      	movs	r1, #85	@ 0x55
 8000fc0:	200d      	movs	r0, #13
 8000fc2:	f005 f945 	bl	8006250 <Send_Gate.7>
			lastPress = 13;
 8000fc6:	230d      	movs	r3, #13
 8000fc8:	60bb      	str	r3, [r7, #8]
			  counter13 = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  }
  	        break;
 8000fd0:	e0df      	b.n	8001192 <main+0x586>
  	    case 14:
		  counter14 += 1;
 8000fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  if (counter14 >= 3) {
 8000fd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	f340 80db 	ble.w	8001196 <main+0x58a>
			Send_Gate(14, 'F');
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	469c      	mov	ip, r3
 8000fe4:	2146      	movs	r1, #70	@ 0x46
 8000fe6:	200e      	movs	r0, #14
 8000fe8:	f005 f932 	bl	8006250 <Send_Gate.7>
			lastPress = 14;
 8000fec:	230e      	movs	r3, #14
 8000fee:	60bb      	str	r3, [r7, #8]
			  counter14 = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  }
  	        break;
 8000ff4:	e0cf      	b.n	8001196 <main+0x58a>
 8000ff6:	bf00      	nop
 8000ff8:	0800d4bc 	.word	0x0800d4bc
 8000ffc:	20000188 	.word	0x20000188
 8001000:	2000137c 	.word	0x2000137c
  	    case 15:
		  counter15 += 1;
 8001004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001006:	3301      	adds	r3, #1
 8001008:	67bb      	str	r3, [r7, #120]	@ 0x78
		  if (counter15 >= 3) {
 800100a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800100c:	2b02      	cmp	r3, #2
 800100e:	f340 80c4 	ble.w	800119a <main+0x58e>
			Send_Gate(15, 'R');
 8001012:	463b      	mov	r3, r7
 8001014:	469c      	mov	ip, r3
 8001016:	2152      	movs	r1, #82	@ 0x52
 8001018:	200f      	movs	r0, #15
 800101a:	f005 f919 	bl	8006250 <Send_Gate.7>
			lastPress = 15;
 800101e:	230f      	movs	r3, #15
 8001020:	60bb      	str	r3, [r7, #8]
			  counter15 = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	67bb      	str	r3, [r7, #120]	@ 0x78
		  }
  	        break;
 8001026:	e0b8      	b.n	800119a <main+0x58e>
  	    case 16:
		  counter16 += 1;
 8001028:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800102a:	3301      	adds	r3, #1
 800102c:	677b      	str	r3, [r7, #116]	@ 0x74
		  if (counter16 >= 3) {
 800102e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001030:	2b02      	cmp	r3, #2
 8001032:	f340 80b4 	ble.w	800119e <main+0x592>
			Send_Gate(16, 'P');
 8001036:	463b      	mov	r3, r7
 8001038:	469c      	mov	ip, r3
 800103a:	2150      	movs	r1, #80	@ 0x50
 800103c:	2010      	movs	r0, #16
 800103e:	f005 f907 	bl	8006250 <Send_Gate.7>
			lastPress = 16;
 8001042:	2310      	movs	r3, #16
 8001044:	60bb      	str	r3, [r7, #8]
			  counter16 = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	677b      	str	r3, [r7, #116]	@ 0x74
		  }
  	        break;
 800104a:	e0a8      	b.n	800119e <main+0x592>
  	    case 17:
		  counter17 += 1;
 800104c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800104e:	3301      	adds	r3, #1
 8001050:	673b      	str	r3, [r7, #112]	@ 0x70
		  if (counter17 >= 3) {
 8001052:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001054:	2b02      	cmp	r3, #2
 8001056:	f340 80a4 	ble.w	80011a2 <main+0x596>
			Send_Gate(17, 'B');
 800105a:	463b      	mov	r3, r7
 800105c:	469c      	mov	ip, r3
 800105e:	2142      	movs	r1, #66	@ 0x42
 8001060:	2011      	movs	r0, #17
 8001062:	f005 f8f5 	bl	8006250 <Send_Gate.7>
			lastPress = 17;
 8001066:	2311      	movs	r3, #17
 8001068:	60bb      	str	r3, [r7, #8]
			  counter17 = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	673b      	str	r3, [r7, #112]	@ 0x70
		  }
  	        break;
 800106e:	e098      	b.n	80011a2 <main+0x596>
  	    case 18:
		  counter18 += 1;
 8001070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001072:	3301      	adds	r3, #1
 8001074:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  if (counter18 >= 3) {
 8001076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001078:	2b02      	cmp	r3, #2
 800107a:	f340 8094 	ble.w	80011a6 <main+0x59a>
			Send_Gate(18, 'L');
 800107e:	463b      	mov	r3, r7
 8001080:	469c      	mov	ip, r3
 8001082:	214c      	movs	r1, #76	@ 0x4c
 8001084:	2012      	movs	r0, #18
 8001086:	f005 f8e3 	bl	8006250 <Send_Gate.7>
			lastPress = 18;
 800108a:	2312      	movs	r3, #18
 800108c:	60bb      	str	r3, [r7, #8]
			  counter18 = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  }
  	        break;
 8001092:	e088      	b.n	80011a6 <main+0x59a>
  	    case 19:
		  counter19 += 1;
 8001094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001096:	3301      	adds	r3, #1
 8001098:	66bb      	str	r3, [r7, #104]	@ 0x68
		  if (counter19 >= 3) {
 800109a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800109c:	2b02      	cmp	r3, #2
 800109e:	f340 8084 	ble.w	80011aa <main+0x59e>
			Send_Gate(19, 'G');
 80010a2:	463b      	mov	r3, r7
 80010a4:	469c      	mov	ip, r3
 80010a6:	2147      	movs	r1, #71	@ 0x47
 80010a8:	2013      	movs	r0, #19
 80010aa:	f005 f8d1 	bl	8006250 <Send_Gate.7>
			lastPress = 19;
 80010ae:	2313      	movs	r3, #19
 80010b0:	60bb      	str	r3, [r7, #8]
			  counter19 = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	66bb      	str	r3, [r7, #104]	@ 0x68
		  }
  	        break;
 80010b6:	e078      	b.n	80011aa <main+0x59e>
  	    case 20:
		  counter20 += 1;
 80010b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010ba:	3301      	adds	r3, #1
 80010bc:	667b      	str	r3, [r7, #100]	@ 0x64
		  if (counter20 >= 3) {
 80010be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	dd74      	ble.n	80011ae <main+0x5a2>
			Send_Gate(20, 'T');
 80010c4:	463b      	mov	r3, r7
 80010c6:	469c      	mov	ip, r3
 80010c8:	2154      	movs	r1, #84	@ 0x54
 80010ca:	2014      	movs	r0, #20
 80010cc:	f005 f8c0 	bl	8006250 <Send_Gate.7>
			lastPress = 20;
 80010d0:	2314      	movs	r3, #20
 80010d2:	60bb      	str	r3, [r7, #8]
			  counter20 = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	667b      	str	r3, [r7, #100]	@ 0x64
		  }
  	        break;
 80010d8:	e069      	b.n	80011ae <main+0x5a2>
  	    case 21:
		  counter21 += 1;
 80010da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010dc:	3301      	adds	r3, #1
 80010de:	663b      	str	r3, [r7, #96]	@ 0x60
		  if (counter21 >= 3) {
 80010e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	dd65      	ble.n	80011b2 <main+0x5a6>
			Send_Gate(21, 'S');
 80010e6:	463b      	mov	r3, r7
 80010e8:	469c      	mov	ip, r3
 80010ea:	2153      	movs	r1, #83	@ 0x53
 80010ec:	2015      	movs	r0, #21
 80010ee:	f005 f8af 	bl	8006250 <Send_Gate.7>
			lastPress = 21;
 80010f2:	2315      	movs	r3, #21
 80010f4:	60bb      	str	r3, [r7, #8]
			  counter21 = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	663b      	str	r3, [r7, #96]	@ 0x60
		  }
  	        break;
 80010fa:	e05a      	b.n	80011b2 <main+0x5a6>
  	    case 22:
		  counter22 += 1;
 80010fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010fe:	3301      	adds	r3, #1
 8001100:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  if (counter22 >= 3) {
 8001102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001104:	2b02      	cmp	r3, #2
 8001106:	dd56      	ble.n	80011b6 <main+0x5aa>
			Send_Gate(22, 'D');
 8001108:	463b      	mov	r3, r7
 800110a:	469c      	mov	ip, r3
 800110c:	2144      	movs	r1, #68	@ 0x44
 800110e:	2016      	movs	r0, #22
 8001110:	f005 f89e 	bl	8006250 <Send_Gate.7>
			lastPress = 22;
 8001114:	2316      	movs	r3, #22
 8001116:	60bb      	str	r3, [r7, #8]
			  counter22 = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  }
  	        break;
 800111c:	e04b      	b.n	80011b6 <main+0x5aa>
  	    case 23:
		  counter23 += 1;
 800111e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001120:	3301      	adds	r3, #1
 8001122:	65bb      	str	r3, [r7, #88]	@ 0x58
		  if (counter23 >= 3) {
 8001124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001126:	2b02      	cmp	r3, #2
 8001128:	dd47      	ble.n	80011ba <main+0x5ae>
			Send_Gate(23, 'Z');
 800112a:	463b      	mov	r3, r7
 800112c:	469c      	mov	ip, r3
 800112e:	215a      	movs	r1, #90	@ 0x5a
 8001130:	2017      	movs	r0, #23
 8001132:	f005 f88d 	bl	8006250 <Send_Gate.7>
			lastPress = 23;
 8001136:	2317      	movs	r3, #23
 8001138:	60bb      	str	r3, [r7, #8]
			  counter23 = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	65bb      	str	r3, [r7, #88]	@ 0x58
		  }
  	        break;
 800113e:	e03c      	b.n	80011ba <main+0x5ae>
  	    case 24:
		  counter24 += 1;
 8001140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001142:	3301      	adds	r3, #1
 8001144:	657b      	str	r3, [r7, #84]	@ 0x54
		  if (counter24 >= 3) {
 8001146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001148:	2b02      	cmp	r3, #2
 800114a:	dd38      	ble.n	80011be <main+0x5b2>
			Send_Gate(24, '/');
 800114c:	463b      	mov	r3, r7
 800114e:	469c      	mov	ip, r3
 8001150:	212f      	movs	r1, #47	@ 0x2f
 8001152:	2018      	movs	r0, #24
 8001154:	f005 f87c 	bl	8006250 <Send_Gate.7>
			lastPress = 24;
 8001158:	2318      	movs	r3, #24
 800115a:	60bb      	str	r3, [r7, #8]
			  counter24 = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	657b      	str	r3, [r7, #84]	@ 0x54
		  }
				break;
 8001160:	e02d      	b.n	80011be <main+0x5b2>
  	    default:
  	        break;
 8001162:	bf00      	nop
 8001164:	e5c7      	b.n	8000cf6 <main+0xea>
  	        break;
 8001166:	bf00      	nop
 8001168:	e5c5      	b.n	8000cf6 <main+0xea>
  	        break;
 800116a:	bf00      	nop
 800116c:	e5c3      	b.n	8000cf6 <main+0xea>
  	        break;
 800116e:	bf00      	nop
 8001170:	e5c1      	b.n	8000cf6 <main+0xea>
  	        break;
 8001172:	bf00      	nop
 8001174:	e5bf      	b.n	8000cf6 <main+0xea>
  	        break;
 8001176:	bf00      	nop
 8001178:	e5bd      	b.n	8000cf6 <main+0xea>
  	        break;
 800117a:	bf00      	nop
 800117c:	e5bb      	b.n	8000cf6 <main+0xea>
  	        break;
 800117e:	bf00      	nop
 8001180:	e5b9      	b.n	8000cf6 <main+0xea>
  	        break;
 8001182:	bf00      	nop
 8001184:	e5b7      	b.n	8000cf6 <main+0xea>
  	        break;
 8001186:	bf00      	nop
 8001188:	e5b5      	b.n	8000cf6 <main+0xea>
  	        break;
 800118a:	bf00      	nop
 800118c:	e5b3      	b.n	8000cf6 <main+0xea>
  	        break;
 800118e:	bf00      	nop
 8001190:	e5b1      	b.n	8000cf6 <main+0xea>
  	        break;
 8001192:	bf00      	nop
 8001194:	e5af      	b.n	8000cf6 <main+0xea>
  	        break;
 8001196:	bf00      	nop
 8001198:	e5ad      	b.n	8000cf6 <main+0xea>
  	        break;
 800119a:	bf00      	nop
 800119c:	e5ab      	b.n	8000cf6 <main+0xea>
  	        break;
 800119e:	bf00      	nop
 80011a0:	e5a9      	b.n	8000cf6 <main+0xea>
  	        break;
 80011a2:	bf00      	nop
 80011a4:	e5a7      	b.n	8000cf6 <main+0xea>
  	        break;
 80011a6:	bf00      	nop
 80011a8:	e5a5      	b.n	8000cf6 <main+0xea>
  	        break;
 80011aa:	bf00      	nop
 80011ac:	e5a3      	b.n	8000cf6 <main+0xea>
  	        break;
 80011ae:	bf00      	nop
 80011b0:	e5a1      	b.n	8000cf6 <main+0xea>
  	        break;
 80011b2:	bf00      	nop
 80011b4:	e59f      	b.n	8000cf6 <main+0xea>
  	        break;
 80011b6:	bf00      	nop
 80011b8:	e59d      	b.n	8000cf6 <main+0xea>
  	        break;
 80011ba:	bf00      	nop
 80011bc:	e59b      	b.n	8000cf6 <main+0xea>
				break;
 80011be:	bf00      	nop
    pressed_key = Scan_KeyMatrix();
 80011c0:	e599      	b.n	8000cf6 <main+0xea>
 80011c2:	bf00      	nop

080011c4 <Clear_Buffer.11>:
  void Clear_Buffer(){
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4662      	mov	r2, ip
 80011cc:	f8c7 c004 	str.w	ip, [r7, #4]
  	  for (int i = 0; i < 22; i++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e007      	b.n	80011e6 <Clear_Buffer.11+0x22>
  	  		          charbuffer[i] = '\0';
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	332a      	adds	r3, #42	@ 0x2a
 80011dc:	2100      	movs	r1, #0
 80011de:	7019      	strb	r1, [r3, #0]
  	  for (int i = 0; i < 22; i++) {
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b15      	cmp	r3, #21
 80011ea:	ddf4      	ble.n	80011d6 <Clear_Buffer.11+0x12>
    }
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <Send_Character.6>:
  void Send_Character(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	f8c7 c004 	str.w	ip, [r7, #4]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8001206:	2208      	movs	r2, #8
 8001208:	490c      	ldr	r1, [pc, #48]	@ (800123c <Send_Character.6+0x40>)
 800120a:	480d      	ldr	r0, [pc, #52]	@ (8001240 <Send_Character.6+0x44>)
 800120c:	f009 fcb4 	bl	800ab78 <USBD_HID_SendReport>
	  HAL_Delay(20);
 8001210:	2014      	movs	r0, #20
 8001212:	f005 fbc3 	bl	800699c <HAL_Delay>
	  keyBoardHIDsub.MODIFIER=0x00;
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <Send_Character.6+0x40>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
	  keyBoardHIDsub.KEYCODE2=0x00;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <Send_Character.6+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8001222:	2208      	movs	r2, #8
 8001224:	4905      	ldr	r1, [pc, #20]	@ (800123c <Send_Character.6+0x40>)
 8001226:	4806      	ldr	r0, [pc, #24]	@ (8001240 <Send_Character.6+0x44>)
 8001228:	f009 fca6 	bl	800ab78 <USBD_HID_SendReport>
	  HAL_Delay(20);
 800122c:	2014      	movs	r0, #20
 800122e:	f005 fbb5 	bl	800699c <HAL_Delay>
	  }
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200001d0 	.word	0x200001d0
 8001240:	2000138c 	.word	0x2000138c

08001244 <Set_Character.5>:
  void Set_Character(char i){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	f8c7 c000 	str.w	ip, [r7]
	  switch(i){
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	3b20      	subs	r3, #32
 8001256:	2b5a      	cmp	r3, #90	@ 0x5a
 8001258:	f200 8228 	bhi.w	80016ac <Set_Character.5+0x468>
 800125c:	a201      	add	r2, pc, #4	@ (adr r2, 8001264 <Set_Character.5+0x20>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001655 	.word	0x08001655
 8001268:	080015c9 	.word	0x080015c9
 800126c:	080016ad 	.word	0x080016ad
 8001270:	080015e5 	.word	0x080015e5
 8001274:	080015f3 	.word	0x080015f3
 8001278:	08001601 	.word	0x08001601
 800127c:	0800160f 	.word	0x0800160f
 8001280:	08001663 	.word	0x08001663
 8001284:	0800162b 	.word	0x0800162b
 8001288:	08001639 	.word	0x08001639
 800128c:	0800161d 	.word	0x0800161d
 8001290:	08001647 	.word	0x08001647
 8001294:	0800167f 	.word	0x0800167f
 8001298:	080016ad 	.word	0x080016ad
 800129c:	08001671 	.word	0x08001671
 80012a0:	080016ad 	.word	0x080016ad
 80012a4:	080015bb 	.word	0x080015bb
 80012a8:	0800153d 	.word	0x0800153d
 80012ac:	0800154b 	.word	0x0800154b
 80012b0:	08001559 	.word	0x08001559
 80012b4:	08001567 	.word	0x08001567
 80012b8:	08001575 	.word	0x08001575
 80012bc:	08001583 	.word	0x08001583
 80012c0:	08001591 	.word	0x08001591
 80012c4:	0800159f 	.word	0x0800159f
 80012c8:	080015ad 	.word	0x080015ad
 80012cc:	080016ad 	.word	0x080016ad
 80012d0:	080016ad 	.word	0x080016ad
 80012d4:	080016ad 	.word	0x080016ad
 80012d8:	080016ad 	.word	0x080016ad
 80012dc:	080016ad 	.word	0x080016ad
 80012e0:	08001691 	.word	0x08001691
 80012e4:	080015d7 	.word	0x080015d7
 80012e8:	080016ad 	.word	0x080016ad
 80012ec:	080016ad 	.word	0x080016ad
 80012f0:	080016ad 	.word	0x080016ad
 80012f4:	080016ad 	.word	0x080016ad
 80012f8:	080016ad 	.word	0x080016ad
 80012fc:	080016ad 	.word	0x080016ad
 8001300:	080016ad 	.word	0x080016ad
 8001304:	080016ad 	.word	0x080016ad
 8001308:	080016ad 	.word	0x080016ad
 800130c:	080016ad 	.word	0x080016ad
 8001310:	080016ad 	.word	0x080016ad
 8001314:	080016ad 	.word	0x080016ad
 8001318:	080016ad 	.word	0x080016ad
 800131c:	080016ad 	.word	0x080016ad
 8001320:	080016ad 	.word	0x080016ad
 8001324:	080016ad 	.word	0x080016ad
 8001328:	080016ad 	.word	0x080016ad
 800132c:	080016ad 	.word	0x080016ad
 8001330:	080016ad 	.word	0x080016ad
 8001334:	080016ad 	.word	0x080016ad
 8001338:	080016ad 	.word	0x080016ad
 800133c:	080016ad 	.word	0x080016ad
 8001340:	080016ad 	.word	0x080016ad
 8001344:	080016ad 	.word	0x080016ad
 8001348:	080016ad 	.word	0x080016ad
 800134c:	080016ad 	.word	0x080016ad
 8001350:	080016ad 	.word	0x080016ad
 8001354:	080016ad 	.word	0x080016ad
 8001358:	080016ad 	.word	0x080016ad
 800135c:	0800169f 	.word	0x0800169f
 8001360:	080016ad 	.word	0x080016ad
 8001364:	080016ad 	.word	0x080016ad
 8001368:	080013d1 	.word	0x080013d1
 800136c:	080013df 	.word	0x080013df
 8001370:	080013ed 	.word	0x080013ed
 8001374:	080013fb 	.word	0x080013fb
 8001378:	08001409 	.word	0x08001409
 800137c:	08001417 	.word	0x08001417
 8001380:	08001425 	.word	0x08001425
 8001384:	08001433 	.word	0x08001433
 8001388:	08001441 	.word	0x08001441
 800138c:	0800144f 	.word	0x0800144f
 8001390:	0800145d 	.word	0x0800145d
 8001394:	0800146b 	.word	0x0800146b
 8001398:	08001479 	.word	0x08001479
 800139c:	08001487 	.word	0x08001487
 80013a0:	08001495 	.word	0x08001495
 80013a4:	080014a3 	.word	0x080014a3
 80013a8:	080014b1 	.word	0x080014b1
 80013ac:	080014bf 	.word	0x080014bf
 80013b0:	080014cd 	.word	0x080014cd
 80013b4:	080014db 	.word	0x080014db
 80013b8:	080014e9 	.word	0x080014e9
 80013bc:	080014f7 	.word	0x080014f7
 80013c0:	08001505 	.word	0x08001505
 80013c4:	08001513 	.word	0x08001513
 80013c8:	08001521 	.word	0x08001521
 80013cc:	0800152f 	.word	0x0800152f
					keyBoardHIDsub.MODIFIER=0x00;
 80013d0:	4bae      	ldr	r3, [pc, #696]	@ (800168c <Set_Character.5+0x448>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
	  			    keyBoardHIDsub.KEYCODE2=KEY_A;
 80013d6:	4bad      	ldr	r3, [pc, #692]	@ (800168c <Set_Character.5+0x448>)
 80013d8:	2204      	movs	r2, #4
 80013da:	70da      	strb	r2, [r3, #3]
	  			    break;
 80013dc:	e16d      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 80013de:	4bab      	ldr	r3, [pc, #684]	@ (800168c <Set_Character.5+0x448>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	  	  		  	keyBoardHIDsub.KEYCODE2=KEY_B;
 80013e4:	4ba9      	ldr	r3, [pc, #676]	@ (800168c <Set_Character.5+0x448>)
 80013e6:	2205      	movs	r2, #5
 80013e8:	70da      	strb	r2, [r3, #3]
	  	  		  	break;
 80013ea:	e166      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80013ec:	4ba7      	ldr	r3, [pc, #668]	@ (800168c <Set_Character.5+0x448>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_C;
 80013f2:	4ba6      	ldr	r3, [pc, #664]	@ (800168c <Set_Character.5+0x448>)
 80013f4:	2206      	movs	r2, #6
 80013f6:	70da      	strb	r2, [r3, #3]
	    			break;
 80013f8:	e15f      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80013fa:	4ba4      	ldr	r3, [pc, #656]	@ (800168c <Set_Character.5+0x448>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_D;
 8001400:	4ba2      	ldr	r3, [pc, #648]	@ (800168c <Set_Character.5+0x448>)
 8001402:	2207      	movs	r2, #7
 8001404:	70da      	strb	r2, [r3, #3]
	  			break;
 8001406:	e158      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001408:	4ba0      	ldr	r3, [pc, #640]	@ (800168c <Set_Character.5+0x448>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_E;
 800140e:	4b9f      	ldr	r3, [pc, #636]	@ (800168c <Set_Character.5+0x448>)
 8001410:	2208      	movs	r2, #8
 8001412:	70da      	strb	r2, [r3, #3]
	  			break;
 8001414:	e151      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001416:	4b9d      	ldr	r3, [pc, #628]	@ (800168c <Set_Character.5+0x448>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_F;
 800141c:	4b9b      	ldr	r3, [pc, #620]	@ (800168c <Set_Character.5+0x448>)
 800141e:	2209      	movs	r2, #9
 8001420:	70da      	strb	r2, [r3, #3]
	  			break;
 8001422:	e14a      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001424:	4b99      	ldr	r3, [pc, #612]	@ (800168c <Set_Character.5+0x448>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_G;
 800142a:	4b98      	ldr	r3, [pc, #608]	@ (800168c <Set_Character.5+0x448>)
 800142c:	220a      	movs	r2, #10
 800142e:	70da      	strb	r2, [r3, #3]
	  			break;
 8001430:	e143      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001432:	4b96      	ldr	r3, [pc, #600]	@ (800168c <Set_Character.5+0x448>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_H;
 8001438:	4b94      	ldr	r3, [pc, #592]	@ (800168c <Set_Character.5+0x448>)
 800143a:	220b      	movs	r2, #11
 800143c:	70da      	strb	r2, [r3, #3]
	  			break;
 800143e:	e13c      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001440:	4b92      	ldr	r3, [pc, #584]	@ (800168c <Set_Character.5+0x448>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_I;
 8001446:	4b91      	ldr	r3, [pc, #580]	@ (800168c <Set_Character.5+0x448>)
 8001448:	220c      	movs	r2, #12
 800144a:	70da      	strb	r2, [r3, #3]
	  			break;
 800144c:	e135      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800144e:	4b8f      	ldr	r3, [pc, #572]	@ (800168c <Set_Character.5+0x448>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_J;
 8001454:	4b8d      	ldr	r3, [pc, #564]	@ (800168c <Set_Character.5+0x448>)
 8001456:	220d      	movs	r2, #13
 8001458:	70da      	strb	r2, [r3, #3]
					break;
 800145a:	e12e      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800145c:	4b8b      	ldr	r3, [pc, #556]	@ (800168c <Set_Character.5+0x448>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_K;
 8001462:	4b8a      	ldr	r3, [pc, #552]	@ (800168c <Set_Character.5+0x448>)
 8001464:	220e      	movs	r2, #14
 8001466:	70da      	strb	r2, [r3, #3]
	  			break;
 8001468:	e127      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800146a:	4b88      	ldr	r3, [pc, #544]	@ (800168c <Set_Character.5+0x448>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_L;
 8001470:	4b86      	ldr	r3, [pc, #536]	@ (800168c <Set_Character.5+0x448>)
 8001472:	220f      	movs	r2, #15
 8001474:	70da      	strb	r2, [r3, #3]
	  			break;
 8001476:	e120      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001478:	4b84      	ldr	r3, [pc, #528]	@ (800168c <Set_Character.5+0x448>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_M;
 800147e:	4b83      	ldr	r3, [pc, #524]	@ (800168c <Set_Character.5+0x448>)
 8001480:	2210      	movs	r2, #16
 8001482:	70da      	strb	r2, [r3, #3]
	  			break;
 8001484:	e119      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001486:	4b81      	ldr	r3, [pc, #516]	@ (800168c <Set_Character.5+0x448>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_N;
 800148c:	4b7f      	ldr	r3, [pc, #508]	@ (800168c <Set_Character.5+0x448>)
 800148e:	2211      	movs	r2, #17
 8001490:	70da      	strb	r2, [r3, #3]
	  			break;
 8001492:	e112      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001494:	4b7d      	ldr	r3, [pc, #500]	@ (800168c <Set_Character.5+0x448>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_O;
 800149a:	4b7c      	ldr	r3, [pc, #496]	@ (800168c <Set_Character.5+0x448>)
 800149c:	2212      	movs	r2, #18
 800149e:	70da      	strb	r2, [r3, #3]
	  			break;
 80014a0:	e10b      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014a2:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <Set_Character.5+0x448>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_P;
 80014a8:	4b78      	ldr	r3, [pc, #480]	@ (800168c <Set_Character.5+0x448>)
 80014aa:	2213      	movs	r2, #19
 80014ac:	70da      	strb	r2, [r3, #3]
	  			break;
 80014ae:	e104      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014b0:	4b76      	ldr	r3, [pc, #472]	@ (800168c <Set_Character.5+0x448>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_Q;
 80014b6:	4b75      	ldr	r3, [pc, #468]	@ (800168c <Set_Character.5+0x448>)
 80014b8:	2214      	movs	r2, #20
 80014ba:	70da      	strb	r2, [r3, #3]
	  			break;
 80014bc:	e0fd      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014be:	4b73      	ldr	r3, [pc, #460]	@ (800168c <Set_Character.5+0x448>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_R;
 80014c4:	4b71      	ldr	r3, [pc, #452]	@ (800168c <Set_Character.5+0x448>)
 80014c6:	2215      	movs	r2, #21
 80014c8:	70da      	strb	r2, [r3, #3]
	  			break;
 80014ca:	e0f6      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014cc:	4b6f      	ldr	r3, [pc, #444]	@ (800168c <Set_Character.5+0x448>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_S;
 80014d2:	4b6e      	ldr	r3, [pc, #440]	@ (800168c <Set_Character.5+0x448>)
 80014d4:	2216      	movs	r2, #22
 80014d6:	70da      	strb	r2, [r3, #3]
	  			break;
 80014d8:	e0ef      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014da:	4b6c      	ldr	r3, [pc, #432]	@ (800168c <Set_Character.5+0x448>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_T;
 80014e0:	4b6a      	ldr	r3, [pc, #424]	@ (800168c <Set_Character.5+0x448>)
 80014e2:	2217      	movs	r2, #23
 80014e4:	70da      	strb	r2, [r3, #3]
	  			break;
 80014e6:	e0e8      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014e8:	4b68      	ldr	r3, [pc, #416]	@ (800168c <Set_Character.5+0x448>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_U;
 80014ee:	4b67      	ldr	r3, [pc, #412]	@ (800168c <Set_Character.5+0x448>)
 80014f0:	2218      	movs	r2, #24
 80014f2:	70da      	strb	r2, [r3, #3]
	  			break;
 80014f4:	e0e1      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80014f6:	4b65      	ldr	r3, [pc, #404]	@ (800168c <Set_Character.5+0x448>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
	    			keyBoardHIDsub.KEYCODE2=KEY_V;
 80014fc:	4b63      	ldr	r3, [pc, #396]	@ (800168c <Set_Character.5+0x448>)
 80014fe:	2219      	movs	r2, #25
 8001500:	70da      	strb	r2, [r3, #3]
	  			break;
 8001502:	e0da      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001504:	4b61      	ldr	r3, [pc, #388]	@ (800168c <Set_Character.5+0x448>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_W;
 800150a:	4b60      	ldr	r3, [pc, #384]	@ (800168c <Set_Character.5+0x448>)
 800150c:	221a      	movs	r2, #26
 800150e:	70da      	strb	r2, [r3, #3]
				break;
 8001510:	e0d3      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001512:	4b5e      	ldr	r3, [pc, #376]	@ (800168c <Set_Character.5+0x448>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_X;
 8001518:	4b5c      	ldr	r3, [pc, #368]	@ (800168c <Set_Character.5+0x448>)
 800151a:	221b      	movs	r2, #27
 800151c:	70da      	strb	r2, [r3, #3]
				break;
 800151e:	e0cc      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001520:	4b5a      	ldr	r3, [pc, #360]	@ (800168c <Set_Character.5+0x448>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_Y;
 8001526:	4b59      	ldr	r3, [pc, #356]	@ (800168c <Set_Character.5+0x448>)
 8001528:	221c      	movs	r2, #28
 800152a:	70da      	strb	r2, [r3, #3]
				break;
 800152c:	e0c5      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800152e:	4b57      	ldr	r3, [pc, #348]	@ (800168c <Set_Character.5+0x448>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_Z;
 8001534:	4b55      	ldr	r3, [pc, #340]	@ (800168c <Set_Character.5+0x448>)
 8001536:	221d      	movs	r2, #29
 8001538:	70da      	strb	r2, [r3, #3]
				break;
 800153a:	e0be      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800153c:	4b53      	ldr	r3, [pc, #332]	@ (800168c <Set_Character.5+0x448>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_1;
 8001542:	4b52      	ldr	r3, [pc, #328]	@ (800168c <Set_Character.5+0x448>)
 8001544:	221e      	movs	r2, #30
 8001546:	70da      	strb	r2, [r3, #3]
				break;
 8001548:	e0b7      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800154a:	4b50      	ldr	r3, [pc, #320]	@ (800168c <Set_Character.5+0x448>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_2;
 8001550:	4b4e      	ldr	r3, [pc, #312]	@ (800168c <Set_Character.5+0x448>)
 8001552:	221f      	movs	r2, #31
 8001554:	70da      	strb	r2, [r3, #3]
				break;
 8001556:	e0b0      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001558:	4b4c      	ldr	r3, [pc, #304]	@ (800168c <Set_Character.5+0x448>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_3;
 800155e:	4b4b      	ldr	r3, [pc, #300]	@ (800168c <Set_Character.5+0x448>)
 8001560:	2220      	movs	r2, #32
 8001562:	70da      	strb	r2, [r3, #3]
				break;
 8001564:	e0a9      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001566:	4b49      	ldr	r3, [pc, #292]	@ (800168c <Set_Character.5+0x448>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_4;
 800156c:	4b47      	ldr	r3, [pc, #284]	@ (800168c <Set_Character.5+0x448>)
 800156e:	2221      	movs	r2, #33	@ 0x21
 8001570:	70da      	strb	r2, [r3, #3]
				break;
 8001572:	e0a2      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001574:	4b45      	ldr	r3, [pc, #276]	@ (800168c <Set_Character.5+0x448>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_5;
 800157a:	4b44      	ldr	r3, [pc, #272]	@ (800168c <Set_Character.5+0x448>)
 800157c:	2222      	movs	r2, #34	@ 0x22
 800157e:	70da      	strb	r2, [r3, #3]
				break;
 8001580:	e09b      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001582:	4b42      	ldr	r3, [pc, #264]	@ (800168c <Set_Character.5+0x448>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_6;
 8001588:	4b40      	ldr	r3, [pc, #256]	@ (800168c <Set_Character.5+0x448>)
 800158a:	2223      	movs	r2, #35	@ 0x23
 800158c:	70da      	strb	r2, [r3, #3]
				break;
 800158e:	e094      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 8001590:	4b3e      	ldr	r3, [pc, #248]	@ (800168c <Set_Character.5+0x448>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_7;
 8001596:	4b3d      	ldr	r3, [pc, #244]	@ (800168c <Set_Character.5+0x448>)
 8001598:	2224      	movs	r2, #36	@ 0x24
 800159a:	70da      	strb	r2, [r3, #3]
				break;
 800159c:	e08d      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 800159e:	4b3b      	ldr	r3, [pc, #236]	@ (800168c <Set_Character.5+0x448>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_8;
 80015a4:	4b39      	ldr	r3, [pc, #228]	@ (800168c <Set_Character.5+0x448>)
 80015a6:	2225      	movs	r2, #37	@ 0x25
 80015a8:	70da      	strb	r2, [r3, #3]
				break;
 80015aa:	e086      	b.n	80016ba <Set_Character.5+0x476>
				keyBoardHIDsub.MODIFIER=0x00;
 80015ac:	4b37      	ldr	r3, [pc, #220]	@ (800168c <Set_Character.5+0x448>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_9;
 80015b2:	4b36      	ldr	r3, [pc, #216]	@ (800168c <Set_Character.5+0x448>)
 80015b4:	2226      	movs	r2, #38	@ 0x26
 80015b6:	70da      	strb	r2, [r3, #3]
				break;
 80015b8:	e07f      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 80015ba:	4b34      	ldr	r3, [pc, #208]	@ (800168c <Set_Character.5+0x448>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_0;
 80015c0:	4b32      	ldr	r3, [pc, #200]	@ (800168c <Set_Character.5+0x448>)
 80015c2:	2227      	movs	r2, #39	@ 0x27
 80015c4:	70da      	strb	r2, [r3, #3]
				break;
 80015c6:	e078      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 80015c8:	4b30      	ldr	r3, [pc, #192]	@ (800168c <Set_Character.5+0x448>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_1;
 80015ce:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <Set_Character.5+0x448>)
 80015d0:	221e      	movs	r2, #30
 80015d2:	70da      	strb	r2, [r3, #3]
				break;
 80015d4:	e071      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <Set_Character.5+0x448>)
 80015d8:	2202      	movs	r2, #2
 80015da:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_2;
 80015dc:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <Set_Character.5+0x448>)
 80015de:	221f      	movs	r2, #31
 80015e0:	70da      	strb	r2, [r3, #3]
				break;
 80015e2:	e06a      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <Set_Character.5+0x448>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_BACKSPACE;
 80015ea:	4b28      	ldr	r3, [pc, #160]	@ (800168c <Set_Character.5+0x448>)
 80015ec:	222a      	movs	r2, #42	@ 0x2a
 80015ee:	70da      	strb	r2, [r3, #3]
				break;
 80015f0:	e063      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 80015f2:	4b26      	ldr	r3, [pc, #152]	@ (800168c <Set_Character.5+0x448>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_4;
 80015f8:	4b24      	ldr	r3, [pc, #144]	@ (800168c <Set_Character.5+0x448>)
 80015fa:	2221      	movs	r2, #33	@ 0x21
 80015fc:	70da      	strb	r2, [r3, #3]
				break;
 80015fe:	e05c      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 8001600:	4b22      	ldr	r3, [pc, #136]	@ (800168c <Set_Character.5+0x448>)
 8001602:	2202      	movs	r2, #2
 8001604:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_5;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <Set_Character.5+0x448>)
 8001608:	2222      	movs	r2, #34	@ 0x22
 800160a:	70da      	strb	r2, [r3, #3]
				break;
 800160c:	e055      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <Set_Character.5+0x448>)
 8001610:	2202      	movs	r2, #2
 8001612:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_7;
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <Set_Character.5+0x448>)
 8001616:	2224      	movs	r2, #36	@ 0x24
 8001618:	70da      	strb	r2, [r3, #3]
				break;
 800161a:	e04e      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 800161c:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <Set_Character.5+0x448>)
 800161e:	2202      	movs	r2, #2
 8001620:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_8;
 8001622:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <Set_Character.5+0x448>)
 8001624:	2225      	movs	r2, #37	@ 0x25
 8001626:	70da      	strb	r2, [r3, #3]
				break;
 8001628:	e047      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 800162a:	4b18      	ldr	r3, [pc, #96]	@ (800168c <Set_Character.5+0x448>)
 800162c:	2202      	movs	r2, #2
 800162e:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_9;
 8001630:	4b16      	ldr	r3, [pc, #88]	@ (800168c <Set_Character.5+0x448>)
 8001632:	2226      	movs	r2, #38	@ 0x26
 8001634:	70da      	strb	r2, [r3, #3]
				break;
 8001636:	e040      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <Set_Character.5+0x448>)
 800163a:	2202      	movs	r2, #2
 800163c:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_0;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <Set_Character.5+0x448>)
 8001640:	2227      	movs	r2, #39	@ 0x27
 8001642:	70da      	strb	r2, [r3, #3]
				break;
 8001644:	e039      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x02;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <Set_Character.5+0x448>)
 8001648:	2202      	movs	r2, #2
 800164a:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_SPACE;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <Set_Character.5+0x448>)
 800164e:	222c      	movs	r2, #44	@ 0x2c
 8001650:	70da      	strb	r2, [r3, #3]
				break;
 8001652:	e032      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 8001654:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <Set_Character.5+0x448>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_SPACE;
 800165a:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <Set_Character.5+0x448>)
 800165c:	222c      	movs	r2, #44	@ 0x2c
 800165e:	70da      	strb	r2, [r3, #3]
				break;
 8001660:	e02b      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <Set_Character.5+0x448>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_APOSTROPHE;
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <Set_Character.5+0x448>)
 800166a:	2234      	movs	r2, #52	@ 0x34
 800166c:	70da      	strb	r2, [r3, #3]
				break;
 800166e:	e024      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <Set_Character.5+0x448>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_DOT;
 8001676:	4b05      	ldr	r3, [pc, #20]	@ (800168c <Set_Character.5+0x448>)
 8001678:	2237      	movs	r2, #55	@ 0x37
 800167a:	70da      	strb	r2, [r3, #3]
				break;
 800167c:	e01d      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 800167e:	4b03      	ldr	r3, [pc, #12]	@ (800168c <Set_Character.5+0x448>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_COMMA;
 8001684:	4b01      	ldr	r3, [pc, #4]	@ (800168c <Set_Character.5+0x448>)
 8001686:	2236      	movs	r2, #54	@ 0x36
 8001688:	70da      	strb	r2, [r3, #3]
				break;
 800168a:	e016      	b.n	80016ba <Set_Character.5+0x476>
 800168c:	200001d0 	.word	0x200001d0
					keyBoardHIDsub.MODIFIER=0x02;
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <Set_Character.5+0x484>)
 8001692:	2202      	movs	r2, #2
 8001694:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_SLASH;
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <Set_Character.5+0x484>)
 8001698:	2238      	movs	r2, #56	@ 0x38
 800169a:	70da      	strb	r2, [r3, #3]
				break;
 800169c:	e00d      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <Set_Character.5+0x484>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=KEY_ENTER;
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <Set_Character.5+0x484>)
 80016a6:	2228      	movs	r2, #40	@ 0x28
 80016a8:	70da      	strb	r2, [r3, #3]
				break;
 80016aa:	e006      	b.n	80016ba <Set_Character.5+0x476>
					keyBoardHIDsub.MODIFIER=0x00;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <Set_Character.5+0x484>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
					keyBoardHIDsub.KEYCODE2=0x00;
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <Set_Character.5+0x484>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	70da      	strb	r2, [r3, #3]
				break;
 80016b8:	bf00      	nop
  }
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	200001d0 	.word	0x200001d0

080016cc <hashFunction.2>:
  unsigned int hashFunction(const char *key) {
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	f8c7 c000 	str.w	ip, [r7]
      unsigned int hash = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
      while (*key) {
 80016dc:	e007      	b.n	80016ee <hashFunction.2+0x22>
          hash = (hash << 5) + *key++;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	015a      	lsls	r2, r3, #5
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	1c59      	adds	r1, r3, #1
 80016e6:	6079      	str	r1, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
      while (*key) {
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f3      	bne.n	80016de <hashFunction.2+0x12>
      return hash % TABLE_SIZE;
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <hashFunction.2+0x4c>)
 80016fa:	fba3 1302 	umull	r1, r3, r3, r2
 80016fe:	0a9b      	lsrs	r3, r3, #10
 8001700:	f240 4169 	movw	r1, #1129	@ 0x469
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	1ad3      	subs	r3, r2, r3
  }
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e830fa55 	.word	0xe830fa55

0800171c <insert.1>:
  void insert(const char *key, const char *value) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	4663      	mov	r3, ip
 8001728:	f8c7 c004 	str.w	ip, [r7, #4]
      unsigned int index = hashFunction(key);
 800172c:	469c      	mov	ip, r3
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff ffcc 	bl	80016cc <hashFunction.2>
 8001734:	6178      	str	r0, [r7, #20]
      while (hashTable[index] != NULL) {
 8001736:	e028      	b.n	800178a <insert.1+0x6e>
          if (strcmp(hashTable[index]->key, key) == 0) {
 8001738:	4a2e      	ldr	r2, [pc, #184]	@ (80017f4 <insert.1+0xd8>)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fd48 	bl	80001d8 <strcmp>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d111      	bne.n	8001772 <insert.1+0x56>
              strncpy(hashTable[index]->value, value, MAX_VALUE_SIZE - 1);
 800174e:	4a29      	ldr	r2, [pc, #164]	@ (80017f4 <insert.1+0xd8>)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	3314      	adds	r3, #20
 8001758:	221d      	movs	r2, #29
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	4618      	mov	r0, r3
 800175e:	f00b fc87 	bl	800d070 <strncpy>
              hashTable[index]->value[MAX_VALUE_SIZE - 1] = '\0';
 8001762:	4a24      	ldr	r2, [pc, #144]	@ (80017f4 <insert.1+0xd8>)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
              return;
 8001770:	e03d      	b.n	80017ee <insert.1+0xd2>
          index = (index + 1) % TABLE_SIZE;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	4a20      	ldr	r2, [pc, #128]	@ (80017f8 <insert.1+0xdc>)
 8001778:	fba2 1203 	umull	r1, r2, r2, r3
 800177c:	0a92      	lsrs	r2, r2, #10
 800177e:	f240 4169 	movw	r1, #1129	@ 0x469
 8001782:	fb01 f202 	mul.w	r2, r1, r2
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	617b      	str	r3, [r7, #20]
      while (hashTable[index] != NULL) {
 800178a:	4a1a      	ldr	r2, [pc, #104]	@ (80017f4 <insert.1+0xd8>)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1d0      	bne.n	8001738 <insert.1+0x1c>
      HashEntry *newEntry = (HashEntry *)malloc(sizeof(HashEntry));
 8001796:	2032      	movs	r0, #50	@ 0x32
 8001798:	f00b f9b8 	bl	800cb0c <malloc>
 800179c:	4603      	mov	r3, r0
 800179e:	613b      	str	r3, [r7, #16]
      if (newEntry == NULL) {
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10a      	bne.n	80017bc <insert.1+0xa0>
          fprintf(stderr, "Memory allocation failed\n");
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <insert.1+0xe0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2219      	movs	r2, #25
 80017ae:	2101      	movs	r1, #1
 80017b0:	4813      	ldr	r0, [pc, #76]	@ (8001800 <insert.1+0xe4>)
 80017b2:	f00b fb6f 	bl	800ce94 <fwrite>
          exit(EXIT_FAILURE);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f00b f996 	bl	800cae8 <exit>
      strncpy(newEntry->key, key, MAX_KEY_SIZE - 1);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2213      	movs	r2, #19
 80017c0:	68f9      	ldr	r1, [r7, #12]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00b fc54 	bl	800d070 <strncpy>
      newEntry->key[MAX_KEY_SIZE - 1] = '\0';
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2200      	movs	r2, #0
 80017cc:	74da      	strb	r2, [r3, #19]
      strncpy(newEntry->value, value, MAX_VALUE_SIZE - 1);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	3314      	adds	r3, #20
 80017d2:	221d      	movs	r2, #29
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00b fc4a 	bl	800d070 <strncpy>
      newEntry->value[MAX_VALUE_SIZE - 1] = '\0';
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      hashTable[index] = newEntry;
 80017e4:	4903      	ldr	r1, [pc, #12]	@ (80017f4 <insert.1+0xd8>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200001d8 	.word	0x200001d8
 80017f8:	e830fa55 	.word	0xe830fa55
 80017fc:	2000011c 	.word	0x2000011c
 8001800:	0800d4d4 	.word	0x0800d4d4

08001804 <search.10>:
  const char *search(const char *key) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	4663      	mov	r3, ip
 800180e:	f8c7 c000 	str.w	ip, [r7]
      unsigned int index = hashFunction(key);
 8001812:	469c      	mov	ip, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff59 	bl	80016cc <hashFunction.2>
 800181a:	60f8      	str	r0, [r7, #12]
      while (hashTable[index] != NULL) {
 800181c:	e01c      	b.n	8001858 <search.10+0x54>
          if (strcmp(hashTable[index]->key, key) == 0) {
 800181e:	4a14      	ldr	r2, [pc, #80]	@ (8001870 <search.10+0x6c>)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fcd5 	bl	80001d8 <strcmp>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <search.10+0x3c>
              return hashTable[index]->value;
 8001834:	4a0e      	ldr	r2, [pc, #56]	@ (8001870 <search.10+0x6c>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	3314      	adds	r3, #20
 800183e:	e012      	b.n	8001866 <search.10+0x62>
          index = (index + 1) % TABLE_SIZE; // Linear probing
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3301      	adds	r3, #1
 8001844:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <search.10+0x70>)
 8001846:	fba2 1203 	umull	r1, r2, r2, r3
 800184a:	0a92      	lsrs	r2, r2, #10
 800184c:	f240 4169 	movw	r1, #1129	@ 0x469
 8001850:	fb01 f202 	mul.w	r2, r1, r2
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
      while (hashTable[index] != NULL) {
 8001858:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <search.10+0x6c>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1dc      	bne.n	800181e <search.10+0x1a>
      return NULL; // Key not found
 8001864:	2300      	movs	r3, #0
  }
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001d8 	.word	0x200001d8
 8001874:	e830fa55 	.word	0xe830fa55

08001878 <hashInit.0>:
  void hashInit(){
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	4664      	mov	r4, ip
 8001880:	f8c7 c004 	str.w	ip, [r7, #4]
	    for (int i = 0; i < TABLE_SIZE; i++) {
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e007      	b.n	800189a <hashInit.0+0x22>
	        hashTable[i] = NULL;
 800188a:	4ab4      	ldr	r2, [pc, #720]	@ (8001b5c <hashInit.0+0x2e4>)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2100      	movs	r1, #0
 8001890:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    for (int i = 0; i < TABLE_SIZE; i++) {
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f5b3 6f8d 	cmp.w	r3, #1128	@ 0x468
 80018a0:	ddf3      	ble.n	800188a <hashInit.0+0x12>
	    insert("S", "is");
 80018a2:	46a4      	mov	ip, r4
 80018a4:	49ae      	ldr	r1, [pc, #696]	@ (8001b60 <hashInit.0+0x2e8>)
 80018a6:	48af      	ldr	r0, [pc, #700]	@ (8001b64 <hashInit.0+0x2ec>)
 80018a8:	f7ff ff38 	bl	800171c <insert.1>
	    insert("ST", "is it");
 80018ac:	46a4      	mov	ip, r4
 80018ae:	49ae      	ldr	r1, [pc, #696]	@ (8001b68 <hashInit.0+0x2f0>)
 80018b0:	48ae      	ldr	r0, [pc, #696]	@ (8001b6c <hashInit.0+0x2f4>)
 80018b2:	f7ff ff33 	bl	800171c <insert.1>
	    insert("STK", "and");
 80018b6:	46a4      	mov	ip, r4
 80018b8:	49ad      	ldr	r1, [pc, #692]	@ (8001b70 <hashInit.0+0x2f8>)
 80018ba:	48ae      	ldr	r0, [pc, #696]	@ (8001b74 <hashInit.0+0x2fc>)
 80018bc:	f7ff ff2e 	bl	800171c <insert.1>
	    insert("SAOU", "sue");
 80018c0:	46a4      	mov	ip, r4
 80018c2:	49ad      	ldr	r1, [pc, #692]	@ (8001b78 <hashInit.0+0x300>)
 80018c4:	48ad      	ldr	r0, [pc, #692]	@ (8001b7c <hashInit.0+0x304>)
 80018c6:	f7ff ff29 	bl	800171c <insert.1>
	    insert("SAOPB", "soon");
 80018ca:	46a4      	mov	ip, r4
 80018cc:	49ac      	ldr	r1, [pc, #688]	@ (8001b80 <hashInit.0+0x308>)
 80018ce:	48ad      	ldr	r0, [pc, #692]	@ (8001b84 <hashInit.0+0x30c>)
 80018d0:	f7ff ff24 	bl	800171c <insert.1>
	    insert("P", "about");
 80018d4:	46a4      	mov	ip, r4
 80018d6:	49ac      	ldr	r1, [pc, #688]	@ (8001b88 <hashInit.0+0x310>)
 80018d8:	48ac      	ldr	r0, [pc, #688]	@ (8001b8c <hashInit.0+0x314>)
 80018da:	f7ff ff1f 	bl	800171c <insert.1>
	    insert("KOD", "cod");
 80018de:	46a4      	mov	ip, r4
 80018e0:	49ab      	ldr	r1, [pc, #684]	@ (8001b90 <hashInit.0+0x318>)
 80018e2:	48ac      	ldr	r0, [pc, #688]	@ (8001b94 <hashInit.0+0x31c>)
 80018e4:	f7ff ff1a 	bl	800171c <insert.1>
	    insert("TAO*E", "ty");
 80018e8:	46a4      	mov	ip, r4
 80018ea:	49ab      	ldr	r1, [pc, #684]	@ (8001b98 <hashInit.0+0x320>)
 80018ec:	48ab      	ldr	r0, [pc, #684]	@ (8001b9c <hashInit.0+0x324>)
 80018ee:	f7ff ff15 	bl	800171c <insert.1>
	    insert("STRA/TA", "strata");
 80018f2:	46a4      	mov	ip, r4
 80018f4:	49aa      	ldr	r1, [pc, #680]	@ (8001ba0 <hashInit.0+0x328>)
 80018f6:	48ab      	ldr	r0, [pc, #684]	@ (8001ba4 <hashInit.0+0x32c>)
 80018f8:	f7ff ff10 	bl	800171c <insert.1>
	    insert("STA/TAOU/KWOE", "status quo");
 80018fc:	46a4      	mov	ip, r4
 80018fe:	49aa      	ldr	r1, [pc, #680]	@ (8001ba8 <hashInit.0+0x330>)
 8001900:	48aa      	ldr	r0, [pc, #680]	@ (8001bac <hashInit.0+0x334>)
 8001902:	f7ff ff0b 	bl	800171c <insert.1>
	    insert("STA/TAOU", "statue");
 8001906:	46a4      	mov	ip, r4
 8001908:	49a9      	ldr	r1, [pc, #676]	@ (8001bb0 <hashInit.0+0x338>)
 800190a:	48aa      	ldr	r0, [pc, #680]	@ (8001bb4 <hashInit.0+0x33c>)
 800190c:	f7ff ff06 	bl	800171c <insert.1>
	    insert("STAT/WET", "statuette");
 8001910:	46a4      	mov	ip, r4
 8001912:	49a9      	ldr	r1, [pc, #676]	@ (8001bb8 <hashInit.0+0x340>)
 8001914:	48a9      	ldr	r0, [pc, #676]	@ (8001bbc <hashInit.0+0x344>)
 8001916:	f7ff ff01 	bl	800171c <insert.1>
		insert("TKO*FG", "doing");
 800191a:	46a4      	mov	ip, r4
 800191c:	49a8      	ldr	r1, [pc, #672]	@ (8001bc0 <hashInit.0+0x348>)
 800191e:	48a9      	ldr	r0, [pc, #676]	@ (8001bc4 <hashInit.0+0x34c>)
 8001920:	f7ff fefc 	bl	800171c <insert.1>
		insert("TKO", "do");
 8001924:	46a4      	mov	ip, r4
 8001926:	49a8      	ldr	r1, [pc, #672]	@ (8001bc8 <hashInit.0+0x350>)
 8001928:	48a8      	ldr	r0, [pc, #672]	@ (8001bcc <hashInit.0+0x354>)
 800192a:	f7ff fef7 	bl	800171c <insert.1>
		insert("TKAUS", "cause");
 800192e:	46a4      	mov	ip, r4
 8001930:	49a7      	ldr	r1, [pc, #668]	@ (8001bd0 <hashInit.0+0x358>)
 8001932:	48a8      	ldr	r0, [pc, #672]	@ (8001bd4 <hashInit.0+0x35c>)
 8001934:	f7ff fef2 	bl	800171c <insert.1>
		insert("TKAET", "data");
 8001938:	46a4      	mov	ip, r4
 800193a:	49a7      	ldr	r1, [pc, #668]	@ (8001bd8 <hashInit.0+0x360>)
 800193c:	48a7      	ldr	r0, [pc, #668]	@ (8001bdc <hashInit.0+0x364>)
 800193e:	f7ff feed 	bl	800171c <insert.1>
		insert("TKAEUPBT", "didn't"),
 8001942:	46a4      	mov	ip, r4
 8001944:	49a6      	ldr	r1, [pc, #664]	@ (8001be0 <hashInit.0+0x368>)
 8001946:	48a7      	ldr	r0, [pc, #668]	@ (8001be4 <hashInit.0+0x36c>)
 8001948:	f7ff fee8 	bl	800171c <insert.1>
		insert("TKAEU", "day");
 800194c:	46a4      	mov	ip, r4
 800194e:	49a6      	ldr	r1, [pc, #664]	@ (8001be8 <hashInit.0+0x370>)
 8001950:	48a6      	ldr	r0, [pc, #664]	@ (8001bec <hashInit.0+0x374>)
 8001952:	f7ff fee3 	bl	800171c <insert.1>
		insert("TKAOS", "does");
 8001956:	46a4      	mov	ip, r4
 8001958:	49a5      	ldr	r1, [pc, #660]	@ (8001bf0 <hashInit.0+0x378>)
 800195a:	48a6      	ldr	r0, [pc, #664]	@ (8001bf4 <hashInit.0+0x37c>)
 800195c:	f7ff fede 	bl	800171c <insert.1>
		insert("TKAOUT", "duty");
 8001960:	46a4      	mov	ip, r4
 8001962:	49a5      	ldr	r1, [pc, #660]	@ (8001bf8 <hashInit.0+0x380>)
 8001964:	48a5      	ldr	r0, [pc, #660]	@ (8001bfc <hashInit.0+0x384>)
 8001966:	f7ff fed9 	bl	800171c <insert.1>
		insert("TKAOU", "due");
 800196a:	46a4      	mov	ip, r4
 800196c:	49a4      	ldr	r1, [pc, #656]	@ (8001c00 <hashInit.0+0x388>)
 800196e:	48a5      	ldr	r0, [pc, #660]	@ (8001c04 <hashInit.0+0x38c>)
 8001970:	f7ff fed4 	bl	800171c <insert.1>
		insert("TKAOE/TPAULT", "default");
 8001974:	46a4      	mov	ip, r4
 8001976:	49a4      	ldr	r1, [pc, #656]	@ (8001c08 <hashInit.0+0x390>)
 8001978:	48a4      	ldr	r0, [pc, #656]	@ (8001c0c <hashInit.0+0x394>)
 800197a:	f7ff fecf 	bl	800171c <insert.1>
		insert("LT", "#ing");
 800197e:	46a4      	mov	ip, r4
 8001980:	49a3      	ldr	r1, [pc, #652]	@ (8001c10 <hashInit.0+0x398>)
 8001982:	48a4      	ldr	r0, [pc, #656]	@ (8001c14 <hashInit.0+0x39c>)
 8001984:	f7ff feca 	bl	800171c <insert.1>
		insert("LG", "#n't");
 8001988:	46a4      	mov	ip, r4
 800198a:	49a3      	ldr	r1, [pc, #652]	@ (8001c18 <hashInit.0+0x3a0>)
 800198c:	48a3      	ldr	r0, [pc, #652]	@ (8001c1c <hashInit.0+0x3a4>)
 800198e:	f7ff fec5 	bl	800171c <insert.1>
		insert("*F", "#.");
 8001992:	46a4      	mov	ip, r4
 8001994:	49a2      	ldr	r1, [pc, #648]	@ (8001c20 <hashInit.0+0x3a8>)
 8001996:	48a3      	ldr	r0, [pc, #652]	@ (8001c24 <hashInit.0+0x3ac>)
 8001998:	f7ff fec0 	bl	800171c <insert.1>
		insert("*FP", "#,");
 800199c:	46a4      	mov	ip, r4
 800199e:	49a2      	ldr	r1, [pc, #648]	@ (8001c28 <hashInit.0+0x3b0>)
 80019a0:	48a2      	ldr	r0, [pc, #648]	@ (8001c2c <hashInit.0+0x3b4>)
 80019a2:	f7ff febb 	bl	800171c <insert.1>
		insert("HFP", "#?");
 80019a6:	46a4      	mov	ip, r4
 80019a8:	49a1      	ldr	r1, [pc, #644]	@ (8001c30 <hashInit.0+0x3b8>)
 80019aa:	48a2      	ldr	r0, [pc, #648]	@ (8001c34 <hashInit.0+0x3bc>)
 80019ac:	f7ff feb6 	bl	800171c <insert.1>
		insert("HFPL", "#!");
 80019b0:	46a4      	mov	ip, r4
 80019b2:	49a1      	ldr	r1, [pc, #644]	@ (8001c38 <hashInit.0+0x3c0>)
 80019b4:	48a1      	ldr	r0, [pc, #644]	@ (8001c3c <hashInit.0+0x3c4>)
 80019b6:	f7ff feb1 	bl	800171c <insert.1>
		insert("TPHROETS", "floats");
 80019ba:	46a4      	mov	ip, r4
 80019bc:	49a0      	ldr	r1, [pc, #640]	@ (8001c40 <hashInit.0+0x3c8>)
 80019be:	48a1      	ldr	r0, [pc, #644]	@ (8001c44 <hashInit.0+0x3cc>)
 80019c0:	f7ff feac 	bl	800171c <insert.1>
		insert("TPHROES", "flows");
 80019c4:	46a4      	mov	ip, r4
 80019c6:	49a0      	ldr	r1, [pc, #640]	@ (8001c48 <hashInit.0+0x3d0>)
 80019c8:	48a0      	ldr	r0, [pc, #640]	@ (8001c4c <hashInit.0+0x3d4>)
 80019ca:	f7ff fea7 	bl	800171c <insert.1>
		insert("TPHROED", "flowed");
 80019ce:	46a4      	mov	ip, r4
 80019d0:	499f      	ldr	r1, [pc, #636]	@ (8001c50 <hashInit.0+0x3d8>)
 80019d2:	48a0      	ldr	r0, [pc, #640]	@ (8001c54 <hashInit.0+0x3dc>)
 80019d4:	f7ff fea2 	bl	800171c <insert.1>
		insert("-T", "the");
 80019d8:	46a4      	mov	ip, r4
 80019da:	499f      	ldr	r1, [pc, #636]	@ (8001c58 <hashInit.0+0x3e0>)
 80019dc:	489f      	ldr	r0, [pc, #636]	@ (8001c5c <hashInit.0+0x3e4>)
 80019de:	f7ff fe9d 	bl	800171c <insert.1>
		insert("-F", "of");
 80019e2:	46a4      	mov	ip, r4
 80019e4:	499e      	ldr	r1, [pc, #632]	@ (8001c60 <hashInit.0+0x3e8>)
 80019e6:	489f      	ldr	r0, [pc, #636]	@ (8001c64 <hashInit.0+0x3ec>)
 80019e8:	f7ff fe98 	bl	800171c <insert.1>
		insert("SKP", "and");
 80019ec:	46a4      	mov	ip, r4
 80019ee:	4960      	ldr	r1, [pc, #384]	@ (8001b70 <hashInit.0+0x2f8>)
 80019f0:	489d      	ldr	r0, [pc, #628]	@ (8001c68 <hashInit.0+0x3f0>)
 80019f2:	f7ff fe93 	bl	800171c <insert.1>
		insert("TO", "to");
 80019f6:	46a4      	mov	ip, r4
 80019f8:	499c      	ldr	r1, [pc, #624]	@ (8001c6c <hashInit.0+0x3f4>)
 80019fa:	489d      	ldr	r0, [pc, #628]	@ (8001c70 <hashInit.0+0x3f8>)
 80019fc:	f7ff fe8e 	bl	800171c <insert.1>
		insert("TPH", "in");
 8001a00:	46a4      	mov	ip, r4
 8001a02:	499c      	ldr	r1, [pc, #624]	@ (8001c74 <hashInit.0+0x3fc>)
 8001a04:	489c      	ldr	r0, [pc, #624]	@ (8001c78 <hashInit.0+0x400>)
 8001a06:	f7ff fe89 	bl	800171c <insert.1>
		insert("EU", "I");
 8001a0a:	46a4      	mov	ip, r4
 8001a0c:	499b      	ldr	r1, [pc, #620]	@ (8001c7c <hashInit.0+0x404>)
 8001a0e:	489c      	ldr	r0, [pc, #624]	@ (8001c80 <hashInit.0+0x408>)
 8001a10:	f7ff fe84 	bl	800171c <insert.1>
		insert("THA", "that");
 8001a14:	46a4      	mov	ip, r4
 8001a16:	499b      	ldr	r1, [pc, #620]	@ (8001c84 <hashInit.0+0x40c>)
 8001a18:	489b      	ldr	r0, [pc, #620]	@ (8001c88 <hashInit.0+0x410>)
 8001a1a:	f7ff fe7f 	bl	800171c <insert.1>
		insert("WAS", "was");
 8001a1e:	46a4      	mov	ip, r4
 8001a20:	499a      	ldr	r1, [pc, #616]	@ (8001c8c <hashInit.0+0x414>)
 8001a22:	489b      	ldr	r0, [pc, #620]	@ (8001c90 <hashInit.0+0x418>)
 8001a24:	f7ff fe7a 	bl	800171c <insert.1>
		insert("HEUS", "his");
 8001a28:	46a4      	mov	ip, r4
 8001a2a:	499a      	ldr	r1, [pc, #616]	@ (8001c94 <hashInit.0+0x41c>)
 8001a2c:	489a      	ldr	r0, [pc, #616]	@ (8001c98 <hashInit.0+0x420>)
 8001a2e:	f7ff fe75 	bl	800171c <insert.1>
		insert("HE", "he");
 8001a32:	46a4      	mov	ip, r4
 8001a34:	4999      	ldr	r1, [pc, #612]	@ (8001c9c <hashInit.0+0x424>)
 8001a36:	489a      	ldr	r0, [pc, #616]	@ (8001ca0 <hashInit.0+0x428>)
 8001a38:	f7ff fe70 	bl	800171c <insert.1>
		insert("T", "it");
 8001a3c:	46a4      	mov	ip, r4
 8001a3e:	4999      	ldr	r1, [pc, #612]	@ (8001ca4 <hashInit.0+0x42c>)
 8001a40:	4899      	ldr	r0, [pc, #612]	@ (8001ca8 <hashInit.0+0x430>)
 8001a42:	f7ff fe6b 	bl	800171c <insert.1>
		insert("W", "with");
 8001a46:	46a4      	mov	ip, r4
 8001a48:	4998      	ldr	r1, [pc, #608]	@ (8001cac <hashInit.0+0x434>)
 8001a4a:	4899      	ldr	r0, [pc, #612]	@ (8001cb0 <hashInit.0+0x438>)
 8001a4c:	f7ff fe66 	bl	800171c <insert.1>
		insert("TPOR", "for");
 8001a50:	46a4      	mov	ip, r4
 8001a52:	4998      	ldr	r1, [pc, #608]	@ (8001cb4 <hashInit.0+0x43c>)
 8001a54:	4898      	ldr	r0, [pc, #608]	@ (8001cb8 <hashInit.0+0x440>)
 8001a56:	f7ff fe61 	bl	800171c <insert.1>
		insert("AS", "as");
 8001a5a:	46a4      	mov	ip, r4
 8001a5c:	4997      	ldr	r1, [pc, #604]	@ (8001cbc <hashInit.0+0x444>)
 8001a5e:	4898      	ldr	r0, [pc, #608]	@ (8001cc0 <hashInit.0+0x448>)
 8001a60:	f7ff fe5c 	bl	800171c <insert.1>
		insert("H", "had");
 8001a64:	46a4      	mov	ip, r4
 8001a66:	4997      	ldr	r1, [pc, #604]	@ (8001cc4 <hashInit.0+0x44c>)
 8001a68:	4897      	ldr	r0, [pc, #604]	@ (8001cc8 <hashInit.0+0x450>)
 8001a6a:	f7ff fe57 	bl	800171c <insert.1>
		insert("U", "you");
 8001a6e:	46a4      	mov	ip, r4
 8001a70:	4996      	ldr	r1, [pc, #600]	@ (8001ccc <hashInit.0+0x454>)
 8001a72:	4897      	ldr	r0, [pc, #604]	@ (8001cd0 <hashInit.0+0x458>)
 8001a74:	f7ff fe52 	bl	800171c <insert.1>
		insert("TPHOT", "not");
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	4996      	ldr	r1, [pc, #600]	@ (8001cd4 <hashInit.0+0x45c>)
 8001a7c:	4896      	ldr	r0, [pc, #600]	@ (8001cd8 <hashInit.0+0x460>)
 8001a7e:	f7ff fe4d 	bl	800171c <insert.1>
		insert("-B", "be");
 8001a82:	46a4      	mov	ip, r4
 8001a84:	4995      	ldr	r1, [pc, #596]	@ (8001cdc <hashInit.0+0x464>)
 8001a86:	4896      	ldr	r0, [pc, #600]	@ (8001ce0 <hashInit.0+0x468>)
 8001a88:	f7ff fe48 	bl	800171c <insert.1>
		insert("HER", "her");
 8001a8c:	46a4      	mov	ip, r4
 8001a8e:	4995      	ldr	r1, [pc, #596]	@ (8001ce4 <hashInit.0+0x46c>)
 8001a90:	4895      	ldr	r0, [pc, #596]	@ (8001ce8 <hashInit.0+0x470>)
 8001a92:	f7ff fe43 	bl	800171c <insert.1>
		insert("OPB", "on");
 8001a96:	46a4      	mov	ip, r4
 8001a98:	4994      	ldr	r1, [pc, #592]	@ (8001cec <hashInit.0+0x474>)
 8001a9a:	4895      	ldr	r0, [pc, #596]	@ (8001cf0 <hashInit.0+0x478>)
 8001a9c:	f7ff fe3e 	bl	800171c <insert.1>
		insert("AT", "at");
 8001aa0:	46a4      	mov	ip, r4
 8001aa2:	4994      	ldr	r1, [pc, #592]	@ (8001cf4 <hashInit.0+0x47c>)
 8001aa4:	4894      	ldr	r0, [pc, #592]	@ (8001cf8 <hashInit.0+0x480>)
 8001aa6:	f7ff fe39 	bl	800171c <insert.1>
		insert("PWEU", "by");
 8001aaa:	46a4      	mov	ip, r4
 8001aac:	4993      	ldr	r1, [pc, #588]	@ (8001cfc <hashInit.0+0x484>)
 8001aae:	4894      	ldr	r0, [pc, #592]	@ (8001d00 <hashInit.0+0x488>)
 8001ab0:	f7ff fe34 	bl	800171c <insert.1>
		insert("WEU", "which");
 8001ab4:	46a4      	mov	ip, r4
 8001ab6:	4993      	ldr	r1, [pc, #588]	@ (8001d04 <hashInit.0+0x48c>)
 8001ab8:	4893      	ldr	r0, [pc, #588]	@ (8001d08 <hashInit.0+0x490>)
 8001aba:	f7ff fe2f 	bl	800171c <insert.1>
		insert("SR", "have");
 8001abe:	46a4      	mov	ip, r4
 8001ac0:	4992      	ldr	r1, [pc, #584]	@ (8001d0c <hashInit.0+0x494>)
 8001ac2:	4893      	ldr	r0, [pc, #588]	@ (8001d10 <hashInit.0+0x498>)
 8001ac4:	f7ff fe2a 	bl	800171c <insert.1>
		insert("OR", "or");
 8001ac8:	46a4      	mov	ip, r4
 8001aca:	4992      	ldr	r1, [pc, #584]	@ (8001d14 <hashInit.0+0x49c>)
 8001acc:	4892      	ldr	r0, [pc, #584]	@ (8001d18 <hashInit.0+0x4a0>)
 8001ace:	f7ff fe25 	bl	800171c <insert.1>
		insert("TPR", "from");
 8001ad2:	46a4      	mov	ip, r4
 8001ad4:	4991      	ldr	r1, [pc, #580]	@ (8001d1c <hashInit.0+0x4a4>)
 8001ad6:	4892      	ldr	r0, [pc, #584]	@ (8001d20 <hashInit.0+0x4a8>)
 8001ad8:	f7ff fe20 	bl	800171c <insert.1>
		insert("TH", "this");
 8001adc:	46a4      	mov	ip, r4
 8001ade:	4991      	ldr	r1, [pc, #580]	@ (8001d24 <hashInit.0+0x4ac>)
 8001ae0:	4891      	ldr	r0, [pc, #580]	@ (8001d28 <hashInit.0+0x4b0>)
 8001ae2:	f7ff fe1b 	bl	800171c <insert.1>
		insert("HEUPL", "him");
 8001ae6:	46a4      	mov	ip, r4
 8001ae8:	4990      	ldr	r1, [pc, #576]	@ (8001d2c <hashInit.0+0x4b4>)
 8001aea:	4891      	ldr	r0, [pc, #580]	@ (8001d30 <hashInit.0+0x4b8>)
 8001aec:	f7ff fe16 	bl	800171c <insert.1>
		insert("PWUT", "but");
 8001af0:	46a4      	mov	ip, r4
 8001af2:	4990      	ldr	r1, [pc, #576]	@ (8001d34 <hashInit.0+0x4bc>)
 8001af4:	4890      	ldr	r0, [pc, #576]	@ (8001d38 <hashInit.0+0x4c0>)
 8001af6:	f7ff fe11 	bl	800171c <insert.1>
		insert("AUL", "all");
 8001afa:	46a4      	mov	ip, r4
 8001afc:	498f      	ldr	r1, [pc, #572]	@ (8001d3c <hashInit.0+0x4c4>)
 8001afe:	4890      	ldr	r0, [pc, #576]	@ (8001d40 <hashInit.0+0x4c8>)
 8001b00:	f7ff fe0c 	bl	800171c <insert.1>
		insert("SHE", "she");
 8001b04:	46a4      	mov	ip, r4
 8001b06:	498f      	ldr	r1, [pc, #572]	@ (8001d44 <hashInit.0+0x4cc>)
 8001b08:	488f      	ldr	r0, [pc, #572]	@ (8001d48 <hashInit.0+0x4d0>)
 8001b0a:	f7ff fe07 	bl	800171c <insert.1>
		insert("THE", "they");
 8001b0e:	46a4      	mov	ip, r4
 8001b10:	498e      	ldr	r1, [pc, #568]	@ (8001d4c <hashInit.0+0x4d4>)
 8001b12:	488f      	ldr	r0, [pc, #572]	@ (8001d50 <hashInit.0+0x4d8>)
 8001b14:	f7ff fe02 	bl	800171c <insert.1>
		insert("WR", "were");
 8001b18:	46a4      	mov	ip, r4
 8001b1a:	498e      	ldr	r1, [pc, #568]	@ (8001d54 <hashInit.0+0x4dc>)
 8001b1c:	488e      	ldr	r0, [pc, #568]	@ (8001d58 <hashInit.0+0x4e0>)
 8001b1e:	f7ff fdfd 	bl	800171c <insert.1>
		insert("PHEU", "my");
 8001b22:	46a4      	mov	ip, r4
 8001b24:	498d      	ldr	r1, [pc, #564]	@ (8001d5c <hashInit.0+0x4e4>)
 8001b26:	488e      	ldr	r0, [pc, #568]	@ (8001d60 <hashInit.0+0x4e8>)
 8001b28:	f7ff fdf8 	bl	800171c <insert.1>
		insert("R", "are");
 8001b2c:	46a4      	mov	ip, r4
 8001b2e:	498d      	ldr	r1, [pc, #564]	@ (8001d64 <hashInit.0+0x4ec>)
 8001b30:	488d      	ldr	r0, [pc, #564]	@ (8001d68 <hashInit.0+0x4f0>)
 8001b32:	f7ff fdf3 	bl	800171c <insert.1>
		insert("PHE", "me");
 8001b36:	46a4      	mov	ip, r4
 8001b38:	498c      	ldr	r1, [pc, #560]	@ (8001d6c <hashInit.0+0x4f4>)
 8001b3a:	488d      	ldr	r0, [pc, #564]	@ (8001d70 <hashInit.0+0x4f8>)
 8001b3c:	f7ff fdee 	bl	800171c <insert.1>
		insert("WUPB", "one");
 8001b40:	46a4      	mov	ip, r4
 8001b42:	498c      	ldr	r1, [pc, #560]	@ (8001d74 <hashInit.0+0x4fc>)
 8001b44:	488c      	ldr	r0, [pc, #560]	@ (8001d78 <hashInit.0+0x500>)
 8001b46:	f7ff fde9 	bl	800171c <insert.1>
		insert("THAEUR", "their");
 8001b4a:	46a4      	mov	ip, r4
 8001b4c:	498b      	ldr	r1, [pc, #556]	@ (8001d7c <hashInit.0+0x504>)
 8001b4e:	488c      	ldr	r0, [pc, #560]	@ (8001d80 <hashInit.0+0x508>)
 8001b50:	f7ff fde4 	bl	800171c <insert.1>
		insert("SO", "so");
 8001b54:	46a4      	mov	ip, r4
 8001b56:	498b      	ldr	r1, [pc, #556]	@ (8001d84 <hashInit.0+0x50c>)
 8001b58:	e116      	b.n	8001d88 <hashInit.0+0x510>
 8001b5a:	bf00      	nop
 8001b5c:	200001d8 	.word	0x200001d8
 8001b60:	0800d4f0 	.word	0x0800d4f0
 8001b64:	0800d4f4 	.word	0x0800d4f4
 8001b68:	0800d4f8 	.word	0x0800d4f8
 8001b6c:	0800d500 	.word	0x0800d500
 8001b70:	0800d504 	.word	0x0800d504
 8001b74:	0800d508 	.word	0x0800d508
 8001b78:	0800d50c 	.word	0x0800d50c
 8001b7c:	0800d510 	.word	0x0800d510
 8001b80:	0800d518 	.word	0x0800d518
 8001b84:	0800d520 	.word	0x0800d520
 8001b88:	0800d528 	.word	0x0800d528
 8001b8c:	0800d530 	.word	0x0800d530
 8001b90:	0800d534 	.word	0x0800d534
 8001b94:	0800d538 	.word	0x0800d538
 8001b98:	0800d53c 	.word	0x0800d53c
 8001b9c:	0800d540 	.word	0x0800d540
 8001ba0:	0800d548 	.word	0x0800d548
 8001ba4:	0800d550 	.word	0x0800d550
 8001ba8:	0800d558 	.word	0x0800d558
 8001bac:	0800d564 	.word	0x0800d564
 8001bb0:	0800d574 	.word	0x0800d574
 8001bb4:	0800d57c 	.word	0x0800d57c
 8001bb8:	0800d588 	.word	0x0800d588
 8001bbc:	0800d594 	.word	0x0800d594
 8001bc0:	0800d5a0 	.word	0x0800d5a0
 8001bc4:	0800d5a8 	.word	0x0800d5a8
 8001bc8:	0800d5b0 	.word	0x0800d5b0
 8001bcc:	0800d5b4 	.word	0x0800d5b4
 8001bd0:	0800d5b8 	.word	0x0800d5b8
 8001bd4:	0800d5c0 	.word	0x0800d5c0
 8001bd8:	0800d5c8 	.word	0x0800d5c8
 8001bdc:	0800d5d0 	.word	0x0800d5d0
 8001be0:	0800d5d8 	.word	0x0800d5d8
 8001be4:	0800d5e0 	.word	0x0800d5e0
 8001be8:	0800d5ec 	.word	0x0800d5ec
 8001bec:	0800d5f0 	.word	0x0800d5f0
 8001bf0:	0800d5f8 	.word	0x0800d5f8
 8001bf4:	0800d600 	.word	0x0800d600
 8001bf8:	0800d608 	.word	0x0800d608
 8001bfc:	0800d610 	.word	0x0800d610
 8001c00:	0800d618 	.word	0x0800d618
 8001c04:	0800d61c 	.word	0x0800d61c
 8001c08:	0800d624 	.word	0x0800d624
 8001c0c:	0800d62c 	.word	0x0800d62c
 8001c10:	0800d63c 	.word	0x0800d63c
 8001c14:	0800d644 	.word	0x0800d644
 8001c18:	0800d648 	.word	0x0800d648
 8001c1c:	0800d650 	.word	0x0800d650
 8001c20:	0800d654 	.word	0x0800d654
 8001c24:	0800d658 	.word	0x0800d658
 8001c28:	0800d65c 	.word	0x0800d65c
 8001c2c:	0800d660 	.word	0x0800d660
 8001c30:	0800d664 	.word	0x0800d664
 8001c34:	0800d668 	.word	0x0800d668
 8001c38:	0800d66c 	.word	0x0800d66c
 8001c3c:	0800d670 	.word	0x0800d670
 8001c40:	0800d678 	.word	0x0800d678
 8001c44:	0800d680 	.word	0x0800d680
 8001c48:	0800d68c 	.word	0x0800d68c
 8001c4c:	0800d694 	.word	0x0800d694
 8001c50:	0800d69c 	.word	0x0800d69c
 8001c54:	0800d6a4 	.word	0x0800d6a4
 8001c58:	0800d6ac 	.word	0x0800d6ac
 8001c5c:	0800d6b0 	.word	0x0800d6b0
 8001c60:	0800d6b4 	.word	0x0800d6b4
 8001c64:	0800d6b8 	.word	0x0800d6b8
 8001c68:	0800d6bc 	.word	0x0800d6bc
 8001c6c:	0800d6c0 	.word	0x0800d6c0
 8001c70:	0800d6c4 	.word	0x0800d6c4
 8001c74:	0800d6c8 	.word	0x0800d6c8
 8001c78:	0800d6cc 	.word	0x0800d6cc
 8001c7c:	0800d6d0 	.word	0x0800d6d0
 8001c80:	0800d6d4 	.word	0x0800d6d4
 8001c84:	0800d6d8 	.word	0x0800d6d8
 8001c88:	0800d6e0 	.word	0x0800d6e0
 8001c8c:	0800d6e4 	.word	0x0800d6e4
 8001c90:	0800d6e8 	.word	0x0800d6e8
 8001c94:	0800d6ec 	.word	0x0800d6ec
 8001c98:	0800d6f0 	.word	0x0800d6f0
 8001c9c:	0800d6f8 	.word	0x0800d6f8
 8001ca0:	0800d6fc 	.word	0x0800d6fc
 8001ca4:	0800d700 	.word	0x0800d700
 8001ca8:	0800d704 	.word	0x0800d704
 8001cac:	0800d708 	.word	0x0800d708
 8001cb0:	0800d710 	.word	0x0800d710
 8001cb4:	0800d714 	.word	0x0800d714
 8001cb8:	0800d718 	.word	0x0800d718
 8001cbc:	0800d720 	.word	0x0800d720
 8001cc0:	0800d724 	.word	0x0800d724
 8001cc4:	0800d728 	.word	0x0800d728
 8001cc8:	0800d72c 	.word	0x0800d72c
 8001ccc:	0800d730 	.word	0x0800d730
 8001cd0:	0800d734 	.word	0x0800d734
 8001cd4:	0800d738 	.word	0x0800d738
 8001cd8:	0800d73c 	.word	0x0800d73c
 8001cdc:	0800d744 	.word	0x0800d744
 8001ce0:	0800d748 	.word	0x0800d748
 8001ce4:	0800d74c 	.word	0x0800d74c
 8001ce8:	0800d750 	.word	0x0800d750
 8001cec:	0800d754 	.word	0x0800d754
 8001cf0:	0800d758 	.word	0x0800d758
 8001cf4:	0800d75c 	.word	0x0800d75c
 8001cf8:	0800d760 	.word	0x0800d760
 8001cfc:	0800d764 	.word	0x0800d764
 8001d00:	0800d768 	.word	0x0800d768
 8001d04:	0800d770 	.word	0x0800d770
 8001d08:	0800d778 	.word	0x0800d778
 8001d0c:	0800d77c 	.word	0x0800d77c
 8001d10:	0800d784 	.word	0x0800d784
 8001d14:	0800d788 	.word	0x0800d788
 8001d18:	0800d78c 	.word	0x0800d78c
 8001d1c:	0800d790 	.word	0x0800d790
 8001d20:	0800d798 	.word	0x0800d798
 8001d24:	0800d79c 	.word	0x0800d79c
 8001d28:	0800d7a4 	.word	0x0800d7a4
 8001d2c:	0800d7a8 	.word	0x0800d7a8
 8001d30:	0800d7ac 	.word	0x0800d7ac
 8001d34:	0800d7b4 	.word	0x0800d7b4
 8001d38:	0800d7b8 	.word	0x0800d7b8
 8001d3c:	0800d7c0 	.word	0x0800d7c0
 8001d40:	0800d7c4 	.word	0x0800d7c4
 8001d44:	0800d7c8 	.word	0x0800d7c8
 8001d48:	0800d7cc 	.word	0x0800d7cc
 8001d4c:	0800d7d0 	.word	0x0800d7d0
 8001d50:	0800d7d8 	.word	0x0800d7d8
 8001d54:	0800d7dc 	.word	0x0800d7dc
 8001d58:	0800d7e4 	.word	0x0800d7e4
 8001d5c:	0800d7e8 	.word	0x0800d7e8
 8001d60:	0800d7ec 	.word	0x0800d7ec
 8001d64:	0800d7f4 	.word	0x0800d7f4
 8001d68:	0800d7f8 	.word	0x0800d7f8
 8001d6c:	0800d7fc 	.word	0x0800d7fc
 8001d70:	0800d800 	.word	0x0800d800
 8001d74:	0800d804 	.word	0x0800d804
 8001d78:	0800d808 	.word	0x0800d808
 8001d7c:	0800d810 	.word	0x0800d810
 8001d80:	0800d818 	.word	0x0800d818
 8001d84:	0800d820 	.word	0x0800d820
 8001d88:	48b5      	ldr	r0, [pc, #724]	@ (8002060 <hashInit.0+0x7e8>)
 8001d8a:	f7ff fcc7 	bl	800171c <insert.1>
		insert("APB", "an");
 8001d8e:	46a4      	mov	ip, r4
 8001d90:	49b4      	ldr	r1, [pc, #720]	@ (8002064 <hashInit.0+0x7ec>)
 8001d92:	48b5      	ldr	r0, [pc, #724]	@ (8002068 <hashInit.0+0x7f0>)
 8001d94:	f7ff fcc2 	bl	800171c <insert.1>
		insert("SED", "said");
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	49b4      	ldr	r1, [pc, #720]	@ (800206c <hashInit.0+0x7f4>)
 8001d9c:	48b4      	ldr	r0, [pc, #720]	@ (8002070 <hashInit.0+0x7f8>)
 8001d9e:	f7ff fcbd 	bl	800171c <insert.1>
		insert("THEPL", "them");
 8001da2:	46a4      	mov	ip, r4
 8001da4:	49b3      	ldr	r1, [pc, #716]	@ (8002074 <hashInit.0+0x7fc>)
 8001da6:	48b4      	ldr	r0, [pc, #720]	@ (8002078 <hashInit.0+0x800>)
 8001da8:	f7ff fcb8 	bl	800171c <insert.1>
		insert("WE", "we");
 8001dac:	46a4      	mov	ip, r4
 8001dae:	49b3      	ldr	r1, [pc, #716]	@ (800207c <hashInit.0+0x804>)
 8001db0:	48b3      	ldr	r0, [pc, #716]	@ (8002080 <hashInit.0+0x808>)
 8001db2:	f7ff fcb3 	bl	800171c <insert.1>
		insert("WHO", "who");
 8001db6:	46a4      	mov	ip, r4
 8001db8:	49b2      	ldr	r1, [pc, #712]	@ (8002084 <hashInit.0+0x80c>)
 8001dba:	48b3      	ldr	r0, [pc, #716]	@ (8002088 <hashInit.0+0x810>)
 8001dbc:	f7ff fcae 	bl	800171c <insert.1>
		insert("WO", "would");
 8001dc0:	46a4      	mov	ip, r4
 8001dc2:	49b2      	ldr	r1, [pc, #712]	@ (800208c <hashInit.0+0x814>)
 8001dc4:	48b2      	ldr	r0, [pc, #712]	@ (8002090 <hashInit.0+0x818>)
 8001dc6:	f7ff fca9 	bl	800171c <insert.1>
		insert("PW-PB", "been");
 8001dca:	46a4      	mov	ip, r4
 8001dcc:	49b1      	ldr	r1, [pc, #708]	@ (8002094 <hashInit.0+0x81c>)
 8001dce:	48b2      	ldr	r0, [pc, #712]	@ (8002098 <hashInit.0+0x820>)
 8001dd0:	f7ff fca4 	bl	800171c <insert.1>
		insert("HR", "will");
 8001dd4:	46a4      	mov	ip, r4
 8001dd6:	49b1      	ldr	r1, [pc, #708]	@ (800209c <hashInit.0+0x824>)
 8001dd8:	48b1      	ldr	r0, [pc, #708]	@ (80020a0 <hashInit.0+0x828>)
 8001dda:	f7ff fc9f 	bl	800171c <insert.1>
		insert("TPHO", "no");
 8001dde:	46a4      	mov	ip, r4
 8001de0:	49b0      	ldr	r1, [pc, #704]	@ (80020a4 <hashInit.0+0x82c>)
 8001de2:	48b1      	ldr	r0, [pc, #708]	@ (80020a8 <hashInit.0+0x830>)
 8001de4:	f7ff fc9a 	bl	800171c <insert.1>
		insert("WHEPB", "when");
 8001de8:	46a4      	mov	ip, r4
 8001dea:	49b0      	ldr	r1, [pc, #704]	@ (80020ac <hashInit.0+0x834>)
 8001dec:	48b0      	ldr	r0, [pc, #704]	@ (80020b0 <hashInit.0+0x838>)
 8001dee:	f7ff fc95 	bl	800171c <insert.1>
		insert("THR", "there");
 8001df2:	46a4      	mov	ip, r4
 8001df4:	49af      	ldr	r1, [pc, #700]	@ (80020b4 <hashInit.0+0x83c>)
 8001df6:	48b0      	ldr	r0, [pc, #704]	@ (80020b8 <hashInit.0+0x840>)
 8001df8:	f7ff fc90 	bl	800171c <insert.1>
		insert("TP", "if");
 8001dfc:	46a4      	mov	ip, r4
 8001dfe:	49af      	ldr	r1, [pc, #700]	@ (80020bc <hashInit.0+0x844>)
 8001e00:	48af      	ldr	r0, [pc, #700]	@ (80020c0 <hashInit.0+0x848>)
 8001e02:	f7ff fc8b 	bl	800171c <insert.1>
		insert("PHOR", "more");
 8001e06:	46a4      	mov	ip, r4
 8001e08:	49ae      	ldr	r1, [pc, #696]	@ (80020c4 <hashInit.0+0x84c>)
 8001e0a:	48af      	ldr	r0, [pc, #700]	@ (80020c8 <hashInit.0+0x850>)
 8001e0c:	f7ff fc86 	bl	800171c <insert.1>
		insert("OUT", "out");
 8001e10:	46a4      	mov	ip, r4
 8001e12:	49ae      	ldr	r1, [pc, #696]	@ (80020cc <hashInit.0+0x854>)
 8001e14:	48ae      	ldr	r0, [pc, #696]	@ (80020d0 <hashInit.0+0x858>)
 8001e16:	f7ff fc81 	bl	800171c <insert.1>
		insert("UP", "up");
 8001e1a:	46a4      	mov	ip, r4
 8001e1c:	49ad      	ldr	r1, [pc, #692]	@ (80020d4 <hashInit.0+0x85c>)
 8001e1e:	48ae      	ldr	r0, [pc, #696]	@ (80020d8 <hashInit.0+0x860>)
 8001e20:	f7ff fc7c 	bl	800171c <insert.1>
		insert("TPHAO", "into");
 8001e24:	46a4      	mov	ip, r4
 8001e26:	49ad      	ldr	r1, [pc, #692]	@ (80020dc <hashInit.0+0x864>)
 8001e28:	48ad      	ldr	r0, [pc, #692]	@ (80020e0 <hashInit.0+0x868>)
 8001e2a:	f7ff fc77 	bl	800171c <insert.1>
		insert("TKO", "do");
 8001e2e:	46a4      	mov	ip, r4
 8001e30:	49ac      	ldr	r1, [pc, #688]	@ (80020e4 <hashInit.0+0x86c>)
 8001e32:	48ad      	ldr	r0, [pc, #692]	@ (80020e8 <hashInit.0+0x870>)
 8001e34:	f7ff fc72 	bl	800171c <insert.1>
		insert("TPHEU", "any");
 8001e38:	46a4      	mov	ip, r4
 8001e3a:	49ac      	ldr	r1, [pc, #688]	@ (80020ec <hashInit.0+0x874>)
 8001e3c:	48ac      	ldr	r0, [pc, #688]	@ (80020f0 <hashInit.0+0x878>)
 8001e3e:	f7ff fc6d 	bl	800171c <insert.1>
		insert("KWROUR", "your");
 8001e42:	46a4      	mov	ip, r4
 8001e44:	49ab      	ldr	r1, [pc, #684]	@ (80020f4 <hashInit.0+0x87c>)
 8001e46:	48ac      	ldr	r0, [pc, #688]	@ (80020f8 <hashInit.0+0x880>)
 8001e48:	f7ff fc68 	bl	800171c <insert.1>
		insert("WHA", "what");
 8001e4c:	46a4      	mov	ip, r4
 8001e4e:	49ab      	ldr	r1, [pc, #684]	@ (80020fc <hashInit.0+0x884>)
 8001e50:	48ab      	ldr	r0, [pc, #684]	@ (8002100 <hashInit.0+0x888>)
 8001e52:	f7ff fc63 	bl	800171c <insert.1>
		insert("HAS", "has");
 8001e56:	46a4      	mov	ip, r4
 8001e58:	49aa      	ldr	r1, [pc, #680]	@ (8002104 <hashInit.0+0x88c>)
 8001e5a:	48ab      	ldr	r0, [pc, #684]	@ (8002108 <hashInit.0+0x890>)
 8001e5c:	f7ff fc5e 	bl	800171c <insert.1>
		insert("PHAPB", "man");
 8001e60:	46a4      	mov	ip, r4
 8001e62:	49aa      	ldr	r1, [pc, #680]	@ (800210c <hashInit.0+0x894>)
 8001e64:	48aa      	ldr	r0, [pc, #680]	@ (8002110 <hashInit.0+0x898>)
 8001e66:	f7ff fc59 	bl	800171c <insert.1>
		insert("KO", "could");
 8001e6a:	46a4      	mov	ip, r4
 8001e6c:	49a9      	ldr	r1, [pc, #676]	@ (8002114 <hashInit.0+0x89c>)
 8001e6e:	48aa      	ldr	r0, [pc, #680]	@ (8002118 <hashInit.0+0x8a0>)
 8001e70:	f7ff fc54 	bl	800171c <insert.1>
		insert("OER", "other");
 8001e74:	46a4      	mov	ip, r4
 8001e76:	49a9      	ldr	r1, [pc, #676]	@ (800211c <hashInit.0+0x8a4>)
 8001e78:	48a9      	ldr	r0, [pc, #676]	@ (8002120 <hashInit.0+0x8a8>)
 8001e7a:	f7ff fc4f 	bl	800171c <insert.1>
		insert("THAPB", "than");
 8001e7e:	46a4      	mov	ip, r4
 8001e80:	49a8      	ldr	r1, [pc, #672]	@ (8002124 <hashInit.0+0x8ac>)
 8001e82:	48a9      	ldr	r0, [pc, #676]	@ (8002128 <hashInit.0+0x8b0>)
 8001e84:	f7ff fc4a 	bl	800171c <insert.1>
		insert("OUR", "our");
 8001e88:	46a4      	mov	ip, r4
 8001e8a:	49a8      	ldr	r1, [pc, #672]	@ (800212c <hashInit.0+0x8b4>)
 8001e8c:	48a8      	ldr	r0, [pc, #672]	@ (8002130 <hashInit.0+0x8b8>)
 8001e8e:	f7ff fc45 	bl	800171c <insert.1>
		insert("SOPL", "some");
 8001e92:	46a4      	mov	ip, r4
 8001e94:	49a7      	ldr	r1, [pc, #668]	@ (8002134 <hashInit.0+0x8bc>)
 8001e96:	48a8      	ldr	r0, [pc, #672]	@ (8002138 <hashInit.0+0x8c0>)
 8001e98:	f7ff fc40 	bl	800171c <insert.1>
		insert("SRE", "very");
 8001e9c:	46a4      	mov	ip, r4
 8001e9e:	49a7      	ldr	r1, [pc, #668]	@ (800213c <hashInit.0+0x8c4>)
 8001ea0:	48a7      	ldr	r0, [pc, #668]	@ (8002140 <hashInit.0+0x8c8>)
 8001ea2:	f7ff fc3b 	bl	800171c <insert.1>
		insert("TAOEUPL", "time");
 8001ea6:	46a4      	mov	ip, r4
 8001ea8:	49a6      	ldr	r1, [pc, #664]	@ (8002144 <hashInit.0+0x8cc>)
 8001eaa:	48a7      	ldr	r0, [pc, #668]	@ (8002148 <hashInit.0+0x8d0>)
 8001eac:	f7ff fc36 	bl	800171c <insert.1>
		insert("POPB", "upon");
 8001eb0:	46a4      	mov	ip, r4
 8001eb2:	49a6      	ldr	r1, [pc, #664]	@ (800214c <hashInit.0+0x8d4>)
 8001eb4:	48a6      	ldr	r0, [pc, #664]	@ (8002150 <hashInit.0+0x8d8>)
 8001eb6:	f7ff fc31 	bl	800171c <insert.1>
		insert("PW", "about");
 8001eba:	46a4      	mov	ip, r4
 8001ebc:	49a5      	ldr	r1, [pc, #660]	@ (8002154 <hashInit.0+0x8dc>)
 8001ebe:	48a6      	ldr	r0, [pc, #664]	@ (8002158 <hashInit.0+0x8e0>)
 8001ec0:	f7ff fc2c 	bl	800171c <insert.1>
		insert("PHAE", "may");
 8001ec4:	46a4      	mov	ip, r4
 8001ec6:	49a5      	ldr	r1, [pc, #660]	@ (800215c <hashInit.0+0x8e4>)
 8001ec8:	48a5      	ldr	r0, [pc, #660]	@ (8002160 <hashInit.0+0x8e8>)
 8001eca:	f7ff fc27 	bl	800171c <insert.1>
		insert("EUTS", "its");
 8001ece:	46a4      	mov	ip, r4
 8001ed0:	49a4      	ldr	r1, [pc, #656]	@ (8002164 <hashInit.0+0x8ec>)
 8001ed2:	48a5      	ldr	r0, [pc, #660]	@ (8002168 <hashInit.0+0x8f0>)
 8001ed4:	f7ff fc22 	bl	800171c <insert.1>
		insert("OEPBL", "only");
 8001ed8:	46a4      	mov	ip, r4
 8001eda:	49a4      	ldr	r1, [pc, #656]	@ (800216c <hashInit.0+0x8f4>)
 8001edc:	48a4      	ldr	r0, [pc, #656]	@ (8002170 <hashInit.0+0x8f8>)
 8001ede:	f7ff fc1d 	bl	800171c <insert.1>
		insert("TPHOU", "now");
 8001ee2:	46a4      	mov	ip, r4
 8001ee4:	49a3      	ldr	r1, [pc, #652]	@ (8002174 <hashInit.0+0x8fc>)
 8001ee6:	48a4      	ldr	r0, [pc, #656]	@ (8002178 <hashInit.0+0x900>)
 8001ee8:	f7ff fc18 	bl	800171c <insert.1>
		insert("HRAOEUBG", "like");
 8001eec:	46a4      	mov	ip, r4
 8001eee:	49a3      	ldr	r1, [pc, #652]	@ (800217c <hashInit.0+0x904>)
 8001ef0:	48a3      	ldr	r0, [pc, #652]	@ (8002180 <hashInit.0+0x908>)
 8001ef2:	f7ff fc13 	bl	800171c <insert.1>
		insert("HREUL", "little");
 8001ef6:	46a4      	mov	ip, r4
 8001ef8:	49a2      	ldr	r1, [pc, #648]	@ (8002184 <hashInit.0+0x90c>)
 8001efa:	48a3      	ldr	r0, [pc, #652]	@ (8002188 <hashInit.0+0x910>)
 8001efc:	f7ff fc0e 	bl	800171c <insert.1>
		insert("THEPB", "then");
 8001f00:	46a4      	mov	ip, r4
 8001f02:	49a2      	ldr	r1, [pc, #648]	@ (800218c <hashInit.0+0x914>)
 8001f04:	48a2      	ldr	r0, [pc, #648]	@ (8002190 <hashInit.0+0x918>)
 8001f06:	f7ff fc09 	bl	800171c <insert.1>
		insert("K", "can");
 8001f0a:	46a4      	mov	ip, r4
 8001f0c:	49a1      	ldr	r1, [pc, #644]	@ (8002194 <hashInit.0+0x91c>)
 8001f0e:	48a2      	ldr	r0, [pc, #648]	@ (8002198 <hashInit.0+0x920>)
 8001f10:	f7ff fc04 	bl	800171c <insert.1>
		insert("SHO", "should");
 8001f14:	46a4      	mov	ip, r4
 8001f16:	49a1      	ldr	r1, [pc, #644]	@ (800219c <hashInit.0+0x924>)
 8001f18:	48a1      	ldr	r0, [pc, #644]	@ (80021a0 <hashInit.0+0x928>)
 8001f1a:	f7ff fbff 	bl	800171c <insert.1>
		insert("PHAED", "made");
 8001f1e:	46a4      	mov	ip, r4
 8001f20:	49a0      	ldr	r1, [pc, #640]	@ (80021a4 <hashInit.0+0x92c>)
 8001f22:	48a1      	ldr	r0, [pc, #644]	@ (80021a8 <hashInit.0+0x930>)
 8001f24:	f7ff fbfa 	bl	800171c <insert.1>
		insert("TK", "did");
 8001f28:	46a4      	mov	ip, r4
 8001f2a:	49a0      	ldr	r1, [pc, #640]	@ (80021ac <hashInit.0+0x934>)
 8001f2c:	48a0      	ldr	r0, [pc, #640]	@ (80021b0 <hashInit.0+0x938>)
 8001f2e:	f7ff fbf5 	bl	800171c <insert.1>
		insert("US", "us");
 8001f32:	46a4      	mov	ip, r4
 8001f34:	499f      	ldr	r1, [pc, #636]	@ (80021b4 <hashInit.0+0x93c>)
 8001f36:	48a0      	ldr	r0, [pc, #640]	@ (80021b8 <hashInit.0+0x940>)
 8001f38:	f7ff fbf0 	bl	800171c <insert.1>
		insert("SUFP", "such");
 8001f3c:	46a4      	mov	ip, r4
 8001f3e:	499f      	ldr	r1, [pc, #636]	@ (80021bc <hashInit.0+0x944>)
 8001f40:	489f      	ldr	r0, [pc, #636]	@ (80021c0 <hashInit.0+0x948>)
 8001f42:	f7ff fbeb 	bl	800171c <insert.1>
		insert("AEU", "a");
 8001f46:	46a4      	mov	ip, r4
 8001f48:	499e      	ldr	r1, [pc, #632]	@ (80021c4 <hashInit.0+0x94c>)
 8001f4a:	489f      	ldr	r0, [pc, #636]	@ (80021c8 <hashInit.0+0x950>)
 8001f4c:	f7ff fbe6 	bl	800171c <insert.1>
		insert("TKPWRAET", "great");
 8001f50:	46a4      	mov	ip, r4
 8001f52:	499e      	ldr	r1, [pc, #632]	@ (80021cc <hashInit.0+0x954>)
 8001f54:	489e      	ldr	r0, [pc, #632]	@ (80021d0 <hashInit.0+0x958>)
 8001f56:	f7ff fbe1 	bl	800171c <insert.1>
		insert("PW-FR", "before");
 8001f5a:	46a4      	mov	ip, r4
 8001f5c:	499d      	ldr	r1, [pc, #628]	@ (80021d4 <hashInit.0+0x95c>)
 8001f5e:	489e      	ldr	r0, [pc, #632]	@ (80021d8 <hashInit.0+0x960>)
 8001f60:	f7ff fbdc 	bl	800171c <insert.1>
		insert("PHUFT", "must");
 8001f64:	46a4      	mov	ip, r4
 8001f66:	499d      	ldr	r1, [pc, #628]	@ (80021dc <hashInit.0+0x964>)
 8001f68:	489d      	ldr	r0, [pc, #628]	@ (80021e0 <hashInit.0+0x968>)
 8001f6a:	f7ff fbd7 	bl	800171c <insert.1>
		insert("TWO", "two");
 8001f6e:	46a4      	mov	ip, r4
 8001f70:	499c      	ldr	r1, [pc, #624]	@ (80021e4 <hashInit.0+0x96c>)
 8001f72:	489d      	ldr	r0, [pc, #628]	@ (80021e8 <hashInit.0+0x970>)
 8001f74:	f7ff fbd2 	bl	800171c <insert.1>
		insert("THEZ", "these");
 8001f78:	46a4      	mov	ip, r4
 8001f7a:	499c      	ldr	r1, [pc, #624]	@ (80021ec <hashInit.0+0x974>)
 8001f7c:	489c      	ldr	r0, [pc, #624]	@ (80021f0 <hashInit.0+0x978>)
 8001f7e:	f7ff fbcd 	bl	800171c <insert.1>
		insert("SAOE", "see");
 8001f82:	46a4      	mov	ip, r4
 8001f84:	499b      	ldr	r1, [pc, #620]	@ (80021f4 <hashInit.0+0x97c>)
 8001f86:	489c      	ldr	r0, [pc, #624]	@ (80021f8 <hashInit.0+0x980>)
 8001f88:	f7ff fbc8 	bl	800171c <insert.1>
		insert("TPHOE", "know");
 8001f8c:	46a4      	mov	ip, r4
 8001f8e:	499b      	ldr	r1, [pc, #620]	@ (80021fc <hashInit.0+0x984>)
 8001f90:	489b      	ldr	r0, [pc, #620]	@ (8002200 <hashInit.0+0x988>)
 8001f92:	f7ff fbc3 	bl	800171c <insert.1>
		insert("OEFR", "over");
 8001f96:	46a4      	mov	ip, r4
 8001f98:	499a      	ldr	r1, [pc, #616]	@ (8002204 <hashInit.0+0x98c>)
 8001f9a:	489b      	ldr	r0, [pc, #620]	@ (8002208 <hashInit.0+0x990>)
 8001f9c:	f7ff fbbe 	bl	800171c <insert.1>
		insert("PHUFP", "much");
 8001fa0:	46a4      	mov	ip, r4
 8001fa2:	499a      	ldr	r1, [pc, #616]	@ (800220c <hashInit.0+0x994>)
 8001fa4:	489a      	ldr	r0, [pc, #616]	@ (8002210 <hashInit.0+0x998>)
 8001fa6:	f7ff fbb9 	bl	800171c <insert.1>
		insert("TKOUPB", "down");
 8001faa:	46a4      	mov	ip, r4
 8001fac:	4999      	ldr	r1, [pc, #612]	@ (8002214 <hashInit.0+0x99c>)
 8001fae:	489a      	ldr	r0, [pc, #616]	@ (8002218 <hashInit.0+0x9a0>)
 8001fb0:	f7ff fbb4 	bl	800171c <insert.1>
		insert("AF", "after");
 8001fb4:	46a4      	mov	ip, r4
 8001fb6:	4999      	ldr	r1, [pc, #612]	@ (800221c <hashInit.0+0x9a4>)
 8001fb8:	4899      	ldr	r0, [pc, #612]	@ (8002220 <hashInit.0+0x9a8>)
 8001fba:	f7ff fbaf 	bl	800171c <insert.1>
		insert("TPEUFRT", "first");
 8001fbe:	46a4      	mov	ip, r4
 8001fc0:	4998      	ldr	r1, [pc, #608]	@ (8002224 <hashInit.0+0x9ac>)
 8001fc2:	4899      	ldr	r0, [pc, #612]	@ (8002228 <hashInit.0+0x9b0>)
 8001fc4:	f7ff fbaa 	bl	800171c <insert.1>
		insert("PHR-FPLT", "Mr.");
 8001fc8:	46a4      	mov	ip, r4
 8001fca:	4998      	ldr	r1, [pc, #608]	@ (800222c <hashInit.0+0x9b4>)
 8001fcc:	4898      	ldr	r0, [pc, #608]	@ (8002230 <hashInit.0+0x9b8>)
 8001fce:	f7ff fba5 	bl	800171c <insert.1>
		insert("TKPWAOD", "good");
 8001fd2:	46a4      	mov	ip, r4
 8001fd4:	4997      	ldr	r1, [pc, #604]	@ (8002234 <hashInit.0+0x9bc>)
 8001fd6:	4898      	ldr	r0, [pc, #608]	@ (8002238 <hashInit.0+0x9c0>)
 8001fd8:	f7ff fba0 	bl	800171c <insert.1>
		insert("PHEPB", "men");
 8001fdc:	46a4      	mov	ip, r4
 8001fde:	4997      	ldr	r1, [pc, #604]	@ (800223c <hashInit.0+0x9c4>)
 8001fe0:	4897      	ldr	r0, [pc, #604]	@ (8002240 <hashInit.0+0x9c8>)
 8001fe2:	f7ff fb9b 	bl	800171c <insert.1>
		insert("OEPB", "own");
 8001fe6:	46a4      	mov	ip, r4
 8001fe8:	4996      	ldr	r1, [pc, #600]	@ (8002244 <hashInit.0+0x9cc>)
 8001fea:	4897      	ldr	r0, [pc, #604]	@ (8002248 <hashInit.0+0x9d0>)
 8001fec:	f7ff fb96 	bl	800171c <insert.1>
		insert("TPHEFR", "never");
 8001ff0:	46a4      	mov	ip, r4
 8001ff2:	4996      	ldr	r1, [pc, #600]	@ (800224c <hashInit.0+0x9d4>)
 8001ff4:	4896      	ldr	r0, [pc, #600]	@ (8002250 <hashInit.0+0x9d8>)
 8001ff6:	f7ff fb91 	bl	800171c <insert.1>
		insert("PHOFT", "most");
 8001ffa:	46a4      	mov	ip, r4
 8001ffc:	4995      	ldr	r1, [pc, #596]	@ (8002254 <hashInit.0+0x9dc>)
 8001ffe:	4896      	ldr	r0, [pc, #600]	@ (8002258 <hashInit.0+0x9e0>)
 8002000:	f7ff fb8c 	bl	800171c <insert.1>
		insert("OLD", "old");
 8002004:	46a4      	mov	ip, r4
 8002006:	4995      	ldr	r1, [pc, #596]	@ (800225c <hashInit.0+0x9e4>)
 8002008:	4895      	ldr	r0, [pc, #596]	@ (8002260 <hashInit.0+0x9e8>)
 800200a:	f7ff fb87 	bl	800171c <insert.1>
		insert("SHAL", "shall");
 800200e:	46a4      	mov	ip, r4
 8002010:	4994      	ldr	r1, [pc, #592]	@ (8002264 <hashInit.0+0x9ec>)
 8002012:	4895      	ldr	r0, [pc, #596]	@ (8002268 <hashInit.0+0x9f0>)
 8002014:	f7ff fb82 	bl	800171c <insert.1>
		insert("TKAEU", "day");
 8002018:	46a4      	mov	ip, r4
 800201a:	4994      	ldr	r1, [pc, #592]	@ (800226c <hashInit.0+0x9f4>)
 800201c:	4894      	ldr	r0, [pc, #592]	@ (8002270 <hashInit.0+0x9f8>)
 800201e:	f7ff fb7d 	bl	800171c <insert.1>
		insert("W-R", "where");
 8002022:	46a4      	mov	ip, r4
 8002024:	4993      	ldr	r1, [pc, #588]	@ (8002274 <hashInit.0+0x9fc>)
 8002026:	4894      	ldr	r0, [pc, #592]	@ (8002278 <hashInit.0+0xa00>)
 8002028:	f7ff fb78 	bl	800171c <insert.1>
		insert("THOZ", "those");
 800202c:	46a4      	mov	ip, r4
 800202e:	4993      	ldr	r1, [pc, #588]	@ (800227c <hashInit.0+0xa04>)
 8002030:	4893      	ldr	r0, [pc, #588]	@ (8002280 <hashInit.0+0xa08>)
 8002032:	f7ff fb73 	bl	800171c <insert.1>
		insert("KAEUPL", "came");
 8002036:	46a4      	mov	ip, r4
 8002038:	4992      	ldr	r1, [pc, #584]	@ (8002284 <hashInit.0+0xa0c>)
 800203a:	4893      	ldr	r0, [pc, #588]	@ (8002288 <hashInit.0+0xa10>)
 800203c:	f7ff fb6e 	bl	800171c <insert.1>
		insert("KOPL", "come");
 8002040:	46a4      	mov	ip, r4
 8002042:	4992      	ldr	r1, [pc, #584]	@ (800228c <hashInit.0+0xa14>)
 8002044:	4892      	ldr	r0, [pc, #584]	@ (8002290 <hashInit.0+0xa18>)
 8002046:	f7ff fb69 	bl	800171c <insert.1>
		insert("HEUPLS", "himself");
 800204a:	46a4      	mov	ip, r4
 800204c:	4991      	ldr	r1, [pc, #580]	@ (8002294 <hashInit.0+0xa1c>)
 800204e:	4892      	ldr	r0, [pc, #584]	@ (8002298 <hashInit.0+0xa20>)
 8002050:	f7ff fb64 	bl	800171c <insert.1>
		insert("WAEU", "way");
 8002054:	46a4      	mov	ip, r4
 8002056:	4991      	ldr	r1, [pc, #580]	@ (800229c <hashInit.0+0xa24>)
 8002058:	4891      	ldr	r0, [pc, #580]	@ (80022a0 <hashInit.0+0xa28>)
 800205a:	f7ff fb5f 	bl	800171c <insert.1>
 800205e:	e121      	b.n	80022a4 <hashInit.0+0xa2c>
 8002060:	0800d824 	.word	0x0800d824
 8002064:	0800d828 	.word	0x0800d828
 8002068:	0800d82c 	.word	0x0800d82c
 800206c:	0800d830 	.word	0x0800d830
 8002070:	0800d838 	.word	0x0800d838
 8002074:	0800d83c 	.word	0x0800d83c
 8002078:	0800d844 	.word	0x0800d844
 800207c:	0800d84c 	.word	0x0800d84c
 8002080:	0800d850 	.word	0x0800d850
 8002084:	0800d854 	.word	0x0800d854
 8002088:	0800d858 	.word	0x0800d858
 800208c:	0800d85c 	.word	0x0800d85c
 8002090:	0800d864 	.word	0x0800d864
 8002094:	0800d868 	.word	0x0800d868
 8002098:	0800d870 	.word	0x0800d870
 800209c:	0800d878 	.word	0x0800d878
 80020a0:	0800d880 	.word	0x0800d880
 80020a4:	0800d884 	.word	0x0800d884
 80020a8:	0800d888 	.word	0x0800d888
 80020ac:	0800d890 	.word	0x0800d890
 80020b0:	0800d898 	.word	0x0800d898
 80020b4:	0800d8a0 	.word	0x0800d8a0
 80020b8:	0800d8a8 	.word	0x0800d8a8
 80020bc:	0800d8ac 	.word	0x0800d8ac
 80020c0:	0800d8b0 	.word	0x0800d8b0
 80020c4:	0800d8b4 	.word	0x0800d8b4
 80020c8:	0800d8bc 	.word	0x0800d8bc
 80020cc:	0800d8c4 	.word	0x0800d8c4
 80020d0:	0800d8c8 	.word	0x0800d8c8
 80020d4:	0800d8cc 	.word	0x0800d8cc
 80020d8:	0800d8d0 	.word	0x0800d8d0
 80020dc:	0800d8d4 	.word	0x0800d8d4
 80020e0:	0800d8dc 	.word	0x0800d8dc
 80020e4:	0800d5b0 	.word	0x0800d5b0
 80020e8:	0800d5b4 	.word	0x0800d5b4
 80020ec:	0800d8e4 	.word	0x0800d8e4
 80020f0:	0800d8e8 	.word	0x0800d8e8
 80020f4:	0800d8f0 	.word	0x0800d8f0
 80020f8:	0800d8f8 	.word	0x0800d8f8
 80020fc:	0800d900 	.word	0x0800d900
 8002100:	0800d908 	.word	0x0800d908
 8002104:	0800d90c 	.word	0x0800d90c
 8002108:	0800d910 	.word	0x0800d910
 800210c:	0800d914 	.word	0x0800d914
 8002110:	0800d918 	.word	0x0800d918
 8002114:	0800d920 	.word	0x0800d920
 8002118:	0800d928 	.word	0x0800d928
 800211c:	0800d92c 	.word	0x0800d92c
 8002120:	0800d934 	.word	0x0800d934
 8002124:	0800d938 	.word	0x0800d938
 8002128:	0800d940 	.word	0x0800d940
 800212c:	0800d948 	.word	0x0800d948
 8002130:	0800d94c 	.word	0x0800d94c
 8002134:	0800d950 	.word	0x0800d950
 8002138:	0800d958 	.word	0x0800d958
 800213c:	0800d960 	.word	0x0800d960
 8002140:	0800d968 	.word	0x0800d968
 8002144:	0800d96c 	.word	0x0800d96c
 8002148:	0800d974 	.word	0x0800d974
 800214c:	0800d97c 	.word	0x0800d97c
 8002150:	0800d984 	.word	0x0800d984
 8002154:	0800d528 	.word	0x0800d528
 8002158:	0800d98c 	.word	0x0800d98c
 800215c:	0800d990 	.word	0x0800d990
 8002160:	0800d994 	.word	0x0800d994
 8002164:	0800d99c 	.word	0x0800d99c
 8002168:	0800d9a0 	.word	0x0800d9a0
 800216c:	0800d9a8 	.word	0x0800d9a8
 8002170:	0800d9b0 	.word	0x0800d9b0
 8002174:	0800d9b8 	.word	0x0800d9b8
 8002178:	0800d9bc 	.word	0x0800d9bc
 800217c:	0800d9c4 	.word	0x0800d9c4
 8002180:	0800d9cc 	.word	0x0800d9cc
 8002184:	0800d9d8 	.word	0x0800d9d8
 8002188:	0800d9e0 	.word	0x0800d9e0
 800218c:	0800d9e8 	.word	0x0800d9e8
 8002190:	0800d9f0 	.word	0x0800d9f0
 8002194:	0800d9f8 	.word	0x0800d9f8
 8002198:	0800d9fc 	.word	0x0800d9fc
 800219c:	0800da00 	.word	0x0800da00
 80021a0:	0800da08 	.word	0x0800da08
 80021a4:	0800da0c 	.word	0x0800da0c
 80021a8:	0800da14 	.word	0x0800da14
 80021ac:	0800da1c 	.word	0x0800da1c
 80021b0:	0800da20 	.word	0x0800da20
 80021b4:	0800da24 	.word	0x0800da24
 80021b8:	0800da28 	.word	0x0800da28
 80021bc:	0800da2c 	.word	0x0800da2c
 80021c0:	0800da34 	.word	0x0800da34
 80021c4:	0800da3c 	.word	0x0800da3c
 80021c8:	0800da40 	.word	0x0800da40
 80021cc:	0800da44 	.word	0x0800da44
 80021d0:	0800da4c 	.word	0x0800da4c
 80021d4:	0800da58 	.word	0x0800da58
 80021d8:	0800da60 	.word	0x0800da60
 80021dc:	0800da68 	.word	0x0800da68
 80021e0:	0800da70 	.word	0x0800da70
 80021e4:	0800da78 	.word	0x0800da78
 80021e8:	0800da7c 	.word	0x0800da7c
 80021ec:	0800da80 	.word	0x0800da80
 80021f0:	0800da88 	.word	0x0800da88
 80021f4:	0800da90 	.word	0x0800da90
 80021f8:	0800da94 	.word	0x0800da94
 80021fc:	0800da9c 	.word	0x0800da9c
 8002200:	0800daa4 	.word	0x0800daa4
 8002204:	0800daac 	.word	0x0800daac
 8002208:	0800dab4 	.word	0x0800dab4
 800220c:	0800dabc 	.word	0x0800dabc
 8002210:	0800dac4 	.word	0x0800dac4
 8002214:	0800dacc 	.word	0x0800dacc
 8002218:	0800dad4 	.word	0x0800dad4
 800221c:	0800dadc 	.word	0x0800dadc
 8002220:	0800dae4 	.word	0x0800dae4
 8002224:	0800dae8 	.word	0x0800dae8
 8002228:	0800daf0 	.word	0x0800daf0
 800222c:	0800daf8 	.word	0x0800daf8
 8002230:	0800dafc 	.word	0x0800dafc
 8002234:	0800db08 	.word	0x0800db08
 8002238:	0800db10 	.word	0x0800db10
 800223c:	0800db18 	.word	0x0800db18
 8002240:	0800db1c 	.word	0x0800db1c
 8002244:	0800db24 	.word	0x0800db24
 8002248:	0800db28 	.word	0x0800db28
 800224c:	0800db30 	.word	0x0800db30
 8002250:	0800db38 	.word	0x0800db38
 8002254:	0800db40 	.word	0x0800db40
 8002258:	0800db48 	.word	0x0800db48
 800225c:	0800db50 	.word	0x0800db50
 8002260:	0800db54 	.word	0x0800db54
 8002264:	0800db58 	.word	0x0800db58
 8002268:	0800db60 	.word	0x0800db60
 800226c:	0800d5ec 	.word	0x0800d5ec
 8002270:	0800d5f0 	.word	0x0800d5f0
 8002274:	0800db68 	.word	0x0800db68
 8002278:	0800db70 	.word	0x0800db70
 800227c:	0800db74 	.word	0x0800db74
 8002280:	0800db7c 	.word	0x0800db7c
 8002284:	0800db84 	.word	0x0800db84
 8002288:	0800db8c 	.word	0x0800db8c
 800228c:	0800db94 	.word	0x0800db94
 8002290:	0800db9c 	.word	0x0800db9c
 8002294:	0800dba4 	.word	0x0800dba4
 8002298:	0800dbac 	.word	0x0800dbac
 800229c:	0800dbb4 	.word	0x0800dbb4
 80022a0:	0800dbb8 	.word	0x0800dbb8
		insert("WORBG", "work");
 80022a4:	46a4      	mov	ip, r4
 80022a6:	49b5      	ldr	r1, [pc, #724]	@ (800257c <hashInit.0+0xd04>)
 80022a8:	48b5      	ldr	r0, [pc, #724]	@ (8002580 <hashInit.0+0xd08>)
 80022aa:	f7ff fa37 	bl	800171c <insert.1>
		insert("HRAOEUF", "life");
 80022ae:	46a4      	mov	ip, r4
 80022b0:	49b4      	ldr	r1, [pc, #720]	@ (8002584 <hashInit.0+0xd0c>)
 80022b2:	48b5      	ldr	r0, [pc, #724]	@ (8002588 <hashInit.0+0xd10>)
 80022b4:	f7ff fa32 	bl	800171c <insert.1>
		insert("WOUT", "without");
 80022b8:	46a4      	mov	ip, r4
 80022ba:	49b4      	ldr	r1, [pc, #720]	@ (800258c <hashInit.0+0xd14>)
 80022bc:	48b4      	ldr	r0, [pc, #720]	@ (8002590 <hashInit.0+0xd18>)
 80022be:	f7ff fa2d 	bl	800171c <insert.1>
		insert("TKPW", "go");
 80022c2:	46a4      	mov	ip, r4
 80022c4:	49b3      	ldr	r1, [pc, #716]	@ (8002594 <hashInit.0+0xd1c>)
 80022c6:	48b4      	ldr	r0, [pc, #720]	@ (8002598 <hashInit.0+0xd20>)
 80022c8:	f7ff fa28 	bl	800171c <insert.1>
		insert("PHAEUBG", "make");
 80022cc:	46a4      	mov	ip, r4
 80022ce:	49b3      	ldr	r1, [pc, #716]	@ (800259c <hashInit.0+0xd24>)
 80022d0:	48b3      	ldr	r0, [pc, #716]	@ (80025a0 <hashInit.0+0xd28>)
 80022d2:	f7ff fa23 	bl	800171c <insert.1>
		insert("WEL", "well");
 80022d6:	46a4      	mov	ip, r4
 80022d8:	49b2      	ldr	r1, [pc, #712]	@ (80025a4 <hashInit.0+0xd2c>)
 80022da:	48b3      	ldr	r0, [pc, #716]	@ (80025a8 <hashInit.0+0xd30>)
 80022dc:	f7ff fa1e 	bl	800171c <insert.1>
		insert("THRU", "through");
 80022e0:	46a4      	mov	ip, r4
 80022e2:	49b2      	ldr	r1, [pc, #712]	@ (80025ac <hashInit.0+0xd34>)
 80022e4:	48b2      	ldr	r0, [pc, #712]	@ (80025b0 <hashInit.0+0xd38>)
 80022e6:	f7ff fa19 	bl	800171c <insert.1>
		insert("-BG", "being");
 80022ea:	46a4      	mov	ip, r4
 80022ec:	49b1      	ldr	r1, [pc, #708]	@ (80025b4 <hashInit.0+0xd3c>)
 80022ee:	48b2      	ldr	r0, [pc, #712]	@ (80025b8 <hashInit.0+0xd40>)
 80022f0:	f7ff fa14 	bl	800171c <insert.1>
		insert("HROPBG", "long");
 80022f4:	46a4      	mov	ip, r4
 80022f6:	49b1      	ldr	r1, [pc, #708]	@ (80025bc <hashInit.0+0xd44>)
 80022f8:	48b1      	ldr	r0, [pc, #708]	@ (80025c0 <hashInit.0+0xd48>)
 80022fa:	f7ff fa0f 	bl	800171c <insert.1>
		insert("SAEU", "say");
 80022fe:	46a4      	mov	ip, r4
 8002300:	49b0      	ldr	r1, [pc, #704]	@ (80025c4 <hashInit.0+0xd4c>)
 8002302:	48b1      	ldr	r0, [pc, #708]	@ (80025c8 <hashInit.0+0xd50>)
 8002304:	f7ff fa0a 	bl	800171c <insert.1>
		insert("PHAOEUT", "might");
 8002308:	46a4      	mov	ip, r4
 800230a:	49b0      	ldr	r1, [pc, #704]	@ (80025cc <hashInit.0+0xd54>)
 800230c:	48b0      	ldr	r0, [pc, #704]	@ (80025d0 <hashInit.0+0xd58>)
 800230e:	f7ff fa05 	bl	800171c <insert.1>
		insert("HOU", "how");
 8002312:	46a4      	mov	ip, r4
 8002314:	49af      	ldr	r1, [pc, #700]	@ (80025d4 <hashInit.0+0xd5c>)
 8002316:	48b0      	ldr	r0, [pc, #704]	@ (80025d8 <hashInit.0+0xd60>)
 8002318:	f7ff fa00 	bl	800171c <insert.1>
		insert("APL", "am");
 800231c:	46a4      	mov	ip, r4
 800231e:	49af      	ldr	r1, [pc, #700]	@ (80025dc <hashInit.0+0xd64>)
 8002320:	48af      	ldr	r0, [pc, #700]	@ (80025e0 <hashInit.0+0xd68>)
 8002322:	f7ff f9fb 	bl	800171c <insert.1>
		insert("TAO", "too");
 8002326:	46a4      	mov	ip, r4
 8002328:	49ae      	ldr	r1, [pc, #696]	@ (80025e4 <hashInit.0+0xd6c>)
 800232a:	48af      	ldr	r0, [pc, #700]	@ (80025e8 <hashInit.0+0xd70>)
 800232c:	f7ff f9f6 	bl	800171c <insert.1>
		insert("AOEPB", "even");
 8002330:	46a4      	mov	ip, r4
 8002332:	49ae      	ldr	r1, [pc, #696]	@ (80025ec <hashInit.0+0xd74>)
 8002334:	48ae      	ldr	r0, [pc, #696]	@ (80025f0 <hashInit.0+0xd78>)
 8002336:	f7ff f9f1 	bl	800171c <insert.1>
		insert("TK-F", "def");
 800233a:	46a4      	mov	ip, r4
 800233c:	49ad      	ldr	r1, [pc, #692]	@ (80025f4 <hashInit.0+0xd7c>)
 800233e:	48ae      	ldr	r0, [pc, #696]	@ (80025f8 <hashInit.0+0xd80>)
 8002340:	f7ff f9ec 	bl	800171c <insert.1>
		insert("TKPWEPB", "again");
 8002344:	46a4      	mov	ip, r4
 8002346:	49ad      	ldr	r1, [pc, #692]	@ (80025fc <hashInit.0+0xd84>)
 8002348:	48ad      	ldr	r0, [pc, #692]	@ (8002600 <hashInit.0+0xd88>)
 800234a:	f7ff f9e7 	bl	800171c <insert.1>
		insert("PHAEPB", "many");
 800234e:	46a4      	mov	ip, r4
 8002350:	49ac      	ldr	r1, [pc, #688]	@ (8002604 <hashInit.0+0xd8c>)
 8002352:	48ad      	ldr	r0, [pc, #692]	@ (8002608 <hashInit.0+0xd90>)
 8002354:	f7ff f9e2 	bl	800171c <insert.1>
		insert("PWABG", "back");
 8002358:	46a4      	mov	ip, r4
 800235a:	49ac      	ldr	r1, [pc, #688]	@ (800260c <hashInit.0+0xd94>)
 800235c:	48ac      	ldr	r0, [pc, #688]	@ (8002610 <hashInit.0+0xd98>)
 800235e:	f7ff f9dd 	bl	800171c <insert.1>
		insert("HAOER", "here");
 8002362:	46a4      	mov	ip, r4
 8002364:	49ab      	ldr	r1, [pc, #684]	@ (8002614 <hashInit.0+0xd9c>)
 8002366:	48ac      	ldr	r0, [pc, #688]	@ (8002618 <hashInit.0+0xda0>)
 8002368:	f7ff f9d8 	bl	800171c <insert.1>
		insert("THEU", "think");
 800236c:	46a4      	mov	ip, r4
 800236e:	49ab      	ldr	r1, [pc, #684]	@ (800261c <hashInit.0+0xda4>)
 8002370:	48ab      	ldr	r0, [pc, #684]	@ (8002620 <hashInit.0+0xda8>)
 8002372:	f7ff f9d3 	bl	800171c <insert.1>
		insert("EF", "every");
 8002376:	46a4      	mov	ip, r4
 8002378:	49aa      	ldr	r1, [pc, #680]	@ (8002624 <hashInit.0+0xdac>)
 800237a:	48ab      	ldr	r0, [pc, #684]	@ (8002628 <hashInit.0+0xdb0>)
 800237c:	f7ff f9ce 	bl	800171c <insert.1>
		insert("PAOEPL", "people");
 8002380:	46a4      	mov	ip, r4
 8002382:	49aa      	ldr	r1, [pc, #680]	@ (800262c <hashInit.0+0xdb4>)
 8002384:	48aa      	ldr	r0, [pc, #680]	@ (8002630 <hashInit.0+0xdb8>)
 8002386:	f7ff f9c9 	bl	800171c <insert.1>
		insert("WEPBT", "went");
 800238a:	46a4      	mov	ip, r4
 800238c:	49a9      	ldr	r1, [pc, #676]	@ (8002634 <hashInit.0+0xdbc>)
 800238e:	48aa      	ldr	r0, [pc, #680]	@ (8002638 <hashInit.0+0xdc0>)
 8002390:	f7ff f9c4 	bl	800171c <insert.1>
		insert("SAEUPL", "same");
 8002394:	46a4      	mov	ip, r4
 8002396:	49a9      	ldr	r1, [pc, #676]	@ (800263c <hashInit.0+0xdc4>)
 8002398:	48a9      	ldr	r0, [pc, #676]	@ (8002640 <hashInit.0+0xdc8>)
 800239a:	f7ff f9bf 	bl	800171c <insert.1>
		insert("HRAFT", "last");
 800239e:	46a4      	mov	ip, r4
 80023a0:	49a8      	ldr	r1, [pc, #672]	@ (8002644 <hashInit.0+0xdcc>)
 80023a2:	48a9      	ldr	r0, [pc, #676]	@ (8002648 <hashInit.0+0xdd0>)
 80023a4:	f7ff f9ba 	bl	800171c <insert.1>
		insert("THAUT", "thought");
 80023a8:	46a4      	mov	ip, r4
 80023aa:	49a8      	ldr	r1, [pc, #672]	@ (800264c <hashInit.0+0xdd4>)
 80023ac:	48a8      	ldr	r0, [pc, #672]	@ (8002650 <hashInit.0+0xdd8>)
 80023ae:	f7ff f9b5 	bl	800171c <insert.1>
		insert("A/WAEU", "away");
 80023b2:	46a4      	mov	ip, r4
 80023b4:	49a7      	ldr	r1, [pc, #668]	@ (8002654 <hashInit.0+0xddc>)
 80023b6:	48a8      	ldr	r0, [pc, #672]	@ (8002658 <hashInit.0+0xde0>)
 80023b8:	f7ff f9b0 	bl	800171c <insert.1>
		insert("TPH-PB", "under");
 80023bc:	46a4      	mov	ip, r4
 80023be:	49a7      	ldr	r1, [pc, #668]	@ (800265c <hashInit.0+0xde4>)
 80023c0:	48a7      	ldr	r0, [pc, #668]	@ (8002660 <hashInit.0+0xde8>)
 80023c2:	f7ff f9ab 	bl	800171c <insert.1>
		insert("TAEUBG", "take");
 80023c6:	46a4      	mov	ip, r4
 80023c8:	49a6      	ldr	r1, [pc, #664]	@ (8002664 <hashInit.0+0xdec>)
 80023ca:	48a7      	ldr	r0, [pc, #668]	@ (8002668 <hashInit.0+0xdf0>)
 80023cc:	f7ff f9a6 	bl	800171c <insert.1>
		insert("TPOUPBD", "found");
 80023d0:	46a4      	mov	ip, r4
 80023d2:	49a6      	ldr	r1, [pc, #664]	@ (800266c <hashInit.0+0xdf4>)
 80023d4:	48a6      	ldr	r0, [pc, #664]	@ (8002670 <hashInit.0+0xdf8>)
 80023d6:	f7ff f9a1 	bl	800171c <insert.1>
		insert("HAPBD", "hand");
 80023da:	46a4      	mov	ip, r4
 80023dc:	49a5      	ldr	r1, [pc, #660]	@ (8002674 <hashInit.0+0xdfc>)
 80023de:	48a6      	ldr	r0, [pc, #664]	@ (8002678 <hashInit.0+0xe00>)
 80023e0:	f7ff f99c 	bl	800171c <insert.1>
		insert("AO*EUS", "eyes");
 80023e4:	46a4      	mov	ip, r4
 80023e6:	49a5      	ldr	r1, [pc, #660]	@ (800267c <hashInit.0+0xe04>)
 80023e8:	48a5      	ldr	r0, [pc, #660]	@ (8002680 <hashInit.0+0xe08>)
 80023ea:	f7ff f997 	bl	800171c <insert.1>
		insert("STEUL", "still");
 80023ee:	46a4      	mov	ip, r4
 80023f0:	49a4      	ldr	r1, [pc, #656]	@ (8002684 <hashInit.0+0xe0c>)
 80023f2:	48a5      	ldr	r0, [pc, #660]	@ (8002688 <hashInit.0+0xe10>)
 80023f4:	f7ff f992 	bl	800171c <insert.1>
		insert("PHRAEUS", "place");
 80023f8:	46a4      	mov	ip, r4
 80023fa:	49a4      	ldr	r1, [pc, #656]	@ (800268c <hashInit.0+0xe14>)
 80023fc:	48a4      	ldr	r0, [pc, #656]	@ (8002690 <hashInit.0+0xe18>)
 80023fe:	f7ff f98d 	bl	800171c <insert.1>
		insert("WHAOEUL", "while");
 8002402:	46a4      	mov	ip, r4
 8002404:	49a3      	ldr	r1, [pc, #652]	@ (8002694 <hashInit.0+0xe1c>)
 8002406:	48a4      	ldr	r0, [pc, #656]	@ (8002698 <hashInit.0+0xe20>)
 8002408:	f7ff f988 	bl	800171c <insert.1>
		insert("SKWRUFT", "just");
 800240c:	46a4      	mov	ip, r4
 800240e:	49a3      	ldr	r1, [pc, #652]	@ (800269c <hashInit.0+0xe24>)
 8002410:	48a3      	ldr	r0, [pc, #652]	@ (80026a0 <hashInit.0+0xe28>)
 8002412:	f7ff f983 	bl	800171c <insert.1>
		insert("HR-S", "also");
 8002416:	46a4      	mov	ip, r4
 8002418:	49a2      	ldr	r1, [pc, #648]	@ (80026a4 <hashInit.0+0xe2c>)
 800241a:	48a3      	ldr	r0, [pc, #652]	@ (80026a8 <hashInit.0+0xe30>)
 800241c:	f7ff f97e 	bl	800171c <insert.1>
		insert("KWRUPBG", "young");
 8002420:	46a4      	mov	ip, r4
 8002422:	49a2      	ldr	r1, [pc, #648]	@ (80026ac <hashInit.0+0xe34>)
 8002424:	48a2      	ldr	r0, [pc, #648]	@ (80026b0 <hashInit.0+0xe38>)
 8002426:	f7ff f979 	bl	800171c <insert.1>
		insert("KWRET", "yet");
 800242a:	46a4      	mov	ip, r4
 800242c:	49a1      	ldr	r1, [pc, #644]	@ (80026b4 <hashInit.0+0xe3c>)
 800242e:	48a2      	ldr	r0, [pc, #648]	@ (80026b8 <hashInit.0+0xe40>)
 8002430:	f7ff f974 	bl	800171c <insert.1>
		insert("THOE", "though");
 8002434:	46a4      	mov	ip, r4
 8002436:	49a1      	ldr	r1, [pc, #644]	@ (80026bc <hashInit.0+0xe44>)
 8002438:	48a1      	ldr	r0, [pc, #644]	@ (80026c0 <hashInit.0+0xe48>)
 800243a:	f7ff f96f 	bl	800171c <insert.1>
		insert("TKPWEPBS", "against");
 800243e:	46a4      	mov	ip, r4
 8002440:	49a0      	ldr	r1, [pc, #640]	@ (80026c4 <hashInit.0+0xe4c>)
 8002442:	48a1      	ldr	r0, [pc, #644]	@ (80026c8 <hashInit.0+0xe50>)
 8002444:	f7ff f96a 	bl	800171c <insert.1>
		insert("THEUPBGS", "things");
 8002448:	46a4      	mov	ip, r4
 800244a:	49a0      	ldr	r1, [pc, #640]	@ (80026cc <hashInit.0+0xe54>)
 800244c:	48a0      	ldr	r0, [pc, #640]	@ (80026d0 <hashInit.0+0xe58>)
 800244e:	f7ff f965 	bl	800171c <insert.1>
		insert("TKPWET", "get");
 8002452:	46a4      	mov	ip, r4
 8002454:	499f      	ldr	r1, [pc, #636]	@ (80026d4 <hashInit.0+0xe5c>)
 8002456:	48a0      	ldr	r0, [pc, #640]	@ (80026d8 <hashInit.0+0xe60>)
 8002458:	f7ff f960 	bl	800171c <insert.1>
		insert("-FR", "ever");
 800245c:	46a4      	mov	ip, r4
 800245e:	499f      	ldr	r1, [pc, #636]	@ (80026dc <hashInit.0+0xe64>)
 8002460:	489f      	ldr	r0, [pc, #636]	@ (80026e0 <hashInit.0+0xe68>)
 8002462:	f7ff f95b 	bl	800171c <insert.1>
		insert("TKPWEUF", "give");
 8002466:	46a4      	mov	ip, r4
 8002468:	499e      	ldr	r1, [pc, #632]	@ (80026e4 <hashInit.0+0xe6c>)
 800246a:	489f      	ldr	r0, [pc, #636]	@ (80026e8 <hashInit.0+0xe70>)
 800246c:	f7ff f956 	bl	800171c <insert.1>
		insert("TKPWOD", "god");
 8002470:	46a4      	mov	ip, r4
 8002472:	499e      	ldr	r1, [pc, #632]	@ (80026ec <hashInit.0+0xe74>)
 8002474:	489e      	ldr	r0, [pc, #632]	@ (80026f0 <hashInit.0+0xe78>)
 8002476:	f7ff f951 	bl	800171c <insert.1>
		insert("KWRAOERS", "years");
 800247a:	46a4      	mov	ip, r4
 800247c:	499d      	ldr	r1, [pc, #628]	@ (80026f4 <hashInit.0+0xe7c>)
 800247e:	489e      	ldr	r0, [pc, #632]	@ (80026f8 <hashInit.0+0xe80>)
 8002480:	f7ff f94c 	bl	800171c <insert.1>
		insert("OF", "off");
 8002484:	46a4      	mov	ip, r4
 8002486:	499d      	ldr	r1, [pc, #628]	@ (80026fc <hashInit.0+0xe84>)
 8002488:	489d      	ldr	r0, [pc, #628]	@ (8002700 <hashInit.0+0xe88>)
 800248a:	f7ff f947 	bl	800171c <insert.1>
		insert("TPAEUS", "face");
 800248e:	46a4      	mov	ip, r4
 8002490:	499c      	ldr	r1, [pc, #624]	@ (8002704 <hashInit.0+0xe8c>)
 8002492:	489d      	ldr	r0, [pc, #628]	@ (8002708 <hashInit.0+0xe90>)
 8002494:	f7ff f942 	bl	800171c <insert.1>
		insert("TPHOG", "nothing");
 8002498:	46a4      	mov	ip, r4
 800249a:	499c      	ldr	r1, [pc, #624]	@ (800270c <hashInit.0+0xe94>)
 800249c:	489c      	ldr	r0, [pc, #624]	@ (8002710 <hashInit.0+0xe98>)
 800249e:	f7ff f93d 	bl	800171c <insert.1>
		insert("RAOEUT", "right");
 80024a2:	46a4      	mov	ip, r4
 80024a4:	499b      	ldr	r1, [pc, #620]	@ (8002714 <hashInit.0+0xe9c>)
 80024a6:	489c      	ldr	r0, [pc, #624]	@ (8002718 <hashInit.0+0xea0>)
 80024a8:	f7ff f938 	bl	800171c <insert.1>
		insert("WUPBS", "once");
 80024ac:	46a4      	mov	ip, r4
 80024ae:	499b      	ldr	r1, [pc, #620]	@ (800271c <hashInit.0+0xea4>)
 80024b0:	489b      	ldr	r0, [pc, #620]	@ (8002720 <hashInit.0+0xea8>)
 80024b2:	f7ff f933 	bl	800171c <insert.1>
		insert("TPHOER", "another");
 80024b6:	46a4      	mov	ip, r4
 80024b8:	499a      	ldr	r1, [pc, #616]	@ (8002724 <hashInit.0+0xeac>)
 80024ba:	489b      	ldr	r0, [pc, #620]	@ (8002728 <hashInit.0+0xeb0>)
 80024bc:	f7ff f92e 	bl	800171c <insert.1>
		insert("HREFT", "left");
 80024c0:	46a4      	mov	ip, r4
 80024c2:	499a      	ldr	r1, [pc, #616]	@ (800272c <hashInit.0+0xeb4>)
 80024c4:	489a      	ldr	r0, [pc, #616]	@ (8002730 <hashInit.0+0xeb8>)
 80024c6:	f7ff f929 	bl	800171c <insert.1>
		insert("PART", "part");
 80024ca:	46a4      	mov	ip, r4
 80024cc:	4999      	ldr	r1, [pc, #612]	@ (8002734 <hashInit.0+0xebc>)
 80024ce:	489a      	ldr	r0, [pc, #616]	@ (8002738 <hashInit.0+0xec0>)
 80024d0:	f7ff f924 	bl	800171c <insert.1>
		insert("SAU", "saw");
 80024d4:	46a4      	mov	ip, r4
 80024d6:	4999      	ldr	r1, [pc, #612]	@ (800273c <hashInit.0+0xec4>)
 80024d8:	4899      	ldr	r0, [pc, #612]	@ (8002740 <hashInit.0+0xec8>)
 80024da:	f7ff f91f 	bl	800171c <insert.1>
		insert("HOUS", "house");
 80024de:	46a4      	mov	ip, r4
 80024e0:	4998      	ldr	r1, [pc, #608]	@ (8002744 <hashInit.0+0xecc>)
 80024e2:	4899      	ldr	r0, [pc, #612]	@ (8002748 <hashInit.0+0xed0>)
 80024e4:	f7ff f91a 	bl	800171c <insert.1>
		insert("WORLD", "world");
 80024e8:	46a4      	mov	ip, r4
 80024ea:	4998      	ldr	r1, [pc, #608]	@ (800274c <hashInit.0+0xed4>)
 80024ec:	4898      	ldr	r0, [pc, #608]	@ (8002750 <hashInit.0+0xed8>)
 80024ee:	f7ff f915 	bl	800171c <insert.1>
		insert("HED", "head");
 80024f2:	46a4      	mov	ip, r4
 80024f4:	4997      	ldr	r1, [pc, #604]	@ (8002754 <hashInit.0+0xedc>)
 80024f6:	4898      	ldr	r0, [pc, #608]	@ (8002758 <hashInit.0+0xee0>)
 80024f8:	f7ff f910 	bl	800171c <insert.1>
		insert("THRAOE", "three");
 80024fc:	46a4      	mov	ip, r4
 80024fe:	4997      	ldr	r1, [pc, #604]	@ (800275c <hashInit.0+0xee4>)
 8002500:	4897      	ldr	r0, [pc, #604]	@ (8002760 <hashInit.0+0xee8>)
 8002502:	f7ff f90b 	bl	800171c <insert.1>
		insert("TAOBG", "took");
 8002506:	46a4      	mov	ip, r4
 8002508:	4996      	ldr	r1, [pc, #600]	@ (8002764 <hashInit.0+0xeec>)
 800250a:	4897      	ldr	r0, [pc, #604]	@ (8002768 <hashInit.0+0xef0>)
 800250c:	f7ff f906 	bl	800171c <insert.1>
		insert("TPHU", "new");
 8002510:	46a4      	mov	ip, r4
 8002512:	4996      	ldr	r1, [pc, #600]	@ (800276c <hashInit.0+0xef4>)
 8002514:	4896      	ldr	r0, [pc, #600]	@ (8002770 <hashInit.0+0xef8>)
 8002516:	f7ff f901 	bl	800171c <insert.1>
		insert("HRUF", "love");
 800251a:	46a4      	mov	ip, r4
 800251c:	4995      	ldr	r1, [pc, #596]	@ (8002774 <hashInit.0+0xefc>)
 800251e:	4896      	ldr	r0, [pc, #600]	@ (8002778 <hashInit.0+0xf00>)
 8002520:	f7ff f8fc 	bl	800171c <insert.1>
		insert("AULS", "always");
 8002524:	46a4      	mov	ip, r4
 8002526:	4995      	ldr	r1, [pc, #596]	@ (800277c <hashInit.0+0xf04>)
 8002528:	4895      	ldr	r0, [pc, #596]	@ (8002780 <hashInit.0+0xf08>)
 800252a:	f7ff f8f7 	bl	800171c <insert.1>
		insert("PHR-S", "Mrs.");
 800252e:	46a4      	mov	ip, r4
 8002530:	4994      	ldr	r1, [pc, #592]	@ (8002784 <hashInit.0+0xf0c>)
 8002532:	4895      	ldr	r0, [pc, #596]	@ (8002788 <hashInit.0+0xf10>)
 8002534:	f7ff f8f2 	bl	800171c <insert.1>
		insert("PUT", "put");
 8002538:	46a4      	mov	ip, r4
 800253a:	4994      	ldr	r1, [pc, #592]	@ (800278c <hashInit.0+0xf14>)
 800253c:	4894      	ldr	r0, [pc, #592]	@ (8002790 <hashInit.0+0xf18>)
 800253e:	f7ff f8ed 	bl	800171c <insert.1>
		insert("TPHAOEUT", "night");
 8002542:	46a4      	mov	ip, r4
 8002544:	4993      	ldr	r1, [pc, #588]	@ (8002794 <hashInit.0+0xf1c>)
 8002546:	4894      	ldr	r0, [pc, #592]	@ (8002798 <hashInit.0+0xf20>)
 8002548:	f7ff f8e8 	bl	800171c <insert.1>
		insert("AOEFP", "each");
 800254c:	46a4      	mov	ip, r4
 800254e:	4993      	ldr	r1, [pc, #588]	@ (800279c <hashInit.0+0xf24>)
 8002550:	4893      	ldr	r0, [pc, #588]	@ (80027a0 <hashInit.0+0xf28>)
 8002552:	f7ff f8e3 	bl	800171c <insert.1>
		insert("KEUPBG", "king");
 8002556:	46a4      	mov	ip, r4
 8002558:	4992      	ldr	r1, [pc, #584]	@ (80027a4 <hashInit.0+0xf2c>)
 800255a:	4893      	ldr	r0, [pc, #588]	@ (80027a8 <hashInit.0+0xf30>)
 800255c:	f7ff f8de 	bl	800171c <insert.1>
		insert("TWAOEPB", "between");
 8002560:	46a4      	mov	ip, r4
 8002562:	4992      	ldr	r1, [pc, #584]	@ (80027ac <hashInit.0+0xf34>)
 8002564:	4892      	ldr	r0, [pc, #584]	@ (80027b0 <hashInit.0+0xf38>)
 8002566:	f7ff f8d9 	bl	800171c <insert.1>
		insert("TEL", "tell");
 800256a:	46a4      	mov	ip, r4
 800256c:	4991      	ldr	r1, [pc, #580]	@ (80027b4 <hashInit.0+0xf3c>)
 800256e:	4892      	ldr	r0, [pc, #584]	@ (80027b8 <hashInit.0+0xf40>)
 8002570:	f7ff f8d4 	bl	800171c <insert.1>
		insert("PHAOEUPBD", "mind");
 8002574:	46a4      	mov	ip, r4
 8002576:	4991      	ldr	r1, [pc, #580]	@ (80027bc <hashInit.0+0xf44>)
 8002578:	e122      	b.n	80027c0 <hashInit.0+0xf48>
 800257a:	bf00      	nop
 800257c:	0800dbc0 	.word	0x0800dbc0
 8002580:	0800dbc8 	.word	0x0800dbc8
 8002584:	0800dbd0 	.word	0x0800dbd0
 8002588:	0800dbd8 	.word	0x0800dbd8
 800258c:	0800dbe0 	.word	0x0800dbe0
 8002590:	0800dbe8 	.word	0x0800dbe8
 8002594:	0800dbf0 	.word	0x0800dbf0
 8002598:	0800dbf4 	.word	0x0800dbf4
 800259c:	0800dbfc 	.word	0x0800dbfc
 80025a0:	0800dc04 	.word	0x0800dc04
 80025a4:	0800dc0c 	.word	0x0800dc0c
 80025a8:	0800dc14 	.word	0x0800dc14
 80025ac:	0800dc18 	.word	0x0800dc18
 80025b0:	0800dc20 	.word	0x0800dc20
 80025b4:	0800dc28 	.word	0x0800dc28
 80025b8:	0800dc30 	.word	0x0800dc30
 80025bc:	0800dc34 	.word	0x0800dc34
 80025c0:	0800dc3c 	.word	0x0800dc3c
 80025c4:	0800dc44 	.word	0x0800dc44
 80025c8:	0800dc48 	.word	0x0800dc48
 80025cc:	0800dc50 	.word	0x0800dc50
 80025d0:	0800dc58 	.word	0x0800dc58
 80025d4:	0800dc60 	.word	0x0800dc60
 80025d8:	0800dc64 	.word	0x0800dc64
 80025dc:	0800dc68 	.word	0x0800dc68
 80025e0:	0800dc6c 	.word	0x0800dc6c
 80025e4:	0800dc70 	.word	0x0800dc70
 80025e8:	0800dc74 	.word	0x0800dc74
 80025ec:	0800dc78 	.word	0x0800dc78
 80025f0:	0800dc80 	.word	0x0800dc80
 80025f4:	0800dc88 	.word	0x0800dc88
 80025f8:	0800dc8c 	.word	0x0800dc8c
 80025fc:	0800dc94 	.word	0x0800dc94
 8002600:	0800dc9c 	.word	0x0800dc9c
 8002604:	0800dca4 	.word	0x0800dca4
 8002608:	0800dcac 	.word	0x0800dcac
 800260c:	0800dcb4 	.word	0x0800dcb4
 8002610:	0800dcbc 	.word	0x0800dcbc
 8002614:	0800dcc4 	.word	0x0800dcc4
 8002618:	0800dccc 	.word	0x0800dccc
 800261c:	0800dcd4 	.word	0x0800dcd4
 8002620:	0800dcdc 	.word	0x0800dcdc
 8002624:	0800dce4 	.word	0x0800dce4
 8002628:	0800dcec 	.word	0x0800dcec
 800262c:	0800dcf0 	.word	0x0800dcf0
 8002630:	0800dcf8 	.word	0x0800dcf8
 8002634:	0800dd00 	.word	0x0800dd00
 8002638:	0800dd08 	.word	0x0800dd08
 800263c:	0800dd10 	.word	0x0800dd10
 8002640:	0800dd18 	.word	0x0800dd18
 8002644:	0800dd20 	.word	0x0800dd20
 8002648:	0800dd28 	.word	0x0800dd28
 800264c:	0800dd30 	.word	0x0800dd30
 8002650:	0800dd38 	.word	0x0800dd38
 8002654:	0800dd40 	.word	0x0800dd40
 8002658:	0800dd48 	.word	0x0800dd48
 800265c:	0800dd50 	.word	0x0800dd50
 8002660:	0800dd58 	.word	0x0800dd58
 8002664:	0800dd60 	.word	0x0800dd60
 8002668:	0800dd68 	.word	0x0800dd68
 800266c:	0800dd70 	.word	0x0800dd70
 8002670:	0800dd78 	.word	0x0800dd78
 8002674:	0800dd80 	.word	0x0800dd80
 8002678:	0800dd88 	.word	0x0800dd88
 800267c:	0800dd90 	.word	0x0800dd90
 8002680:	0800dd98 	.word	0x0800dd98
 8002684:	0800dda0 	.word	0x0800dda0
 8002688:	0800dda8 	.word	0x0800dda8
 800268c:	0800ddb0 	.word	0x0800ddb0
 8002690:	0800ddb8 	.word	0x0800ddb8
 8002694:	0800ddc0 	.word	0x0800ddc0
 8002698:	0800ddc8 	.word	0x0800ddc8
 800269c:	0800ddd0 	.word	0x0800ddd0
 80026a0:	0800ddd8 	.word	0x0800ddd8
 80026a4:	0800dde0 	.word	0x0800dde0
 80026a8:	0800dde8 	.word	0x0800dde8
 80026ac:	0800ddf0 	.word	0x0800ddf0
 80026b0:	0800ddf8 	.word	0x0800ddf8
 80026b4:	0800de00 	.word	0x0800de00
 80026b8:	0800de04 	.word	0x0800de04
 80026bc:	0800de0c 	.word	0x0800de0c
 80026c0:	0800de14 	.word	0x0800de14
 80026c4:	0800de1c 	.word	0x0800de1c
 80026c8:	0800de24 	.word	0x0800de24
 80026cc:	0800de30 	.word	0x0800de30
 80026d0:	0800de38 	.word	0x0800de38
 80026d4:	0800de44 	.word	0x0800de44
 80026d8:	0800de48 	.word	0x0800de48
 80026dc:	0800de50 	.word	0x0800de50
 80026e0:	0800de58 	.word	0x0800de58
 80026e4:	0800de5c 	.word	0x0800de5c
 80026e8:	0800de64 	.word	0x0800de64
 80026ec:	0800de6c 	.word	0x0800de6c
 80026f0:	0800de70 	.word	0x0800de70
 80026f4:	0800de78 	.word	0x0800de78
 80026f8:	0800de80 	.word	0x0800de80
 80026fc:	0800de8c 	.word	0x0800de8c
 8002700:	0800de90 	.word	0x0800de90
 8002704:	0800de94 	.word	0x0800de94
 8002708:	0800de9c 	.word	0x0800de9c
 800270c:	0800dea4 	.word	0x0800dea4
 8002710:	0800deac 	.word	0x0800deac
 8002714:	0800deb4 	.word	0x0800deb4
 8002718:	0800debc 	.word	0x0800debc
 800271c:	0800dec4 	.word	0x0800dec4
 8002720:	0800decc 	.word	0x0800decc
 8002724:	0800ded4 	.word	0x0800ded4
 8002728:	0800dedc 	.word	0x0800dedc
 800272c:	0800dee4 	.word	0x0800dee4
 8002730:	0800deec 	.word	0x0800deec
 8002734:	0800def4 	.word	0x0800def4
 8002738:	0800defc 	.word	0x0800defc
 800273c:	0800df04 	.word	0x0800df04
 8002740:	0800df08 	.word	0x0800df08
 8002744:	0800df0c 	.word	0x0800df0c
 8002748:	0800df14 	.word	0x0800df14
 800274c:	0800df1c 	.word	0x0800df1c
 8002750:	0800df24 	.word	0x0800df24
 8002754:	0800df2c 	.word	0x0800df2c
 8002758:	0800df34 	.word	0x0800df34
 800275c:	0800df38 	.word	0x0800df38
 8002760:	0800df40 	.word	0x0800df40
 8002764:	0800df48 	.word	0x0800df48
 8002768:	0800df50 	.word	0x0800df50
 800276c:	0800df58 	.word	0x0800df58
 8002770:	0800df5c 	.word	0x0800df5c
 8002774:	0800df64 	.word	0x0800df64
 8002778:	0800df6c 	.word	0x0800df6c
 800277c:	0800df74 	.word	0x0800df74
 8002780:	0800df7c 	.word	0x0800df7c
 8002784:	0800df84 	.word	0x0800df84
 8002788:	0800df8c 	.word	0x0800df8c
 800278c:	0800df94 	.word	0x0800df94
 8002790:	0800df98 	.word	0x0800df98
 8002794:	0800df9c 	.word	0x0800df9c
 8002798:	0800dfa4 	.word	0x0800dfa4
 800279c:	0800dfb0 	.word	0x0800dfb0
 80027a0:	0800dfb8 	.word	0x0800dfb8
 80027a4:	0800dfc0 	.word	0x0800dfc0
 80027a8:	0800dfc8 	.word	0x0800dfc8
 80027ac:	0800dfd0 	.word	0x0800dfd0
 80027b0:	0800dfd8 	.word	0x0800dfd8
 80027b4:	0800dfe0 	.word	0x0800dfe0
 80027b8:	0800dfe8 	.word	0x0800dfe8
 80027bc:	0800dfec 	.word	0x0800dfec
 80027c0:	48b5      	ldr	r0, [pc, #724]	@ (8002a98 <hashInit.0+0x1220>)
 80027c2:	f7fe ffab 	bl	800171c <insert.1>
		insert("HART", "heart");
 80027c6:	46a4      	mov	ip, r4
 80027c8:	49b4      	ldr	r1, [pc, #720]	@ (8002a9c <hashInit.0+0x1224>)
 80027ca:	48b5      	ldr	r0, [pc, #724]	@ (8002aa0 <hashInit.0+0x1228>)
 80027cc:	f7fe ffa6 	bl	800171c <insert.1>
		insert("TPAOU", "few");
 80027d0:	46a4      	mov	ip, r4
 80027d2:	49b4      	ldr	r1, [pc, #720]	@ (8002aa4 <hashInit.0+0x122c>)
 80027d4:	48b4      	ldr	r0, [pc, #720]	@ (8002aa8 <hashInit.0+0x1230>)
 80027d6:	f7fe ffa1 	bl	800171c <insert.1>
		insert("PWAU", "because");
 80027da:	46a4      	mov	ip, r4
 80027dc:	49b3      	ldr	r1, [pc, #716]	@ (8002aac <hashInit.0+0x1234>)
 80027de:	48b4      	ldr	r0, [pc, #720]	@ (8002ab0 <hashInit.0+0x1238>)
 80027e0:	f7fe ff9c 	bl	800171c <insert.1>
		insert("THEUPBG", "thing");
 80027e4:	46a4      	mov	ip, r4
 80027e6:	49b3      	ldr	r1, [pc, #716]	@ (8002ab4 <hashInit.0+0x123c>)
 80027e8:	48b3      	ldr	r0, [pc, #716]	@ (8002ab8 <hashInit.0+0x1240>)
 80027ea:	f7fe ff97 	bl	800171c <insert.1>
		insert("WHOPL", "whom");
 80027ee:	46a4      	mov	ip, r4
 80027f0:	49b2      	ldr	r1, [pc, #712]	@ (8002abc <hashInit.0+0x1244>)
 80027f2:	48b3      	ldr	r0, [pc, #716]	@ (8002ac0 <hashInit.0+0x1248>)
 80027f4:	f7fe ff92 	bl	800171c <insert.1>
		insert("TPAR", "far");
 80027f8:	46a4      	mov	ip, r4
 80027fa:	49b2      	ldr	r1, [pc, #712]	@ (8002ac4 <hashInit.0+0x124c>)
 80027fc:	48b2      	ldr	r0, [pc, #712]	@ (8002ac8 <hashInit.0+0x1250>)
 80027fe:	f7fe ff8d 	bl	800171c <insert.1>
		insert("SAOEPLD", "seemed");
 8002802:	46a4      	mov	ip, r4
 8002804:	49b1      	ldr	r1, [pc, #708]	@ (8002acc <hashInit.0+0x1254>)
 8002806:	48b2      	ldr	r0, [pc, #712]	@ (8002ad0 <hashInit.0+0x1258>)
 8002808:	f7fe ff88 	bl	800171c <insert.1>
		insert("HRAOBGD", "looked");
 800280c:	46a4      	mov	ip, r4
 800280e:	49b1      	ldr	r1, [pc, #708]	@ (8002ad4 <hashInit.0+0x125c>)
 8002810:	48b1      	ldr	r0, [pc, #708]	@ (8002ad8 <hashInit.0+0x1260>)
 8002812:	f7fe ff83 	bl	800171c <insert.1>
		insert("KAULD", "called");
 8002816:	46a4      	mov	ip, r4
 8002818:	49b0      	ldr	r1, [pc, #704]	@ (8002adc <hashInit.0+0x1264>)
 800281a:	48b1      	ldr	r0, [pc, #708]	@ (8002ae0 <hashInit.0+0x1268>)
 800281c:	f7fe ff7e 	bl	800171c <insert.1>
		insert("WHOEL", "whole");
 8002820:	46a4      	mov	ip, r4
 8002822:	49b0      	ldr	r1, [pc, #704]	@ (8002ae4 <hashInit.0+0x126c>)
 8002824:	48b0      	ldr	r0, [pc, #704]	@ (8002ae8 <hashInit.0+0x1270>)
 8002826:	f7fe ff79 	bl	800171c <insert.1>
		insert("TK*E", "de");
 800282a:	46a4      	mov	ip, r4
 800282c:	49af      	ldr	r1, [pc, #700]	@ (8002aec <hashInit.0+0x1274>)
 800282e:	48b0      	ldr	r0, [pc, #704]	@ (8002af0 <hashInit.0+0x1278>)
 8002830:	f7fe ff74 	bl	800171c <insert.1>
		insert("SET", "set");
 8002834:	46a4      	mov	ip, r4
 8002836:	49af      	ldr	r1, [pc, #700]	@ (8002af4 <hashInit.0+0x127c>)
 8002838:	48af      	ldr	r0, [pc, #700]	@ (8002af8 <hashInit.0+0x1280>)
 800283a:	f7fe ff6f 	bl	800171c <insert.1>
		insert("PWO*T", "both");
 800283e:	46a4      	mov	ip, r4
 8002840:	49ae      	ldr	r1, [pc, #696]	@ (8002afc <hashInit.0+0x1284>)
 8002842:	48af      	ldr	r0, [pc, #700]	@ (8002b00 <hashInit.0+0x1288>)
 8002844:	f7fe ff6a 	bl	800171c <insert.1>
		insert("TKPWOT", "got");
 8002848:	46a4      	mov	ip, r4
 800284a:	49ae      	ldr	r1, [pc, #696]	@ (8002b04 <hashInit.0+0x128c>)
 800284c:	48ae      	ldr	r0, [pc, #696]	@ (8002b08 <hashInit.0+0x1290>)
 800284e:	f7fe ff65 	bl	800171c <insert.1>
		insert("TPAOEUPBD", "find");
 8002852:	46a4      	mov	ip, r4
 8002854:	49ad      	ldr	r1, [pc, #692]	@ (8002b0c <hashInit.0+0x1294>)
 8002856:	48ae      	ldr	r0, [pc, #696]	@ (8002b10 <hashInit.0+0x1298>)
 8002858:	f7fe ff60 	bl	800171c <insert.1>
		insert("TKOPB", "done");
 800285c:	46a4      	mov	ip, r4
 800285e:	49ad      	ldr	r1, [pc, #692]	@ (8002b14 <hashInit.0+0x129c>)
 8002860:	48ad      	ldr	r0, [pc, #692]	@ (8002b18 <hashInit.0+0x12a0>)
 8002862:	f7fe ff5b 	bl	800171c <insert.1>
		insert("HAERD", "heard");
 8002866:	46a4      	mov	ip, r4
 8002868:	49ac      	ldr	r1, [pc, #688]	@ (8002b1c <hashInit.0+0x12a4>)
 800286a:	48ad      	ldr	r0, [pc, #692]	@ (8002b20 <hashInit.0+0x12a8>)
 800286c:	f7fe ff56 	bl	800171c <insert.1>
		insert("HRAOBG", "look");
 8002870:	46a4      	mov	ip, r4
 8002872:	49ac      	ldr	r1, [pc, #688]	@ (8002b24 <hashInit.0+0x12ac>)
 8002874:	48ac      	ldr	r0, [pc, #688]	@ (8002b28 <hashInit.0+0x12b0>)
 8002876:	f7fe ff51 	bl	800171c <insert.1>
		insert("TPHAEUPL", "name");
 800287a:	46a4      	mov	ip, r4
 800287c:	49ab      	ldr	r1, [pc, #684]	@ (8002b2c <hashInit.0+0x12b4>)
 800287e:	48ac      	ldr	r0, [pc, #688]	@ (8002b30 <hashInit.0+0x12b8>)
 8002880:	f7fe ff4c 	bl	800171c <insert.1>
		insert("TKAEUS", "days");
 8002884:	46a4      	mov	ip, r4
 8002886:	49ab      	ldr	r1, [pc, #684]	@ (8002b34 <hashInit.0+0x12bc>)
 8002888:	48ab      	ldr	r0, [pc, #684]	@ (8002b38 <hashInit.0+0x12c0>)
 800288a:	f7fe ff47 	bl	800171c <insert.1>
		insert("TOLD", "told");
 800288e:	46a4      	mov	ip, r4
 8002890:	49aa      	ldr	r1, [pc, #680]	@ (8002b3c <hashInit.0+0x12c4>)
 8002892:	48ab      	ldr	r0, [pc, #684]	@ (8002b40 <hashInit.0+0x12c8>)
 8002894:	f7fe ff42 	bl	800171c <insert.1>
		insert("HRET", "let");
 8002898:	46a4      	mov	ip, r4
 800289a:	49aa      	ldr	r1, [pc, #680]	@ (8002b44 <hashInit.0+0x12cc>)
 800289c:	48aa      	ldr	r0, [pc, #680]	@ (8002b48 <hashInit.0+0x12d0>)
 800289e:	f7fe ff3d 	bl	800171c <insert.1>
		insert("HRORD", "lord");
 80028a2:	46a4      	mov	ip, r4
 80028a4:	49a9      	ldr	r1, [pc, #676]	@ (8002b4c <hashInit.0+0x12d4>)
 80028a6:	48aa      	ldr	r0, [pc, #680]	@ (8002b50 <hashInit.0+0x12d8>)
 80028a8:	f7fe ff38 	bl	800171c <insert.1>
		insert("KREU", "country");
 80028ac:	46a4      	mov	ip, r4
 80028ae:	49a9      	ldr	r1, [pc, #676]	@ (8002b54 <hashInit.0+0x12dc>)
 80028b0:	48a9      	ldr	r0, [pc, #676]	@ (8002b58 <hashInit.0+0x12e0>)
 80028b2:	f7fe ff33 	bl	800171c <insert.1>
		insert("SK-D", "asked");
 80028b6:	46a4      	mov	ip, r4
 80028b8:	49a8      	ldr	r1, [pc, #672]	@ (8002b5c <hashInit.0+0x12e4>)
 80028ba:	48a9      	ldr	r0, [pc, #676]	@ (8002b60 <hashInit.0+0x12e8>)
 80028bc:	f7fe ff2e 	bl	800171c <insert.1>
		insert("TKPW-G", "going");
 80028c0:	46a4      	mov	ip, r4
 80028c2:	49a8      	ldr	r1, [pc, #672]	@ (8002b64 <hashInit.0+0x12ec>)
 80028c4:	48a8      	ldr	r0, [pc, #672]	@ (8002b68 <hashInit.0+0x12f0>)
 80028c6:	f7fe ff29 	bl	800171c <insert.1>
		insert("SAOEPB", "seen");
 80028ca:	46a4      	mov	ip, r4
 80028cc:	49a7      	ldr	r1, [pc, #668]	@ (8002b6c <hashInit.0+0x12f4>)
 80028ce:	48a8      	ldr	r0, [pc, #672]	@ (8002b70 <hashInit.0+0x12f8>)
 80028d0:	f7fe ff24 	bl	800171c <insert.1>
		insert("PWOERT", "better");
 80028d4:	46a4      	mov	ip, r4
 80028d6:	49a7      	ldr	r1, [pc, #668]	@ (8002b74 <hashInit.0+0x12fc>)
 80028d8:	48a7      	ldr	r0, [pc, #668]	@ (8002b78 <hashInit.0+0x1300>)
 80028da:	f7fe ff1f 	bl	800171c <insert.1>
		insert("P*", "p");
 80028de:	46a4      	mov	ip, r4
 80028e0:	49a6      	ldr	r1, [pc, #664]	@ (8002b7c <hashInit.0+0x1304>)
 80028e2:	48a7      	ldr	r0, [pc, #668]	@ (8002b80 <hashInit.0+0x1308>)
 80028e4:	f7fe ff1a 	bl	800171c <insert.1>
		insert("SR-G", "having");
 80028e8:	46a4      	mov	ip, r4
 80028ea:	49a6      	ldr	r1, [pc, #664]	@ (8002b84 <hashInit.0+0x130c>)
 80028ec:	48a6      	ldr	r0, [pc, #664]	@ (8002b88 <hashInit.0+0x1310>)
 80028ee:	f7fe ff15 	bl	800171c <insert.1>
		insert("HOEPL", "home");
 80028f2:	46a4      	mov	ip, r4
 80028f4:	49a5      	ldr	r1, [pc, #660]	@ (8002b8c <hashInit.0+0x1314>)
 80028f6:	48a6      	ldr	r0, [pc, #664]	@ (8002b90 <hashInit.0+0x1318>)
 80028f8:	f7fe ff10 	bl	800171c <insert.1>
		insert("TPHAOU", "knew");
 80028fc:	46a4      	mov	ip, r4
 80028fe:	49a5      	ldr	r1, [pc, #660]	@ (8002b94 <hashInit.0+0x131c>)
 8002900:	48a5      	ldr	r0, [pc, #660]	@ (8002b98 <hashInit.0+0x1320>)
 8002902:	f7fe ff0b 	bl	800171c <insert.1>
		insert("SAOEUD", "side");
 8002906:	46a4      	mov	ip, r4
 8002908:	49a4      	ldr	r1, [pc, #656]	@ (8002b9c <hashInit.0+0x1324>)
 800290a:	48a5      	ldr	r0, [pc, #660]	@ (8002ba0 <hashInit.0+0x1328>)
 800290c:	f7fe ff06 	bl	800171c <insert.1>
		insert("S-G", "something");
 8002910:	46a4      	mov	ip, r4
 8002912:	49a4      	ldr	r1, [pc, #656]	@ (8002ba4 <hashInit.0+0x132c>)
 8002914:	48a4      	ldr	r0, [pc, #656]	@ (8002ba8 <hashInit.0+0x1330>)
 8002916:	f7fe ff01 	bl	800171c <insert.1>
		insert("PHOEPLT", "moment");
 800291a:	46a4      	mov	ip, r4
 800291c:	49a3      	ldr	r1, [pc, #652]	@ (8002bac <hashInit.0+0x1334>)
 800291e:	48a4      	ldr	r0, [pc, #656]	@ (8002bb0 <hashInit.0+0x1338>)
 8002920:	f7fe fefc 	bl	800171c <insert.1>
		insert("TPAER", "father");
 8002924:	46a4      	mov	ip, r4
 8002926:	49a3      	ldr	r1, [pc, #652]	@ (8002bb4 <hashInit.0+0x133c>)
 8002928:	48a3      	ldr	r0, [pc, #652]	@ (8002bb8 <hashInit.0+0x1340>)
 800292a:	f7fe fef7 	bl	800171c <insert.1>
		insert("PHOPBG", "among");
 800292e:	46a4      	mov	ip, r4
 8002930:	49a2      	ldr	r1, [pc, #648]	@ (8002bbc <hashInit.0+0x1344>)
 8002932:	48a3      	ldr	r0, [pc, #652]	@ (8002bc0 <hashInit.0+0x1348>)
 8002934:	f7fe fef2 	bl	800171c <insert.1>
		insert("KORS", "course");
 8002938:	46a4      	mov	ip, r4
 800293a:	49a2      	ldr	r1, [pc, #648]	@ (8002bc4 <hashInit.0+0x134c>)
 800293c:	48a2      	ldr	r0, [pc, #648]	@ (8002bc8 <hashInit.0+0x1350>)
 800293e:	f7fe feed 	bl	800171c <insert.1>
		insert("HAPBDZ", "hands");
 8002942:	46a4      	mov	ip, r4
 8002944:	49a1      	ldr	r1, [pc, #644]	@ (8002bcc <hashInit.0+0x1354>)
 8002946:	48a2      	ldr	r0, [pc, #648]	@ (8002bd0 <hashInit.0+0x1358>)
 8002948:	f7fe fee8 	bl	800171c <insert.1>
		insert("WOPL", "woman");
 800294c:	46a4      	mov	ip, r4
 800294e:	49a1      	ldr	r1, [pc, #644]	@ (8002bd4 <hashInit.0+0x135c>)
 8002950:	48a1      	ldr	r0, [pc, #644]	@ (8002bd8 <hashInit.0+0x1360>)
 8002952:	f7fe fee3 	bl	800171c <insert.1>
		insert("TPHUF", "enough");
 8002956:	46a4      	mov	ip, r4
 8002958:	49a0      	ldr	r1, [pc, #640]	@ (8002bdc <hashInit.0+0x1364>)
 800295a:	48a1      	ldr	r0, [pc, #644]	@ (8002be0 <hashInit.0+0x1368>)
 800295c:	f7fe fede 	bl	800171c <insert.1>
		insert("WORDZ", "words");
 8002960:	46a4      	mov	ip, r4
 8002962:	49a0      	ldr	r1, [pc, #640]	@ (8002be4 <hashInit.0+0x136c>)
 8002964:	48a0      	ldr	r0, [pc, #640]	@ (8002be8 <hashInit.0+0x1370>)
 8002966:	f7fe fed9 	bl	800171c <insert.1>
		insert("PHOER", "mother");
 800296a:	46a4      	mov	ip, r4
 800296c:	499f      	ldr	r1, [pc, #636]	@ (8002bec <hashInit.0+0x1374>)
 800296e:	48a0      	ldr	r0, [pc, #640]	@ (8002bf0 <hashInit.0+0x1378>)
 8002970:	f7fe fed4 	bl	800171c <insert.1>
		insert("SAOPB", "soon");
 8002974:	46a4      	mov	ip, r4
 8002976:	499f      	ldr	r1, [pc, #636]	@ (8002bf4 <hashInit.0+0x137c>)
 8002978:	489f      	ldr	r0, [pc, #636]	@ (8002bf8 <hashInit.0+0x1380>)
 800297a:	f7fe fecf 	bl	800171c <insert.1>
		insert("TPUL", "full");
 800297e:	46a4      	mov	ip, r4
 8002980:	499e      	ldr	r1, [pc, #632]	@ (8002bfc <hashInit.0+0x1384>)
 8002982:	489f      	ldr	r0, [pc, #636]	@ (8002c00 <hashInit.0+0x1388>)
 8002984:	f7fe feca 	bl	800171c <insert.1>
		insert("EPBD", "end");
 8002988:	46a4      	mov	ip, r4
 800298a:	499e      	ldr	r1, [pc, #632]	@ (8002c04 <hashInit.0+0x138c>)
 800298c:	489e      	ldr	r0, [pc, #632]	@ (8002c08 <hashInit.0+0x1390>)
 800298e:	f7fe fec5 	bl	800171c <insert.1>
		insert("TKPWAEUF", "gave");
 8002992:	46a4      	mov	ip, r4
 8002994:	499d      	ldr	r1, [pc, #628]	@ (8002c0c <hashInit.0+0x1394>)
 8002996:	489e      	ldr	r0, [pc, #632]	@ (8002c10 <hashInit.0+0x1398>)
 8002998:	f7fe fec0 	bl	800171c <insert.1>
		insert("RAOPL", "room");
 800299c:	46a4      	mov	ip, r4
 800299e:	499d      	ldr	r1, [pc, #628]	@ (8002c14 <hashInit.0+0x139c>)
 80029a0:	489d      	ldr	r0, [pc, #628]	@ (8002c18 <hashInit.0+0x13a0>)
 80029a2:	f7fe febb 	bl	800171c <insert.1>
		insert("HR-PL", "almost");
 80029a6:	46a4      	mov	ip, r4
 80029a8:	499c      	ldr	r1, [pc, #624]	@ (8002c1c <hashInit.0+0x13a4>)
 80029aa:	489d      	ldr	r0, [pc, #628]	@ (8002c20 <hashInit.0+0x13a8>)
 80029ac:	f7fe feb6 	bl	800171c <insert.1>
		insert("SPHAL", "small");
 80029b0:	46a4      	mov	ip, r4
 80029b2:	499c      	ldr	r1, [pc, #624]	@ (8002c24 <hashInit.0+0x13ac>)
 80029b4:	489c      	ldr	r0, [pc, #624]	@ (8002c28 <hashInit.0+0x13b0>)
 80029b6:	f7fe feb1 	bl	800171c <insert.1>
		insert("THO*U", "thou");
 80029ba:	46a4      	mov	ip, r4
 80029bc:	499b      	ldr	r1, [pc, #620]	@ (8002c2c <hashInit.0+0x13b4>)
 80029be:	489c      	ldr	r0, [pc, #624]	@ (8002c30 <hashInit.0+0x13b8>)
 80029c0:	f7fe feac 	bl	800171c <insert.1>
		insert("SK-PBT", "cannot");
 80029c4:	46a4      	mov	ip, r4
 80029c6:	499b      	ldr	r1, [pc, #620]	@ (8002c34 <hashInit.0+0x13bc>)
 80029c8:	489b      	ldr	r0, [pc, #620]	@ (8002c38 <hashInit.0+0x13c0>)
 80029ca:	f7fe fea7 	bl	800171c <insert.1>
		insert("WAUR", "water");
 80029ce:	46a4      	mov	ip, r4
 80029d0:	499a      	ldr	r1, [pc, #616]	@ (8002c3c <hashInit.0+0x13c4>)
 80029d2:	489b      	ldr	r0, [pc, #620]	@ (8002c40 <hashInit.0+0x13c8>)
 80029d4:	f7fe fea2 	bl	800171c <insert.1>
		insert("WAPBT", "want");
 80029d8:	46a4      	mov	ip, r4
 80029da:	499a      	ldr	r1, [pc, #616]	@ (8002c44 <hashInit.0+0x13cc>)
 80029dc:	489a      	ldr	r0, [pc, #616]	@ (8002c48 <hashInit.0+0x13d0>)
 80029de:	f7fe fe9d 	bl	800171c <insert.1>
		insert("HOUF", "however");
 80029e2:	46a4      	mov	ip, r4
 80029e4:	4999      	ldr	r1, [pc, #612]	@ (8002c4c <hashInit.0+0x13d4>)
 80029e6:	489a      	ldr	r0, [pc, #616]	@ (8002c50 <hashInit.0+0x13d8>)
 80029e8:	f7fe fe98 	bl	800171c <insert.1>
		insert("HRAOEUT", "light");
 80029ec:	46a4      	mov	ip, r4
 80029ee:	4999      	ldr	r1, [pc, #612]	@ (8002c54 <hashInit.0+0x13dc>)
 80029f0:	4899      	ldr	r0, [pc, #612]	@ (8002c58 <hashInit.0+0x13e0>)
 80029f2:	f7fe fe93 	bl	800171c <insert.1>
		insert("KWAOEUT", "quite");
 80029f6:	46a4      	mov	ip, r4
 80029f8:	4998      	ldr	r1, [pc, #608]	@ (8002c5c <hashInit.0+0x13e4>)
 80029fa:	4899      	ldr	r0, [pc, #612]	@ (8002c60 <hashInit.0+0x13e8>)
 80029fc:	f7fe fe8e 	bl	800171c <insert.1>
		insert("PWRAUT", "brought");
 8002a00:	46a4      	mov	ip, r4
 8002a02:	4998      	ldr	r1, [pc, #608]	@ (8002c64 <hashInit.0+0x13ec>)
 8002a04:	4898      	ldr	r0, [pc, #608]	@ (8002c68 <hashInit.0+0x13f0>)
 8002a06:	f7fe fe89 	bl	800171c <insert.1>
		insert("TPH-R", "nor");
 8002a0a:	46a4      	mov	ip, r4
 8002a0c:	4997      	ldr	r1, [pc, #604]	@ (8002c6c <hashInit.0+0x13f4>)
 8002a0e:	4898      	ldr	r0, [pc, #608]	@ (8002c70 <hashInit.0+0x13f8>)
 8002a10:	f7fe fe84 	bl	800171c <insert.1>
		insert("WORD", "word");
 8002a14:	46a4      	mov	ip, r4
 8002a16:	4997      	ldr	r1, [pc, #604]	@ (8002c74 <hashInit.0+0x13fc>)
 8002a18:	4897      	ldr	r0, [pc, #604]	@ (8002c78 <hashInit.0+0x1400>)
 8002a1a:	f7fe fe7f 	bl	800171c <insert.1>
		insert("WHOZ", "whose");
 8002a1e:	46a4      	mov	ip, r4
 8002a20:	4996      	ldr	r1, [pc, #600]	@ (8002c7c <hashInit.0+0x1404>)
 8002a22:	4897      	ldr	r0, [pc, #604]	@ (8002c80 <hashInit.0+0x1408>)
 8002a24:	f7fe fe7a 	bl	800171c <insert.1>
		insert("TKPWEUFPB", "given");
 8002a28:	46a4      	mov	ip, r4
 8002a2a:	4996      	ldr	r1, [pc, #600]	@ (8002c84 <hashInit.0+0x140c>)
 8002a2c:	4896      	ldr	r0, [pc, #600]	@ (8002c88 <hashInit.0+0x1410>)
 8002a2e:	f7fe fe75 	bl	800171c <insert.1>
		insert("TKAOR", "door");
 8002a32:	46a4      	mov	ip, r4
 8002a34:	4995      	ldr	r1, [pc, #596]	@ (8002c8c <hashInit.0+0x1414>)
 8002a36:	4896      	ldr	r0, [pc, #600]	@ (8002c90 <hashInit.0+0x1418>)
 8002a38:	f7fe fe70 	bl	800171c <insert.1>
		insert("PWEFT", "best");
 8002a3c:	46a4      	mov	ip, r4
 8002a3e:	4995      	ldr	r1, [pc, #596]	@ (8002c94 <hashInit.0+0x141c>)
 8002a40:	4895      	ldr	r0, [pc, #596]	@ (8002c98 <hashInit.0+0x1420>)
 8002a42:	f7fe fe6b 	bl	800171c <insert.1>
		insert("TURPBD", "turned");
 8002a46:	46a4      	mov	ip, r4
 8002a48:	4994      	ldr	r1, [pc, #592]	@ (8002c9c <hashInit.0+0x1424>)
 8002a4a:	4895      	ldr	r0, [pc, #596]	@ (8002ca0 <hashInit.0+0x1428>)
 8002a4c:	f7fe fe66 	bl	800171c <insert.1>
		insert("TAEPB", "taken");
 8002a50:	46a4      	mov	ip, r4
 8002a52:	4994      	ldr	r1, [pc, #592]	@ (8002ca4 <hashInit.0+0x142c>)
 8002a54:	4894      	ldr	r0, [pc, #592]	@ (8002ca8 <hashInit.0+0x1430>)
 8002a56:	f7fe fe61 	bl	800171c <insert.1>
		insert("TKOS", "does");
 8002a5a:	46a4      	mov	ip, r4
 8002a5c:	4993      	ldr	r1, [pc, #588]	@ (8002cac <hashInit.0+0x1434>)
 8002a5e:	4894      	ldr	r0, [pc, #592]	@ (8002cb0 <hashInit.0+0x1438>)
 8002a60:	f7fe fe5c 	bl	800171c <insert.1>
		insert("AOUS", "use");
 8002a64:	46a4      	mov	ip, r4
 8002a66:	4993      	ldr	r1, [pc, #588]	@ (8002cb4 <hashInit.0+0x143c>)
 8002a68:	4893      	ldr	r0, [pc, #588]	@ (8002cb8 <hashInit.0+0x1440>)
 8002a6a:	f7fe fe57 	bl	800171c <insert.1>
		insert("PHORPBG", "morning");
 8002a6e:	46a4      	mov	ip, r4
 8002a70:	4992      	ldr	r1, [pc, #584]	@ (8002cbc <hashInit.0+0x1444>)
 8002a72:	4893      	ldr	r0, [pc, #588]	@ (8002cc0 <hashInit.0+0x1448>)
 8002a74:	f7fe fe52 	bl	800171c <insert.1>
		insert("PHAO*EUS", "myself");
 8002a78:	46a4      	mov	ip, r4
 8002a7a:	4992      	ldr	r1, [pc, #584]	@ (8002cc4 <hashInit.0+0x144c>)
 8002a7c:	4892      	ldr	r0, [pc, #584]	@ (8002cc8 <hashInit.0+0x1450>)
 8002a7e:	f7fe fe4d 	bl	800171c <insert.1>
		insert("TKPWUT/*EPB/PWERG", "Gutenberg");
 8002a82:	46a4      	mov	ip, r4
 8002a84:	4991      	ldr	r1, [pc, #580]	@ (8002ccc <hashInit.0+0x1454>)
 8002a86:	4892      	ldr	r0, [pc, #584]	@ (8002cd0 <hashInit.0+0x1458>)
 8002a88:	f7fe fe48 	bl	800171c <insert.1>
		insert("TPELT", "felt");
 8002a8c:	46a4      	mov	ip, r4
 8002a8e:	4991      	ldr	r1, [pc, #580]	@ (8002cd4 <hashInit.0+0x145c>)
 8002a90:	4891      	ldr	r0, [pc, #580]	@ (8002cd8 <hashInit.0+0x1460>)
 8002a92:	f7fe fe43 	bl	800171c <insert.1>
 8002a96:	e121      	b.n	8002cdc <hashInit.0+0x1464>
 8002a98:	0800dff4 	.word	0x0800dff4
 8002a9c:	0800e000 	.word	0x0800e000
 8002aa0:	0800e008 	.word	0x0800e008
 8002aa4:	0800e010 	.word	0x0800e010
 8002aa8:	0800e014 	.word	0x0800e014
 8002aac:	0800e01c 	.word	0x0800e01c
 8002ab0:	0800e024 	.word	0x0800e024
 8002ab4:	0800e02c 	.word	0x0800e02c
 8002ab8:	0800e034 	.word	0x0800e034
 8002abc:	0800e03c 	.word	0x0800e03c
 8002ac0:	0800e044 	.word	0x0800e044
 8002ac4:	0800e04c 	.word	0x0800e04c
 8002ac8:	0800e050 	.word	0x0800e050
 8002acc:	0800e058 	.word	0x0800e058
 8002ad0:	0800e060 	.word	0x0800e060
 8002ad4:	0800e068 	.word	0x0800e068
 8002ad8:	0800e070 	.word	0x0800e070
 8002adc:	0800e078 	.word	0x0800e078
 8002ae0:	0800e080 	.word	0x0800e080
 8002ae4:	0800e088 	.word	0x0800e088
 8002ae8:	0800e090 	.word	0x0800e090
 8002aec:	0800e098 	.word	0x0800e098
 8002af0:	0800e09c 	.word	0x0800e09c
 8002af4:	0800e0a4 	.word	0x0800e0a4
 8002af8:	0800e0a8 	.word	0x0800e0a8
 8002afc:	0800e0ac 	.word	0x0800e0ac
 8002b00:	0800e0b4 	.word	0x0800e0b4
 8002b04:	0800e0bc 	.word	0x0800e0bc
 8002b08:	0800e0c0 	.word	0x0800e0c0
 8002b0c:	0800e0c8 	.word	0x0800e0c8
 8002b10:	0800e0d0 	.word	0x0800e0d0
 8002b14:	0800e0dc 	.word	0x0800e0dc
 8002b18:	0800e0e4 	.word	0x0800e0e4
 8002b1c:	0800e0ec 	.word	0x0800e0ec
 8002b20:	0800e0f4 	.word	0x0800e0f4
 8002b24:	0800e0fc 	.word	0x0800e0fc
 8002b28:	0800e104 	.word	0x0800e104
 8002b2c:	0800e10c 	.word	0x0800e10c
 8002b30:	0800e114 	.word	0x0800e114
 8002b34:	0800e120 	.word	0x0800e120
 8002b38:	0800e128 	.word	0x0800e128
 8002b3c:	0800e130 	.word	0x0800e130
 8002b40:	0800e138 	.word	0x0800e138
 8002b44:	0800e140 	.word	0x0800e140
 8002b48:	0800e144 	.word	0x0800e144
 8002b4c:	0800e14c 	.word	0x0800e14c
 8002b50:	0800e154 	.word	0x0800e154
 8002b54:	0800e15c 	.word	0x0800e15c
 8002b58:	0800e164 	.word	0x0800e164
 8002b5c:	0800e16c 	.word	0x0800e16c
 8002b60:	0800e174 	.word	0x0800e174
 8002b64:	0800e17c 	.word	0x0800e17c
 8002b68:	0800e184 	.word	0x0800e184
 8002b6c:	0800e18c 	.word	0x0800e18c
 8002b70:	0800e194 	.word	0x0800e194
 8002b74:	0800e19c 	.word	0x0800e19c
 8002b78:	0800e1a4 	.word	0x0800e1a4
 8002b7c:	0800e1ac 	.word	0x0800e1ac
 8002b80:	0800e1b0 	.word	0x0800e1b0
 8002b84:	0800e1b4 	.word	0x0800e1b4
 8002b88:	0800e1bc 	.word	0x0800e1bc
 8002b8c:	0800e1c4 	.word	0x0800e1c4
 8002b90:	0800e1cc 	.word	0x0800e1cc
 8002b94:	0800e1d4 	.word	0x0800e1d4
 8002b98:	0800e1dc 	.word	0x0800e1dc
 8002b9c:	0800e1e4 	.word	0x0800e1e4
 8002ba0:	0800e1ec 	.word	0x0800e1ec
 8002ba4:	0800e1f4 	.word	0x0800e1f4
 8002ba8:	0800e200 	.word	0x0800e200
 8002bac:	0800e204 	.word	0x0800e204
 8002bb0:	0800e20c 	.word	0x0800e20c
 8002bb4:	0800e214 	.word	0x0800e214
 8002bb8:	0800e21c 	.word	0x0800e21c
 8002bbc:	0800e224 	.word	0x0800e224
 8002bc0:	0800e22c 	.word	0x0800e22c
 8002bc4:	0800e234 	.word	0x0800e234
 8002bc8:	0800e23c 	.word	0x0800e23c
 8002bcc:	0800e244 	.word	0x0800e244
 8002bd0:	0800e24c 	.word	0x0800e24c
 8002bd4:	0800e254 	.word	0x0800e254
 8002bd8:	0800e25c 	.word	0x0800e25c
 8002bdc:	0800e264 	.word	0x0800e264
 8002be0:	0800e26c 	.word	0x0800e26c
 8002be4:	0800e274 	.word	0x0800e274
 8002be8:	0800e27c 	.word	0x0800e27c
 8002bec:	0800e284 	.word	0x0800e284
 8002bf0:	0800e28c 	.word	0x0800e28c
 8002bf4:	0800d518 	.word	0x0800d518
 8002bf8:	0800d520 	.word	0x0800d520
 8002bfc:	0800e294 	.word	0x0800e294
 8002c00:	0800e29c 	.word	0x0800e29c
 8002c04:	0800e2a4 	.word	0x0800e2a4
 8002c08:	0800e2a8 	.word	0x0800e2a8
 8002c0c:	0800e2b0 	.word	0x0800e2b0
 8002c10:	0800e2b8 	.word	0x0800e2b8
 8002c14:	0800e2c4 	.word	0x0800e2c4
 8002c18:	0800e2cc 	.word	0x0800e2cc
 8002c1c:	0800e2d4 	.word	0x0800e2d4
 8002c20:	0800e2dc 	.word	0x0800e2dc
 8002c24:	0800e2e4 	.word	0x0800e2e4
 8002c28:	0800e2ec 	.word	0x0800e2ec
 8002c2c:	0800e2f4 	.word	0x0800e2f4
 8002c30:	0800e2fc 	.word	0x0800e2fc
 8002c34:	0800e304 	.word	0x0800e304
 8002c38:	0800e30c 	.word	0x0800e30c
 8002c3c:	0800e314 	.word	0x0800e314
 8002c40:	0800e31c 	.word	0x0800e31c
 8002c44:	0800e324 	.word	0x0800e324
 8002c48:	0800e32c 	.word	0x0800e32c
 8002c4c:	0800e334 	.word	0x0800e334
 8002c50:	0800e33c 	.word	0x0800e33c
 8002c54:	0800e344 	.word	0x0800e344
 8002c58:	0800e34c 	.word	0x0800e34c
 8002c5c:	0800e354 	.word	0x0800e354
 8002c60:	0800e35c 	.word	0x0800e35c
 8002c64:	0800e364 	.word	0x0800e364
 8002c68:	0800e36c 	.word	0x0800e36c
 8002c6c:	0800e374 	.word	0x0800e374
 8002c70:	0800e378 	.word	0x0800e378
 8002c74:	0800e380 	.word	0x0800e380
 8002c78:	0800e388 	.word	0x0800e388
 8002c7c:	0800e390 	.word	0x0800e390
 8002c80:	0800e398 	.word	0x0800e398
 8002c84:	0800e3a0 	.word	0x0800e3a0
 8002c88:	0800e3a8 	.word	0x0800e3a8
 8002c8c:	0800e3b4 	.word	0x0800e3b4
 8002c90:	0800e3bc 	.word	0x0800e3bc
 8002c94:	0800e3c4 	.word	0x0800e3c4
 8002c98:	0800e3cc 	.word	0x0800e3cc
 8002c9c:	0800e3d4 	.word	0x0800e3d4
 8002ca0:	0800e3dc 	.word	0x0800e3dc
 8002ca4:	0800e3e4 	.word	0x0800e3e4
 8002ca8:	0800e3ec 	.word	0x0800e3ec
 8002cac:	0800d5f8 	.word	0x0800d5f8
 8002cb0:	0800e3f4 	.word	0x0800e3f4
 8002cb4:	0800e3fc 	.word	0x0800e3fc
 8002cb8:	0800e400 	.word	0x0800e400
 8002cbc:	0800e408 	.word	0x0800e408
 8002cc0:	0800e410 	.word	0x0800e410
 8002cc4:	0800e418 	.word	0x0800e418
 8002cc8:	0800e420 	.word	0x0800e420
 8002ccc:	0800e42c 	.word	0x0800e42c
 8002cd0:	0800e438 	.word	0x0800e438
 8002cd4:	0800e44c 	.word	0x0800e44c
 8002cd8:	0800e454 	.word	0x0800e454
		insert("TPH-L", "until");
 8002cdc:	46a4      	mov	ip, r4
 8002cde:	49b5      	ldr	r1, [pc, #724]	@ (8002fb4 <hashInit.0+0x173c>)
 8002ce0:	48b5      	ldr	r0, [pc, #724]	@ (8002fb8 <hashInit.0+0x1740>)
 8002ce2:	f7fe fd1b 	bl	800171c <insert.1>
		insert("SEUPBS", "since");
 8002ce6:	46a4      	mov	ip, r4
 8002ce8:	49b4      	ldr	r1, [pc, #720]	@ (8002fbc <hashInit.0+0x1744>)
 8002cea:	48b5      	ldr	r0, [pc, #724]	@ (8002fc0 <hashInit.0+0x1748>)
 8002cec:	f7fe fd16 	bl	800171c <insert.1>
		insert("POUR", "power");
 8002cf0:	46a4      	mov	ip, r4
 8002cf2:	49b4      	ldr	r1, [pc, #720]	@ (8002fc4 <hashInit.0+0x174c>)
 8002cf4:	48b4      	ldr	r0, [pc, #720]	@ (8002fc8 <hashInit.0+0x1750>)
 8002cf6:	f7fe fd11 	bl	800171c <insert.1>
		insert("TH*EPLS", "themselves");
 8002cfa:	46a4      	mov	ip, r4
 8002cfc:	49b3      	ldr	r1, [pc, #716]	@ (8002fcc <hashInit.0+0x1754>)
 8002cfe:	48b4      	ldr	r0, [pc, #720]	@ (8002fd0 <hashInit.0+0x1758>)
 8002d00:	f7fe fd0c 	bl	800171c <insert.1>
		insert("AOUFD", "used");
 8002d04:	46a4      	mov	ip, r4
 8002d06:	49b3      	ldr	r1, [pc, #716]	@ (8002fd4 <hashInit.0+0x175c>)
 8002d08:	48b3      	ldr	r0, [pc, #716]	@ (8002fd8 <hashInit.0+0x1760>)
 8002d0a:	f7fe fd07 	bl	800171c <insert.1>
		insert("RAER", "rather");
 8002d0e:	46a4      	mov	ip, r4
 8002d10:	49b2      	ldr	r1, [pc, #712]	@ (8002fdc <hashInit.0+0x1764>)
 8002d12:	48b3      	ldr	r0, [pc, #716]	@ (8002fe0 <hashInit.0+0x1768>)
 8002d14:	f7fe fd02 	bl	800171c <insert.1>
		insert("TKPWAPB", "began");
 8002d18:	46a4      	mov	ip, r4
 8002d1a:	49b2      	ldr	r1, [pc, #712]	@ (8002fe4 <hashInit.0+0x176c>)
 8002d1c:	48b2      	ldr	r0, [pc, #712]	@ (8002fe8 <hashInit.0+0x1770>)
 8002d1e:	f7fe fcfd 	bl	800171c <insert.1>
		insert("PREPBT", "present");
 8002d22:	46a4      	mov	ip, r4
 8002d24:	49b1      	ldr	r1, [pc, #708]	@ (8002fec <hashInit.0+0x1774>)
 8002d26:	48b2      	ldr	r0, [pc, #712]	@ (8002ff0 <hashInit.0+0x1778>)
 8002d28:	f7fe fcf8 	bl	800171c <insert.1>
		insert("SROEUS", "voice");
 8002d2c:	46a4      	mov	ip, r4
 8002d2e:	49b1      	ldr	r1, [pc, #708]	@ (8002ff4 <hashInit.0+0x177c>)
 8002d30:	48b1      	ldr	r0, [pc, #708]	@ (8002ff8 <hashInit.0+0x1780>)
 8002d32:	f7fe fcf3 	bl	800171c <insert.1>
		insert("OERS", "others");
 8002d36:	46a4      	mov	ip, r4
 8002d38:	49b0      	ldr	r1, [pc, #704]	@ (8002ffc <hashInit.0+0x1784>)
 8002d3a:	48b1      	ldr	r0, [pc, #708]	@ (8003000 <hashInit.0+0x1788>)
 8002d3c:	f7fe fcee 	bl	800171c <insert.1>
		insert("WHAOEUT", "white");
 8002d40:	46a4      	mov	ip, r4
 8002d42:	49b0      	ldr	r1, [pc, #704]	@ (8003004 <hashInit.0+0x178c>)
 8002d44:	48b0      	ldr	r0, [pc, #704]	@ (8003008 <hashInit.0+0x1790>)
 8002d46:	f7fe fce9 	bl	800171c <insert.1>
		insert("WORBGS", "works");
 8002d4a:	46a4      	mov	ip, r4
 8002d4c:	49af      	ldr	r1, [pc, #700]	@ (800300c <hashInit.0+0x1794>)
 8002d4e:	48b0      	ldr	r0, [pc, #704]	@ (8003010 <hashInit.0+0x1798>)
 8002d50:	f7fe fce4 	bl	800171c <insert.1>
		insert("HRES", "less");
 8002d54:	46a4      	mov	ip, r4
 8002d56:	49af      	ldr	r1, [pc, #700]	@ (8003014 <hashInit.0+0x179c>)
 8002d58:	48af      	ldr	r0, [pc, #700]	@ (8003018 <hashInit.0+0x17a0>)
 8002d5a:	f7fe fcdf 	bl	800171c <insert.1>
		insert("PHUPB", "money");
 8002d5e:	46a4      	mov	ip, r4
 8002d60:	49ae      	ldr	r1, [pc, #696]	@ (800301c <hashInit.0+0x17a4>)
 8002d62:	48af      	ldr	r0, [pc, #700]	@ (8003020 <hashInit.0+0x17a8>)
 8002d64:	f7fe fcda 	bl	800171c <insert.1>
		insert("TPHEGT", "next");
 8002d68:	46a4      	mov	ip, r4
 8002d6a:	49ae      	ldr	r1, [pc, #696]	@ (8003024 <hashInit.0+0x17ac>)
 8002d6c:	48ae      	ldr	r0, [pc, #696]	@ (8003028 <hashInit.0+0x17b0>)
 8002d6e:	f7fe fcd5 	bl	800171c <insert.1>
		insert("PAOR", "poor");
 8002d72:	46a4      	mov	ip, r4
 8002d74:	49ad      	ldr	r1, [pc, #692]	@ (800302c <hashInit.0+0x17b4>)
 8002d76:	48ae      	ldr	r0, [pc, #696]	@ (8003030 <hashInit.0+0x17b8>)
 8002d78:	f7fe fcd0 	bl	800171c <insert.1>
		insert("TK*T", "death");
 8002d7c:	46a4      	mov	ip, r4
 8002d7e:	49ad      	ldr	r1, [pc, #692]	@ (8003034 <hashInit.0+0x17bc>)
 8002d80:	48ad      	ldr	r0, [pc, #692]	@ (8003038 <hashInit.0+0x17c0>)
 8002d82:	f7fe fccb 	bl	800171c <insert.1>
		insert("STAOD", "stood");
 8002d86:	46a4      	mov	ip, r4
 8002d88:	49ac      	ldr	r1, [pc, #688]	@ (800303c <hashInit.0+0x17c4>)
 8002d8a:	48ad      	ldr	r0, [pc, #692]	@ (8003040 <hashInit.0+0x17c8>)
 8002d8c:	f7fe fcc6 	bl	800171c <insert.1>
		insert("TPORPL", "form");
 8002d90:	46a4      	mov	ip, r4
 8002d92:	49ac      	ldr	r1, [pc, #688]	@ (8003044 <hashInit.0+0x17cc>)
 8002d94:	48ac      	ldr	r0, [pc, #688]	@ (8003048 <hashInit.0+0x17d0>)
 8002d96:	f7fe fcc1 	bl	800171c <insert.1>
		insert("W-PB", "within");
 8002d9a:	46a4      	mov	ip, r4
 8002d9c:	49ab      	ldr	r1, [pc, #684]	@ (800304c <hashInit.0+0x17d4>)
 8002d9e:	48ac      	ldr	r0, [pc, #688]	@ (8003050 <hashInit.0+0x17d8>)
 8002da0:	f7fe fcbc 	bl	800171c <insert.1>
		insert("TOGT", "together");
 8002da4:	46a4      	mov	ip, r4
 8002da6:	49ab      	ldr	r1, [pc, #684]	@ (8003054 <hashInit.0+0x17dc>)
 8002da8:	48ab      	ldr	r0, [pc, #684]	@ (8003058 <hashInit.0+0x17e0>)
 8002daa:	f7fe fcb7 	bl	800171c <insert.1>
		insert("TEUL", "till");
 8002dae:	46a4      	mov	ip, r4
 8002db0:	49aa      	ldr	r1, [pc, #680]	@ (800305c <hashInit.0+0x17e4>)
 8002db2:	48ab      	ldr	r0, [pc, #684]	@ (8003060 <hashInit.0+0x17e8>)
 8002db4:	f7fe fcb2 	bl	800171c <insert.1>
		insert("THAO*EU", "thy");
 8002db8:	46a4      	mov	ip, r4
 8002dba:	49aa      	ldr	r1, [pc, #680]	@ (8003064 <hashInit.0+0x17ec>)
 8002dbc:	48aa      	ldr	r0, [pc, #680]	@ (8003068 <hashInit.0+0x17f0>)
 8002dbe:	f7fe fcad 	bl	800171c <insert.1>
		insert("HRARPBLG", "large");
 8002dc2:	46a4      	mov	ip, r4
 8002dc4:	49a9      	ldr	r1, [pc, #676]	@ (800306c <hashInit.0+0x17f4>)
 8002dc6:	48aa      	ldr	r0, [pc, #680]	@ (8003070 <hashInit.0+0x17f8>)
 8002dc8:	f7fe fca8 	bl	800171c <insert.1>
		insert("PHAERT", "matter");
 8002dcc:	46a4      	mov	ip, r4
 8002dce:	49a9      	ldr	r1, [pc, #676]	@ (8003074 <hashInit.0+0x17fc>)
 8002dd0:	48a9      	ldr	r0, [pc, #676]	@ (8003078 <hashInit.0+0x1800>)
 8002dd2:	f7fe fca3 	bl	800171c <insert.1>
		insert("KEUPBD", "kind");
 8002dd6:	46a4      	mov	ip, r4
 8002dd8:	49a8      	ldr	r1, [pc, #672]	@ (800307c <hashInit.0+0x1804>)
 8002dda:	48a9      	ldr	r0, [pc, #676]	@ (8003080 <hashInit.0+0x1808>)
 8002ddc:	f7fe fc9e 	bl	800171c <insert.1>
		insert("OFPB", "often");
 8002de0:	46a4      	mov	ip, r4
 8002de2:	49a8      	ldr	r1, [pc, #672]	@ (8003084 <hashInit.0+0x180c>)
 8002de4:	48a8      	ldr	r0, [pc, #672]	@ (8003088 <hashInit.0+0x1810>)
 8002de6:	f7fe fc99 	bl	800171c <insert.1>
		insert("SERPB", "certain");
 8002dea:	46a4      	mov	ip, r4
 8002dec:	49a7      	ldr	r1, [pc, #668]	@ (800308c <hashInit.0+0x1814>)
 8002dee:	48a8      	ldr	r0, [pc, #672]	@ (8003090 <hashInit.0+0x1818>)
 8002df0:	f7fe fc94 	bl	800171c <insert.1>
		insert("H*ERS", "herself");
 8002df4:	46a4      	mov	ip, r4
 8002df6:	49a7      	ldr	r1, [pc, #668]	@ (8003094 <hashInit.0+0x181c>)
 8002df8:	48a7      	ldr	r0, [pc, #668]	@ (8003098 <hashInit.0+0x1820>)
 8002dfa:	f7fe fc8f 	bl	800171c <insert.1>
		insert("KWRAOER", "year");
 8002dfe:	46a4      	mov	ip, r4
 8002e00:	49a6      	ldr	r1, [pc, #664]	@ (800309c <hashInit.0+0x1824>)
 8002e02:	48a7      	ldr	r0, [pc, #668]	@ (80030a0 <hashInit.0+0x1828>)
 8002e04:	f7fe fc8a 	bl	800171c <insert.1>
		insert("TPREPBD", "friend");
 8002e08:	46a4      	mov	ip, r4
 8002e0a:	49a6      	ldr	r1, [pc, #664]	@ (80030a4 <hashInit.0+0x182c>)
 8002e0c:	48a6      	ldr	r0, [pc, #664]	@ (80030a8 <hashInit.0+0x1830>)
 8002e0e:	f7fe fc85 	bl	800171c <insert.1>
		insert("HAF", "half");
 8002e12:	46a4      	mov	ip, r4
 8002e14:	49a5      	ldr	r1, [pc, #660]	@ (80030ac <hashInit.0+0x1834>)
 8002e16:	48a6      	ldr	r0, [pc, #664]	@ (80030b0 <hashInit.0+0x1838>)
 8002e18:	f7fe fc80 	bl	800171c <insert.1>
		insert("ORD", "order");
 8002e1c:	46a4      	mov	ip, r4
 8002e1e:	49a5      	ldr	r1, [pc, #660]	@ (80030b4 <hashInit.0+0x183c>)
 8002e20:	48a5      	ldr	r0, [pc, #660]	@ (80030b8 <hashInit.0+0x1840>)
 8002e22:	f7fe fc7b 	bl	800171c <insert.1>
		insert("ROUPBD", "round");
 8002e26:	46a4      	mov	ip, r4
 8002e28:	49a4      	ldr	r1, [pc, #656]	@ (80030bc <hashInit.0+0x1844>)
 8002e2a:	48a5      	ldr	r0, [pc, #660]	@ (80030c0 <hashInit.0+0x1848>)
 8002e2c:	f7fe fc76 	bl	800171c <insert.1>
		insert("TRAOU", "true");
 8002e30:	46a4      	mov	ip, r4
 8002e32:	49a4      	ldr	r1, [pc, #656]	@ (80030c4 <hashInit.0+0x184c>)
 8002e34:	48a4      	ldr	r0, [pc, #656]	@ (80030c8 <hashInit.0+0x1850>)
 8002e36:	f7fe fc71 	bl	800171c <insert.1>
		insert("TPHEUG", "anything");
 8002e3a:	46a4      	mov	ip, r4
 8002e3c:	49a3      	ldr	r1, [pc, #652]	@ (80030cc <hashInit.0+0x1854>)
 8002e3e:	48a4      	ldr	r0, [pc, #656]	@ (80030d0 <hashInit.0+0x1858>)
 8002e40:	f7fe fc6c 	bl	800171c <insert.1>
		insert("KAOEP", "keep");
 8002e44:	46a4      	mov	ip, r4
 8002e46:	49a3      	ldr	r1, [pc, #652]	@ (80030d4 <hashInit.0+0x185c>)
 8002e48:	48a3      	ldr	r0, [pc, #652]	@ (80030d8 <hashInit.0+0x1860>)
 8002e4a:	f7fe fc67 	bl	800171c <insert.1>
		insert("SEPBT", "sent");
 8002e4e:	46a4      	mov	ip, r4
 8002e50:	49a2      	ldr	r1, [pc, #648]	@ (80030dc <hashInit.0+0x1864>)
 8002e52:	48a3      	ldr	r0, [pc, #652]	@ (80030e0 <hashInit.0+0x1868>)
 8002e54:	f7fe fc62 	bl	800171c <insert.1>
		insert("WAOEUF", "wife");
 8002e58:	46a4      	mov	ip, r4
 8002e5a:	49a2      	ldr	r1, [pc, #648]	@ (80030e4 <hashInit.0+0x186c>)
 8002e5c:	48a2      	ldr	r0, [pc, #648]	@ (80030e8 <hashInit.0+0x1870>)
 8002e5e:	f7fe fc5d 	bl	800171c <insert.1>
		insert("PHAOEPBS", "means");
 8002e62:	46a4      	mov	ip, r4
 8002e64:	49a1      	ldr	r1, [pc, #644]	@ (80030ec <hashInit.0+0x1874>)
 8002e66:	48a2      	ldr	r0, [pc, #648]	@ (80030f0 <hashInit.0+0x1878>)
 8002e68:	f7fe fc58 	bl	800171c <insert.1>
		insert("PWHREF", "believe");
 8002e6c:	46a4      	mov	ip, r4
 8002e6e:	49a1      	ldr	r1, [pc, #644]	@ (80030f4 <hashInit.0+0x187c>)
 8002e70:	48a1      	ldr	r0, [pc, #644]	@ (80030f8 <hashInit.0+0x1880>)
 8002e72:	f7fe fc53 	bl	800171c <insert.1>
		insert("PAFD", "passed");
 8002e76:	46a4      	mov	ip, r4
 8002e78:	49a0      	ldr	r1, [pc, #640]	@ (80030fc <hashInit.0+0x1884>)
 8002e7a:	48a1      	ldr	r0, [pc, #644]	@ (8003100 <hashInit.0+0x1888>)
 8002e7c:	f7fe fc4e 	bl	800171c <insert.1>
		insert("TPAOET", "feet");
 8002e80:	46a4      	mov	ip, r4
 8002e82:	49a0      	ldr	r1, [pc, #640]	@ (8003104 <hashInit.0+0x188c>)
 8002e84:	48a0      	ldr	r0, [pc, #640]	@ (8003108 <hashInit.0+0x1890>)
 8002e86:	f7fe fc49 	bl	800171c <insert.1>
		insert("TPHAOER", "near");
 8002e8a:	46a4      	mov	ip, r4
 8002e8c:	499f      	ldr	r1, [pc, #636]	@ (800310c <hashInit.0+0x1894>)
 8002e8e:	48a0      	ldr	r0, [pc, #640]	@ (8003110 <hashInit.0+0x1898>)
 8002e90:	f7fe fc44 	bl	800171c <insert.1>
		insert("PHREUBG", "public");
 8002e94:	46a4      	mov	ip, r4
 8002e96:	499f      	ldr	r1, [pc, #636]	@ (8003114 <hashInit.0+0x189c>)
 8002e98:	489f      	ldr	r0, [pc, #636]	@ (8003118 <hashInit.0+0x18a0>)
 8002e9a:	f7fe fc3f 	bl	800171c <insert.1>
		insert("STAEUT", "state");
 8002e9e:	46a4      	mov	ip, r4
 8002ea0:	499e      	ldr	r1, [pc, #632]	@ (800311c <hashInit.0+0x18a4>)
 8002ea2:	489f      	ldr	r0, [pc, #636]	@ (8003120 <hashInit.0+0x18a8>)
 8002ea4:	f7fe fc3a 	bl	800171c <insert.1>
		insert("SOPB", "son");
 8002ea8:	46a4      	mov	ip, r4
 8002eaa:	499e      	ldr	r1, [pc, #632]	@ (8003124 <hashInit.0+0x18ac>)
 8002eac:	489e      	ldr	r0, [pc, #632]	@ (8003128 <hashInit.0+0x18b0>)
 8002eae:	f7fe fc35 	bl	800171c <insert.1>
		insert("HUPBD", "hundred");
 8002eb2:	46a4      	mov	ip, r4
 8002eb4:	499d      	ldr	r1, [pc, #628]	@ (800312c <hashInit.0+0x18b4>)
 8002eb6:	489e      	ldr	r0, [pc, #632]	@ (8003130 <hashInit.0+0x18b8>)
 8002eb8:	f7fe fc30 	bl	800171c <insert.1>
		insert("KHEURPB", "children");
 8002ebc:	46a4      	mov	ip, r4
 8002ebe:	499d      	ldr	r1, [pc, #628]	@ (8003134 <hashInit.0+0x18bc>)
 8002ec0:	489d      	ldr	r0, [pc, #628]	@ (8003138 <hashInit.0+0x18c0>)
 8002ec2:	f7fe fc2b 	bl	800171c <insert.1>
		insert("THUS", "thus");
 8002ec6:	46a4      	mov	ip, r4
 8002ec8:	499c      	ldr	r1, [pc, #624]	@ (800313c <hashInit.0+0x18c4>)
 8002eca:	489d      	ldr	r0, [pc, #628]	@ (8003140 <hashInit.0+0x18c8>)
 8002ecc:	f7fe fc26 	bl	800171c <insert.1>
		insert("HOEP", "hope");
 8002ed0:	46a4      	mov	ip, r4
 8002ed2:	499c      	ldr	r1, [pc, #624]	@ (8003144 <hashInit.0+0x18cc>)
 8002ed4:	489c      	ldr	r0, [pc, #624]	@ (8003148 <hashInit.0+0x18d0>)
 8002ed6:	f7fe fc21 	bl	800171c <insert.1>
		insert("A/HROEPB", "alone");
 8002eda:	46a4      	mov	ip, r4
 8002edc:	499b      	ldr	r1, [pc, #620]	@ (800314c <hashInit.0+0x18d4>)
 8002ede:	489c      	ldr	r0, [pc, #624]	@ (8003150 <hashInit.0+0x18d8>)
 8002ee0:	f7fe fc1c 	bl	800171c <insert.1>
		insert("PWOF", "above");
 8002ee4:	46a4      	mov	ip, r4
 8002ee6:	499b      	ldr	r1, [pc, #620]	@ (8003154 <hashInit.0+0x18dc>)
 8002ee8:	489b      	ldr	r0, [pc, #620]	@ (8003158 <hashInit.0+0x18e0>)
 8002eea:	f7fe fc17 	bl	800171c <insert.1>
		insert("KAEUS", "case");
 8002eee:	46a4      	mov	ip, r4
 8002ef0:	499a      	ldr	r1, [pc, #616]	@ (800315c <hashInit.0+0x18e4>)
 8002ef2:	489b      	ldr	r0, [pc, #620]	@ (8003160 <hashInit.0+0x18e8>)
 8002ef4:	f7fe fc12 	bl	800171c <insert.1>
		insert("TKAER", "dear");
 8002ef8:	46a4      	mov	ip, r4
 8002efa:	499a      	ldr	r1, [pc, #616]	@ (8003164 <hashInit.0+0x18ec>)
 8002efc:	489a      	ldr	r0, [pc, #616]	@ (8003168 <hashInit.0+0x18f0>)
 8002efe:	f7fe fc0d 	bl	800171c <insert.1>
		insert("THAOE", "thee");
 8002f02:	46a4      	mov	ip, r4
 8002f04:	4999      	ldr	r1, [pc, #612]	@ (800316c <hashInit.0+0x18f4>)
 8002f06:	489a      	ldr	r0, [pc, #616]	@ (8003170 <hashInit.0+0x18f8>)
 8002f08:	f7fe fc08 	bl	800171c <insert.1>
		insert("SEZ", "says");
 8002f0c:	46a4      	mov	ip, r4
 8002f0e:	4999      	ldr	r1, [pc, #612]	@ (8003174 <hashInit.0+0x18fc>)
 8002f10:	4899      	ldr	r0, [pc, #612]	@ (8003178 <hashInit.0+0x1900>)
 8002f12:	f7fe fc03 	bl	800171c <insert.1>
		insert("PERPB", "person");
 8002f16:	46a4      	mov	ip, r4
 8002f18:	4998      	ldr	r1, [pc, #608]	@ (800317c <hashInit.0+0x1904>)
 8002f1a:	4899      	ldr	r0, [pc, #612]	@ (8003180 <hashInit.0+0x1908>)
 8002f1c:	f7fe fbfe 	bl	800171c <insert.1>
		insert("HAOEU", "high");
 8002f20:	46a4      	mov	ip, r4
 8002f22:	4998      	ldr	r1, [pc, #608]	@ (8003184 <hashInit.0+0x190c>)
 8002f24:	4898      	ldr	r0, [pc, #608]	@ (8003188 <hashInit.0+0x1910>)
 8002f26:	f7fe fbf9 	bl	800171c <insert.1>
		insert("RAED", "read");
 8002f2a:	46a4      	mov	ip, r4
 8002f2c:	4997      	ldr	r1, [pc, #604]	@ (800318c <hashInit.0+0x1914>)
 8002f2e:	4898      	ldr	r0, [pc, #608]	@ (8003190 <hashInit.0+0x1918>)
 8002f30:	f7fe fbf4 	bl	800171c <insert.1>
		insert("STEU", "city");
 8002f34:	46a4      	mov	ip, r4
 8002f36:	4997      	ldr	r1, [pc, #604]	@ (8003194 <hashInit.0+0x191c>)
 8002f38:	4897      	ldr	r0, [pc, #604]	@ (8003198 <hashInit.0+0x1920>)
 8002f3a:	f7fe fbef 	bl	800171c <insert.1>
		insert("HR-R", "already");
 8002f3e:	46a4      	mov	ip, r4
 8002f40:	4996      	ldr	r1, [pc, #600]	@ (800319c <hashInit.0+0x1924>)
 8002f42:	4897      	ldr	r0, [pc, #604]	@ (80031a0 <hashInit.0+0x1928>)
 8002f44:	f7fe fbea 	bl	800171c <insert.1>
		insert("SAOEFD", "received");
 8002f48:	46a4      	mov	ip, r4
 8002f4a:	4996      	ldr	r1, [pc, #600]	@ (80031a4 <hashInit.0+0x192c>)
 8002f4c:	4896      	ldr	r0, [pc, #600]	@ (80031a8 <hashInit.0+0x1930>)
 8002f4e:	f7fe fbe5 	bl	800171c <insert.1>
		insert("TPABGT", "fact");
 8002f52:	46a4      	mov	ip, r4
 8002f54:	4995      	ldr	r1, [pc, #596]	@ (80031ac <hashInit.0+0x1934>)
 8002f56:	4896      	ldr	r0, [pc, #600]	@ (80031b0 <hashInit.0+0x1938>)
 8002f58:	f7fe fbe0 	bl	800171c <insert.1>
		insert("TKPWOPB", "gone");
 8002f5c:	46a4      	mov	ip, r4
 8002f5e:	4995      	ldr	r1, [pc, #596]	@ (80031b4 <hashInit.0+0x193c>)
 8002f60:	4895      	ldr	r0, [pc, #596]	@ (80031b8 <hashInit.0+0x1940>)
 8002f62:	f7fe fbdb 	bl	800171c <insert.1>
		insert("TKPWEURL", "girl");
 8002f66:	46a4      	mov	ip, r4
 8002f68:	4994      	ldr	r1, [pc, #592]	@ (80031bc <hashInit.0+0x1944>)
 8002f6a:	4895      	ldr	r0, [pc, #596]	@ (80031c0 <hashInit.0+0x1948>)
 8002f6c:	f7fe fbd6 	bl	800171c <insert.1>
		insert("TPHOEPB", "known");
 8002f70:	46a4      	mov	ip, r4
 8002f72:	4994      	ldr	r1, [pc, #592]	@ (80031c4 <hashInit.0+0x194c>)
 8002f74:	4894      	ldr	r0, [pc, #592]	@ (80031c8 <hashInit.0+0x1950>)
 8002f76:	f7fe fbd1 	bl	800171c <insert.1>
		insert("HAER", "hear");
 8002f7a:	46a4      	mov	ip, r4
 8002f7c:	4993      	ldr	r1, [pc, #588]	@ (80031cc <hashInit.0+0x1954>)
 8002f7e:	4894      	ldr	r0, [pc, #592]	@ (80031d0 <hashInit.0+0x1958>)
 8002f80:	f7fe fbcc 	bl	800171c <insert.1>
		insert("TAOEUPLS", "times");
 8002f84:	46a4      	mov	ip, r4
 8002f86:	4993      	ldr	r1, [pc, #588]	@ (80031d4 <hashInit.0+0x195c>)
 8002f88:	4893      	ldr	r0, [pc, #588]	@ (80031d8 <hashInit.0+0x1960>)
 8002f8a:	f7fe fbc7 	bl	800171c <insert.1>
		insert("HRAOEFT", "least");
 8002f8e:	46a4      	mov	ip, r4
 8002f90:	4992      	ldr	r1, [pc, #584]	@ (80031dc <hashInit.0+0x1964>)
 8002f92:	4893      	ldr	r0, [pc, #588]	@ (80031e0 <hashInit.0+0x1968>)
 8002f94:	f7fe fbc2 	bl	800171c <insert.1>
		insert("PRAPS", "perhaps");
 8002f98:	46a4      	mov	ip, r4
 8002f9a:	4992      	ldr	r1, [pc, #584]	@ (80031e4 <hashInit.0+0x196c>)
 8002f9c:	4892      	ldr	r0, [pc, #584]	@ (80031e8 <hashInit.0+0x1970>)
 8002f9e:	f7fe fbbd 	bl	800171c <insert.1>
		insert("SHUR", "sure");
 8002fa2:	46a4      	mov	ip, r4
 8002fa4:	4991      	ldr	r1, [pc, #580]	@ (80031ec <hashInit.0+0x1974>)
 8002fa6:	4892      	ldr	r0, [pc, #584]	@ (80031f0 <hashInit.0+0x1978>)
 8002fa8:	f7fe fbb8 	bl	800171c <insert.1>
		insert("TPHAOEPBD", "indeed");
 8002fac:	46a4      	mov	ip, r4
 8002fae:	4991      	ldr	r1, [pc, #580]	@ (80031f4 <hashInit.0+0x197c>)
 8002fb0:	e122      	b.n	80031f8 <hashInit.0+0x1980>
 8002fb2:	bf00      	nop
 8002fb4:	0800e45c 	.word	0x0800e45c
 8002fb8:	0800e464 	.word	0x0800e464
 8002fbc:	0800e46c 	.word	0x0800e46c
 8002fc0:	0800e474 	.word	0x0800e474
 8002fc4:	0800e47c 	.word	0x0800e47c
 8002fc8:	0800e484 	.word	0x0800e484
 8002fcc:	0800e48c 	.word	0x0800e48c
 8002fd0:	0800e498 	.word	0x0800e498
 8002fd4:	0800e4a0 	.word	0x0800e4a0
 8002fd8:	0800e4a8 	.word	0x0800e4a8
 8002fdc:	0800e4b0 	.word	0x0800e4b0
 8002fe0:	0800e4b8 	.word	0x0800e4b8
 8002fe4:	0800e4c0 	.word	0x0800e4c0
 8002fe8:	0800e4c8 	.word	0x0800e4c8
 8002fec:	0800e4d0 	.word	0x0800e4d0
 8002ff0:	0800e4d8 	.word	0x0800e4d8
 8002ff4:	0800e4e0 	.word	0x0800e4e0
 8002ff8:	0800e4e8 	.word	0x0800e4e8
 8002ffc:	0800e4f0 	.word	0x0800e4f0
 8003000:	0800e4f8 	.word	0x0800e4f8
 8003004:	0800e500 	.word	0x0800e500
 8003008:	0800e508 	.word	0x0800e508
 800300c:	0800e510 	.word	0x0800e510
 8003010:	0800e518 	.word	0x0800e518
 8003014:	0800e520 	.word	0x0800e520
 8003018:	0800e528 	.word	0x0800e528
 800301c:	0800e530 	.word	0x0800e530
 8003020:	0800e538 	.word	0x0800e538
 8003024:	0800e540 	.word	0x0800e540
 8003028:	0800e548 	.word	0x0800e548
 800302c:	0800e550 	.word	0x0800e550
 8003030:	0800e558 	.word	0x0800e558
 8003034:	0800e560 	.word	0x0800e560
 8003038:	0800e568 	.word	0x0800e568
 800303c:	0800e570 	.word	0x0800e570
 8003040:	0800e578 	.word	0x0800e578
 8003044:	0800e580 	.word	0x0800e580
 8003048:	0800e588 	.word	0x0800e588
 800304c:	0800e590 	.word	0x0800e590
 8003050:	0800e598 	.word	0x0800e598
 8003054:	0800e5a0 	.word	0x0800e5a0
 8003058:	0800e5ac 	.word	0x0800e5ac
 800305c:	0800e5b4 	.word	0x0800e5b4
 8003060:	0800e5bc 	.word	0x0800e5bc
 8003064:	0800e5c4 	.word	0x0800e5c4
 8003068:	0800e5c8 	.word	0x0800e5c8
 800306c:	0800e5d0 	.word	0x0800e5d0
 8003070:	0800e5d8 	.word	0x0800e5d8
 8003074:	0800e5e4 	.word	0x0800e5e4
 8003078:	0800e5ec 	.word	0x0800e5ec
 800307c:	0800e5f4 	.word	0x0800e5f4
 8003080:	0800e5fc 	.word	0x0800e5fc
 8003084:	0800e604 	.word	0x0800e604
 8003088:	0800e60c 	.word	0x0800e60c
 800308c:	0800e614 	.word	0x0800e614
 8003090:	0800e61c 	.word	0x0800e61c
 8003094:	0800e624 	.word	0x0800e624
 8003098:	0800e62c 	.word	0x0800e62c
 800309c:	0800e634 	.word	0x0800e634
 80030a0:	0800e63c 	.word	0x0800e63c
 80030a4:	0800e644 	.word	0x0800e644
 80030a8:	0800e64c 	.word	0x0800e64c
 80030ac:	0800e654 	.word	0x0800e654
 80030b0:	0800e65c 	.word	0x0800e65c
 80030b4:	0800e660 	.word	0x0800e660
 80030b8:	0800e668 	.word	0x0800e668
 80030bc:	0800e66c 	.word	0x0800e66c
 80030c0:	0800e674 	.word	0x0800e674
 80030c4:	0800e67c 	.word	0x0800e67c
 80030c8:	0800e684 	.word	0x0800e684
 80030cc:	0800e68c 	.word	0x0800e68c
 80030d0:	0800e698 	.word	0x0800e698
 80030d4:	0800e6a0 	.word	0x0800e6a0
 80030d8:	0800e6a8 	.word	0x0800e6a8
 80030dc:	0800e6b0 	.word	0x0800e6b0
 80030e0:	0800e6b8 	.word	0x0800e6b8
 80030e4:	0800e6c0 	.word	0x0800e6c0
 80030e8:	0800e6c8 	.word	0x0800e6c8
 80030ec:	0800e6d0 	.word	0x0800e6d0
 80030f0:	0800e6d8 	.word	0x0800e6d8
 80030f4:	0800e6e4 	.word	0x0800e6e4
 80030f8:	0800e6ec 	.word	0x0800e6ec
 80030fc:	0800e6f4 	.word	0x0800e6f4
 8003100:	0800e6fc 	.word	0x0800e6fc
 8003104:	0800e704 	.word	0x0800e704
 8003108:	0800e70c 	.word	0x0800e70c
 800310c:	0800e714 	.word	0x0800e714
 8003110:	0800e71c 	.word	0x0800e71c
 8003114:	0800e724 	.word	0x0800e724
 8003118:	0800e72c 	.word	0x0800e72c
 800311c:	0800e734 	.word	0x0800e734
 8003120:	0800e73c 	.word	0x0800e73c
 8003124:	0800e744 	.word	0x0800e744
 8003128:	0800e748 	.word	0x0800e748
 800312c:	0800e750 	.word	0x0800e750
 8003130:	0800e758 	.word	0x0800e758
 8003134:	0800e760 	.word	0x0800e760
 8003138:	0800e76c 	.word	0x0800e76c
 800313c:	0800e774 	.word	0x0800e774
 8003140:	0800e77c 	.word	0x0800e77c
 8003144:	0800e784 	.word	0x0800e784
 8003148:	0800e78c 	.word	0x0800e78c
 800314c:	0800e794 	.word	0x0800e794
 8003150:	0800e79c 	.word	0x0800e79c
 8003154:	0800e7a8 	.word	0x0800e7a8
 8003158:	0800e7b0 	.word	0x0800e7b0
 800315c:	0800e7b8 	.word	0x0800e7b8
 8003160:	0800e7c0 	.word	0x0800e7c0
 8003164:	0800e7c8 	.word	0x0800e7c8
 8003168:	0800e7d0 	.word	0x0800e7d0
 800316c:	0800e7d8 	.word	0x0800e7d8
 8003170:	0800e7e0 	.word	0x0800e7e0
 8003174:	0800e7e8 	.word	0x0800e7e8
 8003178:	0800e7f0 	.word	0x0800e7f0
 800317c:	0800e7f4 	.word	0x0800e7f4
 8003180:	0800e7fc 	.word	0x0800e7fc
 8003184:	0800e804 	.word	0x0800e804
 8003188:	0800e80c 	.word	0x0800e80c
 800318c:	0800e814 	.word	0x0800e814
 8003190:	0800e81c 	.word	0x0800e81c
 8003194:	0800e824 	.word	0x0800e824
 8003198:	0800e82c 	.word	0x0800e82c
 800319c:	0800e834 	.word	0x0800e834
 80031a0:	0800e83c 	.word	0x0800e83c
 80031a4:	0800e844 	.word	0x0800e844
 80031a8:	0800e850 	.word	0x0800e850
 80031ac:	0800e858 	.word	0x0800e858
 80031b0:	0800e860 	.word	0x0800e860
 80031b4:	0800e868 	.word	0x0800e868
 80031b8:	0800e870 	.word	0x0800e870
 80031bc:	0800e878 	.word	0x0800e878
 80031c0:	0800e880 	.word	0x0800e880
 80031c4:	0800e88c 	.word	0x0800e88c
 80031c8:	0800e894 	.word	0x0800e894
 80031cc:	0800e89c 	.word	0x0800e89c
 80031d0:	0800e8a4 	.word	0x0800e8a4
 80031d4:	0800e8ac 	.word	0x0800e8ac
 80031d8:	0800e8b4 	.word	0x0800e8b4
 80031dc:	0800e8c0 	.word	0x0800e8c0
 80031e0:	0800e8c8 	.word	0x0800e8c8
 80031e4:	0800e8d0 	.word	0x0800e8d0
 80031e8:	0800e8d8 	.word	0x0800e8d8
 80031ec:	0800e8e0 	.word	0x0800e8e0
 80031f0:	0800e8e8 	.word	0x0800e8e8
 80031f4:	0800e8f0 	.word	0x0800e8f0
 80031f8:	48b5      	ldr	r0, [pc, #724]	@ (80034d0 <hashInit.0+0x1c58>)
 80031fa:	f7fe fa8f 	bl	800171c <insert.1>
		insert("TKPWHREURB", "English");
 80031fe:	46a4      	mov	ip, r4
 8003200:	49b4      	ldr	r1, [pc, #720]	@ (80034d4 <hashInit.0+0x1c5c>)
 8003202:	48b5      	ldr	r0, [pc, #724]	@ (80034d8 <hashInit.0+0x1c60>)
 8003204:	f7fe fa8a 	bl	800171c <insert.1>
		insert("OEP", "open");
 8003208:	46a4      	mov	ip, r4
 800320a:	49b4      	ldr	r1, [pc, #720]	@ (80034dc <hashInit.0+0x1c64>)
 800320c:	48b4      	ldr	r0, [pc, #720]	@ (80034e0 <hashInit.0+0x1c68>)
 800320e:	f7fe fa85 	bl	800171c <insert.1>
		insert("PWO*ED", "body");
 8003212:	46a4      	mov	ip, r4
 8003214:	49b3      	ldr	r1, [pc, #716]	@ (80034e4 <hashInit.0+0x1c6c>)
 8003216:	48b4      	ldr	r0, [pc, #720]	@ (80034e8 <hashInit.0+0x1c70>)
 8003218:	f7fe fa80 	bl	800171c <insert.1>
		insert("T/SEFL", "itself");
 800321c:	46a4      	mov	ip, r4
 800321e:	49b3      	ldr	r1, [pc, #716]	@ (80034ec <hashInit.0+0x1c74>)
 8003220:	48b3      	ldr	r0, [pc, #716]	@ (80034f0 <hashInit.0+0x1c78>)
 8003222:	f7fe fa7b 	bl	800171c <insert.1>
		insert("A/HROPBG", "along");
 8003226:	46a4      	mov	ip, r4
 8003228:	49b2      	ldr	r1, [pc, #712]	@ (80034f4 <hashInit.0+0x1c7c>)
 800322a:	48b3      	ldr	r0, [pc, #716]	@ (80034f8 <hashInit.0+0x1c80>)
 800322c:	f7fe fa76 	bl	800171c <insert.1>
		insert("HRAPBD", "land");
 8003230:	46a4      	mov	ip, r4
 8003232:	49b2      	ldr	r1, [pc, #712]	@ (80034fc <hashInit.0+0x1c84>)
 8003234:	48b2      	ldr	r0, [pc, #712]	@ (8003500 <hashInit.0+0x1c88>)
 8003236:	f7fe fa71 	bl	800171c <insert.1>
		insert("RURPB", "return");
 800323a:	46a4      	mov	ip, r4
 800323c:	49b1      	ldr	r1, [pc, #708]	@ (8003504 <hashInit.0+0x1c8c>)
 800323e:	48b2      	ldr	r0, [pc, #712]	@ (8003508 <hashInit.0+0x1c90>)
 8003240:	f7fe fa6c 	bl	800171c <insert.1>
		insert("HREF", "leave");
 8003244:	46a4      	mov	ip, r4
 8003246:	49b1      	ldr	r1, [pc, #708]	@ (800350c <hashInit.0+0x1c94>)
 8003248:	48b1      	ldr	r0, [pc, #708]	@ (8003510 <hashInit.0+0x1c98>)
 800324a:	f7fe fa67 	bl	800171c <insert.1>
		insert("AEUR", "air");
 800324e:	46a4      	mov	ip, r4
 8003250:	49b0      	ldr	r1, [pc, #704]	@ (8003514 <hashInit.0+0x1c9c>)
 8003252:	48b1      	ldr	r0, [pc, #708]	@ (8003518 <hashInit.0+0x1ca0>)
 8003254:	f7fe fa62 	bl	800171c <insert.1>
		insert("TPHAEURT", "nature");
 8003258:	46a4      	mov	ip, r4
 800325a:	49b0      	ldr	r1, [pc, #704]	@ (800351c <hashInit.0+0x1ca4>)
 800325c:	48b0      	ldr	r0, [pc, #704]	@ (8003520 <hashInit.0+0x1ca8>)
 800325e:	f7fe fa5d 	bl	800171c <insert.1>
		insert("AEPBS/-D", "answered");
 8003262:	46a4      	mov	ip, r4
 8003264:	49af      	ldr	r1, [pc, #700]	@ (8003524 <hashInit.0+0x1cac>)
 8003266:	48b0      	ldr	r0, [pc, #704]	@ (8003528 <hashInit.0+0x1cb0>)
 8003268:	f7fe fa58 	bl	800171c <insert.1>
		insert("AOERT", "either");
 800326c:	46a4      	mov	ip, r4
 800326e:	49af      	ldr	r1, [pc, #700]	@ (800352c <hashInit.0+0x1cb4>)
 8003270:	48af      	ldr	r0, [pc, #700]	@ (8003530 <hashInit.0+0x1cb8>)
 8003272:	f7fe fa53 	bl	800171c <insert.1>
		insert("HRAU", "law");
 8003276:	46a4      	mov	ip, r4
 8003278:	49ae      	ldr	r1, [pc, #696]	@ (8003534 <hashInit.0+0x1cbc>)
 800327a:	48af      	ldr	r0, [pc, #700]	@ (8003538 <hashInit.0+0x1cc0>)
 800327c:	f7fe fa4e 	bl	800171c <insert.1>
		insert("HEP", "help");
 8003280:	46a4      	mov	ip, r4
 8003282:	49ae      	ldr	r1, [pc, #696]	@ (800353c <hashInit.0+0x1cc4>)
 8003284:	48ae      	ldr	r0, [pc, #696]	@ (8003540 <hashInit.0+0x1cc8>)
 8003286:	f7fe fa49 	bl	800171c <insert.1>
		insert("HRAEU", "lay");
 800328a:	46a4      	mov	ip, r4
 800328c:	49ad      	ldr	r1, [pc, #692]	@ (8003544 <hashInit.0+0x1ccc>)
 800328e:	48ae      	ldr	r0, [pc, #696]	@ (8003548 <hashInit.0+0x1cd0>)
 8003290:	f7fe fa44 	bl	800171c <insert.1>
		insert("POEUPBT", "point");
 8003294:	46a4      	mov	ip, r4
 8003296:	49ad      	ldr	r1, [pc, #692]	@ (800354c <hashInit.0+0x1cd4>)
 8003298:	48ad      	ldr	r0, [pc, #692]	@ (8003550 <hashInit.0+0x1cd8>)
 800329a:	f7fe fa3f 	bl	800171c <insert.1>
		insert("KHAOEULD", "child");
 800329e:	46a4      	mov	ip, r4
 80032a0:	49ac      	ldr	r1, [pc, #688]	@ (8003554 <hashInit.0+0x1cdc>)
 80032a2:	48ad      	ldr	r0, [pc, #692]	@ (8003558 <hashInit.0+0x1ce0>)
 80032a4:	f7fe fa3a 	bl	800171c <insert.1>
		insert("HRERT", "letter");
 80032a8:	46a4      	mov	ip, r4
 80032aa:	49ac      	ldr	r1, [pc, #688]	@ (800355c <hashInit.0+0x1ce4>)
 80032ac:	48ac      	ldr	r0, [pc, #688]	@ (8003560 <hashInit.0+0x1ce8>)
 80032ae:	f7fe fa35 	bl	800171c <insert.1>
		insert("TPOUR", "four");
 80032b2:	46a4      	mov	ip, r4
 80032b4:	49ab      	ldr	r1, [pc, #684]	@ (8003564 <hashInit.0+0x1cec>)
 80032b6:	48ac      	ldr	r0, [pc, #688]	@ (8003568 <hashInit.0+0x1cf0>)
 80032b8:	f7fe fa30 	bl	800171c <insert.1>
		insert("WEURB", "wish");
 80032bc:	46a4      	mov	ip, r4
 80032be:	49ab      	ldr	r1, [pc, #684]	@ (800356c <hashInit.0+0x1cf4>)
 80032c0:	48ab      	ldr	r0, [pc, #684]	@ (8003570 <hashInit.0+0x1cf8>)
 80032c2:	f7fe fa2b 	bl	800171c <insert.1>
		insert("TPAOEUR", "fire");
 80032c6:	46a4      	mov	ip, r4
 80032c8:	49aa      	ldr	r1, [pc, #680]	@ (8003574 <hashInit.0+0x1cfc>)
 80032ca:	48ab      	ldr	r0, [pc, #684]	@ (8003578 <hashInit.0+0x1d00>)
 80032cc:	f7fe fa26 	bl	800171c <insert.1>
		insert("KRAOEUD", "cried");
 80032d0:	46a4      	mov	ip, r4
 80032d2:	49aa      	ldr	r1, [pc, #680]	@ (800357c <hashInit.0+0x1d04>)
 80032d4:	48aa      	ldr	r0, [pc, #680]	@ (8003580 <hashInit.0+0x1d08>)
 80032d6:	f7fe fa21 	bl	800171c <insert.1>
		insert("TWO/TWO*", "2");
 80032da:	46a4      	mov	ip, r4
 80032dc:	49a9      	ldr	r1, [pc, #676]	@ (8003584 <hashInit.0+0x1d0c>)
 80032de:	48aa      	ldr	r0, [pc, #680]	@ (8003588 <hashInit.0+0x1d10>)
 80032e0:	f7fe fa1c 	bl	800171c <insert.1>
		insert("WEUPL", "women");
 80032e4:	46a4      	mov	ip, r4
 80032e6:	49a9      	ldr	r1, [pc, #676]	@ (800358c <hashInit.0+0x1d14>)
 80032e8:	48a9      	ldr	r0, [pc, #676]	@ (8003590 <hashInit.0+0x1d18>)
 80032ea:	f7fe fa17 	bl	800171c <insert.1>
		insert("SPAOEBG", "speak");
 80032ee:	46a4      	mov	ip, r4
 80032f0:	49a8      	ldr	r1, [pc, #672]	@ (8003594 <hashInit.0+0x1d1c>)
 80032f2:	48a9      	ldr	r0, [pc, #676]	@ (8003598 <hashInit.0+0x1d20>)
 80032f4:	f7fe fa12 	bl	800171c <insert.1>
		insert("TPHUPL", "number");
 80032f8:	46a4      	mov	ip, r4
 80032fa:	49a8      	ldr	r1, [pc, #672]	@ (800359c <hashInit.0+0x1d24>)
 80032fc:	48a8      	ldr	r0, [pc, #672]	@ (80035a0 <hashInit.0+0x1d28>)
 80032fe:	f7fe fa0d 	bl	800171c <insert.1>
		insert("TH-FR", "therefore");
 8003302:	46a4      	mov	ip, r4
 8003304:	49a7      	ldr	r1, [pc, #668]	@ (80035a4 <hashInit.0+0x1d2c>)
 8003306:	48a8      	ldr	r0, [pc, #672]	@ (80035a8 <hashInit.0+0x1d30>)
 8003308:	f7fe fa08 	bl	800171c <insert.1>
		insert("HOUR", "hour");
 800330c:	46a4      	mov	ip, r4
 800330e:	49a7      	ldr	r1, [pc, #668]	@ (80035ac <hashInit.0+0x1d34>)
 8003310:	48a7      	ldr	r0, [pc, #668]	@ (80035b0 <hashInit.0+0x1d38>)
 8003312:	f7fe fa03 	bl	800171c <insert.1>
		insert("TPREPBDZ", "friends");
 8003316:	46a4      	mov	ip, r4
 8003318:	49a6      	ldr	r1, [pc, #664]	@ (80035b4 <hashInit.0+0x1d3c>)
 800331a:	48a7      	ldr	r0, [pc, #668]	@ (80035b8 <hashInit.0+0x1d40>)
 800331c:	f7fe f9fe 	bl	800171c <insert.1>
		insert("HELD", "held");
 8003320:	46a4      	mov	ip, r4
 8003322:	49a6      	ldr	r1, [pc, #664]	@ (80035bc <hashInit.0+0x1d44>)
 8003324:	48a6      	ldr	r0, [pc, #664]	@ (80035c0 <hashInit.0+0x1d48>)
 8003326:	f7fe f9f9 	bl	800171c <insert.1>
		insert("TPRAOE", "free");
 800332a:	46a4      	mov	ip, r4
 800332c:	49a5      	ldr	r1, [pc, #660]	@ (80035c4 <hashInit.0+0x1d4c>)
 800332e:	48a6      	ldr	r0, [pc, #664]	@ (80035c8 <hashInit.0+0x1d50>)
 8003330:	f7fe f9f4 	bl	800171c <insert.1>
		insert("WAR", "war");
 8003334:	46a4      	mov	ip, r4
 8003336:	49a5      	ldr	r1, [pc, #660]	@ (80035cc <hashInit.0+0x1d54>)
 8003338:	48a5      	ldr	r0, [pc, #660]	@ (80035d0 <hashInit.0+0x1d58>)
 800333a:	f7fe f9ef 	bl	800171c <insert.1>
		insert("TKURG", "during");
 800333e:	46a4      	mov	ip, r4
 8003340:	49a4      	ldr	r1, [pc, #656]	@ (80035d4 <hashInit.0+0x1d5c>)
 8003342:	48a5      	ldr	r0, [pc, #660]	@ (80035d8 <hashInit.0+0x1d60>)
 8003344:	f7fe f9ea 	bl	800171c <insert.1>
		insert("SEFRL", "several");
 8003348:	46a4      	mov	ip, r4
 800334a:	49a4      	ldr	r1, [pc, #656]	@ (80035dc <hashInit.0+0x1d64>)
 800334c:	48a4      	ldr	r0, [pc, #656]	@ (80035e0 <hashInit.0+0x1d68>)
 800334e:	f7fe f9e5 	bl	800171c <insert.1>
		insert("PWEUS", "business");
 8003352:	46a4      	mov	ip, r4
 8003354:	49a3      	ldr	r1, [pc, #652]	@ (80035e4 <hashInit.0+0x1d6c>)
 8003356:	48a4      	ldr	r0, [pc, #656]	@ (80035e8 <hashInit.0+0x1d70>)
 8003358:	f7fe f9e0 	bl	800171c <insert.1>
		insert("WHR", "whether");
 800335c:	46a4      	mov	ip, r4
 800335e:	49a3      	ldr	r1, [pc, #652]	@ (80035ec <hashInit.0+0x1d74>)
 8003360:	48a3      	ldr	r0, [pc, #652]	@ (80035f0 <hashInit.0+0x1d78>)
 8003362:	f7fe f9db 	bl	800171c <insert.1>
		insert("*E/R*", "er");
 8003366:	46a4      	mov	ip, r4
 8003368:	49a2      	ldr	r1, [pc, #648]	@ (80035f4 <hashInit.0+0x1d7c>)
 800336a:	48a3      	ldr	r0, [pc, #652]	@ (80035f8 <hashInit.0+0x1d80>)
 800336c:	f7fe f9d6 	bl	800171c <insert.1>
		insert("PHAERPB", "manner");
 8003370:	46a4      	mov	ip, r4
 8003372:	49a2      	ldr	r1, [pc, #648]	@ (80035fc <hashInit.0+0x1d84>)
 8003374:	48a2      	ldr	r0, [pc, #648]	@ (8003600 <hashInit.0+0x1d88>)
 8003376:	f7fe f9d1 	bl	800171c <insert.1>
		insert("SEBGD", "second");
 800337a:	46a4      	mov	ip, r4
 800337c:	49a1      	ldr	r1, [pc, #644]	@ (8003604 <hashInit.0+0x1d8c>)
 800337e:	48a2      	ldr	r0, [pc, #648]	@ (8003608 <hashInit.0+0x1d90>)
 8003380:	f7fe f9cc 	bl	800171c <insert.1>
		insert("R-PB", "reason");
 8003384:	46a4      	mov	ip, r4
 8003386:	49a1      	ldr	r1, [pc, #644]	@ (800360c <hashInit.0+0x1d94>)
 8003388:	48a1      	ldr	r0, [pc, #644]	@ (8003610 <hashInit.0+0x1d98>)
 800338a:	f7fe f9c7 	bl	800171c <insert.1>
		insert("RE/PHRAOEUD", "replied");
 800338e:	46a4      	mov	ip, r4
 8003390:	49a0      	ldr	r1, [pc, #640]	@ (8003614 <hashInit.0+0x1d9c>)
 8003392:	48a1      	ldr	r0, [pc, #644]	@ (8003618 <hashInit.0+0x1da0>)
 8003394:	f7fe f9c2 	bl	800171c <insert.1>
		insert("AOUPBTD", "united");
 8003398:	46a4      	mov	ip, r4
 800339a:	49a0      	ldr	r1, [pc, #640]	@ (800361c <hashInit.0+0x1da4>)
 800339c:	48a0      	ldr	r0, [pc, #640]	@ (8003620 <hashInit.0+0x1da8>)
 800339e:	f7fe f9bd 	bl	800171c <insert.1>
		insert("KAUL", "call");
 80033a2:	46a4      	mov	ip, r4
 80033a4:	499f      	ldr	r1, [pc, #636]	@ (8003624 <hashInit.0+0x1dac>)
 80033a6:	48a0      	ldr	r0, [pc, #640]	@ (8003628 <hashInit.0+0x1db0>)
 80033a8:	f7fe f9b8 	bl	800171c <insert.1>
		insert("SKWREPBL", "general");
 80033ac:	46a4      	mov	ip, r4
 80033ae:	499f      	ldr	r1, [pc, #636]	@ (800362c <hashInit.0+0x1db4>)
 80033b0:	489f      	ldr	r0, [pc, #636]	@ (8003630 <hashInit.0+0x1db8>)
 80033b2:	f7fe f9b3 	bl	800171c <insert.1>
		insert("KWR", "why");
 80033b6:	46a4      	mov	ip, r4
 80033b8:	499e      	ldr	r1, [pc, #632]	@ (8003634 <hashInit.0+0x1dbc>)
 80033ba:	489f      	ldr	r0, [pc, #636]	@ (8003638 <hashInit.0+0x1dc0>)
 80033bc:	f7fe f9ae 	bl	800171c <insert.1>
		insert("HEUPBD", "behind");
 80033c0:	46a4      	mov	ip, r4
 80033c2:	499e      	ldr	r1, [pc, #632]	@ (800363c <hashInit.0+0x1dc4>)
 80033c4:	489e      	ldr	r0, [pc, #632]	@ (8003640 <hashInit.0+0x1dc8>)
 80033c6:	f7fe f9a9 	bl	800171c <insert.1>
		insert("PWAEUPL", "became");
 80033ca:	46a4      	mov	ip, r4
 80033cc:	499d      	ldr	r1, [pc, #628]	@ (8003644 <hashInit.0+0x1dcc>)
 80033ce:	489e      	ldr	r0, [pc, #632]	@ (8003648 <hashInit.0+0x1dd0>)
 80033d0:	f7fe f9a4 	bl	800171c <insert.1>
		insert("SKWROPB", "John");
 80033d4:	46a4      	mov	ip, r4
 80033d6:	499d      	ldr	r1, [pc, #628]	@ (800364c <hashInit.0+0x1dd4>)
 80033d8:	489d      	ldr	r0, [pc, #628]	@ (8003650 <hashInit.0+0x1dd8>)
 80033da:	f7fe f99f 	bl	800171c <insert.1>
		insert("PW-BG", "become");
 80033de:	46a4      	mov	ip, r4
 80033e0:	499c      	ldr	r1, [pc, #624]	@ (8003654 <hashInit.0+0x1ddc>)
 80033e2:	489d      	ldr	r0, [pc, #628]	@ (8003658 <hashInit.0+0x1de0>)
 80033e4:	f7fe f99a 	bl	800171c <insert.1>
		insert("TKED", "dead");
 80033e8:	46a4      	mov	ip, r4
 80033ea:	499c      	ldr	r1, [pc, #624]	@ (800365c <hashInit.0+0x1de4>)
 80033ec:	489c      	ldr	r0, [pc, #624]	@ (8003660 <hashInit.0+0x1de8>)
 80033ee:	f7fe f995 	bl	800171c <insert.1>
		insert("*ERT", "earth");
 80033f2:	46a4      	mov	ip, r4
 80033f4:	499b      	ldr	r1, [pc, #620]	@ (8003664 <hashInit.0+0x1dec>)
 80033f6:	489c      	ldr	r0, [pc, #624]	@ (8003668 <hashInit.0+0x1df0>)
 80033f8:	f7fe f990 	bl	800171c <insert.1>
		insert("PWOEU", "boy");
 80033fc:	46a4      	mov	ip, r4
 80033fe:	499b      	ldr	r1, [pc, #620]	@ (800366c <hashInit.0+0x1df4>)
 8003400:	489b      	ldr	r0, [pc, #620]	@ (8003670 <hashInit.0+0x1df8>)
 8003402:	f7fe f98b 	bl	800171c <insert.1>
		insert("HRO*S", "lost");
 8003406:	46a4      	mov	ip, r4
 8003408:	499a      	ldr	r1, [pc, #616]	@ (8003674 <hashInit.0+0x1dfc>)
 800340a:	489b      	ldr	r0, [pc, #620]	@ (8003678 <hashInit.0+0x1e00>)
 800340c:	f7fe f986 	bl	800171c <insert.1>
		insert("TPO*RT", "forth");
 8003410:	46a4      	mov	ip, r4
 8003412:	499a      	ldr	r1, [pc, #616]	@ (800367c <hashInit.0+0x1e04>)
 8003414:	489a      	ldr	r0, [pc, #616]	@ (8003680 <hashInit.0+0x1e08>)
 8003416:	f7fe f981 	bl	800171c <insert.1>
		insert("THOUD", "thousand");
 800341a:	46a4      	mov	ip, r4
 800341c:	4999      	ldr	r1, [pc, #612]	@ (8003684 <hashInit.0+0x1e0c>)
 800341e:	489a      	ldr	r0, [pc, #616]	@ (8003688 <hashInit.0+0x1e10>)
 8003420:	f7fe f97c 	bl	800171c <insert.1>
		insert("HRAOG", "looking");
 8003424:	46a4      	mov	ip, r4
 8003426:	4999      	ldr	r1, [pc, #612]	@ (800368c <hashInit.0+0x1e14>)
 8003428:	4899      	ldr	r0, [pc, #612]	@ (8003690 <hashInit.0+0x1e18>)
 800342a:	f7fe f977 	bl	800171c <insert.1>
		insert("AOEUL", "I'll");
 800342e:	46a4      	mov	ip, r4
 8003430:	4998      	ldr	r1, [pc, #608]	@ (8003694 <hashInit.0+0x1e1c>)
 8003432:	4899      	ldr	r0, [pc, #612]	@ (8003698 <hashInit.0+0x1e20>)
 8003434:	f7fe f972 	bl	800171c <insert.1>
		insert("TPAEPL", "family");
 8003438:	46a4      	mov	ip, r4
 800343a:	4998      	ldr	r1, [pc, #608]	@ (800369c <hashInit.0+0x1e24>)
 800343c:	4898      	ldr	r0, [pc, #608]	@ (80036a0 <hashInit.0+0x1e28>)
 800343e:	f7fe f96d 	bl	800171c <insert.1>
		insert("SOUL", "soul");
 8003442:	46a4      	mov	ip, r4
 8003444:	4997      	ldr	r1, [pc, #604]	@ (80036a4 <hashInit.0+0x1e2c>)
 8003446:	4898      	ldr	r0, [pc, #608]	@ (80036a8 <hashInit.0+0x1e30>)
 8003448:	f7fe f968 	bl	800171c <insert.1>
		insert("TPAOEL", "feel");
 800344c:	46a4      	mov	ip, r4
 800344e:	4997      	ldr	r1, [pc, #604]	@ (80036ac <hashInit.0+0x1e34>)
 8003450:	4897      	ldr	r0, [pc, #604]	@ (80036b0 <hashInit.0+0x1e38>)
 8003452:	f7fe f963 	bl	800171c <insert.1>
		insert("KO*G", "coming");
 8003456:	46a4      	mov	ip, r4
 8003458:	4996      	ldr	r1, [pc, #600]	@ (80036b4 <hashInit.0+0x1e3c>)
 800345a:	4897      	ldr	r0, [pc, #604]	@ (80036b8 <hashInit.0+0x1e40>)
 800345c:	f7fe f95e 	bl	800171c <insert.1>
		insert("TKPWHRAEPBD", "England");
 8003460:	46a4      	mov	ip, r4
 8003462:	4996      	ldr	r1, [pc, #600]	@ (80036bc <hashInit.0+0x1e44>)
 8003464:	4896      	ldr	r0, [pc, #600]	@ (80036c0 <hashInit.0+0x1e48>)
 8003466:	f7fe f959 	bl	800171c <insert.1>
		insert("SPEURT", "spirit");
 800346a:	46a4      	mov	ip, r4
 800346c:	4995      	ldr	r1, [pc, #596]	@ (80036c4 <hashInit.0+0x1e4c>)
 800346e:	4896      	ldr	r0, [pc, #600]	@ (80036c8 <hashInit.0+0x1e50>)
 8003470:	f7fe f954 	bl	800171c <insert.1>
		insert("KWE", "question");
 8003474:	46a4      	mov	ip, r4
 8003476:	4995      	ldr	r1, [pc, #596]	@ (80036cc <hashInit.0+0x1e54>)
 8003478:	4895      	ldr	r0, [pc, #596]	@ (80036d0 <hashInit.0+0x1e58>)
 800347a:	f7fe f94f 	bl	800171c <insert.1>
		insert("KAEUR", "care");
 800347e:	46a4      	mov	ip, r4
 8003480:	4994      	ldr	r1, [pc, #592]	@ (80036d4 <hashInit.0+0x1e5c>)
 8003482:	4895      	ldr	r0, [pc, #596]	@ (80036d8 <hashInit.0+0x1e60>)
 8003484:	f7fe f94a 	bl	800171c <insert.1>
		insert("TRAO*UT", "truth");
 8003488:	46a4      	mov	ip, r4
 800348a:	4994      	ldr	r1, [pc, #592]	@ (80036dc <hashInit.0+0x1e64>)
 800348c:	4894      	ldr	r0, [pc, #592]	@ (80036e0 <hashInit.0+0x1e68>)
 800348e:	f7fe f945 	bl	800171c <insert.1>
		insert("TKPWROUPBD", "ground");
 8003492:	46a4      	mov	ip, r4
 8003494:	4993      	ldr	r1, [pc, #588]	@ (80036e4 <hashInit.0+0x1e6c>)
 8003496:	4894      	ldr	r0, [pc, #592]	@ (80036e8 <hashInit.0+0x1e70>)
 8003498:	f7fe f940 	bl	800171c <insert.1>
		insert("R-L", "really");
 800349c:	46a4      	mov	ip, r4
 800349e:	4993      	ldr	r1, [pc, #588]	@ (80036ec <hashInit.0+0x1e74>)
 80034a0:	4893      	ldr	r0, [pc, #588]	@ (80036f0 <hashInit.0+0x1e78>)
 80034a2:	f7fe f93b 	bl	800171c <insert.1>
		insert("REFT", "rest");
 80034a6:	46a4      	mov	ip, r4
 80034a8:	4992      	ldr	r1, [pc, #584]	@ (80036f4 <hashInit.0+0x1e7c>)
 80034aa:	4893      	ldr	r0, [pc, #588]	@ (80036f8 <hashInit.0+0x1e80>)
 80034ac:	f7fe f936 	bl	800171c <insert.1>
		insert("PHAOEPB", "mean");
 80034b0:	46a4      	mov	ip, r4
 80034b2:	4992      	ldr	r1, [pc, #584]	@ (80036fc <hashInit.0+0x1e84>)
 80034b4:	4892      	ldr	r0, [pc, #584]	@ (8003700 <hashInit.0+0x1e88>)
 80034b6:	f7fe f931 	bl	800171c <insert.1>
		insert("TKEUFRT", "different");
 80034ba:	46a4      	mov	ip, r4
 80034bc:	4991      	ldr	r1, [pc, #580]	@ (8003704 <hashInit.0+0x1e8c>)
 80034be:	4892      	ldr	r0, [pc, #584]	@ (8003708 <hashInit.0+0x1e90>)
 80034c0:	f7fe f92c 	bl	800171c <insert.1>
		insert("PHAEUG", "making");
 80034c4:	46a4      	mov	ip, r4
 80034c6:	4991      	ldr	r1, [pc, #580]	@ (800370c <hashInit.0+0x1e94>)
 80034c8:	4891      	ldr	r0, [pc, #580]	@ (8003710 <hashInit.0+0x1e98>)
 80034ca:	f7fe f927 	bl	800171c <insert.1>
 80034ce:	e121      	b.n	8003714 <hashInit.0+0x1e9c>
 80034d0:	0800e8f8 	.word	0x0800e8f8
 80034d4:	0800e904 	.word	0x0800e904
 80034d8:	0800e90c 	.word	0x0800e90c
 80034dc:	0800e918 	.word	0x0800e918
 80034e0:	0800e920 	.word	0x0800e920
 80034e4:	0800e924 	.word	0x0800e924
 80034e8:	0800e92c 	.word	0x0800e92c
 80034ec:	0800e934 	.word	0x0800e934
 80034f0:	0800e93c 	.word	0x0800e93c
 80034f4:	0800e944 	.word	0x0800e944
 80034f8:	0800e94c 	.word	0x0800e94c
 80034fc:	0800e958 	.word	0x0800e958
 8003500:	0800e960 	.word	0x0800e960
 8003504:	0800e968 	.word	0x0800e968
 8003508:	0800e970 	.word	0x0800e970
 800350c:	0800e978 	.word	0x0800e978
 8003510:	0800e980 	.word	0x0800e980
 8003514:	0800e988 	.word	0x0800e988
 8003518:	0800e98c 	.word	0x0800e98c
 800351c:	0800e994 	.word	0x0800e994
 8003520:	0800e99c 	.word	0x0800e99c
 8003524:	0800e9a8 	.word	0x0800e9a8
 8003528:	0800e9b4 	.word	0x0800e9b4
 800352c:	0800e9c0 	.word	0x0800e9c0
 8003530:	0800e9c8 	.word	0x0800e9c8
 8003534:	0800e9d0 	.word	0x0800e9d0
 8003538:	0800e9d4 	.word	0x0800e9d4
 800353c:	0800e9dc 	.word	0x0800e9dc
 8003540:	0800e9e4 	.word	0x0800e9e4
 8003544:	0800e9e8 	.word	0x0800e9e8
 8003548:	0800e9ec 	.word	0x0800e9ec
 800354c:	0800e9f4 	.word	0x0800e9f4
 8003550:	0800e9fc 	.word	0x0800e9fc
 8003554:	0800ea04 	.word	0x0800ea04
 8003558:	0800ea0c 	.word	0x0800ea0c
 800355c:	0800ea18 	.word	0x0800ea18
 8003560:	0800ea20 	.word	0x0800ea20
 8003564:	0800ea28 	.word	0x0800ea28
 8003568:	0800ea30 	.word	0x0800ea30
 800356c:	0800ea38 	.word	0x0800ea38
 8003570:	0800ea40 	.word	0x0800ea40
 8003574:	0800ea48 	.word	0x0800ea48
 8003578:	0800ea50 	.word	0x0800ea50
 800357c:	0800ea58 	.word	0x0800ea58
 8003580:	0800ea60 	.word	0x0800ea60
 8003584:	0800ea68 	.word	0x0800ea68
 8003588:	0800ea6c 	.word	0x0800ea6c
 800358c:	0800ea78 	.word	0x0800ea78
 8003590:	0800ea80 	.word	0x0800ea80
 8003594:	0800ea88 	.word	0x0800ea88
 8003598:	0800ea90 	.word	0x0800ea90
 800359c:	0800ea98 	.word	0x0800ea98
 80035a0:	0800eaa0 	.word	0x0800eaa0
 80035a4:	0800eaa8 	.word	0x0800eaa8
 80035a8:	0800eab4 	.word	0x0800eab4
 80035ac:	0800eabc 	.word	0x0800eabc
 80035b0:	0800eac4 	.word	0x0800eac4
 80035b4:	0800eacc 	.word	0x0800eacc
 80035b8:	0800ead4 	.word	0x0800ead4
 80035bc:	0800eae0 	.word	0x0800eae0
 80035c0:	0800eae8 	.word	0x0800eae8
 80035c4:	0800eaf0 	.word	0x0800eaf0
 80035c8:	0800eaf8 	.word	0x0800eaf8
 80035cc:	0800eb00 	.word	0x0800eb00
 80035d0:	0800eb04 	.word	0x0800eb04
 80035d4:	0800eb08 	.word	0x0800eb08
 80035d8:	0800eb10 	.word	0x0800eb10
 80035dc:	0800eb18 	.word	0x0800eb18
 80035e0:	0800eb20 	.word	0x0800eb20
 80035e4:	0800eb28 	.word	0x0800eb28
 80035e8:	0800eb34 	.word	0x0800eb34
 80035ec:	0800eb3c 	.word	0x0800eb3c
 80035f0:	0800eb44 	.word	0x0800eb44
 80035f4:	0800eb48 	.word	0x0800eb48
 80035f8:	0800eb4c 	.word	0x0800eb4c
 80035fc:	0800eb54 	.word	0x0800eb54
 8003600:	0800eb5c 	.word	0x0800eb5c
 8003604:	0800eb64 	.word	0x0800eb64
 8003608:	0800eb6c 	.word	0x0800eb6c
 800360c:	0800eb74 	.word	0x0800eb74
 8003610:	0800eb7c 	.word	0x0800eb7c
 8003614:	0800eb84 	.word	0x0800eb84
 8003618:	0800eb8c 	.word	0x0800eb8c
 800361c:	0800eb98 	.word	0x0800eb98
 8003620:	0800eba0 	.word	0x0800eba0
 8003624:	0800eba8 	.word	0x0800eba8
 8003628:	0800ebb0 	.word	0x0800ebb0
 800362c:	0800ebb8 	.word	0x0800ebb8
 8003630:	0800ebc0 	.word	0x0800ebc0
 8003634:	0800ebcc 	.word	0x0800ebcc
 8003638:	0800ebd0 	.word	0x0800ebd0
 800363c:	0800ebd4 	.word	0x0800ebd4
 8003640:	0800ebdc 	.word	0x0800ebdc
 8003644:	0800ebe4 	.word	0x0800ebe4
 8003648:	0800ebec 	.word	0x0800ebec
 800364c:	0800ebf4 	.word	0x0800ebf4
 8003650:	0800ebfc 	.word	0x0800ebfc
 8003654:	0800ec04 	.word	0x0800ec04
 8003658:	0800ec0c 	.word	0x0800ec0c
 800365c:	0800ec14 	.word	0x0800ec14
 8003660:	0800ec1c 	.word	0x0800ec1c
 8003664:	0800ec24 	.word	0x0800ec24
 8003668:	0800ec2c 	.word	0x0800ec2c
 800366c:	0800ec34 	.word	0x0800ec34
 8003670:	0800ec38 	.word	0x0800ec38
 8003674:	0800ec40 	.word	0x0800ec40
 8003678:	0800ec48 	.word	0x0800ec48
 800367c:	0800ec50 	.word	0x0800ec50
 8003680:	0800ec58 	.word	0x0800ec58
 8003684:	0800ec60 	.word	0x0800ec60
 8003688:	0800ec6c 	.word	0x0800ec6c
 800368c:	0800ec74 	.word	0x0800ec74
 8003690:	0800ec7c 	.word	0x0800ec7c
 8003694:	0800ec84 	.word	0x0800ec84
 8003698:	0800ec8c 	.word	0x0800ec8c
 800369c:	0800ec94 	.word	0x0800ec94
 80036a0:	0800ec9c 	.word	0x0800ec9c
 80036a4:	0800eca4 	.word	0x0800eca4
 80036a8:	0800ecac 	.word	0x0800ecac
 80036ac:	0800ecb4 	.word	0x0800ecb4
 80036b0:	0800ecbc 	.word	0x0800ecbc
 80036b4:	0800ecc4 	.word	0x0800ecc4
 80036b8:	0800eccc 	.word	0x0800eccc
 80036bc:	0800ecd4 	.word	0x0800ecd4
 80036c0:	0800ecdc 	.word	0x0800ecdc
 80036c4:	0800ece8 	.word	0x0800ece8
 80036c8:	0800ecf0 	.word	0x0800ecf0
 80036cc:	0800ecf8 	.word	0x0800ecf8
 80036d0:	0800ed04 	.word	0x0800ed04
 80036d4:	0800ed08 	.word	0x0800ed08
 80036d8:	0800ed10 	.word	0x0800ed10
 80036dc:	0800ed18 	.word	0x0800ed18
 80036e0:	0800ed20 	.word	0x0800ed20
 80036e4:	0800ed28 	.word	0x0800ed28
 80036e8:	0800ed30 	.word	0x0800ed30
 80036ec:	0800ed3c 	.word	0x0800ed3c
 80036f0:	0800ed44 	.word	0x0800ed44
 80036f4:	0800ed48 	.word	0x0800ed48
 80036f8:	0800ed50 	.word	0x0800ed50
 80036fc:	0800ed58 	.word	0x0800ed58
 8003700:	0800ed60 	.word	0x0800ed60
 8003704:	0800ed68 	.word	0x0800ed68
 8003708:	0800ed74 	.word	0x0800ed74
 800370c:	0800ed7c 	.word	0x0800ed7c
 8003710:	0800ed84 	.word	0x0800ed84
		insert("POB", "possible");
 8003714:	46a4      	mov	ip, r4
 8003716:	49b5      	ldr	r1, [pc, #724]	@ (80039ec <hashInit.0+0x2174>)
 8003718:	48b5      	ldr	r0, [pc, #724]	@ (80039f0 <hashInit.0+0x2178>)
 800371a:	f7fd ffff 	bl	800171c <insert.1>
		insert("TPEL", "fell");
 800371e:	46a4      	mov	ip, r4
 8003720:	49b4      	ldr	r1, [pc, #720]	@ (80039f4 <hashInit.0+0x217c>)
 8003722:	48b5      	ldr	r0, [pc, #724]	@ (80039f8 <hashInit.0+0x2180>)
 8003724:	f7fd fffa 	bl	800171c <insert.1>
		insert("TORDZ", "towards");
 8003728:	46a4      	mov	ip, r4
 800372a:	49b4      	ldr	r1, [pc, #720]	@ (80039fc <hashInit.0+0x2184>)
 800372c:	48b4      	ldr	r0, [pc, #720]	@ (8003a00 <hashInit.0+0x2188>)
 800372e:	f7fd fff5 	bl	800171c <insert.1>
		insert("HAOUPL", "human");
 8003732:	46a4      	mov	ip, r4
 8003734:	49b3      	ldr	r1, [pc, #716]	@ (8003a04 <hashInit.0+0x218c>)
 8003736:	48b4      	ldr	r0, [pc, #720]	@ (8003a08 <hashInit.0+0x2190>)
 8003738:	f7fd fff0 	bl	800171c <insert.1>
		insert("KEPT", "kept");
 800373c:	46a4      	mov	ip, r4
 800373e:	49b3      	ldr	r1, [pc, #716]	@ (8003a0c <hashInit.0+0x2194>)
 8003740:	48b3      	ldr	r0, [pc, #716]	@ (8003a10 <hashInit.0+0x2198>)
 8003742:	f7fd ffeb 	bl	800171c <insert.1>
		insert("SHORT", "short");
 8003746:	46a4      	mov	ip, r4
 8003748:	49b2      	ldr	r1, [pc, #712]	@ (8003a14 <hashInit.0+0x219c>)
 800374a:	48b3      	ldr	r0, [pc, #716]	@ (8003a18 <hashInit.0+0x21a0>)
 800374c:	f7fd ffe6 	bl	800171c <insert.1>
		insert("TOUPB", "town");
 8003750:	46a4      	mov	ip, r4
 8003752:	49b2      	ldr	r1, [pc, #712]	@ (8003a1c <hashInit.0+0x21a4>)
 8003754:	48b2      	ldr	r0, [pc, #712]	@ (8003a20 <hashInit.0+0x21a8>)
 8003756:	f7fd ffe1 	bl	800171c <insert.1>
		insert("TPOLG", "following");
 800375a:	46a4      	mov	ip, r4
 800375c:	49b1      	ldr	r1, [pc, #708]	@ (8003a24 <hashInit.0+0x21ac>)
 800375e:	48b2      	ldr	r0, [pc, #712]	@ (8003a28 <hashInit.0+0x21b0>)
 8003760:	f7fd ffdc 	bl	800171c <insert.1>
		insert("TPHAOED", "need");
 8003764:	46a4      	mov	ip, r4
 8003766:	49b1      	ldr	r1, [pc, #708]	@ (8003a2c <hashInit.0+0x21b4>)
 8003768:	48b1      	ldr	r0, [pc, #708]	@ (8003a30 <hashInit.0+0x21b8>)
 800376a:	f7fd ffd7 	bl	800171c <insert.1>
		insert("KAUS", "cause");
 800376e:	46a4      	mov	ip, r4
 8003770:	49b0      	ldr	r1, [pc, #704]	@ (8003a34 <hashInit.0+0x21bc>)
 8003772:	48b1      	ldr	r0, [pc, #708]	@ (8003a38 <hashInit.0+0x21c0>)
 8003774:	f7fd ffd2 	bl	800171c <insert.1>
		insert("PHET", "met");
 8003778:	46a4      	mov	ip, r4
 800377a:	49b0      	ldr	r1, [pc, #704]	@ (8003a3c <hashInit.0+0x21c4>)
 800377c:	48b0      	ldr	r0, [pc, #704]	@ (8003a40 <hashInit.0+0x21c8>)
 800377e:	f7fd ffcd 	bl	800171c <insert.1>
		insert("AOEPBG", "evening");
 8003782:	46a4      	mov	ip, r4
 8003784:	49af      	ldr	r1, [pc, #700]	@ (8003a44 <hashInit.0+0x21cc>)
 8003786:	48b0      	ldr	r0, [pc, #704]	@ (8003a48 <hashInit.0+0x21d0>)
 8003788:	f7fd ffc8 	bl	800171c <insert.1>
		insert("RURPBD", "returned");
 800378c:	46a4      	mov	ip, r4
 800378e:	49af      	ldr	r1, [pc, #700]	@ (8003a4c <hashInit.0+0x21d4>)
 8003790:	48af      	ldr	r0, [pc, #700]	@ (8003a50 <hashInit.0+0x21d8>)
 8003792:	f7fd ffc3 	bl	800171c <insert.1>
		insert("TPAOEUF", "five");
 8003796:	46a4      	mov	ip, r4
 8003798:	49ae      	ldr	r1, [pc, #696]	@ (8003a54 <hashInit.0+0x21dc>)
 800379a:	48af      	ldr	r0, [pc, #700]	@ (8003a58 <hashInit.0+0x21e0>)
 800379c:	f7fd ffbe 	bl	800171c <insert.1>
		insert("STROPBG", "strong");
 80037a0:	46a4      	mov	ip, r4
 80037a2:	49ae      	ldr	r1, [pc, #696]	@ (8003a5c <hashInit.0+0x21e4>)
 80037a4:	48ae      	ldr	r0, [pc, #696]	@ (8003a60 <hashInit.0+0x21e8>)
 80037a6:	f7fd ffb9 	bl	800171c <insert.1>
		insert("ABL", "able");
 80037aa:	46a4      	mov	ip, r4
 80037ac:	49ad      	ldr	r1, [pc, #692]	@ (8003a64 <hashInit.0+0x21ec>)
 80037ae:	48ae      	ldr	r0, [pc, #696]	@ (8003a68 <hashInit.0+0x21f0>)
 80037b0:	f7fd ffb4 	bl	800171c <insert.1>
		insert("TPREFRPB", "French");
 80037b4:	46a4      	mov	ip, r4
 80037b6:	49ad      	ldr	r1, [pc, #692]	@ (8003a6c <hashInit.0+0x21f4>)
 80037b8:	48ad      	ldr	r0, [pc, #692]	@ (8003a70 <hashInit.0+0x21f8>)
 80037ba:	f7fd ffaf 	bl	800171c <insert.1>
		insert("HREUF", "live");
 80037be:	46a4      	mov	ip, r4
 80037c0:	49ac      	ldr	r1, [pc, #688]	@ (8003a74 <hashInit.0+0x21fc>)
 80037c2:	48ad      	ldr	r0, [pc, #692]	@ (8003a78 <hashInit.0+0x2200>)
 80037c4:	f7fd ffaa 	bl	800171c <insert.1>
		insert("HRA*ED", "lady");
 80037c8:	46a4      	mov	ip, r4
 80037ca:	49ac      	ldr	r1, [pc, #688]	@ (8003a7c <hashInit.0+0x2204>)
 80037cc:	48ac      	ldr	r0, [pc, #688]	@ (8003a80 <hashInit.0+0x2208>)
 80037ce:	f7fd ffa5 	bl	800171c <insert.1>
		insert("SUBT", "subject");
 80037d2:	46a4      	mov	ip, r4
 80037d4:	49ab      	ldr	r1, [pc, #684]	@ (8003a84 <hashInit.0+0x220c>)
 80037d6:	48ac      	ldr	r0, [pc, #688]	@ (8003a88 <hashInit.0+0x2210>)
 80037d8:	f7fd ffa0 	bl	800171c <insert.1>
		insert("S*P/TPH*", "Sn");
 80037dc:	46a4      	mov	ip, r4
 80037de:	49ab      	ldr	r1, [pc, #684]	@ (8003a8c <hashInit.0+0x2214>)
 80037e0:	48ab      	ldr	r0, [pc, #684]	@ (8003a90 <hashInit.0+0x2218>)
 80037e2:	f7fd ff9b 	bl	800171c <insert.1>
		insert("AEPBS", "answer");
 80037e6:	46a4      	mov	ip, r4
 80037e8:	49aa      	ldr	r1, [pc, #680]	@ (8003a94 <hashInit.0+0x221c>)
 80037ea:	48ab      	ldr	r0, [pc, #684]	@ (8003a98 <hashInit.0+0x2220>)
 80037ec:	f7fd ff96 	bl	800171c <insert.1>
		insert("SAE", "sea");
 80037f0:	46a4      	mov	ip, r4
 80037f2:	49aa      	ldr	r1, [pc, #680]	@ (8003a9c <hashInit.0+0x2224>)
 80037f4:	48aa      	ldr	r0, [pc, #680]	@ (8003aa0 <hashInit.0+0x2228>)
 80037f6:	f7fd ff91 	bl	800171c <insert.1>
		insert("TPAOER", "fear");
 80037fa:	46a4      	mov	ip, r4
 80037fc:	49a9      	ldr	r1, [pc, #676]	@ (8003aa4 <hashInit.0+0x222c>)
 80037fe:	48aa      	ldr	r0, [pc, #680]	@ (8003aa8 <hashInit.0+0x2230>)
 8003800:	f7fd ff8c 	bl	800171c <insert.1>
		insert("URPBD", "understand");
 8003804:	46a4      	mov	ip, r4
 8003806:	49a9      	ldr	r1, [pc, #676]	@ (8003aac <hashInit.0+0x2234>)
 8003808:	48a9      	ldr	r0, [pc, #676]	@ (8003ab0 <hashInit.0+0x2238>)
 800380a:	f7fd ff87 	bl	800171c <insert.1>
		insert("HARD", "hard");
 800380e:	46a4      	mov	ip, r4
 8003810:	49a8      	ldr	r1, [pc, #672]	@ (8003ab4 <hashInit.0+0x223c>)
 8003812:	48a9      	ldr	r0, [pc, #676]	@ (8003ab8 <hashInit.0+0x2240>)
 8003814:	f7fd ff82 	bl	800171c <insert.1>
		insert("TERPLS", "terms");
 8003818:	46a4      	mov	ip, r4
 800381a:	49a8      	ldr	r1, [pc, #672]	@ (8003abc <hashInit.0+0x2244>)
 800381c:	48a8      	ldr	r0, [pc, #672]	@ (8003ac0 <hashInit.0+0x2248>)
 800381e:	f7fd ff7d 	bl	800171c <insert.1>
		insert("TKOUT", "doubt");
 8003822:	46a4      	mov	ip, r4
 8003824:	49a7      	ldr	r1, [pc, #668]	@ (8003ac4 <hashInit.0+0x224c>)
 8003826:	48a8      	ldr	r0, [pc, #672]	@ (8003ac8 <hashInit.0+0x2250>)
 8003828:	f7fd ff78 	bl	800171c <insert.1>
		insert("ARPBD", "around");
 800382c:	46a4      	mov	ip, r4
 800382e:	49a7      	ldr	r1, [pc, #668]	@ (8003acc <hashInit.0+0x2254>)
 8003830:	48a7      	ldr	r0, [pc, #668]	@ (8003ad0 <hashInit.0+0x2258>)
 8003832:	f7fd ff73 	bl	800171c <insert.1>
		insert("SK", "ask");
 8003836:	46a4      	mov	ip, r4
 8003838:	49a6      	ldr	r1, [pc, #664]	@ (8003ad4 <hashInit.0+0x225c>)
 800383a:	48a7      	ldr	r0, [pc, #668]	@ (8003ad8 <hashInit.0+0x2260>)
 800383c:	f7fd ff6e 	bl	800171c <insert.1>
		insert("ARPLS", "arms");
 8003840:	46a4      	mov	ip, r4
 8003842:	49a6      	ldr	r1, [pc, #664]	@ (8003adc <hashInit.0+0x2264>)
 8003844:	48a6      	ldr	r0, [pc, #664]	@ (8003ae0 <hashInit.0+0x2268>)
 8003846:	f7fd ff69 	bl	800171c <insert.1>
		insert("TURPB", "turn");
 800384a:	46a4      	mov	ip, r4
 800384c:	49a5      	ldr	r1, [pc, #660]	@ (8003ae4 <hashInit.0+0x226c>)
 800384e:	48a6      	ldr	r0, [pc, #664]	@ (8003ae8 <hashInit.0+0x2270>)
 8003850:	f7fd ff64 	bl	800171c <insert.1>
		insert("SEPBS", "sense");
 8003854:	46a4      	mov	ip, r4
 8003856:	49a5      	ldr	r1, [pc, #660]	@ (8003aec <hashInit.0+0x2274>)
 8003858:	48a5      	ldr	r0, [pc, #660]	@ (8003af0 <hashInit.0+0x2278>)
 800385a:	f7fd ff5f 	bl	800171c <insert.1>
		insert("SAOEPLS", "seems");
 800385e:	46a4      	mov	ip, r4
 8003860:	49a4      	ldr	r1, [pc, #656]	@ (8003af4 <hashInit.0+0x227c>)
 8003862:	48a5      	ldr	r0, [pc, #660]	@ (8003af8 <hashInit.0+0x2280>)
 8003864:	f7fd ff5a 	bl	800171c <insert.1>
		insert("PWHRABG", "black");
 8003868:	46a4      	mov	ip, r4
 800386a:	49a4      	ldr	r1, [pc, #656]	@ (8003afc <hashInit.0+0x2284>)
 800386c:	48a4      	ldr	r0, [pc, #656]	@ (8003b00 <hashInit.0+0x2288>)
 800386e:	f7fd ff55 	bl	800171c <insert.1>
		insert("PWREU", "bring");
 8003872:	46a4      	mov	ip, r4
 8003874:	49a3      	ldr	r1, [pc, #652]	@ (8003b04 <hashInit.0+0x228c>)
 8003876:	48a4      	ldr	r0, [pc, #656]	@ (8003b08 <hashInit.0+0x2290>)
 8003878:	f7fd ff50 	bl	800171c <insert.1>
		insert("TPOLD", "followed");
 800387c:	46a4      	mov	ip, r4
 800387e:	49a3      	ldr	r1, [pc, #652]	@ (8003b0c <hashInit.0+0x2294>)
 8003880:	48a3      	ldr	r0, [pc, #652]	@ (8003b10 <hashInit.0+0x2298>)
 8003882:	f7fd ff4b 	bl	800171c <insert.1>
		insert("PWAOUFL", "beautiful");
 8003886:	46a4      	mov	ip, r4
 8003888:	49a2      	ldr	r1, [pc, #648]	@ (8003b14 <hashInit.0+0x229c>)
 800388a:	48a3      	ldr	r0, [pc, #652]	@ (8003b18 <hashInit.0+0x22a0>)
 800388c:	f7fd ff46 	bl	800171c <insert.1>
		insert("KHROES", "close");
 8003890:	46a4      	mov	ip, r4
 8003892:	49a2      	ldr	r1, [pc, #648]	@ (8003b1c <hashInit.0+0x22a4>)
 8003894:	48a2      	ldr	r0, [pc, #648]	@ (8003b20 <hashInit.0+0x22a8>)
 8003896:	f7fd ff41 	bl	800171c <insert.1>
		insert("TKARBG", "dark");
 800389a:	46a4      	mov	ip, r4
 800389c:	49a1      	ldr	r1, [pc, #644]	@ (8003b24 <hashInit.0+0x22ac>)
 800389e:	48a2      	ldr	r0, [pc, #648]	@ (8003b28 <hashInit.0+0x22b0>)
 80038a0:	f7fd ff3c 	bl	800171c <insert.1>
		insert("HOLD", "hold");
 80038a4:	46a4      	mov	ip, r4
 80038a6:	49a1      	ldr	r1, [pc, #644]	@ (8003b2c <hashInit.0+0x22b4>)
 80038a8:	48a1      	ldr	r0, [pc, #644]	@ (8003b30 <hashInit.0+0x22b8>)
 80038aa:	f7fd ff37 	bl	800171c <insert.1>
		insert("KRAR", "character");
 80038ae:	46a4      	mov	ip, r4
 80038b0:	49a0      	ldr	r1, [pc, #640]	@ (8003b34 <hashInit.0+0x22bc>)
 80038b2:	48a1      	ldr	r0, [pc, #644]	@ (8003b38 <hashInit.0+0x22c0>)
 80038b4:	f7fd ff32 	bl	800171c <insert.1>
		insert("SORT", "sort");
 80038b8:	46a4      	mov	ip, r4
 80038ba:	49a0      	ldr	r1, [pc, #640]	@ (8003b3c <hashInit.0+0x22c4>)
 80038bc:	48a0      	ldr	r0, [pc, #640]	@ (8003b40 <hashInit.0+0x22c8>)
 80038be:	f7fd ff2d 	bl	800171c <insert.1>
		insert("SAOEUT", "sight");
 80038c2:	46a4      	mov	ip, r4
 80038c4:	499f      	ldr	r1, [pc, #636]	@ (8003b44 <hashInit.0+0x22cc>)
 80038c6:	48a0      	ldr	r0, [pc, #640]	@ (8003b48 <hashInit.0+0x22d0>)
 80038c8:	f7fd ff28 	bl	800171c <insert.1>
		insert("TEPB", "ten");
 80038cc:	46a4      	mov	ip, r4
 80038ce:	499f      	ldr	r1, [pc, #636]	@ (8003b4c <hashInit.0+0x22d4>)
 80038d0:	489f      	ldr	r0, [pc, #636]	@ (8003b50 <hashInit.0+0x22d8>)
 80038d2:	f7fd ff23 	bl	800171c <insert.1>
		insert("SHOE", "show");
 80038d6:	46a4      	mov	ip, r4
 80038d8:	499e      	ldr	r1, [pc, #632]	@ (8003b54 <hashInit.0+0x22dc>)
 80038da:	489f      	ldr	r0, [pc, #636]	@ (8003b58 <hashInit.0+0x22e0>)
 80038dc:	f7fd ff1e 	bl	800171c <insert.1>
		insert("PAERT", "party");
 80038e0:	46a4      	mov	ip, r4
 80038e2:	499e      	ldr	r1, [pc, #632]	@ (8003b5c <hashInit.0+0x22e4>)
 80038e4:	489e      	ldr	r0, [pc, #632]	@ (8003b60 <hashInit.0+0x22e8>)
 80038e6:	f7fd ff19 	bl	800171c <insert.1>
		insert("TPAOEUPB", "fine");
 80038ea:	46a4      	mov	ip, r4
 80038ec:	499d      	ldr	r1, [pc, #628]	@ (8003b64 <hashInit.0+0x22ec>)
 80038ee:	489e      	ldr	r0, [pc, #632]	@ (8003b68 <hashInit.0+0x22f0>)
 80038f0:	f7fd ff14 	bl	800171c <insert.1>
		insert("KWR*/*E", "ye");
 80038f4:	46a4      	mov	ip, r4
 80038f6:	499d      	ldr	r1, [pc, #628]	@ (8003b6c <hashInit.0+0x22f4>)
 80038f8:	489d      	ldr	r0, [pc, #628]	@ (8003b70 <hashInit.0+0x22f8>)
 80038fa:	f7fd ff0f 	bl	800171c <insert.1>
		insert("R-D", "ready");
 80038fe:	46a4      	mov	ip, r4
 8003900:	499c      	ldr	r1, [pc, #624]	@ (8003b74 <hashInit.0+0x22fc>)
 8003902:	489d      	ldr	r0, [pc, #628]	@ (8003b78 <hashInit.0+0x2300>)
 8003904:	f7fd ff0a 	bl	800171c <insert.1>
		insert("STOER", "story");
 8003908:	46a4      	mov	ip, r4
 800390a:	499c      	ldr	r1, [pc, #624]	@ (8003b7c <hashInit.0+0x2304>)
 800390c:	489c      	ldr	r0, [pc, #624]	@ (8003b80 <hashInit.0+0x2308>)
 800390e:	f7fd ff05 	bl	800171c <insert.1>
		insert("KPHOPB", "common");
 8003912:	46a4      	mov	ip, r4
 8003914:	499b      	ldr	r1, [pc, #620]	@ (8003b84 <hashInit.0+0x230c>)
 8003916:	489c      	ldr	r0, [pc, #624]	@ (8003b88 <hashInit.0+0x2310>)
 8003918:	f7fd ff00 	bl	800171c <insert.1>
		insert("PWAOBG", "book");
 800391c:	46a4      	mov	ip, r4
 800391e:	499b      	ldr	r1, [pc, #620]	@ (8003b8c <hashInit.0+0x2314>)
 8003920:	489b      	ldr	r0, [pc, #620]	@ (8003b90 <hashInit.0+0x2318>)
 8003922:	f7fd fefb 	bl	800171c <insert.1>
		insert("TRO*PBG", "electronic");
 8003926:	46a4      	mov	ip, r4
 8003928:	499a      	ldr	r1, [pc, #616]	@ (8003b94 <hashInit.0+0x231c>)
 800392a:	489b      	ldr	r0, [pc, #620]	@ (8003b98 <hashInit.0+0x2320>)
 800392c:	f7fd fef6 	bl	800171c <insert.1>
		insert("TAUBG", "talk");
 8003930:	46a4      	mov	ip, r4
 8003932:	499a      	ldr	r1, [pc, #616]	@ (8003b9c <hashInit.0+0x2324>)
 8003934:	489a      	ldr	r0, [pc, #616]	@ (8003ba0 <hashInit.0+0x2328>)
 8003936:	f7fd fef1 	bl	800171c <insert.1>
		insert("K-T", "account");
 800393a:	46a4      	mov	ip, r4
 800393c:	4999      	ldr	r1, [pc, #612]	@ (8003ba4 <hashInit.0+0x232c>)
 800393e:	489a      	ldr	r0, [pc, #616]	@ (8003ba8 <hashInit.0+0x2330>)
 8003940:	f7fd feec 	bl	800171c <insert.1>
		insert("PHARBG", "mark");
 8003944:	46a4      	mov	ip, r4
 8003946:	4999      	ldr	r1, [pc, #612]	@ (8003bac <hashInit.0+0x2334>)
 8003948:	4899      	ldr	r0, [pc, #612]	@ (8003bb0 <hashInit.0+0x2338>)
 800394a:	f7fd fee7 	bl	800171c <insert.1>
		insert("TR", "interest");
 800394e:	46a4      	mov	ip, r4
 8003950:	4998      	ldr	r1, [pc, #608]	@ (8003bb4 <hashInit.0+0x233c>)
 8003952:	4899      	ldr	r0, [pc, #612]	@ (8003bb8 <hashInit.0+0x2340>)
 8003954:	f7fd fee2 	bl	800171c <insert.1>
		insert("WREUPB", "written");
 8003958:	46a4      	mov	ip, r4
 800395a:	4998      	ldr	r1, [pc, #608]	@ (8003bbc <hashInit.0+0x2344>)
 800395c:	4898      	ldr	r0, [pc, #608]	@ (8003bc0 <hashInit.0+0x2348>)
 800395e:	f7fd fedd 	bl	800171c <insert.1>
		insert("K-PBT", "can't");
 8003962:	46a4      	mov	ip, r4
 8003964:	4997      	ldr	r1, [pc, #604]	@ (8003bc4 <hashInit.0+0x234c>)
 8003966:	4898      	ldr	r0, [pc, #608]	@ (8003bc8 <hashInit.0+0x2350>)
 8003968:	f7fd fed8 	bl	800171c <insert.1>
		insert("PWED", "bed");
 800396c:	46a4      	mov	ip, r4
 800396e:	4997      	ldr	r1, [pc, #604]	@ (8003bcc <hashInit.0+0x2354>)
 8003970:	4897      	ldr	r0, [pc, #604]	@ (8003bd0 <hashInit.0+0x2358>)
 8003972:	f7fd fed3 	bl	800171c <insert.1>
		insert("TPHES", "necessary");
 8003976:	46a4      	mov	ip, r4
 8003978:	4996      	ldr	r1, [pc, #600]	@ (8003bd4 <hashInit.0+0x235c>)
 800397a:	4897      	ldr	r0, [pc, #604]	@ (8003bd8 <hashInit.0+0x2360>)
 800397c:	f7fd fece 	bl	800171c <insert.1>
		insert("AEUPBLG", "age");
 8003980:	46a4      	mov	ip, r4
 8003982:	4996      	ldr	r1, [pc, #600]	@ (8003bdc <hashInit.0+0x2364>)
 8003984:	4896      	ldr	r0, [pc, #600]	@ (8003be0 <hashInit.0+0x2368>)
 8003986:	f7fd fec9 	bl	800171c <insert.1>
		insert("ELS", "else");
 800398a:	46a4      	mov	ip, r4
 800398c:	4995      	ldr	r1, [pc, #596]	@ (8003be4 <hashInit.0+0x236c>)
 800398e:	4896      	ldr	r0, [pc, #600]	@ (8003be8 <hashInit.0+0x2370>)
 8003990:	f7fd fec4 	bl	800171c <insert.1>
		insert("TPORS", "force");
 8003994:	46a4      	mov	ip, r4
 8003996:	4995      	ldr	r1, [pc, #596]	@ (8003bec <hashInit.0+0x2374>)
 8003998:	4895      	ldr	r0, [pc, #596]	@ (8003bf0 <hashInit.0+0x2378>)
 800399a:	f7fd febf 	bl	800171c <insert.1>
		insert("KWR-D", "idea");
 800399e:	46a4      	mov	ip, r4
 80039a0:	4994      	ldr	r1, [pc, #592]	@ (8003bf4 <hashInit.0+0x237c>)
 80039a2:	4895      	ldr	r0, [pc, #596]	@ (8003bf8 <hashInit.0+0x2380>)
 80039a4:	f7fd feba 	bl	800171c <insert.1>
		insert("HRORPBG", "longer");
 80039a8:	46a4      	mov	ip, r4
 80039aa:	4994      	ldr	r1, [pc, #592]	@ (8003bfc <hashInit.0+0x2384>)
 80039ac:	4894      	ldr	r0, [pc, #592]	@ (8003c00 <hashInit.0+0x2388>)
 80039ae:	f7fd feb5 	bl	800171c <insert.1>
		insert("ART", "art");
 80039b2:	46a4      	mov	ip, r4
 80039b4:	4993      	ldr	r1, [pc, #588]	@ (8003c04 <hashInit.0+0x238c>)
 80039b6:	4894      	ldr	r0, [pc, #592]	@ (8003c08 <hashInit.0+0x2390>)
 80039b8:	f7fd feb0 	bl	800171c <insert.1>
		insert("SPOEBG", "spoke");
 80039bc:	46a4      	mov	ip, r4
 80039be:	4993      	ldr	r1, [pc, #588]	@ (8003c0c <hashInit.0+0x2394>)
 80039c0:	4893      	ldr	r0, [pc, #588]	@ (8003c10 <hashInit.0+0x2398>)
 80039c2:	f7fd feab 	bl	800171c <insert.1>
		insert("KRAOS", "across");
 80039c6:	46a4      	mov	ip, r4
 80039c8:	4992      	ldr	r1, [pc, #584]	@ (8003c14 <hashInit.0+0x239c>)
 80039ca:	4893      	ldr	r0, [pc, #588]	@ (8003c18 <hashInit.0+0x23a0>)
 80039cc:	f7fd fea6 	bl	800171c <insert.1>
		insert("PWROER", "brother");
 80039d0:	46a4      	mov	ip, r4
 80039d2:	4992      	ldr	r1, [pc, #584]	@ (8003c1c <hashInit.0+0x23a4>)
 80039d4:	4892      	ldr	r0, [pc, #584]	@ (8003c20 <hashInit.0+0x23a8>)
 80039d6:	f7fd fea1 	bl	800171c <insert.1>
		insert("ERL", "early");
 80039da:	46a4      	mov	ip, r4
 80039dc:	4991      	ldr	r1, [pc, #580]	@ (8003c24 <hashInit.0+0x23ac>)
 80039de:	4892      	ldr	r0, [pc, #584]	@ (8003c28 <hashInit.0+0x23b0>)
 80039e0:	f7fd fe9c 	bl	800171c <insert.1>
		insert("OT", "ought");
 80039e4:	46a4      	mov	ip, r4
 80039e6:	4991      	ldr	r1, [pc, #580]	@ (8003c2c <hashInit.0+0x23b4>)
 80039e8:	e122      	b.n	8003c30 <hashInit.0+0x23b8>
 80039ea:	bf00      	nop
 80039ec:	0800ed8c 	.word	0x0800ed8c
 80039f0:	0800ed98 	.word	0x0800ed98
 80039f4:	0800ed9c 	.word	0x0800ed9c
 80039f8:	0800eda4 	.word	0x0800eda4
 80039fc:	0800edac 	.word	0x0800edac
 8003a00:	0800edb4 	.word	0x0800edb4
 8003a04:	0800edbc 	.word	0x0800edbc
 8003a08:	0800edc4 	.word	0x0800edc4
 8003a0c:	0800edcc 	.word	0x0800edcc
 8003a10:	0800edd4 	.word	0x0800edd4
 8003a14:	0800eddc 	.word	0x0800eddc
 8003a18:	0800ede4 	.word	0x0800ede4
 8003a1c:	0800edec 	.word	0x0800edec
 8003a20:	0800edf4 	.word	0x0800edf4
 8003a24:	0800edfc 	.word	0x0800edfc
 8003a28:	0800ee08 	.word	0x0800ee08
 8003a2c:	0800ee10 	.word	0x0800ee10
 8003a30:	0800ee18 	.word	0x0800ee18
 8003a34:	0800d5b8 	.word	0x0800d5b8
 8003a38:	0800ee20 	.word	0x0800ee20
 8003a3c:	0800ee28 	.word	0x0800ee28
 8003a40:	0800ee2c 	.word	0x0800ee2c
 8003a44:	0800ee34 	.word	0x0800ee34
 8003a48:	0800ee3c 	.word	0x0800ee3c
 8003a4c:	0800ee44 	.word	0x0800ee44
 8003a50:	0800ee50 	.word	0x0800ee50
 8003a54:	0800ee58 	.word	0x0800ee58
 8003a58:	0800ee60 	.word	0x0800ee60
 8003a5c:	0800ee68 	.word	0x0800ee68
 8003a60:	0800ee70 	.word	0x0800ee70
 8003a64:	0800ee78 	.word	0x0800ee78
 8003a68:	0800ee80 	.word	0x0800ee80
 8003a6c:	0800ee84 	.word	0x0800ee84
 8003a70:	0800ee8c 	.word	0x0800ee8c
 8003a74:	0800ee98 	.word	0x0800ee98
 8003a78:	0800eea0 	.word	0x0800eea0
 8003a7c:	0800eea8 	.word	0x0800eea8
 8003a80:	0800eeb0 	.word	0x0800eeb0
 8003a84:	0800eeb8 	.word	0x0800eeb8
 8003a88:	0800eec0 	.word	0x0800eec0
 8003a8c:	0800eec8 	.word	0x0800eec8
 8003a90:	0800eecc 	.word	0x0800eecc
 8003a94:	0800eed8 	.word	0x0800eed8
 8003a98:	0800eee0 	.word	0x0800eee0
 8003a9c:	0800eee8 	.word	0x0800eee8
 8003aa0:	0800eeec 	.word	0x0800eeec
 8003aa4:	0800eef0 	.word	0x0800eef0
 8003aa8:	0800eef8 	.word	0x0800eef8
 8003aac:	0800ef00 	.word	0x0800ef00
 8003ab0:	0800ef0c 	.word	0x0800ef0c
 8003ab4:	0800ef14 	.word	0x0800ef14
 8003ab8:	0800ef1c 	.word	0x0800ef1c
 8003abc:	0800ef24 	.word	0x0800ef24
 8003ac0:	0800ef2c 	.word	0x0800ef2c
 8003ac4:	0800ef34 	.word	0x0800ef34
 8003ac8:	0800ef3c 	.word	0x0800ef3c
 8003acc:	0800ef44 	.word	0x0800ef44
 8003ad0:	0800ef4c 	.word	0x0800ef4c
 8003ad4:	0800ef54 	.word	0x0800ef54
 8003ad8:	0800ef58 	.word	0x0800ef58
 8003adc:	0800ef5c 	.word	0x0800ef5c
 8003ae0:	0800ef64 	.word	0x0800ef64
 8003ae4:	0800ef6c 	.word	0x0800ef6c
 8003ae8:	0800ef74 	.word	0x0800ef74
 8003aec:	0800ef7c 	.word	0x0800ef7c
 8003af0:	0800ef84 	.word	0x0800ef84
 8003af4:	0800ef8c 	.word	0x0800ef8c
 8003af8:	0800ef94 	.word	0x0800ef94
 8003afc:	0800ef9c 	.word	0x0800ef9c
 8003b00:	0800efa4 	.word	0x0800efa4
 8003b04:	0800efac 	.word	0x0800efac
 8003b08:	0800efb4 	.word	0x0800efb4
 8003b0c:	0800efbc 	.word	0x0800efbc
 8003b10:	0800efc8 	.word	0x0800efc8
 8003b14:	0800efd0 	.word	0x0800efd0
 8003b18:	0800efdc 	.word	0x0800efdc
 8003b1c:	0800efe4 	.word	0x0800efe4
 8003b20:	0800efec 	.word	0x0800efec
 8003b24:	0800eff4 	.word	0x0800eff4
 8003b28:	0800effc 	.word	0x0800effc
 8003b2c:	0800f004 	.word	0x0800f004
 8003b30:	0800f00c 	.word	0x0800f00c
 8003b34:	0800f014 	.word	0x0800f014
 8003b38:	0800f020 	.word	0x0800f020
 8003b3c:	0800f028 	.word	0x0800f028
 8003b40:	0800f030 	.word	0x0800f030
 8003b44:	0800f038 	.word	0x0800f038
 8003b48:	0800f040 	.word	0x0800f040
 8003b4c:	0800f048 	.word	0x0800f048
 8003b50:	0800f04c 	.word	0x0800f04c
 8003b54:	0800f054 	.word	0x0800f054
 8003b58:	0800f05c 	.word	0x0800f05c
 8003b5c:	0800f064 	.word	0x0800f064
 8003b60:	0800f06c 	.word	0x0800f06c
 8003b64:	0800f074 	.word	0x0800f074
 8003b68:	0800f07c 	.word	0x0800f07c
 8003b6c:	0800f088 	.word	0x0800f088
 8003b70:	0800f08c 	.word	0x0800f08c
 8003b74:	0800f094 	.word	0x0800f094
 8003b78:	0800f09c 	.word	0x0800f09c
 8003b7c:	0800f0a0 	.word	0x0800f0a0
 8003b80:	0800f0a8 	.word	0x0800f0a8
 8003b84:	0800f0b0 	.word	0x0800f0b0
 8003b88:	0800f0b8 	.word	0x0800f0b8
 8003b8c:	0800f0c0 	.word	0x0800f0c0
 8003b90:	0800f0c8 	.word	0x0800f0c8
 8003b94:	0800f0d0 	.word	0x0800f0d0
 8003b98:	0800f0dc 	.word	0x0800f0dc
 8003b9c:	0800f0e4 	.word	0x0800f0e4
 8003ba0:	0800f0ec 	.word	0x0800f0ec
 8003ba4:	0800f0f4 	.word	0x0800f0f4
 8003ba8:	0800f0fc 	.word	0x0800f0fc
 8003bac:	0800f100 	.word	0x0800f100
 8003bb0:	0800f108 	.word	0x0800f108
 8003bb4:	0800f110 	.word	0x0800f110
 8003bb8:	0800f11c 	.word	0x0800f11c
 8003bbc:	0800f120 	.word	0x0800f120
 8003bc0:	0800f128 	.word	0x0800f128
 8003bc4:	0800f130 	.word	0x0800f130
 8003bc8:	0800f138 	.word	0x0800f138
 8003bcc:	0800f140 	.word	0x0800f140
 8003bd0:	0800f144 	.word	0x0800f144
 8003bd4:	0800f14c 	.word	0x0800f14c
 8003bd8:	0800f158 	.word	0x0800f158
 8003bdc:	0800f160 	.word	0x0800f160
 8003be0:	0800f164 	.word	0x0800f164
 8003be4:	0800f16c 	.word	0x0800f16c
 8003be8:	0800f174 	.word	0x0800f174
 8003bec:	0800f178 	.word	0x0800f178
 8003bf0:	0800f180 	.word	0x0800f180
 8003bf4:	0800f188 	.word	0x0800f188
 8003bf8:	0800f190 	.word	0x0800f190
 8003bfc:	0800f198 	.word	0x0800f198
 8003c00:	0800f1a0 	.word	0x0800f1a0
 8003c04:	0800f1a8 	.word	0x0800f1a8
 8003c08:	0800f1ac 	.word	0x0800f1ac
 8003c0c:	0800f1b0 	.word	0x0800f1b0
 8003c10:	0800f1b8 	.word	0x0800f1b8
 8003c14:	0800f1c0 	.word	0x0800f1c0
 8003c18:	0800f1c8 	.word	0x0800f1c8
 8003c1c:	0800f1d0 	.word	0x0800f1d0
 8003c20:	0800f1d8 	.word	0x0800f1d8
 8003c24:	0800f1e0 	.word	0x0800f1e0
 8003c28:	0800f1e8 	.word	0x0800f1e8
 8003c2c:	0800f1ec 	.word	0x0800f1ec
 8003c30:	48b5      	ldr	r0, [pc, #724]	@ (8003f08 <hashInit.0+0x2690>)
 8003c32:	f7fd fd73 	bl	800171c <insert.1>
		insert("STAOEUPLS", "sometimes");
 8003c36:	46a4      	mov	ip, r4
 8003c38:	49b4      	ldr	r1, [pc, #720]	@ (8003f0c <hashInit.0+0x2694>)
 8003c3a:	48b5      	ldr	r0, [pc, #724]	@ (8003f10 <hashInit.0+0x2698>)
 8003c3c:	f7fd fd6e 	bl	800171c <insert.1>
		insert("HRAOEUPB", "line");
 8003c40:	46a4      	mov	ip, r4
 8003c42:	49b4      	ldr	r1, [pc, #720]	@ (8003f14 <hashInit.0+0x269c>)
 8003c44:	48b4      	ldr	r0, [pc, #720]	@ (8003f18 <hashInit.0+0x26a0>)
 8003c46:	f7fd fd69 	bl	800171c <insert.1>
		insert("SAEUG", "saying");
 8003c4a:	46a4      	mov	ip, r4
 8003c4c:	49b3      	ldr	r1, [pc, #716]	@ (8003f1c <hashInit.0+0x26a4>)
 8003c4e:	48b4      	ldr	r0, [pc, #720]	@ (8003f20 <hashInit.0+0x26a8>)
 8003c50:	f7fd fd64 	bl	800171c <insert.1>
		insert("TAEUBL", "table");
 8003c54:	46a4      	mov	ip, r4
 8003c56:	49b3      	ldr	r1, [pc, #716]	@ (8003f24 <hashInit.0+0x26ac>)
 8003c58:	48b3      	ldr	r0, [pc, #716]	@ (8003f28 <hashInit.0+0x26b0>)
 8003c5a:	f7fd fd5f 	bl	800171c <insert.1>
		insert("A/PAOERD", "appeared");
 8003c5e:	46a4      	mov	ip, r4
 8003c60:	49b2      	ldr	r1, [pc, #712]	@ (8003f2c <hashInit.0+0x26b4>)
 8003c62:	48b3      	ldr	r0, [pc, #716]	@ (8003f30 <hashInit.0+0x26b8>)
 8003c64:	f7fd fd5a 	bl	800171c <insert.1>
		insert("REUFR", "river");
 8003c68:	46a4      	mov	ip, r4
 8003c6a:	49b2      	ldr	r1, [pc, #712]	@ (8003f34 <hashInit.0+0x26bc>)
 8003c6c:	48b2      	ldr	r0, [pc, #712]	@ (8003f38 <hashInit.0+0x26c0>)
 8003c6e:	f7fd fd55 	bl	800171c <insert.1>
		insert("T-PBD", "continued");
 8003c72:	46a4      	mov	ip, r4
 8003c74:	49b1      	ldr	r1, [pc, #708]	@ (8003f3c <hashInit.0+0x26c4>)
 8003c76:	48b2      	ldr	r0, [pc, #712]	@ (8003f40 <hashInit.0+0x26c8>)
 8003c78:	f7fd fd50 	bl	800171c <insert.1>
		insert("AOEU", "eye");
 8003c7c:	46a4      	mov	ip, r4
 8003c7e:	49b1      	ldr	r1, [pc, #708]	@ (8003f44 <hashInit.0+0x26cc>)
 8003c80:	48b1      	ldr	r0, [pc, #708]	@ (8003f48 <hashInit.0+0x26d0>)
 8003c82:	f7fd fd4b 	bl	800171c <insert.1>
		insert("*E/T*/KWR*", "ety");
 8003c86:	46a4      	mov	ip, r4
 8003c88:	49b0      	ldr	r1, [pc, #704]	@ (8003f4c <hashInit.0+0x26d4>)
 8003c8a:	48b1      	ldr	r0, [pc, #708]	@ (8003f50 <hashInit.0+0x26d8>)
 8003c8c:	f7fd fd46 	bl	800171c <insert.1>
		insert("SUPB", "sun");
 8003c90:	46a4      	mov	ip, r4
 8003c92:	49b0      	ldr	r1, [pc, #704]	@ (8003f54 <hashInit.0+0x26dc>)
 8003c94:	48b0      	ldr	r0, [pc, #704]	@ (8003f58 <hashInit.0+0x26e0>)
 8003c96:	f7fd fd41 	bl	800171c <insert.1>
		insert("TPH-FGS", "information");
 8003c9a:	46a4      	mov	ip, r4
 8003c9c:	49af      	ldr	r1, [pc, #700]	@ (8003f5c <hashInit.0+0x26e4>)
 8003c9e:	48b0      	ldr	r0, [pc, #704]	@ (8003f60 <hashInit.0+0x26e8>)
 8003ca0:	f7fd fd3c 	bl	800171c <insert.1>
		insert("HRAEURT", "later");
 8003ca4:	46a4      	mov	ip, r4
 8003ca6:	49af      	ldr	r1, [pc, #700]	@ (8003f64 <hashInit.0+0x26ec>)
 8003ca8:	48af      	ldr	r0, [pc, #700]	@ (8003f68 <hashInit.0+0x26f0>)
 8003caa:	f7fd fd37 	bl	800171c <insert.1>
		insert("EFRG", "everything");
 8003cae:	46a4      	mov	ip, r4
 8003cb0:	49ae      	ldr	r1, [pc, #696]	@ (8003f6c <hashInit.0+0x26f4>)
 8003cb2:	48af      	ldr	r0, [pc, #700]	@ (8003f70 <hashInit.0+0x26f8>)
 8003cb4:	f7fd fd32 	bl	800171c <insert.1>
		insert("RAOEFPD", "reached");
 8003cb8:	46a4      	mov	ip, r4
 8003cba:	49ae      	ldr	r1, [pc, #696]	@ (8003f74 <hashInit.0+0x26fc>)
 8003cbc:	48ae      	ldr	r0, [pc, #696]	@ (8003f78 <hashInit.0+0x2700>)
 8003cbe:	f7fd fd2d 	bl	800171c <insert.1>
		insert("SULD", "suddenly");
 8003cc2:	46a4      	mov	ip, r4
 8003cc4:	49ad      	ldr	r1, [pc, #692]	@ (8003f7c <hashInit.0+0x2704>)
 8003cc6:	48ae      	ldr	r0, [pc, #696]	@ (8003f80 <hashInit.0+0x2708>)
 8003cc8:	f7fd fd28 	bl	800171c <insert.1>
		insert("PAFT", "past");
 8003ccc:	46a4      	mov	ip, r4
 8003cce:	49ad      	ldr	r1, [pc, #692]	@ (8003f84 <hashInit.0+0x270c>)
 8003cd0:	48ad      	ldr	r0, [pc, #692]	@ (8003f88 <hashInit.0+0x2710>)
 8003cd2:	f7fd fd23 	bl	800171c <insert.1>
		insert("HOURS", "hours");
 8003cd6:	46a4      	mov	ip, r4
 8003cd8:	49ac      	ldr	r1, [pc, #688]	@ (8003f8c <hashInit.0+0x2714>)
 8003cda:	48ad      	ldr	r0, [pc, #692]	@ (8003f90 <hashInit.0+0x2718>)
 8003cdc:	f7fd fd1e 	bl	800171c <insert.1>
		insert("STRAEUPBG", "strange");
 8003ce0:	46a4      	mov	ip, r4
 8003ce2:	49ac      	ldr	r1, [pc, #688]	@ (8003f94 <hashInit.0+0x271c>)
 8003ce4:	48ac      	ldr	r0, [pc, #688]	@ (8003f98 <hashInit.0+0x2720>)
 8003ce6:	f7fd fd19 	bl	800171c <insert.1>
		insert("TKAOEP", "deep");
 8003cea:	46a4      	mov	ip, r4
 8003cec:	49ab      	ldr	r1, [pc, #684]	@ (8003f9c <hashInit.0+0x2724>)
 8003cee:	48ac      	ldr	r0, [pc, #688]	@ (8003fa0 <hashInit.0+0x2728>)
 8003cf0:	f7fd fd14 	bl	800171c <insert.1>
		insert("KHAEUPBG", "change");
 8003cf4:	46a4      	mov	ip, r4
 8003cf6:	49ab      	ldr	r1, [pc, #684]	@ (8003fa4 <hashInit.0+0x272c>)
 8003cf8:	48ab      	ldr	r0, [pc, #684]	@ (8003fa8 <hashInit.0+0x2730>)
 8003cfa:	f7fd fd0f 	bl	800171c <insert.1>
		insert("PHAOEULS", "miles");
 8003cfe:	46a4      	mov	ip, r4
 8003d00:	49aa      	ldr	r1, [pc, #680]	@ (8003fac <hashInit.0+0x2734>)
 8003d02:	48ab      	ldr	r0, [pc, #684]	@ (8003fb0 <hashInit.0+0x2738>)
 8003d04:	f7fd fd0a 	bl	800171c <insert.1>
		insert("TPAOELG", "feeling");
 8003d08:	46a4      	mov	ip, r4
 8003d0a:	49aa      	ldr	r1, [pc, #680]	@ (8003fb4 <hashInit.0+0x273c>)
 8003d0c:	48aa      	ldr	r0, [pc, #680]	@ (8003fb8 <hashInit.0+0x2740>)
 8003d0e:	f7fd fd05 	bl	800171c <insert.1>
		insert("ABGT", "act");
 8003d12:	46a4      	mov	ip, r4
 8003d14:	49a9      	ldr	r1, [pc, #676]	@ (8003fbc <hashInit.0+0x2744>)
 8003d16:	48aa      	ldr	r0, [pc, #680]	@ (8003fc0 <hashInit.0+0x2748>)
 8003d18:	f7fd fd00 	bl	800171c <insert.1>
		insert("PHAOET", "meet");
 8003d1c:	46a4      	mov	ip, r4
 8003d1e:	49a9      	ldr	r1, [pc, #676]	@ (8003fc4 <hashInit.0+0x274c>)
 8003d20:	48a9      	ldr	r0, [pc, #676]	@ (8003fc8 <hashInit.0+0x2750>)
 8003d22:	f7fd fcfb 	bl	800171c <insert.1>
		insert("PAEUD", "paid");
 8003d26:	46a4      	mov	ip, r4
 8003d28:	49a8      	ldr	r1, [pc, #672]	@ (8003fcc <hashInit.0+0x2754>)
 8003d2a:	48a9      	ldr	r0, [pc, #676]	@ (8003fd0 <hashInit.0+0x2758>)
 8003d2c:	f7fd fcf6 	bl	800171c <insert.1>
		insert("TPURT", "further");
 8003d30:	46a4      	mov	ip, r4
 8003d32:	49a8      	ldr	r1, [pc, #672]	@ (8003fd4 <hashInit.0+0x275c>)
 8003d34:	48a8      	ldr	r0, [pc, #672]	@ (8003fd8 <hashInit.0+0x2760>)
 8003d36:	f7fd fcf1 	bl	800171c <insert.1>
		insert("PURP", "purpose");
 8003d3a:	46a4      	mov	ip, r4
 8003d3c:	49a7      	ldr	r1, [pc, #668]	@ (8003fdc <hashInit.0+0x2764>)
 8003d3e:	48a8      	ldr	r0, [pc, #672]	@ (8003fe0 <hashInit.0+0x2768>)
 8003d40:	f7fd fcec 	bl	800171c <insert.1>
		insert("HAEP", "happy");
 8003d44:	46a4      	mov	ip, r4
 8003d46:	49a7      	ldr	r1, [pc, #668]	@ (8003fe4 <hashInit.0+0x276c>)
 8003d48:	48a7      	ldr	r0, [pc, #668]	@ (8003fe8 <hashInit.0+0x2770>)
 8003d4a:	f7fd fce7 	bl	800171c <insert.1>
		insert("AD/-D", "added");
 8003d4e:	46a4      	mov	ip, r4
 8003d50:	49a6      	ldr	r1, [pc, #664]	@ (8003fec <hashInit.0+0x2774>)
 8003d52:	48a7      	ldr	r0, [pc, #668]	@ (8003ff0 <hashInit.0+0x2778>)
 8003d54:	f7fd fce2 	bl	800171c <insert.1>
		insert("SAOEPL", "seem");
 8003d58:	46a4      	mov	ip, r4
 8003d5a:	49a6      	ldr	r1, [pc, #664]	@ (8003ff4 <hashInit.0+0x277c>)
 8003d5c:	48a6      	ldr	r0, [pc, #664]	@ (8003ff8 <hashInit.0+0x2780>)
 8003d5e:	f7fd fcdd 	bl	800171c <insert.1>
		insert("TAEUG", "taking");
 8003d62:	46a4      	mov	ip, r4
 8003d64:	49a5      	ldr	r1, [pc, #660]	@ (8003ffc <hashInit.0+0x2784>)
 8003d66:	48a6      	ldr	r0, [pc, #664]	@ (8004000 <hashInit.0+0x2788>)
 8003d68:	f7fd fcd8 	bl	800171c <insert.1>
		insert("PWHRAOD", "blood");
 8003d6c:	46a4      	mov	ip, r4
 8003d6e:	49a5      	ldr	r1, [pc, #660]	@ (8004004 <hashInit.0+0x278c>)
 8003d70:	48a5      	ldr	r0, [pc, #660]	@ (8004008 <hashInit.0+0x2790>)
 8003d72:	f7fd fcd3 	bl	800171c <insert.1>
		insert("ROEZ", "rose");
 8003d76:	46a4      	mov	ip, r4
 8003d78:	49a4      	ldr	r1, [pc, #656]	@ (800400c <hashInit.0+0x2794>)
 8003d7a:	48a5      	ldr	r0, [pc, #660]	@ (8004010 <hashInit.0+0x2798>)
 8003d7c:	f7fd fcce 	bl	800171c <insert.1>
		insert("SOUT", "south");
 8003d80:	46a4      	mov	ip, r4
 8003d82:	49a4      	ldr	r1, [pc, #656]	@ (8004014 <hashInit.0+0x279c>)
 8003d84:	48a4      	ldr	r0, [pc, #656]	@ (8004018 <hashInit.0+0x27a0>)
 8003d86:	f7fd fcc9 	bl	800171c <insert.1>
		insert("KWROPBD", "beyond");
 8003d8a:	46a4      	mov	ip, r4
 8003d8c:	49a3      	ldr	r1, [pc, #652]	@ (800401c <hashInit.0+0x27a4>)
 8003d8e:	48a4      	ldr	r0, [pc, #656]	@ (8004020 <hashInit.0+0x27a8>)
 8003d90:	f7fd fcc4 	bl	800171c <insert.1>
		insert("KOELD", "cold");
 8003d94:	46a4      	mov	ip, r4
 8003d96:	49a3      	ldr	r1, [pc, #652]	@ (8004024 <hashInit.0+0x27ac>)
 8003d98:	48a3      	ldr	r0, [pc, #652]	@ (8004028 <hashInit.0+0x27b0>)
 8003d9a:	f7fd fcbf 	bl	800171c <insert.1>
		insert("TPHAOERT", "neither");
 8003d9e:	46a4      	mov	ip, r4
 8003da0:	49a2      	ldr	r1, [pc, #648]	@ (800402c <hashInit.0+0x27b4>)
 8003da2:	48a3      	ldr	r0, [pc, #652]	@ (8004030 <hashInit.0+0x27b8>)
 8003da4:	f7fd fcba 	bl	800171c <insert.1>
		insert("TPAORD", "forward");
 8003da8:	46a4      	mov	ip, r4
 8003daa:	49a2      	ldr	r1, [pc, #648]	@ (8004034 <hashInit.0+0x27bc>)
 8003dac:	48a2      	ldr	r0, [pc, #648]	@ (8004038 <hashInit.0+0x27c0>)
 8003dae:	f7fd fcb5 	bl	800171c <insert.1>
		insert("SRAOU", "view");
 8003db2:	46a4      	mov	ip, r4
 8003db4:	49a1      	ldr	r1, [pc, #644]	@ (800403c <hashInit.0+0x27c4>)
 8003db6:	48a2      	ldr	r0, [pc, #648]	@ (8004040 <hashInit.0+0x27c8>)
 8003db8:	f7fd fcb0 	bl	800171c <insert.1>
		insert("AOEUF", "I've");
 8003dbc:	46a4      	mov	ip, r4
 8003dbe:	49a1      	ldr	r1, [pc, #644]	@ (8004044 <hashInit.0+0x27cc>)
 8003dc0:	48a1      	ldr	r0, [pc, #644]	@ (8004048 <hashInit.0+0x27d0>)
 8003dc2:	f7fd fcab 	bl	800171c <insert.1>
		insert("POGS", "position");
 8003dc6:	46a4      	mov	ip, r4
 8003dc8:	49a0      	ldr	r1, [pc, #640]	@ (800404c <hashInit.0+0x27d4>)
 8003dca:	48a1      	ldr	r0, [pc, #644]	@ (8004050 <hashInit.0+0x27d8>)
 8003dcc:	f7fd fca6 	bl	800171c <insert.1>
		insert("SOUPBD", "sound");
 8003dd0:	46a4      	mov	ip, r4
 8003dd2:	49a0      	ldr	r1, [pc, #640]	@ (8004054 <hashInit.0+0x27dc>)
 8003dd4:	48a0      	ldr	r0, [pc, #640]	@ (8004058 <hashInit.0+0x27e0>)
 8003dd6:	f7fd fca1 	bl	800171c <insert.1>
		insert("TPHOPB", "none");
 8003dda:	46a4      	mov	ip, r4
 8003ddc:	499f      	ldr	r1, [pc, #636]	@ (800405c <hashInit.0+0x27e4>)
 8003dde:	48a0      	ldr	r0, [pc, #640]	@ (8004060 <hashInit.0+0x27e8>)
 8003de0:	f7fd fc9c 	bl	800171c <insert.1>
		insert("SPWR-D", "entered");
 8003de4:	46a4      	mov	ip, r4
 8003de6:	499f      	ldr	r1, [pc, #636]	@ (8004064 <hashInit.0+0x27ec>)
 8003de8:	489f      	ldr	r0, [pc, #636]	@ (8004068 <hashInit.0+0x27f0>)
 8003dea:	f7fd fc97 	bl	800171c <insert.1>
		insert("KHRAOER", "clear");
 8003dee:	46a4      	mov	ip, r4
 8003df0:	499e      	ldr	r1, [pc, #632]	@ (800406c <hashInit.0+0x27f4>)
 8003df2:	489f      	ldr	r0, [pc, #636]	@ (8004070 <hashInit.0+0x27f8>)
 8003df4:	f7fd fc92 	bl	800171c <insert.1>
		insert("RAOD", "road");
 8003df8:	46a4      	mov	ip, r4
 8003dfa:	499e      	ldr	r1, [pc, #632]	@ (8004074 <hashInit.0+0x27fc>)
 8003dfc:	489e      	ldr	r0, [pc, #632]	@ (8004078 <hashInit.0+0x2800>)
 8003dfe:	f7fd fc8d 	bl	800171c <insert.1>
		insert("HRAEUT", "late");
 8003e02:	46a4      	mov	ip, r4
 8003e04:	499d      	ldr	r1, [pc, #628]	@ (800407c <hashInit.0+0x2804>)
 8003e06:	489e      	ldr	r0, [pc, #632]	@ (8004080 <hashInit.0+0x2808>)
 8003e08:	f7fd fc88 	bl	800171c <insert.1>
		insert("STAPBD", "stand");
 8003e0c:	46a4      	mov	ip, r4
 8003e0e:	499d      	ldr	r1, [pc, #628]	@ (8004084 <hashInit.0+0x280c>)
 8003e10:	489d      	ldr	r0, [pc, #628]	@ (8004088 <hashInit.0+0x2810>)
 8003e12:	f7fd fc83 	bl	800171c <insert.1>
		insert("SPOS", "suppose");
 8003e16:	46a4      	mov	ip, r4
 8003e18:	499c      	ldr	r1, [pc, #624]	@ (800408c <hashInit.0+0x2814>)
 8003e1a:	489d      	ldr	r0, [pc, #628]	@ (8004090 <hashInit.0+0x2818>)
 8003e1c:	f7fd fc7e 	bl	800171c <insert.1>
		insert("HRA", "la");
 8003e20:	46a4      	mov	ip, r4
 8003e22:	499c      	ldr	r1, [pc, #624]	@ (8004094 <hashInit.0+0x281c>)
 8003e24:	489c      	ldr	r0, [pc, #624]	@ (8004098 <hashInit.0+0x2820>)
 8003e26:	f7fd fc79 	bl	800171c <insert.1>
		insert("TKAUR", "daughter");
 8003e2a:	46a4      	mov	ip, r4
 8003e2c:	499b      	ldr	r1, [pc, #620]	@ (800409c <hashInit.0+0x2824>)
 8003e2e:	489c      	ldr	r0, [pc, #624]	@ (80040a0 <hashInit.0+0x2828>)
 8003e30:	f7fd fc74 	bl	800171c <insert.1>
		insert("RAEL", "real");
 8003e34:	46a4      	mov	ip, r4
 8003e36:	499b      	ldr	r1, [pc, #620]	@ (80040a4 <hashInit.0+0x282c>)
 8003e38:	489b      	ldr	r0, [pc, #620]	@ (80040a8 <hashInit.0+0x2830>)
 8003e3a:	f7fd fc6f 	bl	800171c <insert.1>
		insert("TPHAOERL", "nearly");
 8003e3e:	46a4      	mov	ip, r4
 8003e40:	499a      	ldr	r1, [pc, #616]	@ (80040ac <hashInit.0+0x2834>)
 8003e42:	489b      	ldr	r0, [pc, #620]	@ (80040b0 <hashInit.0+0x2838>)
 8003e44:	f7fd fc6a 	bl	800171c <insert.1>
		insert("PHAOEUPB", "mine");
 8003e48:	46a4      	mov	ip, r4
 8003e4a:	499a      	ldr	r1, [pc, #616]	@ (80040b4 <hashInit.0+0x283c>)
 8003e4c:	489a      	ldr	r0, [pc, #616]	@ (80040b8 <hashInit.0+0x2840>)
 8003e4e:	f7fd fc65 	bl	800171c <insert.1>
		insert("HRAUS", "laws");
 8003e52:	46a4      	mov	ip, r4
 8003e54:	4999      	ldr	r1, [pc, #612]	@ (80040bc <hashInit.0+0x2844>)
 8003e56:	489a      	ldr	r0, [pc, #616]	@ (80040c0 <hashInit.0+0x2848>)
 8003e58:	f7fd fc60 	bl	800171c <insert.1>
		insert("TPHOPBLG", "knowledge");
 8003e5c:	46a4      	mov	ip, r4
 8003e5e:	4999      	ldr	r1, [pc, #612]	@ (80040c4 <hashInit.0+0x284c>)
 8003e60:	4899      	ldr	r0, [pc, #612]	@ (80040c8 <hashInit.0+0x2850>)
 8003e62:	f7fd fc5b 	bl	800171c <insert.1>
		insert("KOPLS", "comes");
 8003e66:	46a4      	mov	ip, r4
 8003e68:	4998      	ldr	r1, [pc, #608]	@ (80040cc <hashInit.0+0x2854>)
 8003e6a:	4899      	ldr	r0, [pc, #612]	@ (80040d0 <hashInit.0+0x2858>)
 8003e6c:	f7fd fc56 	bl	800171c <insert.1>
		insert("TORD", "toward");
 8003e70:	46a4      	mov	ip, r4
 8003e72:	4998      	ldr	r1, [pc, #608]	@ (80040d4 <hashInit.0+0x285c>)
 8003e74:	4898      	ldr	r0, [pc, #608]	@ (80040d8 <hashInit.0+0x2860>)
 8003e76:	f7fd fc51 	bl	800171c <insert.1>
		insert("PWAD", "bad");
 8003e7a:	46a4      	mov	ip, r4
 8003e7c:	4997      	ldr	r1, [pc, #604]	@ (80040dc <hashInit.0+0x2864>)
 8003e7e:	4898      	ldr	r0, [pc, #608]	@ (80040e0 <hashInit.0+0x2868>)
 8003e80:	f7fd fc4c 	bl	800171c <insert.1>
		insert("KUT", "cut");
 8003e84:	46a4      	mov	ip, r4
 8003e86:	4997      	ldr	r1, [pc, #604]	@ (80040e4 <hashInit.0+0x286c>)
 8003e88:	4897      	ldr	r0, [pc, #604]	@ (80040e8 <hashInit.0+0x2870>)
 8003e8a:	f7fd fc47 	bl	800171c <insert.1>
		insert("KO*EP", "copy");
 8003e8e:	46a4      	mov	ip, r4
 8003e90:	4996      	ldr	r1, [pc, #600]	@ (80040ec <hashInit.0+0x2874>)
 8003e92:	4897      	ldr	r0, [pc, #604]	@ (80040f0 <hashInit.0+0x2878>)
 8003e94:	f7fd fc42 	bl	800171c <insert.1>
		insert("HUS", "husband");
 8003e98:	46a4      	mov	ip, r4
 8003e9a:	4996      	ldr	r1, [pc, #600]	@ (80040f4 <hashInit.0+0x287c>)
 8003e9c:	4896      	ldr	r0, [pc, #600]	@ (80040f8 <hashInit.0+0x2880>)
 8003e9e:	f7fd fc3d 	bl	800171c <insert.1>
		insert("SEUBGS", "six");
 8003ea2:	46a4      	mov	ip, r4
 8003ea4:	4995      	ldr	r1, [pc, #596]	@ (80040fc <hashInit.0+0x2884>)
 8003ea6:	4896      	ldr	r0, [pc, #600]	@ (8004100 <hashInit.0+0x2888>)
 8003ea8:	f7fd fc38 	bl	800171c <insert.1>
		insert("TPRAPBS", "France");
 8003eac:	46a4      	mov	ip, r4
 8003eae:	4995      	ldr	r1, [pc, #596]	@ (8004104 <hashInit.0+0x288c>)
 8003eb0:	4895      	ldr	r0, [pc, #596]	@ (8004108 <hashInit.0+0x2890>)
 8003eb2:	f7fd fc33 	bl	800171c <insert.1>
		insert("HREUFG", "living");
 8003eb6:	46a4      	mov	ip, r4
 8003eb8:	4994      	ldr	r1, [pc, #592]	@ (800410c <hashInit.0+0x2894>)
 8003eba:	4895      	ldr	r0, [pc, #596]	@ (8004110 <hashInit.0+0x2898>)
 8003ebc:	f7fd fc2e 	bl	800171c <insert.1>
		insert("PAES", "peace");
 8003ec0:	46a4      	mov	ip, r4
 8003ec2:	4994      	ldr	r1, [pc, #592]	@ (8004114 <hashInit.0+0x289c>)
 8003ec4:	4894      	ldr	r0, [pc, #592]	@ (8004118 <hashInit.0+0x28a0>)
 8003ec6:	f7fd fc29 	bl	800171c <insert.1>
		insert("TK-PBT", "didn't");
 8003eca:	46a4      	mov	ip, r4
 8003ecc:	4993      	ldr	r1, [pc, #588]	@ (800411c <hashInit.0+0x28a4>)
 8003ece:	4894      	ldr	r0, [pc, #592]	@ (8004120 <hashInit.0+0x28a8>)
 8003ed0:	f7fd fc24 	bl	800171c <insert.1>
		insert("HROE", "low");
 8003ed4:	46a4      	mov	ip, r4
 8003ed6:	4993      	ldr	r1, [pc, #588]	@ (8004124 <hashInit.0+0x28ac>)
 8003ed8:	4893      	ldr	r0, [pc, #588]	@ (8004128 <hashInit.0+0x28b0>)
 8003eda:	f7fd fc1f 	bl	800171c <insert.1>
		insert("TPHORT", "north");
 8003ede:	46a4      	mov	ip, r4
 8003ee0:	4992      	ldr	r1, [pc, #584]	@ (800412c <hashInit.0+0x28b4>)
 8003ee2:	4893      	ldr	r0, [pc, #588]	@ (8004130 <hashInit.0+0x28b8>)
 8003ee4:	f7fd fc1a 	bl	800171c <insert.1>
		insert("RER", "remember");
 8003ee8:	46a4      	mov	ip, r4
 8003eea:	4992      	ldr	r1, [pc, #584]	@ (8004134 <hashInit.0+0x28bc>)
 8003eec:	4892      	ldr	r0, [pc, #584]	@ (8004138 <hashInit.0+0x28c0>)
 8003eee:	f7fd fc15 	bl	800171c <insert.1>
		insert("EFBGT", "effect");
 8003ef2:	46a4      	mov	ip, r4
 8003ef4:	4991      	ldr	r1, [pc, #580]	@ (800413c <hashInit.0+0x28c4>)
 8003ef6:	4892      	ldr	r0, [pc, #584]	@ (8004140 <hashInit.0+0x28c8>)
 8003ef8:	f7fd fc10 	bl	800171c <insert.1>
		insert("TPHARL", "natural");
 8003efc:	46a4      	mov	ip, r4
 8003efe:	4991      	ldr	r1, [pc, #580]	@ (8004144 <hashInit.0+0x28cc>)
 8003f00:	4891      	ldr	r0, [pc, #580]	@ (8004148 <hashInit.0+0x28d0>)
 8003f02:	f7fd fc0b 	bl	800171c <insert.1>
 8003f06:	e121      	b.n	800414c <hashInit.0+0x28d4>
 8003f08:	0800f1f4 	.word	0x0800f1f4
 8003f0c:	0800f1f8 	.word	0x0800f1f8
 8003f10:	0800f204 	.word	0x0800f204
 8003f14:	0800f210 	.word	0x0800f210
 8003f18:	0800f218 	.word	0x0800f218
 8003f1c:	0800f224 	.word	0x0800f224
 8003f20:	0800f22c 	.word	0x0800f22c
 8003f24:	0800f234 	.word	0x0800f234
 8003f28:	0800f23c 	.word	0x0800f23c
 8003f2c:	0800f244 	.word	0x0800f244
 8003f30:	0800f250 	.word	0x0800f250
 8003f34:	0800f25c 	.word	0x0800f25c
 8003f38:	0800f264 	.word	0x0800f264
 8003f3c:	0800f26c 	.word	0x0800f26c
 8003f40:	0800f278 	.word	0x0800f278
 8003f44:	0800f280 	.word	0x0800f280
 8003f48:	0800f284 	.word	0x0800f284
 8003f4c:	0800f28c 	.word	0x0800f28c
 8003f50:	0800f290 	.word	0x0800f290
 8003f54:	0800f29c 	.word	0x0800f29c
 8003f58:	0800f2a0 	.word	0x0800f2a0
 8003f5c:	0800f2a8 	.word	0x0800f2a8
 8003f60:	0800f2b4 	.word	0x0800f2b4
 8003f64:	0800f2bc 	.word	0x0800f2bc
 8003f68:	0800f2c4 	.word	0x0800f2c4
 8003f6c:	0800f2cc 	.word	0x0800f2cc
 8003f70:	0800f2d8 	.word	0x0800f2d8
 8003f74:	0800f2e0 	.word	0x0800f2e0
 8003f78:	0800f2e8 	.word	0x0800f2e8
 8003f7c:	0800f2f0 	.word	0x0800f2f0
 8003f80:	0800f2fc 	.word	0x0800f2fc
 8003f84:	0800f304 	.word	0x0800f304
 8003f88:	0800f30c 	.word	0x0800f30c
 8003f8c:	0800f314 	.word	0x0800f314
 8003f90:	0800f31c 	.word	0x0800f31c
 8003f94:	0800f324 	.word	0x0800f324
 8003f98:	0800f32c 	.word	0x0800f32c
 8003f9c:	0800f338 	.word	0x0800f338
 8003fa0:	0800f340 	.word	0x0800f340
 8003fa4:	0800f348 	.word	0x0800f348
 8003fa8:	0800f350 	.word	0x0800f350
 8003fac:	0800f35c 	.word	0x0800f35c
 8003fb0:	0800f364 	.word	0x0800f364
 8003fb4:	0800f370 	.word	0x0800f370
 8003fb8:	0800f378 	.word	0x0800f378
 8003fbc:	0800f380 	.word	0x0800f380
 8003fc0:	0800f384 	.word	0x0800f384
 8003fc4:	0800f38c 	.word	0x0800f38c
 8003fc8:	0800f394 	.word	0x0800f394
 8003fcc:	0800f39c 	.word	0x0800f39c
 8003fd0:	0800f3a4 	.word	0x0800f3a4
 8003fd4:	0800f3ac 	.word	0x0800f3ac
 8003fd8:	0800f3b4 	.word	0x0800f3b4
 8003fdc:	0800f3bc 	.word	0x0800f3bc
 8003fe0:	0800f3c4 	.word	0x0800f3c4
 8003fe4:	0800f3cc 	.word	0x0800f3cc
 8003fe8:	0800f3d4 	.word	0x0800f3d4
 8003fec:	0800f3dc 	.word	0x0800f3dc
 8003ff0:	0800f3e4 	.word	0x0800f3e4
 8003ff4:	0800f3ec 	.word	0x0800f3ec
 8003ff8:	0800f3f4 	.word	0x0800f3f4
 8003ffc:	0800f3fc 	.word	0x0800f3fc
 8004000:	0800f404 	.word	0x0800f404
 8004004:	0800f40c 	.word	0x0800f40c
 8004008:	0800f414 	.word	0x0800f414
 800400c:	0800f41c 	.word	0x0800f41c
 8004010:	0800f424 	.word	0x0800f424
 8004014:	0800f42c 	.word	0x0800f42c
 8004018:	0800f434 	.word	0x0800f434
 800401c:	0800f43c 	.word	0x0800f43c
 8004020:	0800f444 	.word	0x0800f444
 8004024:	0800f44c 	.word	0x0800f44c
 8004028:	0800f454 	.word	0x0800f454
 800402c:	0800f45c 	.word	0x0800f45c
 8004030:	0800f464 	.word	0x0800f464
 8004034:	0800f470 	.word	0x0800f470
 8004038:	0800f478 	.word	0x0800f478
 800403c:	0800f480 	.word	0x0800f480
 8004040:	0800f488 	.word	0x0800f488
 8004044:	0800f490 	.word	0x0800f490
 8004048:	0800f498 	.word	0x0800f498
 800404c:	0800f4a0 	.word	0x0800f4a0
 8004050:	0800f4ac 	.word	0x0800f4ac
 8004054:	0800f4b4 	.word	0x0800f4b4
 8004058:	0800f4bc 	.word	0x0800f4bc
 800405c:	0800f4c4 	.word	0x0800f4c4
 8004060:	0800f4cc 	.word	0x0800f4cc
 8004064:	0800f4d4 	.word	0x0800f4d4
 8004068:	0800f4dc 	.word	0x0800f4dc
 800406c:	0800f4e4 	.word	0x0800f4e4
 8004070:	0800f4ec 	.word	0x0800f4ec
 8004074:	0800f4f4 	.word	0x0800f4f4
 8004078:	0800f4fc 	.word	0x0800f4fc
 800407c:	0800f504 	.word	0x0800f504
 8004080:	0800f50c 	.word	0x0800f50c
 8004084:	0800f514 	.word	0x0800f514
 8004088:	0800f51c 	.word	0x0800f51c
 800408c:	0800f524 	.word	0x0800f524
 8004090:	0800f52c 	.word	0x0800f52c
 8004094:	0800f534 	.word	0x0800f534
 8004098:	0800f538 	.word	0x0800f538
 800409c:	0800f53c 	.word	0x0800f53c
 80040a0:	0800f548 	.word	0x0800f548
 80040a4:	0800f550 	.word	0x0800f550
 80040a8:	0800f558 	.word	0x0800f558
 80040ac:	0800f560 	.word	0x0800f560
 80040b0:	0800f568 	.word	0x0800f568
 80040b4:	0800f574 	.word	0x0800f574
 80040b8:	0800f57c 	.word	0x0800f57c
 80040bc:	0800f588 	.word	0x0800f588
 80040c0:	0800f590 	.word	0x0800f590
 80040c4:	0800f598 	.word	0x0800f598
 80040c8:	0800f5a4 	.word	0x0800f5a4
 80040cc:	0800f5b0 	.word	0x0800f5b0
 80040d0:	0800f5b8 	.word	0x0800f5b8
 80040d4:	0800f5c0 	.word	0x0800f5c0
 80040d8:	0800f5c8 	.word	0x0800f5c8
 80040dc:	0800f5d0 	.word	0x0800f5d0
 80040e0:	0800f5d4 	.word	0x0800f5d4
 80040e4:	0800f5dc 	.word	0x0800f5dc
 80040e8:	0800f5e0 	.word	0x0800f5e0
 80040ec:	0800f5e4 	.word	0x0800f5e4
 80040f0:	0800f5ec 	.word	0x0800f5ec
 80040f4:	0800f5f4 	.word	0x0800f5f4
 80040f8:	0800f5fc 	.word	0x0800f5fc
 80040fc:	0800f600 	.word	0x0800f600
 8004100:	0800f604 	.word	0x0800f604
 8004104:	0800f60c 	.word	0x0800f60c
 8004108:	0800f614 	.word	0x0800f614
 800410c:	0800f61c 	.word	0x0800f61c
 8004110:	0800f624 	.word	0x0800f624
 8004114:	0800f62c 	.word	0x0800f62c
 8004118:	0800f634 	.word	0x0800f634
 800411c:	0800d5d8 	.word	0x0800d5d8
 8004120:	0800f63c 	.word	0x0800f63c
 8004124:	0800f644 	.word	0x0800f644
 8004128:	0800f648 	.word	0x0800f648
 800412c:	0800f650 	.word	0x0800f650
 8004130:	0800f658 	.word	0x0800f658
 8004134:	0800f660 	.word	0x0800f660
 8004138:	0800f66c 	.word	0x0800f66c
 800413c:	0800f670 	.word	0x0800f670
 8004140:	0800f678 	.word	0x0800f678
 8004144:	0800f680 	.word	0x0800f680
 8004148:	0800f688 	.word	0x0800f688
		insert("PREUT", "pretty");
 800414c:	46a4      	mov	ip, r4
 800414e:	49b5      	ldr	r1, [pc, #724]	@ (8004424 <hashInit.0+0x2bac>)
 8004150:	48b5      	ldr	r0, [pc, #724]	@ (8004428 <hashInit.0+0x2bb0>)
 8004152:	f7fd fae3 	bl	800171c <insert.1>
		insert("TPAUL", "fall");
 8004156:	46a4      	mov	ip, r4
 8004158:	49b4      	ldr	r1, [pc, #720]	@ (800442c <hashInit.0+0x2bb4>)
 800415a:	48b5      	ldr	r0, [pc, #724]	@ (8004430 <hashInit.0+0x2bb8>)
 800415c:	f7fd fade 	bl	800171c <insert.1>
		insert("TPAEUR", "fair");
 8004160:	46a4      	mov	ip, r4
 8004162:	49b4      	ldr	r1, [pc, #720]	@ (8004434 <hashInit.0+0x2bbc>)
 8004164:	48b4      	ldr	r0, [pc, #720]	@ (8004438 <hashInit.0+0x2bc0>)
 8004166:	f7fd fad9 	bl	800171c <insert.1>
		insert("S-FS", "service");
 800416a:	46a4      	mov	ip, r4
 800416c:	49b3      	ldr	r1, [pc, #716]	@ (800443c <hashInit.0+0x2bc4>)
 800416e:	48b4      	ldr	r0, [pc, #720]	@ (8004440 <hashInit.0+0x2bc8>)
 8004170:	f7fd fad4 	bl	800171c <insert.1>
		insert("PWHRO", "below");
 8004174:	46a4      	mov	ip, r4
 8004176:	49b3      	ldr	r1, [pc, #716]	@ (8004444 <hashInit.0+0x2bcc>)
 8004178:	48b3      	ldr	r0, [pc, #716]	@ (8004448 <hashInit.0+0x2bd0>)
 800417a:	f7fd facf 	bl	800171c <insert.1>
		insert("KPEPT", "except");
 800417e:	46a4      	mov	ip, r4
 8004180:	49b2      	ldr	r1, [pc, #712]	@ (800444c <hashInit.0+0x2bd4>)
 8004182:	48b3      	ldr	r0, [pc, #716]	@ (8004450 <hashInit.0+0x2bd8>)
 8004184:	f7fd faca 	bl	800171c <insert.1>
		insert("PHERPB", "American");
 8004188:	46a4      	mov	ip, r4
 800418a:	49b2      	ldr	r1, [pc, #712]	@ (8004454 <hashInit.0+0x2bdc>)
 800418c:	48b2      	ldr	r0, [pc, #712]	@ (8004458 <hashInit.0+0x2be0>)
 800418e:	f7fd fac5 	bl	800171c <insert.1>
		insert("HAEUR", "hair");
 8004192:	46a4      	mov	ip, r4
 8004194:	49b1      	ldr	r1, [pc, #708]	@ (800445c <hashInit.0+0x2be4>)
 8004196:	48b2      	ldr	r0, [pc, #712]	@ (8004460 <hashInit.0+0x2be8>)
 8004198:	f7fd fac0 	bl	800171c <insert.1>
		insert("HROPBD/OPB", "London");
 800419c:	46a4      	mov	ip, r4
 800419e:	49b1      	ldr	r1, [pc, #708]	@ (8004464 <hashInit.0+0x2bec>)
 80041a0:	48b1      	ldr	r0, [pc, #708]	@ (8004468 <hashInit.0+0x2bf0>)
 80041a2:	f7fd fabb 	bl	800171c <insert.1>
		insert("HRAEUD", "laid");
 80041a6:	46a4      	mov	ip, r4
 80041a8:	49b0      	ldr	r1, [pc, #704]	@ (800446c <hashInit.0+0x2bf4>)
 80041aa:	48b1      	ldr	r0, [pc, #708]	@ (8004470 <hashInit.0+0x2bf8>)
 80041ac:	f7fd fab6 	bl	800171c <insert.1>
		insert("PAS", "pass");
 80041b0:	46a4      	mov	ip, r4
 80041b2:	49b0      	ldr	r1, [pc, #704]	@ (8004474 <hashInit.0+0x2bfc>)
 80041b4:	48b0      	ldr	r0, [pc, #704]	@ (8004478 <hashInit.0+0x2c00>)
 80041b6:	f7fd fab1 	bl	800171c <insert.1>
		insert("HRED", "led");
 80041ba:	46a4      	mov	ip, r4
 80041bc:	49af      	ldr	r1, [pc, #700]	@ (800447c <hashInit.0+0x2c04>)
 80041be:	48b0      	ldr	r0, [pc, #704]	@ (8004480 <hashInit.0+0x2c08>)
 80041c0:	f7fd faac 	bl	800171c <insert.1>
		insert("KO*EP/RAOEUT", "copyright");
 80041c4:	46a4      	mov	ip, r4
 80041c6:	49af      	ldr	r1, [pc, #700]	@ (8004484 <hashInit.0+0x2c0c>)
 80041c8:	48af      	ldr	r0, [pc, #700]	@ (8004488 <hashInit.0+0x2c10>)
 80041ca:	f7fd faa7 	bl	800171c <insert.1>
		insert("TK*G", "doing");
 80041ce:	46a4      	mov	ip, r4
 80041d0:	49ae      	ldr	r1, [pc, #696]	@ (800448c <hashInit.0+0x2c14>)
 80041d2:	48af      	ldr	r0, [pc, #700]	@ (8004490 <hashInit.0+0x2c18>)
 80041d4:	f7fd faa2 	bl	800171c <insert.1>
		insert("AERPL", "army");
 80041d8:	46a4      	mov	ip, r4
 80041da:	49ae      	ldr	r1, [pc, #696]	@ (8004494 <hashInit.0+0x2c1c>)
 80041dc:	48ae      	ldr	r0, [pc, #696]	@ (8004498 <hashInit.0+0x2c20>)
 80041de:	f7fd fa9d 	bl	800171c <insert.1>
		insert("RUPB", "run");
 80041e2:	46a4      	mov	ip, r4
 80041e4:	49ad      	ldr	r1, [pc, #692]	@ (800449c <hashInit.0+0x2c24>)
 80041e6:	48ae      	ldr	r0, [pc, #696]	@ (80044a0 <hashInit.0+0x2c28>)
 80041e8:	f7fd fa98 	bl	800171c <insert.1>
		insert("HORS", "horse");
 80041ec:	46a4      	mov	ip, r4
 80041ee:	49ad      	ldr	r1, [pc, #692]	@ (80044a4 <hashInit.0+0x2c2c>)
 80041f0:	48ad      	ldr	r0, [pc, #692]	@ (80044a8 <hashInit.0+0x2c30>)
 80041f2:	f7fd fa93 	bl	800171c <insert.1>
		insert("TPAOURT", "future");
 80041f6:	46a4      	mov	ip, r4
 80041f8:	49ac      	ldr	r1, [pc, #688]	@ (80044ac <hashInit.0+0x2c34>)
 80041fa:	48ad      	ldr	r0, [pc, #692]	@ (80044b0 <hashInit.0+0x2c38>)
 80041fc:	f7fd fa8e 	bl	800171c <insert.1>
		insert("OEPD", "opened");
 8004200:	46a4      	mov	ip, r4
 8004202:	49ac      	ldr	r1, [pc, #688]	@ (80044b4 <hashInit.0+0x2c3c>)
 8004204:	48ac      	ldr	r0, [pc, #688]	@ (80044b8 <hashInit.0+0x2c40>)
 8004206:	f7fd fa89 	bl	800171c <insert.1>
		insert("PHRERB", "pleasure");
 800420a:	46a4      	mov	ip, r4
 800420c:	49ab      	ldr	r1, [pc, #684]	@ (80044bc <hashInit.0+0x2c44>)
 800420e:	48ac      	ldr	r0, [pc, #688]	@ (80044c0 <hashInit.0+0x2c48>)
 8004210:	f7fd fa84 	bl	800171c <insert.1>
		insert("HEUFRT", "history");
 8004214:	46a4      	mov	ip, r4
 8004216:	49ab      	ldr	r1, [pc, #684]	@ (80044c4 <hashInit.0+0x2c4c>)
 8004218:	48ab      	ldr	r0, [pc, #684]	@ (80044c8 <hashInit.0+0x2c50>)
 800421a:	f7fd fa7f 	bl	800171c <insert.1>
		insert("WEFT", "west");
 800421e:	46a4      	mov	ip, r4
 8004220:	49aa      	ldr	r1, [pc, #680]	@ (80044cc <hashInit.0+0x2c54>)
 8004222:	48ab      	ldr	r0, [pc, #684]	@ (80044d0 <hashInit.0+0x2c58>)
 8004224:	f7fd fa7a 	bl	800171c <insert.1>
		insert("PAEU", "pay");
 8004228:	46a4      	mov	ip, r4
 800422a:	49aa      	ldr	r1, [pc, #680]	@ (80044d4 <hashInit.0+0x2c5c>)
 800422c:	48aa      	ldr	r0, [pc, #680]	@ (80044d8 <hashInit.0+0x2c60>)
 800422e:	f7fd fa75 	bl	800171c <insert.1>
		insert("RED", "red");
 8004232:	46a4      	mov	ip, r4
 8004234:	49a9      	ldr	r1, [pc, #676]	@ (80044dc <hashInit.0+0x2c64>)
 8004236:	48aa      	ldr	r0, [pc, #680]	@ (80044e0 <hashInit.0+0x2c68>)
 8004238:	f7fd fa70 	bl	800171c <insert.1>
		insert("APB/AE", "an'");
 800423c:	46a4      	mov	ip, r4
 800423e:	49a9      	ldr	r1, [pc, #676]	@ (80044e4 <hashInit.0+0x2c6c>)
 8004240:	48a9      	ldr	r0, [pc, #676]	@ (80044e8 <hashInit.0+0x2c70>)
 8004242:	f7fd fa6b 	bl	800171c <insert.1>
		insert("TPOUR/TPO*UR", "4");
 8004246:	46a4      	mov	ip, r4
 8004248:	49a8      	ldr	r1, [pc, #672]	@ (80044ec <hashInit.0+0x2c74>)
 800424a:	48a9      	ldr	r0, [pc, #676]	@ (80044f0 <hashInit.0+0x2c78>)
 800424c:	f7fd fa66 	bl	800171c <insert.1>
		insert("HA*T", "hath");
 8004250:	46a4      	mov	ip, r4
 8004252:	49a8      	ldr	r1, [pc, #672]	@ (80044f4 <hashInit.0+0x2c7c>)
 8004254:	48a8      	ldr	r0, [pc, #672]	@ (80044f8 <hashInit.0+0x2c80>)
 8004256:	f7fd fa61 	bl	800171c <insert.1>
		insert("TPHOET", "note");
 800425a:	46a4      	mov	ip, r4
 800425c:	49a7      	ldr	r1, [pc, #668]	@ (80044fc <hashInit.0+0x2c84>)
 800425e:	48a8      	ldr	r0, [pc, #672]	@ (8004500 <hashInit.0+0x2c88>)
 8004260:	f7fd fa5c 	bl	800171c <insert.1>
		insert("HR*T", "although");
 8004264:	46a4      	mov	ip, r4
 8004266:	49a7      	ldr	r1, [pc, #668]	@ (8004504 <hashInit.0+0x2c8c>)
 8004268:	48a7      	ldr	r0, [pc, #668]	@ (8004508 <hashInit.0+0x2c90>)
 800426a:	f7fd fa57 	bl	800171c <insert.1>
		insert("WAPBTD", "wanted");
 800426e:	46a4      	mov	ip, r4
 8004270:	49a6      	ldr	r1, [pc, #664]	@ (800450c <hashInit.0+0x2c94>)
 8004272:	48a7      	ldr	r0, [pc, #668]	@ (8004510 <hashInit.0+0x2c98>)
 8004274:	f7fd fa52 	bl	800171c <insert.1>
		insert("TKPWOELD", "gold");
 8004278:	46a4      	mov	ip, r4
 800427a:	49a6      	ldr	r1, [pc, #664]	@ (8004514 <hashInit.0+0x2c9c>)
 800427c:	48a6      	ldr	r0, [pc, #664]	@ (8004518 <hashInit.0+0x2ca0>)
 800427e:	f7fd fa4d 	bl	800171c <insert.1>
		insert("PHAEUBGS", "makes");
 8004282:	46a4      	mov	ip, r4
 8004284:	49a5      	ldr	r1, [pc, #660]	@ (800451c <hashInit.0+0x2ca4>)
 8004286:	48a6      	ldr	r0, [pc, #664]	@ (8004520 <hashInit.0+0x2ca8>)
 8004288:	f7fd fa48 	bl	800171c <insert.1>
		insert("STKAOEUR", "desire");
 800428c:	46a4      	mov	ip, r4
 800428e:	49a5      	ldr	r1, [pc, #660]	@ (8004524 <hashInit.0+0x2cac>)
 8004290:	48a5      	ldr	r0, [pc, #660]	@ (8004528 <hashInit.0+0x2cb0>)
 8004292:	f7fd fa43 	bl	800171c <insert.1>
		insert("PHRAEU", "play");
 8004296:	46a4      	mov	ip, r4
 8004298:	49a4      	ldr	r1, [pc, #656]	@ (800452c <hashInit.0+0x2cb4>)
 800429a:	48a5      	ldr	r0, [pc, #660]	@ (8004530 <hashInit.0+0x2cb8>)
 800429c:	f7fd fa3e 	bl	800171c <insert.1>
		insert("PHAFRT", "master");
 80042a0:	46a4      	mov	ip, r4
 80042a2:	49a4      	ldr	r1, [pc, #656]	@ (8004534 <hashInit.0+0x2cbc>)
 80042a4:	48a4      	ldr	r0, [pc, #656]	@ (8004538 <hashInit.0+0x2cc0>)
 80042a6:	f7fd fa39 	bl	800171c <insert.1>
		insert("OFS", "office");
 80042aa:	46a4      	mov	ip, r4
 80042ac:	49a3      	ldr	r1, [pc, #652]	@ (800453c <hashInit.0+0x2cc4>)
 80042ae:	48a4      	ldr	r0, [pc, #656]	@ (8004540 <hashInit.0+0x2cc8>)
 80042b0:	f7fd fa34 	bl	800171c <insert.1>
		insert("TRAOEUD", "tried");
 80042b4:	46a4      	mov	ip, r4
 80042b6:	49a3      	ldr	r1, [pc, #652]	@ (8004544 <hashInit.0+0x2ccc>)
 80042b8:	48a3      	ldr	r0, [pc, #652]	@ (8004548 <hashInit.0+0x2cd0>)
 80042ba:	f7fd fa2f 	bl	800171c <insert.1>
		insert("TPROPBT", "front");
 80042be:	46a4      	mov	ip, r4
 80042c0:	49a2      	ldr	r1, [pc, #648]	@ (800454c <hashInit.0+0x2cd4>)
 80042c2:	48a3      	ldr	r0, [pc, #652]	@ (8004550 <hashInit.0+0x2cd8>)
 80042c4:	f7fd fa2a 	bl	800171c <insert.1>
		insert("PWEUG", "big");
 80042c8:	46a4      	mov	ip, r4
 80042ca:	49a2      	ldr	r1, [pc, #648]	@ (8004554 <hashInit.0+0x2cdc>)
 80042cc:	48a2      	ldr	r0, [pc, #648]	@ (8004558 <hashInit.0+0x2ce0>)
 80042ce:	f7fd fa25 	bl	800171c <insert.1>
		insert("TKR-FPLT", "Dr.");
 80042d2:	46a4      	mov	ip, r4
 80042d4:	49a1      	ldr	r1, [pc, #644]	@ (800455c <hashInit.0+0x2ce4>)
 80042d6:	48a2      	ldr	r0, [pc, #648]	@ (8004560 <hashInit.0+0x2ce8>)
 80042d8:	f7fd fa20 	bl	800171c <insert.1>
		insert("HREUFD", "lived");
 80042dc:	46a4      	mov	ip, r4
 80042de:	49a1      	ldr	r1, [pc, #644]	@ (8004564 <hashInit.0+0x2cec>)
 80042e0:	48a1      	ldr	r0, [pc, #644]	@ (8004568 <hashInit.0+0x2cf0>)
 80042e2:	f7fd fa1b 	bl	800171c <insert.1>
		insert("SERPBL", "certainly");
 80042e6:	46a4      	mov	ip, r4
 80042e8:	49a0      	ldr	r1, [pc, #640]	@ (800456c <hashInit.0+0x2cf4>)
 80042ea:	48a1      	ldr	r0, [pc, #644]	@ (8004570 <hashInit.0+0x2cf8>)
 80042ec:	f7fd fa16 	bl	800171c <insert.1>
		insert("WEUPBD", "wind");
 80042f0:	46a4      	mov	ip, r4
 80042f2:	49a0      	ldr	r1, [pc, #640]	@ (8004574 <hashInit.0+0x2cfc>)
 80042f4:	48a0      	ldr	r0, [pc, #640]	@ (8004578 <hashInit.0+0x2d00>)
 80042f6:	f7fd fa11 	bl	800171c <insert.1>
		insert("SAOEF", "receive");
 80042fa:	46a4      	mov	ip, r4
 80042fc:	499f      	ldr	r1, [pc, #636]	@ (800457c <hashInit.0+0x2d04>)
 80042fe:	48a0      	ldr	r0, [pc, #640]	@ (8004580 <hashInit.0+0x2d08>)
 8004300:	f7fd fa0c 	bl	800171c <insert.1>
		insert("TAEPBGS", "attention");
 8004304:	46a4      	mov	ip, r4
 8004306:	499f      	ldr	r1, [pc, #636]	@ (8004584 <hashInit.0+0x2d0c>)
 8004308:	489f      	ldr	r0, [pc, #636]	@ (8004588 <hashInit.0+0x2d10>)
 800430a:	f7fd fa07 	bl	800171c <insert.1>
		insert("TKPWOFT", "government");
 800430e:	46a4      	mov	ip, r4
 8004310:	499e      	ldr	r1, [pc, #632]	@ (800458c <hashInit.0+0x2d14>)
 8004312:	489f      	ldr	r0, [pc, #636]	@ (8004590 <hashInit.0+0x2d18>)
 8004314:	f7fd fa02 	bl	800171c <insert.1>
		insert("UPB/TO", "unto");
 8004318:	46a4      	mov	ip, r4
 800431a:	499e      	ldr	r1, [pc, #632]	@ (8004594 <hashInit.0+0x2d1c>)
 800431c:	489e      	ldr	r0, [pc, #632]	@ (8004598 <hashInit.0+0x2d20>)
 800431e:	f7fd f9fd 	bl	800171c <insert.1>
		insert("KHUFRPB", "church");
 8004322:	46a4      	mov	ip, r4
 8004324:	499d      	ldr	r1, [pc, #628]	@ (800459c <hashInit.0+0x2d24>)
 8004326:	489e      	ldr	r0, [pc, #632]	@ (80045a0 <hashInit.0+0x2d28>)
 8004328:	f7fd f9f8 	bl	800171c <insert.1>
		insert("STREPBG", "strength");
 800432c:	46a4      	mov	ip, r4
 800432e:	499d      	ldr	r1, [pc, #628]	@ (80045a4 <hashInit.0+0x2d2c>)
 8004330:	489d      	ldr	r0, [pc, #628]	@ (80045a8 <hashInit.0+0x2d30>)
 8004332:	f7fd f9f3 	bl	800171c <insert.1>
		insert("HREPBG", "length");
 8004336:	46a4      	mov	ip, r4
 8004338:	499c      	ldr	r1, [pc, #624]	@ (80045ac <hashInit.0+0x2d34>)
 800433a:	489d      	ldr	r0, [pc, #628]	@ (80045b0 <hashInit.0+0x2d38>)
 800433c:	f7fd f9ee 	bl	800171c <insert.1>
		insert("K-P", "company");
 8004340:	46a4      	mov	ip, r4
 8004342:	499c      	ldr	r1, [pc, #624]	@ (80045b4 <hashInit.0+0x2d3c>)
 8004344:	489c      	ldr	r0, [pc, #624]	@ (80045b8 <hashInit.0+0x2d40>)
 8004346:	f7fd f9e9 	bl	800171c <insert.1>
		insert("PHRAEUFD", "placed");
 800434a:	46a4      	mov	ip, r4
 800434c:	499b      	ldr	r1, [pc, #620]	@ (80045bc <hashInit.0+0x2d44>)
 800434e:	489c      	ldr	r0, [pc, #624]	@ (80045c0 <hashInit.0+0x2d48>)
 8004350:	f7fd f9e4 	bl	800171c <insert.1>
		insert("PAEUP", "paper");
 8004354:	46a4      	mov	ip, r4
 8004356:	499b      	ldr	r1, [pc, #620]	@ (80045c4 <hashInit.0+0x2d4c>)
 8004358:	489b      	ldr	r0, [pc, #620]	@ (80045c8 <hashInit.0+0x2d50>)
 800435a:	f7fd f9df 	bl	800171c <insert.1>
		insert("HRERTS", "letters");
 800435e:	46a4      	mov	ip, r4
 8004360:	499a      	ldr	r1, [pc, #616]	@ (80045cc <hashInit.0+0x2d54>)
 8004362:	489b      	ldr	r0, [pc, #620]	@ (80045d0 <hashInit.0+0x2d58>)
 8004364:	f7fd f9da 	bl	800171c <insert.1>
		insert("PROBL", "probably");
 8004368:	46a4      	mov	ip, r4
 800436a:	499a      	ldr	r1, [pc, #616]	@ (80045d4 <hashInit.0+0x2d5c>)
 800436c:	489a      	ldr	r0, [pc, #616]	@ (80045d8 <hashInit.0+0x2d60>)
 800436e:	f7fd f9d5 	bl	800171c <insert.1>
		insert("TKPWHRAD", "glad");
 8004372:	46a4      	mov	ip, r4
 8004374:	4999      	ldr	r1, [pc, #612]	@ (80045dc <hashInit.0+0x2d64>)
 8004376:	489a      	ldr	r0, [pc, #616]	@ (80045e0 <hashInit.0+0x2d68>)
 8004378:	f7fd f9d0 	bl	800171c <insert.1>
		insert("PORPB", "important");
 800437c:	46a4      	mov	ip, r4
 800437e:	4999      	ldr	r1, [pc, #612]	@ (80045e4 <hashInit.0+0x2d6c>)
 8004380:	4899      	ldr	r0, [pc, #612]	@ (80045e8 <hashInit.0+0x2d70>)
 8004382:	f7fd f9cb 	bl	800171c <insert.1>
		insert("EPS", "especially");
 8004386:	46a4      	mov	ip, r4
 8004388:	4998      	ldr	r1, [pc, #608]	@ (80045ec <hashInit.0+0x2d74>)
 800438a:	4899      	ldr	r0, [pc, #612]	@ (80045f0 <hashInit.0+0x2d78>)
 800438c:	f7fd f9c6 	bl	800171c <insert.1>
		insert("TKPWRAERT", "greater");
 8004390:	46a4      	mov	ip, r4
 8004392:	4998      	ldr	r1, [pc, #608]	@ (80045f4 <hashInit.0+0x2d7c>)
 8004394:	4898      	ldr	r0, [pc, #608]	@ (80045f8 <hashInit.0+0x2d80>)
 8004396:	f7fd f9c1 	bl	800171c <insert.1>
		insert("KWRO*URS", "yourself");
 800439a:	46a4      	mov	ip, r4
 800439c:	4997      	ldr	r1, [pc, #604]	@ (80045fc <hashInit.0+0x2d84>)
 800439e:	4898      	ldr	r0, [pc, #608]	@ (8004600 <hashInit.0+0x2d88>)
 80043a0:	f7fd f9bc 	bl	800171c <insert.1>
		insert("TP*EL", "fellow");
 80043a4:	46a4      	mov	ip, r4
 80043a6:	4997      	ldr	r1, [pc, #604]	@ (8004604 <hashInit.0+0x2d8c>)
 80043a8:	4897      	ldr	r0, [pc, #604]	@ (8004608 <hashInit.0+0x2d90>)
 80043aa:	f7fd f9b7 	bl	800171c <insert.1>
		insert("PWAER", "bear");
 80043ae:	46a4      	mov	ip, r4
 80043b0:	4996      	ldr	r1, [pc, #600]	@ (800460c <hashInit.0+0x2d94>)
 80043b2:	4897      	ldr	r0, [pc, #604]	@ (8004610 <hashInit.0+0x2d98>)
 80043b4:	f7fd f9b2 	bl	800171c <insert.1>
		insert("P-PB", "opinion");
 80043b8:	46a4      	mov	ip, r4
 80043ba:	4996      	ldr	r1, [pc, #600]	@ (8004614 <hashInit.0+0x2d9c>)
 80043bc:	4896      	ldr	r0, [pc, #600]	@ (8004618 <hashInit.0+0x2da0>)
 80043be:	f7fd f9ad 	bl	800171c <insert.1>
		insert("WOEUPBD", "window");
 80043c2:	46a4      	mov	ip, r4
 80043c4:	4995      	ldr	r1, [pc, #596]	@ (800461c <hashInit.0+0x2da4>)
 80043c6:	4896      	ldr	r0, [pc, #600]	@ (8004620 <hashInit.0+0x2da8>)
 80043c8:	f7fd f9a8 	bl	800171c <insert.1>
		insert("RAPB", "ran");
 80043cc:	46a4      	mov	ip, r4
 80043ce:	4995      	ldr	r1, [pc, #596]	@ (8004624 <hashInit.0+0x2dac>)
 80043d0:	4895      	ldr	r0, [pc, #596]	@ (8004628 <hashInit.0+0x2db0>)
 80043d2:	f7fd f9a3 	bl	800171c <insert.1>
		insert("TPA*EUT", "faith");
 80043d6:	46a4      	mov	ip, r4
 80043d8:	4994      	ldr	r1, [pc, #592]	@ (800462c <hashInit.0+0x2db4>)
 80043da:	4895      	ldr	r0, [pc, #596]	@ (8004630 <hashInit.0+0x2db8>)
 80043dc:	f7fd f99e 	bl	800171c <insert.1>
		insert("AG", "ago");
 80043e0:	46a4      	mov	ip, r4
 80043e2:	4994      	ldr	r1, [pc, #592]	@ (8004634 <hashInit.0+0x2dbc>)
 80043e4:	4894      	ldr	r0, [pc, #592]	@ (8004638 <hashInit.0+0x2dc0>)
 80043e6:	f7fd f999 	bl	800171c <insert.1>
		insert("TKPWRAOEPLT", "agreement");
 80043ea:	46a4      	mov	ip, r4
 80043ec:	4993      	ldr	r1, [pc, #588]	@ (800463c <hashInit.0+0x2dc4>)
 80043ee:	4894      	ldr	r0, [pc, #592]	@ (8004640 <hashInit.0+0x2dc8>)
 80043f0:	f7fd f994 	bl	800171c <insert.1>
		insert("KHARPBLG", "charge");
 80043f4:	46a4      	mov	ip, r4
 80043f6:	4993      	ldr	r1, [pc, #588]	@ (8004644 <hashInit.0+0x2dcc>)
 80043f8:	4893      	ldr	r0, [pc, #588]	@ (8004648 <hashInit.0+0x2dd0>)
 80043fa:	f7fd f98f 	bl	800171c <insert.1>
		insert("PWAOUT", "beauty");
 80043fe:	46a4      	mov	ip, r4
 8004400:	4992      	ldr	r1, [pc, #584]	@ (800464c <hashInit.0+0x2dd4>)
 8004402:	4893      	ldr	r0, [pc, #588]	@ (8004650 <hashInit.0+0x2dd8>)
 8004404:	f7fd f98a 	bl	800171c <insert.1>
		insert("HREUPS", "lips");
 8004408:	46a4      	mov	ip, r4
 800440a:	4992      	ldr	r1, [pc, #584]	@ (8004654 <hashInit.0+0x2ddc>)
 800440c:	4892      	ldr	r0, [pc, #584]	@ (8004658 <hashInit.0+0x2de0>)
 800440e:	f7fd f985 	bl	800171c <insert.1>
		insert("RE/PHAEUPBD", "remained");
 8004412:	46a4      	mov	ip, r4
 8004414:	4991      	ldr	r1, [pc, #580]	@ (800465c <hashInit.0+0x2de4>)
 8004416:	4892      	ldr	r0, [pc, #584]	@ (8004660 <hashInit.0+0x2de8>)
 8004418:	f7fd f980 	bl	800171c <insert.1>
		insert("ARPL", "arm");
 800441c:	46a4      	mov	ip, r4
 800441e:	4991      	ldr	r1, [pc, #580]	@ (8004664 <hashInit.0+0x2dec>)
 8004420:	e122      	b.n	8004668 <hashInit.0+0x2df0>
 8004422:	bf00      	nop
 8004424:	0800f690 	.word	0x0800f690
 8004428:	0800f698 	.word	0x0800f698
 800442c:	0800f6a0 	.word	0x0800f6a0
 8004430:	0800f6a8 	.word	0x0800f6a8
 8004434:	0800f6b0 	.word	0x0800f6b0
 8004438:	0800f6b8 	.word	0x0800f6b8
 800443c:	0800f6c0 	.word	0x0800f6c0
 8004440:	0800f6c8 	.word	0x0800f6c8
 8004444:	0800f6d0 	.word	0x0800f6d0
 8004448:	0800f6d8 	.word	0x0800f6d8
 800444c:	0800f6e0 	.word	0x0800f6e0
 8004450:	0800f6e8 	.word	0x0800f6e8
 8004454:	0800f6f0 	.word	0x0800f6f0
 8004458:	0800f6fc 	.word	0x0800f6fc
 800445c:	0800f704 	.word	0x0800f704
 8004460:	0800f70c 	.word	0x0800f70c
 8004464:	0800f714 	.word	0x0800f714
 8004468:	0800f71c 	.word	0x0800f71c
 800446c:	0800f728 	.word	0x0800f728
 8004470:	0800f730 	.word	0x0800f730
 8004474:	0800f738 	.word	0x0800f738
 8004478:	0800f740 	.word	0x0800f740
 800447c:	0800f744 	.word	0x0800f744
 8004480:	0800f748 	.word	0x0800f748
 8004484:	0800f750 	.word	0x0800f750
 8004488:	0800f75c 	.word	0x0800f75c
 800448c:	0800d5a0 	.word	0x0800d5a0
 8004490:	0800f76c 	.word	0x0800f76c
 8004494:	0800f774 	.word	0x0800f774
 8004498:	0800f77c 	.word	0x0800f77c
 800449c:	0800f784 	.word	0x0800f784
 80044a0:	0800f788 	.word	0x0800f788
 80044a4:	0800f790 	.word	0x0800f790
 80044a8:	0800f798 	.word	0x0800f798
 80044ac:	0800f7a0 	.word	0x0800f7a0
 80044b0:	0800f7a8 	.word	0x0800f7a8
 80044b4:	0800f7b0 	.word	0x0800f7b0
 80044b8:	0800f7b8 	.word	0x0800f7b8
 80044bc:	0800f7c0 	.word	0x0800f7c0
 80044c0:	0800f7cc 	.word	0x0800f7cc
 80044c4:	0800f7d4 	.word	0x0800f7d4
 80044c8:	0800f7dc 	.word	0x0800f7dc
 80044cc:	0800f7e4 	.word	0x0800f7e4
 80044d0:	0800f7ec 	.word	0x0800f7ec
 80044d4:	0800f7f4 	.word	0x0800f7f4
 80044d8:	0800f7f8 	.word	0x0800f7f8
 80044dc:	0800f800 	.word	0x0800f800
 80044e0:	0800f804 	.word	0x0800f804
 80044e4:	0800f808 	.word	0x0800f808
 80044e8:	0800f80c 	.word	0x0800f80c
 80044ec:	0800f814 	.word	0x0800f814
 80044f0:	0800f818 	.word	0x0800f818
 80044f4:	0800f828 	.word	0x0800f828
 80044f8:	0800f830 	.word	0x0800f830
 80044fc:	0800f838 	.word	0x0800f838
 8004500:	0800f840 	.word	0x0800f840
 8004504:	0800f848 	.word	0x0800f848
 8004508:	0800f854 	.word	0x0800f854
 800450c:	0800f85c 	.word	0x0800f85c
 8004510:	0800f864 	.word	0x0800f864
 8004514:	0800f86c 	.word	0x0800f86c
 8004518:	0800f874 	.word	0x0800f874
 800451c:	0800f880 	.word	0x0800f880
 8004520:	0800f888 	.word	0x0800f888
 8004524:	0800f894 	.word	0x0800f894
 8004528:	0800f89c 	.word	0x0800f89c
 800452c:	0800f8a8 	.word	0x0800f8a8
 8004530:	0800f8b0 	.word	0x0800f8b0
 8004534:	0800f8b8 	.word	0x0800f8b8
 8004538:	0800f8c0 	.word	0x0800f8c0
 800453c:	0800f8c8 	.word	0x0800f8c8
 8004540:	0800f8d0 	.word	0x0800f8d0
 8004544:	0800f8d4 	.word	0x0800f8d4
 8004548:	0800f8dc 	.word	0x0800f8dc
 800454c:	0800f8e4 	.word	0x0800f8e4
 8004550:	0800f8ec 	.word	0x0800f8ec
 8004554:	0800f8f4 	.word	0x0800f8f4
 8004558:	0800f8f8 	.word	0x0800f8f8
 800455c:	0800f900 	.word	0x0800f900
 8004560:	0800f904 	.word	0x0800f904
 8004564:	0800f910 	.word	0x0800f910
 8004568:	0800f918 	.word	0x0800f918
 800456c:	0800f920 	.word	0x0800f920
 8004570:	0800f92c 	.word	0x0800f92c
 8004574:	0800f934 	.word	0x0800f934
 8004578:	0800f93c 	.word	0x0800f93c
 800457c:	0800f944 	.word	0x0800f944
 8004580:	0800f94c 	.word	0x0800f94c
 8004584:	0800f954 	.word	0x0800f954
 8004588:	0800f960 	.word	0x0800f960
 800458c:	0800f968 	.word	0x0800f968
 8004590:	0800f974 	.word	0x0800f974
 8004594:	0800f97c 	.word	0x0800f97c
 8004598:	0800f984 	.word	0x0800f984
 800459c:	0800f98c 	.word	0x0800f98c
 80045a0:	0800f994 	.word	0x0800f994
 80045a4:	0800f99c 	.word	0x0800f99c
 80045a8:	0800f9a8 	.word	0x0800f9a8
 80045ac:	0800f9b0 	.word	0x0800f9b0
 80045b0:	0800f9b8 	.word	0x0800f9b8
 80045b4:	0800f9c0 	.word	0x0800f9c0
 80045b8:	0800f9c8 	.word	0x0800f9c8
 80045bc:	0800f9cc 	.word	0x0800f9cc
 80045c0:	0800f9d4 	.word	0x0800f9d4
 80045c4:	0800f9e0 	.word	0x0800f9e0
 80045c8:	0800f9e8 	.word	0x0800f9e8
 80045cc:	0800f9f0 	.word	0x0800f9f0
 80045d0:	0800f9f8 	.word	0x0800f9f8
 80045d4:	0800fa00 	.word	0x0800fa00
 80045d8:	0800fa0c 	.word	0x0800fa0c
 80045dc:	0800fa14 	.word	0x0800fa14
 80045e0:	0800fa1c 	.word	0x0800fa1c
 80045e4:	0800fa28 	.word	0x0800fa28
 80045e8:	0800fa34 	.word	0x0800fa34
 80045ec:	0800fa3c 	.word	0x0800fa3c
 80045f0:	0800fa48 	.word	0x0800fa48
 80045f4:	0800fa4c 	.word	0x0800fa4c
 80045f8:	0800fa54 	.word	0x0800fa54
 80045fc:	0800fa60 	.word	0x0800fa60
 8004600:	0800fa6c 	.word	0x0800fa6c
 8004604:	0800fa78 	.word	0x0800fa78
 8004608:	0800fa80 	.word	0x0800fa80
 800460c:	0800fa88 	.word	0x0800fa88
 8004610:	0800fa90 	.word	0x0800fa90
 8004614:	0800fa98 	.word	0x0800fa98
 8004618:	0800faa0 	.word	0x0800faa0
 800461c:	0800faa8 	.word	0x0800faa8
 8004620:	0800fab0 	.word	0x0800fab0
 8004624:	0800fab8 	.word	0x0800fab8
 8004628:	0800fabc 	.word	0x0800fabc
 800462c:	0800fac4 	.word	0x0800fac4
 8004630:	0800facc 	.word	0x0800facc
 8004634:	0800fad4 	.word	0x0800fad4
 8004638:	0800fad8 	.word	0x0800fad8
 800463c:	0800fadc 	.word	0x0800fadc
 8004640:	0800fae8 	.word	0x0800fae8
 8004644:	0800faf4 	.word	0x0800faf4
 8004648:	0800fafc 	.word	0x0800fafc
 800464c:	0800fb08 	.word	0x0800fb08
 8004650:	0800fb10 	.word	0x0800fb10
 8004654:	0800fb18 	.word	0x0800fb18
 8004658:	0800fb20 	.word	0x0800fb20
 800465c:	0800fb28 	.word	0x0800fb28
 8004660:	0800fb34 	.word	0x0800fb34
 8004664:	0800fb40 	.word	0x0800fb40
 8004668:	48b5      	ldr	r0, [pc, #724]	@ (8004940 <hashInit.0+0x30c8>)
 800466a:	f7fd f857 	bl	800171c <insert.1>
		insert("HRART", "latter");
 800466e:	46a4      	mov	ip, r4
 8004670:	49b4      	ldr	r1, [pc, #720]	@ (8004944 <hashInit.0+0x30cc>)
 8004672:	48b5      	ldr	r0, [pc, #724]	@ (8004948 <hashInit.0+0x30d0>)
 8004674:	f7fd f852 	bl	800171c <insert.1>
		insert("TKAOUT", "duty");
 8004678:	46a4      	mov	ip, r4
 800467a:	49b4      	ldr	r1, [pc, #720]	@ (800494c <hashInit.0+0x30d4>)
 800467c:	48b4      	ldr	r0, [pc, #720]	@ (8004950 <hashInit.0+0x30d8>)
 800467e:	f7fd f84d 	bl	800171c <insert.1>
		insert("SEPBD", "send");
 8004682:	46a4      	mov	ip, r4
 8004684:	49b3      	ldr	r1, [pc, #716]	@ (8004954 <hashInit.0+0x30dc>)
 8004686:	48b4      	ldr	r0, [pc, #720]	@ (8004958 <hashInit.0+0x30e0>)
 8004688:	f7fd f848 	bl	800171c <insert.1>
		insert("STKAPBS", "distance");
 800468c:	46a4      	mov	ip, r4
 800468e:	49b3      	ldr	r1, [pc, #716]	@ (800495c <hashInit.0+0x30e4>)
 8004690:	48b3      	ldr	r0, [pc, #716]	@ (8004960 <hashInit.0+0x30e8>)
 8004692:	f7fd f843 	bl	800171c <insert.1>
		insert("SHREPBS", "silence");
 8004696:	46a4      	mov	ip, r4
 8004698:	49b2      	ldr	r1, [pc, #712]	@ (8004964 <hashInit.0+0x30ec>)
 800469a:	48b3      	ldr	r0, [pc, #716]	@ (8004968 <hashInit.0+0x30f0>)
 800469c:	f7fd f83e 	bl	800171c <insert.1>
		insert("TPAOT", "foot");
 80046a0:	46a4      	mov	ip, r4
 80046a2:	49b2      	ldr	r1, [pc, #712]	@ (800496c <hashInit.0+0x30f4>)
 80046a4:	48b2      	ldr	r0, [pc, #712]	@ (8004970 <hashInit.0+0x30f8>)
 80046a6:	f7fd f839 	bl	800171c <insert.1>
		insert("WAOEULD", "wild");
 80046aa:	46a4      	mov	ip, r4
 80046ac:	49b1      	ldr	r1, [pc, #708]	@ (8004974 <hashInit.0+0x30fc>)
 80046ae:	48b2      	ldr	r0, [pc, #712]	@ (8004978 <hashInit.0+0x3100>)
 80046b0:	f7fd f834 	bl	800171c <insert.1>
		insert("OBT", "object");
 80046b4:	46a4      	mov	ip, r4
 80046b6:	49b1      	ldr	r1, [pc, #708]	@ (800497c <hashInit.0+0x3104>)
 80046b8:	48b1      	ldr	r0, [pc, #708]	@ (8004980 <hashInit.0+0x3108>)
 80046ba:	f7fd f82f 	bl	800171c <insert.1>
		insert("TKAOEU", "die");
 80046be:	46a4      	mov	ip, r4
 80046c0:	49b0      	ldr	r1, [pc, #704]	@ (8004984 <hashInit.0+0x310c>)
 80046c2:	48b1      	ldr	r0, [pc, #708]	@ (8004988 <hashInit.0+0x3110>)
 80046c4:	f7fd f82a 	bl	800171c <insert.1>
		insert("SAF", "save");
 80046c8:	46a4      	mov	ip, r4
 80046ca:	49b0      	ldr	r1, [pc, #704]	@ (800498c <hashInit.0+0x3114>)
 80046cc:	48b0      	ldr	r0, [pc, #704]	@ (8004990 <hashInit.0+0x3118>)
 80046ce:	f7fd f825 	bl	800171c <insert.1>
		insert("SKWRA*PL", "gentleman");
 80046d2:	46a4      	mov	ip, r4
 80046d4:	49af      	ldr	r1, [pc, #700]	@ (8004994 <hashInit.0+0x311c>)
 80046d6:	48b0      	ldr	r0, [pc, #704]	@ (8004998 <hashInit.0+0x3120>)
 80046d8:	f7fd f820 	bl	800171c <insert.1>
		insert("TRAOES", "trees");
 80046dc:	46a4      	mov	ip, r4
 80046de:	49af      	ldr	r1, [pc, #700]	@ (800499c <hashInit.0+0x3124>)
 80046e0:	48af      	ldr	r0, [pc, #700]	@ (80049a0 <hashInit.0+0x3128>)
 80046e2:	f7fd f81b 	bl	800171c <insert.1>
		insert("TKPWRAOEPB", "green");
 80046e6:	46a4      	mov	ip, r4
 80046e8:	49ae      	ldr	r1, [pc, #696]	@ (80049a4 <hashInit.0+0x312c>)
 80046ea:	48af      	ldr	r0, [pc, #700]	@ (80049a8 <hashInit.0+0x3130>)
 80046ec:	f7fd f816 	bl	800171c <insert.1>
		insert("TRUBL", "trouble");
 80046f0:	46a4      	mov	ip, r4
 80046f2:	49ae      	ldr	r1, [pc, #696]	@ (80049ac <hashInit.0+0x3134>)
 80046f4:	48ae      	ldr	r0, [pc, #696]	@ (80049b0 <hashInit.0+0x3138>)
 80046f6:	f7fd f811 	bl	800171c <insert.1>
		insert("SPHAOEUL", "smile");
 80046fa:	46a4      	mov	ip, r4
 80046fc:	49ad      	ldr	r1, [pc, #692]	@ (80049b4 <hashInit.0+0x313c>)
 80046fe:	48ae      	ldr	r0, [pc, #696]	@ (80049b8 <hashInit.0+0x3140>)
 8004700:	f7fd f80c 	bl	800171c <insert.1>
		insert("PWAOBGS", "books");
 8004704:	46a4      	mov	ip, r4
 8004706:	49ad      	ldr	r1, [pc, #692]	@ (80049bc <hashInit.0+0x3144>)
 8004708:	48ad      	ldr	r0, [pc, #692]	@ (80049c0 <hashInit.0+0x3148>)
 800470a:	f7fd f807 	bl	800171c <insert.1>
		insert("WROPBG", "wrong");
 800470e:	46a4      	mov	ip, r4
 8004710:	49ac      	ldr	r1, [pc, #688]	@ (80049c4 <hashInit.0+0x314c>)
 8004712:	48ad      	ldr	r0, [pc, #692]	@ (80049c8 <hashInit.0+0x3150>)
 8004714:	f7fd f802 	bl	800171c <insert.1>
		insert("SRAEURS", "various");
 8004718:	46a4      	mov	ip, r4
 800471a:	49ac      	ldr	r1, [pc, #688]	@ (80049cc <hashInit.0+0x3154>)
 800471c:	48ac      	ldr	r0, [pc, #688]	@ (80049d0 <hashInit.0+0x3158>)
 800471e:	f7fc fffd 	bl	800171c <insert.1>
		insert("SHRAOEP", "sleep");
 8004722:	46a4      	mov	ip, r4
 8004724:	49ab      	ldr	r1, [pc, #684]	@ (80049d4 <hashInit.0+0x315c>)
 8004726:	48ac      	ldr	r0, [pc, #688]	@ (80049d8 <hashInit.0+0x3160>)
 8004728:	f7fc fff8 	bl	800171c <insert.1>
		insert("PERPBS", "persons");
 800472c:	46a4      	mov	ip, r4
 800472e:	49ab      	ldr	r1, [pc, #684]	@ (80049dc <hashInit.0+0x3164>)
 8004730:	48ab      	ldr	r0, [pc, #684]	@ (80049e0 <hashInit.0+0x3168>)
 8004732:	f7fc fff3 	bl	800171c <insert.1>
		insert("PWHROBG/TK-LS/KWOET", "blockquote");
 8004736:	46a4      	mov	ip, r4
 8004738:	49aa      	ldr	r1, [pc, #680]	@ (80049e4 <hashInit.0+0x316c>)
 800473a:	48ab      	ldr	r0, [pc, #684]	@ (80049e8 <hashInit.0+0x3170>)
 800473c:	f7fc ffee 	bl	800171c <insert.1>
		insert("HAPD", "happened");
 8004740:	46a4      	mov	ip, r4
 8004742:	49aa      	ldr	r1, [pc, #680]	@ (80049ec <hashInit.0+0x3174>)
 8004744:	48aa      	ldr	r0, [pc, #680]	@ (80049f0 <hashInit.0+0x3178>)
 8004746:	f7fc ffe9 	bl	800171c <insert.1>
		insert("PHRAR", "particular");
 800474a:	46a4      	mov	ip, r4
 800474c:	49a9      	ldr	r1, [pc, #676]	@ (80049f4 <hashInit.0+0x317c>)
 800474e:	48aa      	ldr	r0, [pc, #680]	@ (80049f8 <hashInit.0+0x3180>)
 8004750:	f7fc ffe4 	bl	800171c <insert.1>
		insert("TKRAOU", "drew");
 8004754:	46a4      	mov	ip, r4
 8004756:	49a9      	ldr	r1, [pc, #676]	@ (80049fc <hashInit.0+0x3184>)
 8004758:	48a9      	ldr	r0, [pc, #676]	@ (8004a00 <hashInit.0+0x3188>)
 800475a:	f7fc ffdf 	bl	800171c <insert.1>
		insert("PHEUPBS", "minutes");
 800475e:	46a4      	mov	ip, r4
 8004760:	49a8      	ldr	r1, [pc, #672]	@ (8004a04 <hashInit.0+0x318c>)
 8004762:	48a9      	ldr	r0, [pc, #676]	@ (8004a08 <hashInit.0+0x3190>)
 8004764:	f7fc ffda 	bl	800171c <insert.1>
		insert("HA*RLD", "hardly");
 8004768:	46a4      	mov	ip, r4
 800476a:	49a8      	ldr	r1, [pc, #672]	@ (8004a0c <hashInit.0+0x3194>)
 800476c:	48a8      	ldr	r0, [pc, #672]	@ (8004a10 <hashInit.0+0x3198>)
 800476e:	f7fc ffd5 	bl	800171c <insert.1>
		insert("WAUBGD", "walked");
 8004772:	46a4      	mov	ip, r4
 8004774:	49a7      	ldr	r1, [pc, #668]	@ (8004a14 <hashInit.0+0x319c>)
 8004776:	48a8      	ldr	r0, [pc, #672]	@ (8004a18 <hashInit.0+0x31a0>)
 8004778:	f7fc ffd0 	bl	800171c <insert.1>
		insert("KHAOEF", "chief");
 800477c:	46a4      	mov	ip, r4
 800477e:	49a7      	ldr	r1, [pc, #668]	@ (8004a1c <hashInit.0+0x31a4>)
 8004780:	48a7      	ldr	r0, [pc, #668]	@ (8004a20 <hashInit.0+0x31a8>)
 8004782:	f7fc ffcb 	bl	800171c <insert.1>
		insert("KHAPBS", "chance");
 8004786:	46a4      	mov	ip, r4
 8004788:	49a6      	ldr	r1, [pc, #664]	@ (8004a24 <hashInit.0+0x31ac>)
 800478a:	48a7      	ldr	r0, [pc, #668]	@ (8004a28 <hashInit.0+0x31b0>)
 800478c:	f7fc ffc6 	bl	800171c <insert.1>
		insert("KORG", "according");
 8004790:	46a4      	mov	ip, r4
 8004792:	49a6      	ldr	r1, [pc, #664]	@ (8004a2c <hashInit.0+0x31b4>)
 8004794:	48a6      	ldr	r0, [pc, #664]	@ (8004a30 <hashInit.0+0x31b8>)
 8004796:	f7fc ffc1 	bl	800171c <insert.1>
		insert("TKPWEUPB/-G", "beginning");
 800479a:	46a4      	mov	ip, r4
 800479c:	49a5      	ldr	r1, [pc, #660]	@ (8004a34 <hashInit.0+0x31bc>)
 800479e:	48a6      	ldr	r0, [pc, #664]	@ (8004a38 <hashInit.0+0x31c0>)
 80047a0:	f7fc ffbc 	bl	800171c <insert.1>
		insert("*BGS", "action");
 80047a4:	46a4      	mov	ip, r4
 80047a6:	49a5      	ldr	r1, [pc, #660]	@ (8004a3c <hashInit.0+0x31c4>)
 80047a8:	48a5      	ldr	r0, [pc, #660]	@ (8004a40 <hashInit.0+0x31c8>)
 80047aa:	f7fc ffb7 	bl	800171c <insert.1>
		insert("TKAOEL", "deal");
 80047ae:	46a4      	mov	ip, r4
 80047b0:	49a4      	ldr	r1, [pc, #656]	@ (8004a44 <hashInit.0+0x31cc>)
 80047b2:	48a5      	ldr	r0, [pc, #660]	@ (8004a48 <hashInit.0+0x31d0>)
 80047b4:	f7fc ffb2 	bl	800171c <insert.1>
		insert("HROFD", "loved");
 80047b8:	46a4      	mov	ip, r4
 80047ba:	49a4      	ldr	r1, [pc, #656]	@ (8004a4c <hashInit.0+0x31d4>)
 80047bc:	48a4      	ldr	r0, [pc, #656]	@ (8004a50 <hashInit.0+0x31d8>)
 80047be:	f7fc ffad 	bl	800171c <insert.1>
		insert("SREUFT", "visit");
 80047c2:	46a4      	mov	ip, r4
 80047c4:	49a3      	ldr	r1, [pc, #652]	@ (8004a54 <hashInit.0+0x31dc>)
 80047c6:	48a4      	ldr	r0, [pc, #656]	@ (8004a58 <hashInit.0+0x31e0>)
 80047c8:	f7fc ffa8 	bl	800171c <insert.1>
		insert("THEUG", "thinking");
 80047cc:	46a4      	mov	ip, r4
 80047ce:	49a3      	ldr	r1, [pc, #652]	@ (8004a5c <hashInit.0+0x31e4>)
 80047d0:	48a3      	ldr	r0, [pc, #652]	@ (8004a60 <hashInit.0+0x31e8>)
 80047d2:	f7fc ffa3 	bl	800171c <insert.1>
		insert("TPOL", "follow");
 80047d6:	46a4      	mov	ip, r4
 80047d8:	49a2      	ldr	r1, [pc, #648]	@ (8004a64 <hashInit.0+0x31ec>)
 80047da:	48a3      	ldr	r0, [pc, #652]	@ (8004a68 <hashInit.0+0x31f0>)
 80047dc:	f7fc ff9e 	bl	800171c <insert.1>
		insert("STAPBG", "standing");
 80047e0:	46a4      	mov	ip, r4
 80047e2:	49a2      	ldr	r1, [pc, #648]	@ (8004a6c <hashInit.0+0x31f4>)
 80047e4:	48a2      	ldr	r0, [pc, #648]	@ (8004a70 <hashInit.0+0x31f8>)
 80047e6:	f7fc ff99 	bl	800171c <insert.1>
		insert("TPHOEZ", "knows");
 80047ea:	46a4      	mov	ip, r4
 80047ec:	49a1      	ldr	r1, [pc, #644]	@ (8004a74 <hashInit.0+0x31fc>)
 80047ee:	48a2      	ldr	r0, [pc, #648]	@ (8004a78 <hashInit.0+0x3200>)
 80047f0:	f7fc ff94 	bl	800171c <insert.1>
		insert("TREU", "try");
 80047f4:	46a4      	mov	ip, r4
 80047f6:	49a1      	ldr	r1, [pc, #644]	@ (8004a7c <hashInit.0+0x3204>)
 80047f8:	48a1      	ldr	r0, [pc, #644]	@ (8004a80 <hashInit.0+0x3208>)
 80047fa:	f7fc ff8f 	bl	800171c <insert.1>
		insert("PREPBS", "presence");
 80047fe:	46a4      	mov	ip, r4
 8004800:	49a0      	ldr	r1, [pc, #640]	@ (8004a84 <hashInit.0+0x320c>)
 8004802:	48a1      	ldr	r0, [pc, #644]	@ (8004a88 <hashInit.0+0x3210>)
 8004804:	f7fc ff8a 	bl	800171c <insert.1>
		insert("HOEUF", "heavy");
 8004808:	46a4      	mov	ip, r4
 800480a:	49a0      	ldr	r1, [pc, #640]	@ (8004a8c <hashInit.0+0x3214>)
 800480c:	48a0      	ldr	r0, [pc, #640]	@ (8004a90 <hashInit.0+0x3218>)
 800480e:	f7fc ff85 	bl	800171c <insert.1>
		insert("SWAOET", "sweet");
 8004812:	46a4      	mov	ip, r4
 8004814:	499f      	ldr	r1, [pc, #636]	@ (8004a94 <hashInit.0+0x321c>)
 8004816:	48a0      	ldr	r0, [pc, #640]	@ (8004a98 <hashInit.0+0x3220>)
 8004818:	f7fc ff80 	bl	800171c <insert.1>
		insert("PHRAEUPB", "plain");
 800481c:	46a4      	mov	ip, r4
 800481e:	499f      	ldr	r1, [pc, #636]	@ (8004a9c <hashInit.0+0x3224>)
 8004820:	489f      	ldr	r0, [pc, #636]	@ (8004aa0 <hashInit.0+0x3228>)
 8004822:	f7fc ff7b 	bl	800171c <insert.1>
		insert("TKOEPBGS/-S", "donations");
 8004826:	46a4      	mov	ip, r4
 8004828:	499e      	ldr	r1, [pc, #632]	@ (8004aa4 <hashInit.0+0x322c>)
 800482a:	489f      	ldr	r0, [pc, #636]	@ (8004aa8 <hashInit.0+0x3230>)
 800482c:	f7fc ff76 	bl	800171c <insert.1>
		insert("PHAOELD", "immediately");
 8004830:	46a4      	mov	ip, r4
 8004832:	499e      	ldr	r1, [pc, #632]	@ (8004aac <hashInit.0+0x3234>)
 8004834:	489e      	ldr	r0, [pc, #632]	@ (8004ab0 <hashInit.0+0x3238>)
 8004836:	f7fc ff71 	bl	800171c <insert.1>
		insert("WRO", "wrote");
 800483a:	46a4      	mov	ip, r4
 800483c:	499d      	ldr	r1, [pc, #628]	@ (8004ab4 <hashInit.0+0x323c>)
 800483e:	489e      	ldr	r0, [pc, #632]	@ (8004ab8 <hashInit.0+0x3240>)
 8004840:	f7fc ff6c 	bl	800171c <insert.1>
		insert("PHO*UT", "mouth");
 8004844:	46a4      	mov	ip, r4
 8004846:	499d      	ldr	r1, [pc, #628]	@ (8004abc <hashInit.0+0x3244>)
 8004848:	489d      	ldr	r0, [pc, #628]	@ (8004ac0 <hashInit.0+0x3248>)
 800484a:	f7fc ff67 	bl	800171c <insert.1>
		insert("REUFP", "rich");
 800484e:	46a4      	mov	ip, r4
 8004850:	499c      	ldr	r1, [pc, #624]	@ (8004ac4 <hashInit.0+0x324c>)
 8004852:	489d      	ldr	r0, [pc, #628]	@ (8004ac8 <hashInit.0+0x3250>)
 8004854:	f7fc ff62 	bl	800171c <insert.1>
		insert("THAUTS", "thoughts");
 8004858:	46a4      	mov	ip, r4
 800485a:	499c      	ldr	r1, [pc, #624]	@ (8004acc <hashInit.0+0x3254>)
 800485c:	489c      	ldr	r0, [pc, #624]	@ (8004ad0 <hashInit.0+0x3258>)
 800485e:	f7fc ff5d 	bl	800171c <insert.1>
		insert("PHO*PBTS", "months");
 8004862:	46a4      	mov	ip, r4
 8004864:	499b      	ldr	r1, [pc, #620]	@ (8004ad4 <hashInit.0+0x325c>)
 8004866:	489c      	ldr	r0, [pc, #624]	@ (8004ad8 <hashInit.0+0x3260>)
 8004868:	f7fc ff58 	bl	800171c <insert.1>
		insert("*U", "u");
 800486c:	46a4      	mov	ip, r4
 800486e:	499b      	ldr	r1, [pc, #620]	@ (8004adc <hashInit.0+0x3264>)
 8004870:	489b      	ldr	r0, [pc, #620]	@ (8004ae0 <hashInit.0+0x3268>)
 8004872:	f7fc ff53 	bl	800171c <insert.1>
		insert("WOEPBT", "won't");
 8004876:	46a4      	mov	ip, r4
 8004878:	499a      	ldr	r1, [pc, #616]	@ (8004ae4 <hashInit.0+0x326c>)
 800487a:	489b      	ldr	r0, [pc, #620]	@ (8004ae8 <hashInit.0+0x3270>)
 800487c:	f7fc ff4e 	bl	800171c <insert.1>
		insert("A/TPRAEUD", "afraid");
 8004880:	46a4      	mov	ip, r4
 8004882:	499a      	ldr	r1, [pc, #616]	@ (8004aec <hashInit.0+0x3274>)
 8004884:	489a      	ldr	r0, [pc, #616]	@ (8004af0 <hashInit.0+0x3278>)
 8004886:	f7fc ff49 	bl	800171c <insert.1>
		insert("PA*EURS", "Paris");
 800488a:	46a4      	mov	ip, r4
 800488c:	4999      	ldr	r1, [pc, #612]	@ (8004af4 <hashInit.0+0x327c>)
 800488e:	489a      	ldr	r0, [pc, #616]	@ (8004af8 <hashInit.0+0x3280>)
 8004890:	f7fc ff44 	bl	800171c <insert.1>
		insert("SEUPBLG", "single");
 8004894:	46a4      	mov	ip, r4
 8004896:	4999      	ldr	r1, [pc, #612]	@ (8004afc <hashInit.0+0x3284>)
 8004898:	4899      	ldr	r0, [pc, #612]	@ (8004b00 <hashInit.0+0x3288>)
 800489a:	f7fc ff3f 	bl	800171c <insert.1>
		insert("SKWROEU", "joy");
 800489e:	46a4      	mov	ip, r4
 80048a0:	4998      	ldr	r1, [pc, #608]	@ (8004b04 <hashInit.0+0x328c>)
 80048a2:	4899      	ldr	r0, [pc, #612]	@ (8004b08 <hashInit.0+0x3290>)
 80048a4:	f7fc ff3a 	bl	800171c <insert.1>
		insert("TPHAEPL", "enemy");
 80048a8:	46a4      	mov	ip, r4
 80048aa:	4998      	ldr	r1, [pc, #608]	@ (8004b0c <hashInit.0+0x3294>)
 80048ac:	4898      	ldr	r0, [pc, #608]	@ (8004b10 <hashInit.0+0x3298>)
 80048ae:	f7fc ff35 	bl	800171c <insert.1>
		insert("PWROEPB", "broken");
 80048b2:	46a4      	mov	ip, r4
 80048b4:	4997      	ldr	r1, [pc, #604]	@ (8004b14 <hashInit.0+0x329c>)
 80048b6:	4898      	ldr	r0, [pc, #608]	@ (8004b18 <hashInit.0+0x32a0>)
 80048b8:	f7fc ff30 	bl	800171c <insert.1>
		insert("TPH-LS", "unless");
 80048bc:	46a4      	mov	ip, r4
 80048be:	4997      	ldr	r1, [pc, #604]	@ (8004b1c <hashInit.0+0x32a4>)
 80048c0:	4897      	ldr	r0, [pc, #604]	@ (8004b20 <hashInit.0+0x32a8>)
 80048c2:	f7fc ff2b 	bl	800171c <insert.1>
		insert("STAEUTS", "states");
 80048c6:	46a4      	mov	ip, r4
 80048c8:	4996      	ldr	r1, [pc, #600]	@ (8004b24 <hashInit.0+0x32ac>)
 80048ca:	4897      	ldr	r0, [pc, #604]	@ (8004b28 <hashInit.0+0x32b0>)
 80048cc:	f7fc ff26 	bl	800171c <insert.1>
		insert("SHEUP", "ship");
 80048d0:	46a4      	mov	ip, r4
 80048d2:	4996      	ldr	r1, [pc, #600]	@ (8004b2c <hashInit.0+0x32b4>)
 80048d4:	4896      	ldr	r0, [pc, #600]	@ (8004b30 <hashInit.0+0x32b8>)
 80048d6:	f7fc ff21 	bl	800171c <insert.1>
		insert("K-PB", "condition");
 80048da:	46a4      	mov	ip, r4
 80048dc:	4995      	ldr	r1, [pc, #596]	@ (8004b34 <hashInit.0+0x32bc>)
 80048de:	4896      	ldr	r0, [pc, #600]	@ (8004b38 <hashInit.0+0x32c0>)
 80048e0:	f7fc ff1c 	bl	800171c <insert.1>
		insert("KAER", "carry");
 80048e4:	46a4      	mov	ip, r4
 80048e6:	4995      	ldr	r1, [pc, #596]	@ (8004b3c <hashInit.0+0x32c4>)
 80048e8:	4895      	ldr	r0, [pc, #596]	@ (8004b40 <hashInit.0+0x32c8>)
 80048ea:	f7fc ff17 	bl	800171c <insert.1>
		insert("SKHRAEUPLD", "exclaimed");
 80048ee:	46a4      	mov	ip, r4
 80048f0:	4994      	ldr	r1, [pc, #592]	@ (8004b44 <hashInit.0+0x32cc>)
 80048f2:	4895      	ldr	r0, [pc, #596]	@ (8004b48 <hashInit.0+0x32d0>)
 80048f4:	f7fc ff12 	bl	800171c <insert.1>
		insert("KHRUG", "including");
 80048f8:	46a4      	mov	ip, r4
 80048fa:	4994      	ldr	r1, [pc, #592]	@ (8004b4c <hashInit.0+0x32d4>)
 80048fc:	4894      	ldr	r0, [pc, #592]	@ (8004b50 <hashInit.0+0x32d8>)
 80048fe:	f7fc ff0d 	bl	800171c <insert.1>
		insert("TPEULD", "filled");
 8004902:	46a4      	mov	ip, r4
 8004904:	4993      	ldr	r1, [pc, #588]	@ (8004b54 <hashInit.0+0x32dc>)
 8004906:	4894      	ldr	r0, [pc, #592]	@ (8004b58 <hashInit.0+0x32e0>)
 8004908:	f7fc ff08 	bl	800171c <insert.1>
		insert("SAOEG", "seeing");
 800490c:	46a4      	mov	ip, r4
 800490e:	4993      	ldr	r1, [pc, #588]	@ (8004b5c <hashInit.0+0x32e4>)
 8004910:	4893      	ldr	r0, [pc, #588]	@ (8004b60 <hashInit.0+0x32e8>)
 8004912:	f7fc ff03 	bl	800171c <insert.1>
		insert("WEPBS", "influence");
 8004916:	46a4      	mov	ip, r4
 8004918:	4992      	ldr	r1, [pc, #584]	@ (8004b64 <hashInit.0+0x32ec>)
 800491a:	4893      	ldr	r0, [pc, #588]	@ (8004b68 <hashInit.0+0x32f0>)
 800491c:	f7fc fefe 	bl	800171c <insert.1>
		insert("WREU", "write");
 8004920:	46a4      	mov	ip, r4
 8004922:	4992      	ldr	r1, [pc, #584]	@ (8004b6c <hashInit.0+0x32f4>)
 8004924:	4892      	ldr	r0, [pc, #584]	@ (8004b70 <hashInit.0+0x32f8>)
 8004926:	f7fc fef9 	bl	800171c <insert.1>
		insert("PWOEUS", "boys");
 800492a:	46a4      	mov	ip, r4
 800492c:	4991      	ldr	r1, [pc, #580]	@ (8004b74 <hashInit.0+0x32fc>)
 800492e:	4892      	ldr	r0, [pc, #584]	@ (8004b78 <hashInit.0+0x3300>)
 8004930:	f7fc fef4 	bl	800171c <insert.1>
		insert("A/PAOER", "appear");
 8004934:	46a4      	mov	ip, r4
 8004936:	4991      	ldr	r1, [pc, #580]	@ (8004b7c <hashInit.0+0x3304>)
 8004938:	4891      	ldr	r0, [pc, #580]	@ (8004b80 <hashInit.0+0x3308>)
 800493a:	f7fc feef 	bl	800171c <insert.1>
 800493e:	e121      	b.n	8004b84 <hashInit.0+0x330c>
 8004940:	0800fb44 	.word	0x0800fb44
 8004944:	0800fb4c 	.word	0x0800fb4c
 8004948:	0800fb54 	.word	0x0800fb54
 800494c:	0800d608 	.word	0x0800d608
 8004950:	0800d610 	.word	0x0800d610
 8004954:	0800fb5c 	.word	0x0800fb5c
 8004958:	0800fb64 	.word	0x0800fb64
 800495c:	0800fb6c 	.word	0x0800fb6c
 8004960:	0800fb78 	.word	0x0800fb78
 8004964:	0800fb80 	.word	0x0800fb80
 8004968:	0800fb88 	.word	0x0800fb88
 800496c:	0800fb90 	.word	0x0800fb90
 8004970:	0800fb98 	.word	0x0800fb98
 8004974:	0800fba0 	.word	0x0800fba0
 8004978:	0800fba8 	.word	0x0800fba8
 800497c:	0800fbb0 	.word	0x0800fbb0
 8004980:	0800fbb8 	.word	0x0800fbb8
 8004984:	0800fbbc 	.word	0x0800fbbc
 8004988:	0800fbc0 	.word	0x0800fbc0
 800498c:	0800fbc8 	.word	0x0800fbc8
 8004990:	0800fbd0 	.word	0x0800fbd0
 8004994:	0800fbd4 	.word	0x0800fbd4
 8004998:	0800fbe0 	.word	0x0800fbe0
 800499c:	0800fbec 	.word	0x0800fbec
 80049a0:	0800fbf4 	.word	0x0800fbf4
 80049a4:	0800fbfc 	.word	0x0800fbfc
 80049a8:	0800fc04 	.word	0x0800fc04
 80049ac:	0800fc10 	.word	0x0800fc10
 80049b0:	0800fc18 	.word	0x0800fc18
 80049b4:	0800fc20 	.word	0x0800fc20
 80049b8:	0800fc28 	.word	0x0800fc28
 80049bc:	0800fc34 	.word	0x0800fc34
 80049c0:	0800fc3c 	.word	0x0800fc3c
 80049c4:	0800fc44 	.word	0x0800fc44
 80049c8:	0800fc4c 	.word	0x0800fc4c
 80049cc:	0800fc54 	.word	0x0800fc54
 80049d0:	0800fc5c 	.word	0x0800fc5c
 80049d4:	0800fc64 	.word	0x0800fc64
 80049d8:	0800fc6c 	.word	0x0800fc6c
 80049dc:	0800fc74 	.word	0x0800fc74
 80049e0:	0800fc7c 	.word	0x0800fc7c
 80049e4:	0800fc84 	.word	0x0800fc84
 80049e8:	0800fc90 	.word	0x0800fc90
 80049ec:	0800fca4 	.word	0x0800fca4
 80049f0:	0800fcb0 	.word	0x0800fcb0
 80049f4:	0800fcb8 	.word	0x0800fcb8
 80049f8:	0800fcc4 	.word	0x0800fcc4
 80049fc:	0800fccc 	.word	0x0800fccc
 8004a00:	0800fcd4 	.word	0x0800fcd4
 8004a04:	0800fcdc 	.word	0x0800fcdc
 8004a08:	0800fce4 	.word	0x0800fce4
 8004a0c:	0800fcec 	.word	0x0800fcec
 8004a10:	0800fcf4 	.word	0x0800fcf4
 8004a14:	0800fcfc 	.word	0x0800fcfc
 8004a18:	0800fd04 	.word	0x0800fd04
 8004a1c:	0800fd0c 	.word	0x0800fd0c
 8004a20:	0800fd14 	.word	0x0800fd14
 8004a24:	0800fd1c 	.word	0x0800fd1c
 8004a28:	0800fd24 	.word	0x0800fd24
 8004a2c:	0800fd2c 	.word	0x0800fd2c
 8004a30:	0800fd38 	.word	0x0800fd38
 8004a34:	0800fd40 	.word	0x0800fd40
 8004a38:	0800fd4c 	.word	0x0800fd4c
 8004a3c:	0800fd58 	.word	0x0800fd58
 8004a40:	0800fd60 	.word	0x0800fd60
 8004a44:	0800fd68 	.word	0x0800fd68
 8004a48:	0800fd70 	.word	0x0800fd70
 8004a4c:	0800fd78 	.word	0x0800fd78
 8004a50:	0800fd80 	.word	0x0800fd80
 8004a54:	0800fd88 	.word	0x0800fd88
 8004a58:	0800fd90 	.word	0x0800fd90
 8004a5c:	0800fd98 	.word	0x0800fd98
 8004a60:	0800fda4 	.word	0x0800fda4
 8004a64:	0800fdac 	.word	0x0800fdac
 8004a68:	0800fdb4 	.word	0x0800fdb4
 8004a6c:	0800fdbc 	.word	0x0800fdbc
 8004a70:	0800fdc8 	.word	0x0800fdc8
 8004a74:	0800fdd0 	.word	0x0800fdd0
 8004a78:	0800fdd8 	.word	0x0800fdd8
 8004a7c:	0800fde0 	.word	0x0800fde0
 8004a80:	0800fde4 	.word	0x0800fde4
 8004a84:	0800fdec 	.word	0x0800fdec
 8004a88:	0800fdf8 	.word	0x0800fdf8
 8004a8c:	0800fe00 	.word	0x0800fe00
 8004a90:	0800fe08 	.word	0x0800fe08
 8004a94:	0800fe10 	.word	0x0800fe10
 8004a98:	0800fe18 	.word	0x0800fe18
 8004a9c:	0800fe20 	.word	0x0800fe20
 8004aa0:	0800fe28 	.word	0x0800fe28
 8004aa4:	0800fe34 	.word	0x0800fe34
 8004aa8:	0800fe40 	.word	0x0800fe40
 8004aac:	0800fe4c 	.word	0x0800fe4c
 8004ab0:	0800fe58 	.word	0x0800fe58
 8004ab4:	0800fe60 	.word	0x0800fe60
 8004ab8:	0800fe68 	.word	0x0800fe68
 8004abc:	0800fe6c 	.word	0x0800fe6c
 8004ac0:	0800fe74 	.word	0x0800fe74
 8004ac4:	0800fe7c 	.word	0x0800fe7c
 8004ac8:	0800fe84 	.word	0x0800fe84
 8004acc:	0800fe8c 	.word	0x0800fe8c
 8004ad0:	0800fe98 	.word	0x0800fe98
 8004ad4:	0800fea0 	.word	0x0800fea0
 8004ad8:	0800fea8 	.word	0x0800fea8
 8004adc:	0800feb4 	.word	0x0800feb4
 8004ae0:	0800feb8 	.word	0x0800feb8
 8004ae4:	0800febc 	.word	0x0800febc
 8004ae8:	0800fec4 	.word	0x0800fec4
 8004aec:	0800fecc 	.word	0x0800fecc
 8004af0:	0800fed4 	.word	0x0800fed4
 8004af4:	0800fee0 	.word	0x0800fee0
 8004af8:	0800fee8 	.word	0x0800fee8
 8004afc:	0800fef0 	.word	0x0800fef0
 8004b00:	0800fef8 	.word	0x0800fef8
 8004b04:	0800ff00 	.word	0x0800ff00
 8004b08:	0800ff04 	.word	0x0800ff04
 8004b0c:	0800ff0c 	.word	0x0800ff0c
 8004b10:	0800ff14 	.word	0x0800ff14
 8004b14:	0800ff1c 	.word	0x0800ff1c
 8004b18:	0800ff24 	.word	0x0800ff24
 8004b1c:	0800ff2c 	.word	0x0800ff2c
 8004b20:	0800ff34 	.word	0x0800ff34
 8004b24:	0800ff3c 	.word	0x0800ff3c
 8004b28:	0800ff44 	.word	0x0800ff44
 8004b2c:	0800ff4c 	.word	0x0800ff4c
 8004b30:	0800ff54 	.word	0x0800ff54
 8004b34:	0800ff5c 	.word	0x0800ff5c
 8004b38:	0800ff68 	.word	0x0800ff68
 8004b3c:	0800ff70 	.word	0x0800ff70
 8004b40:	0800ff78 	.word	0x0800ff78
 8004b44:	0800ff80 	.word	0x0800ff80
 8004b48:	0800ff8c 	.word	0x0800ff8c
 8004b4c:	0800ff98 	.word	0x0800ff98
 8004b50:	0800ffa4 	.word	0x0800ffa4
 8004b54:	0800ffac 	.word	0x0800ffac
 8004b58:	0800ffb4 	.word	0x0800ffb4
 8004b5c:	0800ffbc 	.word	0x0800ffbc
 8004b60:	0800ffc4 	.word	0x0800ffc4
 8004b64:	0800ffcc 	.word	0x0800ffcc
 8004b68:	0800ffd8 	.word	0x0800ffd8
 8004b6c:	0800ffe0 	.word	0x0800ffe0
 8004b70:	0800ffe8 	.word	0x0800ffe8
 8004b74:	0800fff0 	.word	0x0800fff0
 8004b78:	0800fff8 	.word	0x0800fff8
 8004b7c:	08010000 	.word	0x08010000
 8004b80:	08010008 	.word	0x08010008
		insert("OUDZ", "outside");
 8004b84:	46a4      	mov	ip, r4
 8004b86:	49b5      	ldr	r1, [pc, #724]	@ (8004e5c <hashInit.0+0x35e4>)
 8004b88:	48b5      	ldr	r0, [pc, #724]	@ (8004e60 <hashInit.0+0x35e8>)
 8004b8a:	f7fc fdc7 	bl	800171c <insert.1>
		insert("SKRET", "secret");
 8004b8e:	46a4      	mov	ip, r4
 8004b90:	49b4      	ldr	r1, [pc, #720]	@ (8004e64 <hashInit.0+0x35ec>)
 8004b92:	48b5      	ldr	r0, [pc, #724]	@ (8004e68 <hashInit.0+0x35f0>)
 8004b94:	f7fc fdc2 	bl	800171c <insert.1>
		insert("PARTS", "parts");
 8004b98:	46a4      	mov	ip, r4
 8004b9a:	49b4      	ldr	r1, [pc, #720]	@ (8004e6c <hashInit.0+0x35f4>)
 8004b9c:	48b4      	ldr	r0, [pc, #720]	@ (8004e70 <hashInit.0+0x35f8>)
 8004b9e:	f7fc fdbd 	bl	800171c <insert.1>
		insert("PHRES", "please");
 8004ba2:	46a4      	mov	ip, r4
 8004ba4:	49b3      	ldr	r1, [pc, #716]	@ (8004e74 <hashInit.0+0x35fc>)
 8004ba6:	48b4      	ldr	r0, [pc, #720]	@ (8004e78 <hashInit.0+0x3600>)
 8004ba8:	f7fc fdb8 	bl	800171c <insert.1>
		insert("PAOERPBS", "appearance");
 8004bac:	46a4      	mov	ip, r4
 8004bae:	49b3      	ldr	r1, [pc, #716]	@ (8004e7c <hashInit.0+0x3604>)
 8004bb0:	48b3      	ldr	r0, [pc, #716]	@ (8004e80 <hashInit.0+0x3608>)
 8004bb2:	f7fc fdb3 	bl	800171c <insert.1>
		insert("AOEFL", "evil");
 8004bb6:	46a4      	mov	ip, r4
 8004bb8:	49b2      	ldr	r1, [pc, #712]	@ (8004e84 <hashInit.0+0x360c>)
 8004bba:	48b3      	ldr	r0, [pc, #716]	@ (8004e88 <hashInit.0+0x3610>)
 8004bbc:	f7fc fdae 	bl	800171c <insert.1>
		insert("PHAFRPB", "march");
 8004bc0:	46a4      	mov	ip, r4
 8004bc2:	49b2      	ldr	r1, [pc, #712]	@ (8004e8c <hashInit.0+0x3614>)
 8004bc4:	48b2      	ldr	r0, [pc, #712]	@ (8004e90 <hashInit.0+0x3618>)
 8004bc6:	f7fc fda9 	bl	800171c <insert.1>
		insert("SKWRORPBLG", "George");
 8004bca:	46a4      	mov	ip, r4
 8004bcc:	49b1      	ldr	r1, [pc, #708]	@ (8004e94 <hashInit.0+0x361c>)
 8004bce:	48b2      	ldr	r0, [pc, #712]	@ (8004e98 <hashInit.0+0x3620>)
 8004bd0:	f7fc fda4 	bl	800171c <insert.1>
		insert("WHAF", "whatever");
 8004bd4:	46a4      	mov	ip, r4
 8004bd6:	49b1      	ldr	r1, [pc, #708]	@ (8004e9c <hashInit.0+0x3624>)
 8004bd8:	48b1      	ldr	r0, [pc, #708]	@ (8004ea0 <hashInit.0+0x3628>)
 8004bda:	f7fc fd9f 	bl	800171c <insert.1>
		insert("SHROEL", "slowly");
 8004bde:	46a4      	mov	ip, r4
 8004be0:	49b0      	ldr	r1, [pc, #704]	@ (8004ea4 <hashInit.0+0x362c>)
 8004be2:	48b1      	ldr	r0, [pc, #708]	@ (8004ea8 <hashInit.0+0x3630>)
 8004be4:	f7fc fd9a 	bl	800171c <insert.1>
		insert("TAERS", "tears");
 8004be8:	46a4      	mov	ip, r4
 8004bea:	49b0      	ldr	r1, [pc, #704]	@ (8004eac <hashInit.0+0x3634>)
 8004bec:	48b0      	ldr	r0, [pc, #704]	@ (8004eb0 <hashInit.0+0x3638>)
 8004bee:	f7fc fd95 	bl	800171c <insert.1>
		insert("HORS/-S", "horses");
 8004bf2:	46a4      	mov	ip, r4
 8004bf4:	49af      	ldr	r1, [pc, #700]	@ (8004eb4 <hashInit.0+0x363c>)
 8004bf6:	48b0      	ldr	r0, [pc, #704]	@ (8004eb8 <hashInit.0+0x3640>)
 8004bf8:	f7fc fd90 	bl	800171c <insert.1>
		insert("PHRAEUFS", "places");
 8004bfc:	46a4      	mov	ip, r4
 8004bfe:	49af      	ldr	r1, [pc, #700]	@ (8004ebc <hashInit.0+0x3644>)
 8004c00:	48af      	ldr	r0, [pc, #700]	@ (8004ec0 <hashInit.0+0x3648>)
 8004c02:	f7fc fd8b 	bl	800171c <insert.1>
		insert("KAUT", "caught");
 8004c06:	46a4      	mov	ip, r4
 8004c08:	49ae      	ldr	r1, [pc, #696]	@ (8004ec4 <hashInit.0+0x364c>)
 8004c0a:	48af      	ldr	r0, [pc, #700]	@ (8004ec8 <hashInit.0+0x3650>)
 8004c0c:	f7fc fd86 	bl	800171c <insert.1>
		insert("STAEU", "stay");
 8004c10:	46a4      	mov	ip, r4
 8004c12:	49ae      	ldr	r1, [pc, #696]	@ (8004ecc <hashInit.0+0x3654>)
 8004c14:	48ae      	ldr	r0, [pc, #696]	@ (8004ed0 <hashInit.0+0x3658>)
 8004c16:	f7fc fd81 	bl	800171c <insert.1>
		insert("STPHED", "instead");
 8004c1a:	46a4      	mov	ip, r4
 8004c1c:	49ad      	ldr	r1, [pc, #692]	@ (8004ed4 <hashInit.0+0x365c>)
 8004c1e:	48ae      	ldr	r0, [pc, #696]	@ (8004ed8 <hashInit.0+0x3660>)
 8004c20:	f7fc fd7c 	bl	800171c <insert.1>
		insert("STRUBG", "struck");
 8004c24:	46a4      	mov	ip, r4
 8004c26:	49ad      	ldr	r1, [pc, #692]	@ (8004edc <hashInit.0+0x3664>)
 8004c28:	48ad      	ldr	r0, [pc, #692]	@ (8004ee0 <hashInit.0+0x3668>)
 8004c2a:	f7fc fd77 	bl	800171c <insert.1>
		insert("PWHRU", "blue");
 8004c2e:	46a4      	mov	ip, r4
 8004c30:	49ac      	ldr	r1, [pc, #688]	@ (8004ee4 <hashInit.0+0x366c>)
 8004c32:	48ad      	ldr	r0, [pc, #692]	@ (8004ee8 <hashInit.0+0x3670>)
 8004c34:	f7fc fd72 	bl	800171c <insert.1>
		insert("KWRORBG", "York");
 8004c38:	46a4      	mov	ip, r4
 8004c3a:	49ac      	ldr	r1, [pc, #688]	@ (8004eec <hashInit.0+0x3674>)
 8004c3c:	48ac      	ldr	r0, [pc, #688]	@ (8004ef0 <hashInit.0+0x3678>)
 8004c3e:	f7fc fd6d 	bl	800171c <insert.1>
		insert("EUPL/POB", "impossible");
 8004c42:	46a4      	mov	ip, r4
 8004c44:	49ab      	ldr	r1, [pc, #684]	@ (8004ef4 <hashInit.0+0x367c>)
 8004c46:	48ac      	ldr	r0, [pc, #688]	@ (8004ef8 <hashInit.0+0x3680>)
 8004c48:	f7fc fd68 	bl	800171c <insert.1>
		insert("PAOERD", "period");
 8004c4c:	46a4      	mov	ip, r4
 8004c4e:	49ab      	ldr	r1, [pc, #684]	@ (8004efc <hashInit.0+0x3684>)
 8004c50:	48ab      	ldr	r0, [pc, #684]	@ (8004f00 <hashInit.0+0x3688>)
 8004c52:	f7fc fd63 	bl	800171c <insert.1>
		insert("ST-R", "sister");
 8004c56:	46a4      	mov	ip, r4
 8004c58:	49aa      	ldr	r1, [pc, #680]	@ (8004f04 <hashInit.0+0x368c>)
 8004c5a:	48ab      	ldr	r0, [pc, #684]	@ (8004f08 <hashInit.0+0x3690>)
 8004c5c:	f7fc fd5e 	bl	800171c <insert.1>
		insert("PWA*LT", "battle");
 8004c60:	46a4      	mov	ip, r4
 8004c62:	49aa      	ldr	r1, [pc, #680]	@ (8004f0c <hashInit.0+0x3694>)
 8004c64:	48aa      	ldr	r0, [pc, #680]	@ (8004f10 <hashInit.0+0x3698>)
 8004c66:	f7fc fd59 	bl	800171c <insert.1>
		insert("SKAOL", "school");
 8004c6a:	46a4      	mov	ip, r4
 8004c6c:	49a9      	ldr	r1, [pc, #676]	@ (8004f14 <hashInit.0+0x369c>)
 8004c6e:	48aa      	ldr	r0, [pc, #680]	@ (8004f18 <hashInit.0+0x36a0>)
 8004c70:	f7fc fd54 	bl	800171c <insert.1>
		insert("PHA*ER", "Mary");
 8004c74:	46a4      	mov	ip, r4
 8004c76:	49a9      	ldr	r1, [pc, #676]	@ (8004f1c <hashInit.0+0x36a4>)
 8004c78:	48a9      	ldr	r0, [pc, #676]	@ (8004f20 <hashInit.0+0x36a8>)
 8004c7a:	f7fc fd4f 	bl	800171c <insert.1>
		insert("RA*EUFD", "raised");
 8004c7e:	46a4      	mov	ip, r4
 8004c80:	49a8      	ldr	r1, [pc, #672]	@ (8004f24 <hashInit.0+0x36ac>)
 8004c82:	48a9      	ldr	r0, [pc, #676]	@ (8004f28 <hashInit.0+0x36b0>)
 8004c84:	f7fc fd4a 	bl	800171c <insert.1>
		insert("KWAEUGS", "occasion");
 8004c88:	46a4      	mov	ip, r4
 8004c8a:	49a8      	ldr	r1, [pc, #672]	@ (8004f2c <hashInit.0+0x36b4>)
 8004c8c:	48a8      	ldr	r0, [pc, #672]	@ (8004f30 <hashInit.0+0x36b8>)
 8004c8e:	f7fc fd45 	bl	800171c <insert.1>
		insert("PHAERD", "married");
 8004c92:	46a4      	mov	ip, r4
 8004c94:	49a7      	ldr	r1, [pc, #668]	@ (8004f34 <hashInit.0+0x36bc>)
 8004c96:	48a8      	ldr	r0, [pc, #672]	@ (8004f38 <hashInit.0+0x36c0>)
 8004c98:	f7fc fd40 	bl	800171c <insert.1>
		insert("PHAPB/AES", "man's");
 8004c9c:	46a4      	mov	ip, r4
 8004c9e:	49a7      	ldr	r1, [pc, #668]	@ (8004f3c <hashInit.0+0x36c4>)
 8004ca0:	48a7      	ldr	r0, [pc, #668]	@ (8004f40 <hashInit.0+0x36c8>)
 8004ca2:	f7fc fd3b 	bl	800171c <insert.1>
		insert("TPRORPL", "former");
 8004ca6:	46a4      	mov	ip, r4
 8004ca8:	49a6      	ldr	r1, [pc, #664]	@ (8004f44 <hashInit.0+0x36cc>)
 8004caa:	48a7      	ldr	r0, [pc, #668]	@ (8004f48 <hashInit.0+0x36d0>)
 8004cac:	f7fc fd36 	bl	800171c <insert.1>
		insert("TPAOD", "food");
 8004cb0:	46a4      	mov	ip, r4
 8004cb2:	49a6      	ldr	r1, [pc, #664]	@ (8004f4c <hashInit.0+0x36d4>)
 8004cb4:	48a6      	ldr	r0, [pc, #664]	@ (8004f50 <hashInit.0+0x36d8>)
 8004cb6:	f7fc fd31 	bl	800171c <insert.1>
		insert("KWRAO*UT", "youth");
 8004cba:	46a4      	mov	ip, r4
 8004cbc:	49a5      	ldr	r1, [pc, #660]	@ (8004f54 <hashInit.0+0x36dc>)
 8004cbe:	48a6      	ldr	r0, [pc, #664]	@ (8004f58 <hashInit.0+0x36e0>)
 8004cc0:	f7fc fd2c 	bl	800171c <insert.1>
		insert("HRERPBD", "learned");
 8004cc4:	46a4      	mov	ip, r4
 8004cc6:	49a5      	ldr	r1, [pc, #660]	@ (8004f5c <hashInit.0+0x36e4>)
 8004cc8:	48a5      	ldr	r0, [pc, #660]	@ (8004f60 <hashInit.0+0x36e8>)
 8004cca:	f7fc fd27 	bl	800171c <insert.1>
		insert("PHAOERL", "merely");
 8004cce:	46a4      	mov	ip, r4
 8004cd0:	49a4      	ldr	r1, [pc, #656]	@ (8004f64 <hashInit.0+0x36ec>)
 8004cd2:	48a5      	ldr	r0, [pc, #660]	@ (8004f68 <hashInit.0+0x36f0>)
 8004cd4:	f7fc fd22 	bl	800171c <insert.1>
		insert("RAOEFP", "reach");
 8004cd8:	46a4      	mov	ip, r4
 8004cda:	49a4      	ldr	r1, [pc, #656]	@ (8004f6c <hashInit.0+0x36f4>)
 8004cdc:	48a4      	ldr	r0, [pc, #656]	@ (8004f70 <hashInit.0+0x36f8>)
 8004cde:	f7fc fd1d 	bl	800171c <insert.1>
		insert("S-PL", "system");
 8004ce2:	46a4      	mov	ip, r4
 8004ce4:	49a3      	ldr	r1, [pc, #652]	@ (8004f74 <hashInit.0+0x36fc>)
 8004ce6:	48a4      	ldr	r0, [pc, #656]	@ (8004f78 <hashInit.0+0x3700>)
 8004ce8:	f7fc fd18 	bl	800171c <insert.1>
		insert("TWEPBT", "twenty");
 8004cec:	46a4      	mov	ip, r4
 8004cee:	49a3      	ldr	r1, [pc, #652]	@ (8004f7c <hashInit.0+0x3704>)
 8004cf0:	48a3      	ldr	r0, [pc, #652]	@ (8004f80 <hashInit.0+0x3708>)
 8004cf2:	f7fc fd13 	bl	800171c <insert.1>
		insert("TKEURPB", "dinner");
 8004cf6:	46a4      	mov	ip, r4
 8004cf8:	49a2      	ldr	r1, [pc, #648]	@ (8004f84 <hashInit.0+0x370c>)
 8004cfa:	48a3      	ldr	r0, [pc, #652]	@ (8004f88 <hashInit.0+0x3710>)
 8004cfc:	f7fc fd0e 	bl	800171c <insert.1>
		insert("KWAO*EUT", "quiet");
 8004d00:	46a4      	mov	ip, r4
 8004d02:	49a2      	ldr	r1, [pc, #648]	@ (8004f8c <hashInit.0+0x3714>)
 8004d04:	48a2      	ldr	r0, [pc, #648]	@ (8004f90 <hashInit.0+0x3718>)
 8004d06:	f7fc fd09 	bl	800171c <insert.1>
		insert("AOELS", "easily");
 8004d0a:	46a4      	mov	ip, r4
 8004d0c:	49a1      	ldr	r1, [pc, #644]	@ (8004f94 <hashInit.0+0x371c>)
 8004d0e:	48a2      	ldr	r0, [pc, #648]	@ (8004f98 <hashInit.0+0x3720>)
 8004d10:	f7fc fd04 	bl	800171c <insert.1>
		insert("PHOFD", "moved");
 8004d14:	46a4      	mov	ip, r4
 8004d16:	49a1      	ldr	r1, [pc, #644]	@ (8004f9c <hashInit.0+0x3724>)
 8004d18:	48a1      	ldr	r0, [pc, #644]	@ (8004fa0 <hashInit.0+0x3728>)
 8004d1a:	f7fc fcff 	bl	800171c <insert.1>
		insert("A*FRDZ", "afterwards");
 8004d1e:	46a4      	mov	ip, r4
 8004d20:	49a0      	ldr	r1, [pc, #640]	@ (8004fa4 <hashInit.0+0x372c>)
 8004d22:	48a1      	ldr	r0, [pc, #644]	@ (8004fa8 <hashInit.0+0x3730>)
 8004d24:	f7fc fcfa 	bl	800171c <insert.1>
		insert("TKPWEUFG", "giving");
 8004d28:	46a4      	mov	ip, r4
 8004d2a:	49a0      	ldr	r1, [pc, #640]	@ (8004fac <hashInit.0+0x3734>)
 8004d2c:	48a0      	ldr	r0, [pc, #640]	@ (8004fb0 <hashInit.0+0x3738>)
 8004d2e:	f7fc fcf5 	bl	800171c <insert.1>
		insert("WAUBG", "walk");
 8004d32:	46a4      	mov	ip, r4
 8004d34:	499f      	ldr	r1, [pc, #636]	@ (8004fb4 <hashInit.0+0x373c>)
 8004d36:	48a0      	ldr	r0, [pc, #640]	@ (8004fb8 <hashInit.0+0x3740>)
 8004d38:	f7fc fcf0 	bl	800171c <insert.1>
		insert("STOPD", "stopped");
 8004d3c:	46a4      	mov	ip, r4
 8004d3e:	499f      	ldr	r1, [pc, #636]	@ (8004fbc <hashInit.0+0x3744>)
 8004d40:	489f      	ldr	r0, [pc, #636]	@ (8004fc0 <hashInit.0+0x3748>)
 8004d42:	f7fc fceb 	bl	800171c <insert.1>
		insert("HRAFD", "laughed");
 8004d46:	46a4      	mov	ip, r4
 8004d48:	499e      	ldr	r1, [pc, #632]	@ (8004fc4 <hashInit.0+0x374c>)
 8004d4a:	489f      	ldr	r0, [pc, #636]	@ (8004fc8 <hashInit.0+0x3750>)
 8004d4c:	f7fc fce6 	bl	800171c <insert.1>
		insert("HRAPBL", "language");
 8004d50:	46a4      	mov	ip, r4
 8004d52:	499e      	ldr	r1, [pc, #632]	@ (8004fcc <hashInit.0+0x3754>)
 8004d54:	489e      	ldr	r0, [pc, #632]	@ (8004fd0 <hashInit.0+0x3758>)
 8004d56:	f7fc fce1 	bl	800171c <insert.1>
		insert("EBGS/PREGS", "expression");
 8004d5a:	46a4      	mov	ip, r4
 8004d5c:	499d      	ldr	r1, [pc, #628]	@ (8004fd4 <hashInit.0+0x375c>)
 8004d5e:	489e      	ldr	r0, [pc, #632]	@ (8004fd8 <hashInit.0+0x3760>)
 8004d60:	f7fc fcdc 	bl	800171c <insert.1>
		insert("WAOEBG", "week");
 8004d64:	46a4      	mov	ip, r4
 8004d66:	499d      	ldr	r1, [pc, #628]	@ (8004fdc <hashInit.0+0x3764>)
 8004d68:	489d      	ldr	r0, [pc, #628]	@ (8004fe0 <hashInit.0+0x3768>)
 8004d6a:	f7fc fcd7 	bl	800171c <insert.1>
		insert("HAUL", "hall");
 8004d6e:	46a4      	mov	ip, r4
 8004d70:	499c      	ldr	r1, [pc, #624]	@ (8004fe4 <hashInit.0+0x376c>)
 8004d72:	489d      	ldr	r0, [pc, #628]	@ (8004fe8 <hashInit.0+0x3770>)
 8004d74:	f7fc fcd2 	bl	800171c <insert.1>
		insert("TKAEUPBLG", "danger");
 8004d78:	46a4      	mov	ip, r4
 8004d7a:	499c      	ldr	r1, [pc, #624]	@ (8004fec <hashInit.0+0x3774>)
 8004d7c:	489c      	ldr	r0, [pc, #624]	@ (8004ff0 <hashInit.0+0x3778>)
 8004d7e:	f7fc fccd 	bl	800171c <insert.1>
		insert("PROT", "property");
 8004d82:	46a4      	mov	ip, r4
 8004d84:	499b      	ldr	r1, [pc, #620]	@ (8004ff4 <hashInit.0+0x377c>)
 8004d86:	489c      	ldr	r0, [pc, #624]	@ (8004ff8 <hashInit.0+0x3780>)
 8004d88:	f7fc fcc8 	bl	800171c <insert.1>
		insert("WOPBD", "wonder");
 8004d8c:	46a4      	mov	ip, r4
 8004d8e:	499b      	ldr	r1, [pc, #620]	@ (8004ffc <hashInit.0+0x3784>)
 8004d90:	489b      	ldr	r0, [pc, #620]	@ (8005000 <hashInit.0+0x3788>)
 8004d92:	f7fc fcc3 	bl	800171c <insert.1>
		insert("AOURB", "usual");
 8004d96:	46a4      	mov	ip, r4
 8004d98:	499a      	ldr	r1, [pc, #616]	@ (8005004 <hashInit.0+0x378c>)
 8004d9a:	489b      	ldr	r0, [pc, #620]	@ (8005008 <hashInit.0+0x3790>)
 8004d9c:	f7fc fcbe 	bl	800171c <insert.1>
		insert("TPEUG", "figure");
 8004da0:	46a4      	mov	ip, r4
 8004da2:	499a      	ldr	r1, [pc, #616]	@ (800500c <hashInit.0+0x3794>)
 8004da4:	489a      	ldr	r0, [pc, #616]	@ (8005010 <hashInit.0+0x3798>)
 8004da6:	f7fc fcb9 	bl	800171c <insert.1>
		insert("PWORPB", "born");
 8004daa:	46a4      	mov	ip, r4
 8004dac:	4999      	ldr	r1, [pc, #612]	@ (8005014 <hashInit.0+0x379c>)
 8004dae:	489a      	ldr	r0, [pc, #616]	@ (8005018 <hashInit.0+0x37a0>)
 8004db0:	f7fc fcb4 	bl	800171c <insert.1>
		insert("KORT", "court");
 8004db4:	46a4      	mov	ip, r4
 8004db6:	4999      	ldr	r1, [pc, #612]	@ (800501c <hashInit.0+0x37a4>)
 8004db8:	4899      	ldr	r0, [pc, #612]	@ (8005020 <hashInit.0+0x37a8>)
 8004dba:	f7fc fcaf 	bl	800171c <insert.1>
		insert("SKWRERPBL", "generally");
 8004dbe:	46a4      	mov	ip, r4
 8004dc0:	4998      	ldr	r1, [pc, #608]	@ (8005024 <hashInit.0+0x37ac>)
 8004dc2:	4899      	ldr	r0, [pc, #612]	@ (8005028 <hashInit.0+0x37b0>)
 8004dc4:	f7fc fcaa 	bl	800171c <insert.1>
		insert("TKPWRAOU", "grew");
 8004dc8:	46a4      	mov	ip, r4
 8004dca:	4998      	ldr	r1, [pc, #608]	@ (800502c <hashInit.0+0x37b4>)
 8004dcc:	4898      	ldr	r0, [pc, #608]	@ (8005030 <hashInit.0+0x37b8>)
 8004dce:	f7fc fca5 	bl	800171c <insert.1>
		insert("SHOED", "showed");
 8004dd2:	46a4      	mov	ip, r4
 8004dd4:	4997      	ldr	r1, [pc, #604]	@ (8005034 <hashInit.0+0x37bc>)
 8004dd6:	4898      	ldr	r0, [pc, #608]	@ (8005038 <hashInit.0+0x37c0>)
 8004dd8:	f7fc fca0 	bl	800171c <insert.1>
		insert("TKPWEGT", "getting");
 8004ddc:	46a4      	mov	ip, r4
 8004dde:	4997      	ldr	r1, [pc, #604]	@ (800503c <hashInit.0+0x37c4>)
 8004de0:	4897      	ldr	r0, [pc, #604]	@ (8005040 <hashInit.0+0x37c8>)
 8004de2:	f7fc fc9b 	bl	800171c <insert.1>
		insert("AEURBT", "ancient");
 8004de6:	46a4      	mov	ip, r4
 8004de8:	4996      	ldr	r1, [pc, #600]	@ (8005044 <hashInit.0+0x37cc>)
 8004dea:	4897      	ldr	r0, [pc, #604]	@ (8005048 <hashInit.0+0x37d0>)
 8004dec:	f7fc fc96 	bl	800171c <insert.1>
		insert("R-PT", "respect");
 8004df0:	46a4      	mov	ip, r4
 8004df2:	4996      	ldr	r1, [pc, #600]	@ (800504c <hashInit.0+0x37d4>)
 8004df4:	4896      	ldr	r0, [pc, #600]	@ (8005050 <hashInit.0+0x37d8>)
 8004df6:	f7fc fc91 	bl	800171c <insert.1>
		insert("THEURD", "third");
 8004dfa:	46a4      	mov	ip, r4
 8004dfc:	4995      	ldr	r1, [pc, #596]	@ (8005054 <hashInit.0+0x37dc>)
 8004dfe:	4896      	ldr	r0, [pc, #600]	@ (8005058 <hashInit.0+0x37e0>)
 8004e00:	f7fc fc8c 	bl	800171c <insert.1>
		insert("WO*RT", "worth");
 8004e04:	46a4      	mov	ip, r4
 8004e06:	4995      	ldr	r1, [pc, #596]	@ (800505c <hashInit.0+0x37e4>)
 8004e08:	4895      	ldr	r0, [pc, #596]	@ (8005060 <hashInit.0+0x37e8>)
 8004e0a:	f7fc fc87 	bl	800171c <insert.1>
		insert("S*EUPL", "simple");
 8004e0e:	46a4      	mov	ip, r4
 8004e10:	4994      	ldr	r1, [pc, #592]	@ (8005064 <hashInit.0+0x37ec>)
 8004e12:	4895      	ldr	r0, [pc, #596]	@ (8005068 <hashInit.0+0x37f0>)
 8004e14:	f7fc fc82 	bl	800171c <insert.1>
		insert("TRAOE", "tree");
 8004e18:	46a4      	mov	ip, r4
 8004e1a:	4994      	ldr	r1, [pc, #592]	@ (800506c <hashInit.0+0x37f4>)
 8004e1c:	4894      	ldr	r0, [pc, #592]	@ (8005070 <hashInit.0+0x37f8>)
 8004e1e:	f7fc fc7d 	bl	800171c <insert.1>
		insert("HREFG", "leaving");
 8004e22:	46a4      	mov	ip, r4
 8004e24:	4993      	ldr	r1, [pc, #588]	@ (8005074 <hashInit.0+0x37fc>)
 8004e26:	4894      	ldr	r0, [pc, #592]	@ (8005078 <hashInit.0+0x3800>)
 8004e28:	f7fc fc78 	bl	800171c <insert.1>
		insert("RAEUPL", "remain");
 8004e2c:	46a4      	mov	ip, r4
 8004e2e:	4993      	ldr	r1, [pc, #588]	@ (800507c <hashInit.0+0x3804>)
 8004e30:	4893      	ldr	r0, [pc, #588]	@ (8005080 <hashInit.0+0x3808>)
 8004e32:	f7fc fc73 	bl	800171c <insert.1>
		insert("SOET", "society");
 8004e36:	46a4      	mov	ip, r4
 8004e38:	4992      	ldr	r1, [pc, #584]	@ (8005084 <hashInit.0+0x380c>)
 8004e3a:	4893      	ldr	r0, [pc, #588]	@ (8005088 <hashInit.0+0x3810>)
 8004e3c:	f7fc fc6e 	bl	800171c <insert.1>
		insert("TPAOEUT", "fight");
 8004e40:	46a4      	mov	ip, r4
 8004e42:	4992      	ldr	r1, [pc, #584]	@ (800508c <hashInit.0+0x3814>)
 8004e44:	4892      	ldr	r0, [pc, #584]	@ (8005090 <hashInit.0+0x3818>)
 8004e46:	f7fc fc69 	bl	800171c <insert.1>
		insert("WAUL", "wall");
 8004e4a:	46a4      	mov	ip, r4
 8004e4c:	4991      	ldr	r1, [pc, #580]	@ (8005094 <hashInit.0+0x381c>)
 8004e4e:	4892      	ldr	r0, [pc, #584]	@ (8005098 <hashInit.0+0x3820>)
 8004e50:	f7fc fc64 	bl	800171c <insert.1>
		insert("RULT", "result");
 8004e54:	46a4      	mov	ip, r4
 8004e56:	4991      	ldr	r1, [pc, #580]	@ (800509c <hashInit.0+0x3824>)
 8004e58:	e122      	b.n	80050a0 <hashInit.0+0x3828>
 8004e5a:	bf00      	nop
 8004e5c:	08010010 	.word	0x08010010
 8004e60:	08010018 	.word	0x08010018
 8004e64:	08010020 	.word	0x08010020
 8004e68:	08010028 	.word	0x08010028
 8004e6c:	08010030 	.word	0x08010030
 8004e70:	08010038 	.word	0x08010038
 8004e74:	08010040 	.word	0x08010040
 8004e78:	08010048 	.word	0x08010048
 8004e7c:	08010050 	.word	0x08010050
 8004e80:	0801005c 	.word	0x0801005c
 8004e84:	08010068 	.word	0x08010068
 8004e88:	08010070 	.word	0x08010070
 8004e8c:	08010078 	.word	0x08010078
 8004e90:	08010080 	.word	0x08010080
 8004e94:	08010088 	.word	0x08010088
 8004e98:	08010090 	.word	0x08010090
 8004e9c:	0801009c 	.word	0x0801009c
 8004ea0:	080100a8 	.word	0x080100a8
 8004ea4:	080100b0 	.word	0x080100b0
 8004ea8:	080100b8 	.word	0x080100b8
 8004eac:	080100c0 	.word	0x080100c0
 8004eb0:	080100c8 	.word	0x080100c8
 8004eb4:	080100d0 	.word	0x080100d0
 8004eb8:	080100d8 	.word	0x080100d8
 8004ebc:	080100e0 	.word	0x080100e0
 8004ec0:	080100e8 	.word	0x080100e8
 8004ec4:	080100f4 	.word	0x080100f4
 8004ec8:	080100fc 	.word	0x080100fc
 8004ecc:	08010104 	.word	0x08010104
 8004ed0:	0801010c 	.word	0x0801010c
 8004ed4:	08010114 	.word	0x08010114
 8004ed8:	0801011c 	.word	0x0801011c
 8004edc:	08010124 	.word	0x08010124
 8004ee0:	0801012c 	.word	0x0801012c
 8004ee4:	08010134 	.word	0x08010134
 8004ee8:	0801013c 	.word	0x0801013c
 8004eec:	08010144 	.word	0x08010144
 8004ef0:	0801014c 	.word	0x0801014c
 8004ef4:	08010154 	.word	0x08010154
 8004ef8:	08010160 	.word	0x08010160
 8004efc:	0801016c 	.word	0x0801016c
 8004f00:	08010174 	.word	0x08010174
 8004f04:	0801017c 	.word	0x0801017c
 8004f08:	08010184 	.word	0x08010184
 8004f0c:	0801018c 	.word	0x0801018c
 8004f10:	08010194 	.word	0x08010194
 8004f14:	0801019c 	.word	0x0801019c
 8004f18:	080101a4 	.word	0x080101a4
 8004f1c:	080101ac 	.word	0x080101ac
 8004f20:	080101b4 	.word	0x080101b4
 8004f24:	080101bc 	.word	0x080101bc
 8004f28:	080101c4 	.word	0x080101c4
 8004f2c:	080101cc 	.word	0x080101cc
 8004f30:	080101d8 	.word	0x080101d8
 8004f34:	080101e0 	.word	0x080101e0
 8004f38:	080101e8 	.word	0x080101e8
 8004f3c:	080101f0 	.word	0x080101f0
 8004f40:	080101f8 	.word	0x080101f8
 8004f44:	08010204 	.word	0x08010204
 8004f48:	0801020c 	.word	0x0801020c
 8004f4c:	08010214 	.word	0x08010214
 8004f50:	0801021c 	.word	0x0801021c
 8004f54:	08010224 	.word	0x08010224
 8004f58:	0801022c 	.word	0x0801022c
 8004f5c:	08010238 	.word	0x08010238
 8004f60:	08010240 	.word	0x08010240
 8004f64:	08010248 	.word	0x08010248
 8004f68:	08010250 	.word	0x08010250
 8004f6c:	08010258 	.word	0x08010258
 8004f70:	08010260 	.word	0x08010260
 8004f74:	08010268 	.word	0x08010268
 8004f78:	08010270 	.word	0x08010270
 8004f7c:	08010278 	.word	0x08010278
 8004f80:	08010280 	.word	0x08010280
 8004f84:	08010288 	.word	0x08010288
 8004f88:	08010290 	.word	0x08010290
 8004f8c:	08010298 	.word	0x08010298
 8004f90:	080102a0 	.word	0x080102a0
 8004f94:	080102ac 	.word	0x080102ac
 8004f98:	080102b4 	.word	0x080102b4
 8004f9c:	080102bc 	.word	0x080102bc
 8004fa0:	080102c4 	.word	0x080102c4
 8004fa4:	080102cc 	.word	0x080102cc
 8004fa8:	080102d8 	.word	0x080102d8
 8004fac:	080102e0 	.word	0x080102e0
 8004fb0:	080102e8 	.word	0x080102e8
 8004fb4:	080102f4 	.word	0x080102f4
 8004fb8:	080102fc 	.word	0x080102fc
 8004fbc:	08010304 	.word	0x08010304
 8004fc0:	0801030c 	.word	0x0801030c
 8004fc4:	08010314 	.word	0x08010314
 8004fc8:	0801031c 	.word	0x0801031c
 8004fcc:	08010324 	.word	0x08010324
 8004fd0:	08010330 	.word	0x08010330
 8004fd4:	08010338 	.word	0x08010338
 8004fd8:	08010344 	.word	0x08010344
 8004fdc:	08010350 	.word	0x08010350
 8004fe0:	08010358 	.word	0x08010358
 8004fe4:	08010360 	.word	0x08010360
 8004fe8:	08010368 	.word	0x08010368
 8004fec:	08010370 	.word	0x08010370
 8004ff0:	08010378 	.word	0x08010378
 8004ff4:	08010384 	.word	0x08010384
 8004ff8:	08010390 	.word	0x08010390
 8004ffc:	08010398 	.word	0x08010398
 8005000:	080103a0 	.word	0x080103a0
 8005004:	080103a8 	.word	0x080103a8
 8005008:	080103b0 	.word	0x080103b0
 800500c:	080103b8 	.word	0x080103b8
 8005010:	080103c0 	.word	0x080103c0
 8005014:	080103c8 	.word	0x080103c8
 8005018:	080103d0 	.word	0x080103d0
 800501c:	080103d8 	.word	0x080103d8
 8005020:	080103e0 	.word	0x080103e0
 8005024:	080103e8 	.word	0x080103e8
 8005028:	080103f4 	.word	0x080103f4
 800502c:	08010400 	.word	0x08010400
 8005030:	08010408 	.word	0x08010408
 8005034:	08010414 	.word	0x08010414
 8005038:	0801041c 	.word	0x0801041c
 800503c:	08010424 	.word	0x08010424
 8005040:	0801042c 	.word	0x0801042c
 8005044:	08010434 	.word	0x08010434
 8005048:	0801043c 	.word	0x0801043c
 800504c:	08010444 	.word	0x08010444
 8005050:	0801044c 	.word	0x0801044c
 8005054:	08010454 	.word	0x08010454
 8005058:	0801045c 	.word	0x0801045c
 800505c:	08010464 	.word	0x08010464
 8005060:	0801046c 	.word	0x0801046c
 8005064:	08010474 	.word	0x08010474
 8005068:	0801047c 	.word	0x0801047c
 800506c:	08010484 	.word	0x08010484
 8005070:	0801048c 	.word	0x0801048c
 8005074:	08010494 	.word	0x08010494
 8005078:	0801049c 	.word	0x0801049c
 800507c:	080104a4 	.word	0x080104a4
 8005080:	080104ac 	.word	0x080104ac
 8005084:	080104b4 	.word	0x080104b4
 8005088:	080104bc 	.word	0x080104bc
 800508c:	080104c4 	.word	0x080104c4
 8005090:	080104cc 	.word	0x080104cc
 8005094:	080104d4 	.word	0x080104d4
 8005098:	080104dc 	.word	0x080104dc
 800509c:	080104e4 	.word	0x080104e4
 80050a0:	48b5      	ldr	r0, [pc, #724]	@ (8005378 <hashInit.0+0x3b00>)
 80050a2:	f7fc fb3b 	bl	800171c <insert.1>
		insert("HEFPB", "heaven");
 80050a6:	46a4      	mov	ip, r4
 80050a8:	49b4      	ldr	r1, [pc, #720]	@ (800537c <hashInit.0+0x3b04>)
 80050aa:	48b5      	ldr	r0, [pc, #724]	@ (8005380 <hashInit.0+0x3b08>)
 80050ac:	f7fc fb36 	bl	800171c <insert.1>
		insert("WOEUPL", "William");
 80050b0:	46a4      	mov	ip, r4
 80050b2:	49b4      	ldr	r1, [pc, #720]	@ (8005384 <hashInit.0+0x3b0c>)
 80050b4:	48b4      	ldr	r0, [pc, #720]	@ (8005388 <hashInit.0+0x3b10>)
 80050b6:	f7fc fb31 	bl	800171c <insert.1>
		insert("STARTD", "started");
 80050ba:	46a4      	mov	ip, r4
 80050bc:	49b3      	ldr	r1, [pc, #716]	@ (800538c <hashInit.0+0x3b14>)
 80050be:	48b4      	ldr	r0, [pc, #720]	@ (8005390 <hashInit.0+0x3b18>)
 80050c0:	f7fc fb2c 	bl	800171c <insert.1>
		insert("KPHAPBD", "command");
 80050c4:	46a4      	mov	ip, r4
 80050c6:	49b3      	ldr	r1, [pc, #716]	@ (8005394 <hashInit.0+0x3b1c>)
 80050c8:	48b3      	ldr	r0, [pc, #716]	@ (8005398 <hashInit.0+0x3b20>)
 80050ca:	f7fc fb27 	bl	800171c <insert.1>
		insert("TOEPB", "tone");
 80050ce:	46a4      	mov	ip, r4
 80050d0:	49b2      	ldr	r1, [pc, #712]	@ (800539c <hashInit.0+0x3b24>)
 80050d2:	48b3      	ldr	r0, [pc, #716]	@ (80053a0 <hashInit.0+0x3b28>)
 80050d4:	f7fc fb22 	bl	800171c <insert.1>
		insert("RARD", "regard");
 80050d8:	46a4      	mov	ip, r4
 80050da:	49b2      	ldr	r1, [pc, #712]	@ (80053a4 <hashInit.0+0x3b2c>)
 80050dc:	48b2      	ldr	r0, [pc, #712]	@ (80053a8 <hashInit.0+0x3b30>)
 80050de:	f7fc fb1d 	bl	800171c <insert.1>
		insert("KP-PTD", "expected");
 80050e2:	46a4      	mov	ip, r4
 80050e4:	49b1      	ldr	r1, [pc, #708]	@ (80053ac <hashInit.0+0x3b34>)
 80050e6:	48b2      	ldr	r0, [pc, #712]	@ (80053b0 <hashInit.0+0x3b38>)
 80050e8:	f7fc fb18 	bl	800171c <insert.1>
		insert("PHAOER", "mere");
 80050ec:	46a4      	mov	ip, r4
 80050ee:	49b1      	ldr	r1, [pc, #708]	@ (80053b4 <hashInit.0+0x3b3c>)
 80050f0:	48b1      	ldr	r0, [pc, #708]	@ (80053b8 <hashInit.0+0x3b40>)
 80050f2:	f7fc fb13 	bl	800171c <insert.1>
		insert("PHO*PBT", "month");
 80050f6:	46a4      	mov	ip, r4
 80050f8:	49b0      	ldr	r1, [pc, #704]	@ (80053bc <hashInit.0+0x3b44>)
 80050fa:	48b1      	ldr	r0, [pc, #708]	@ (80053c0 <hashInit.0+0x3b48>)
 80050fc:	f7fc fb0e 	bl	800171c <insert.1>
		insert("PWE/SAOEUD", "beside");
 8005100:	46a4      	mov	ip, r4
 8005102:	49b0      	ldr	r1, [pc, #704]	@ (80053c4 <hashInit.0+0x3b4c>)
 8005104:	48b0      	ldr	r0, [pc, #704]	@ (80053c8 <hashInit.0+0x3b50>)
 8005106:	f7fc fb09 	bl	800171c <insert.1>
		insert("SHREPBT", "silent");
 800510a:	46a4      	mov	ip, r4
 800510c:	49af      	ldr	r1, [pc, #700]	@ (80053cc <hashInit.0+0x3b54>)
 800510e:	48b0      	ldr	r0, [pc, #704]	@ (80053d0 <hashInit.0+0x3b58>)
 8005110:	f7fc fb04 	bl	800171c <insert.1>
		insert("P-F", "perfect");
 8005114:	46a4      	mov	ip, r4
 8005116:	49af      	ldr	r1, [pc, #700]	@ (80053d4 <hashInit.0+0x3b5c>)
 8005118:	48af      	ldr	r0, [pc, #700]	@ (80053d8 <hashInit.0+0x3b60>)
 800511a:	f7fc faff 	bl	800171c <insert.1>
		insert("SPAOERPBS", "experience");
 800511e:	46a4      	mov	ip, r4
 8005120:	49ae      	ldr	r1, [pc, #696]	@ (80053dc <hashInit.0+0x3b64>)
 8005122:	48af      	ldr	r0, [pc, #700]	@ (80053e0 <hashInit.0+0x3b68>)
 8005124:	f7fc fafa 	bl	800171c <insert.1>
		insert("STRAOET", "street");
 8005128:	46a4      	mov	ip, r4
 800512a:	49ae      	ldr	r1, [pc, #696]	@ (80053e4 <hashInit.0+0x3b6c>)
 800512c:	48ae      	ldr	r0, [pc, #696]	@ (80053e8 <hashInit.0+0x3b70>)
 800512e:	f7fc faf5 	bl	800171c <insert.1>
		insert("WREUG", "writing");
 8005132:	46a4      	mov	ip, r4
 8005134:	49ad      	ldr	r1, [pc, #692]	@ (80053ec <hashInit.0+0x3b74>)
 8005136:	48ae      	ldr	r0, [pc, #696]	@ (80053f0 <hashInit.0+0x3b78>)
 8005138:	f7fc faf0 	bl	800171c <insert.1>
		insert("TKPW-S", "goes");
 800513c:	46a4      	mov	ip, r4
 800513e:	49ad      	ldr	r1, [pc, #692]	@ (80053f4 <hashInit.0+0x3b7c>)
 8005140:	48ad      	ldr	r0, [pc, #692]	@ (80053f8 <hashInit.0+0x3b80>)
 8005142:	f7fc faeb 	bl	800171c <insert.1>
		insert("SEURBGS", "circumstances");
 8005146:	46a4      	mov	ip, r4
 8005148:	49ac      	ldr	r1, [pc, #688]	@ (80053fc <hashInit.0+0x3b84>)
 800514a:	48ad      	ldr	r0, [pc, #692]	@ (8005400 <hashInit.0+0x3b88>)
 800514c:	f7fc fae6 	bl	800171c <insert.1>
		insert("SPWAOEURL", "entirely");
 8005150:	46a4      	mov	ip, r4
 8005152:	49ac      	ldr	r1, [pc, #688]	@ (8005404 <hashInit.0+0x3b8c>)
 8005154:	48ac      	ldr	r0, [pc, #688]	@ (8005408 <hashInit.0+0x3b90>)
 8005156:	f7fc fae1 	bl	800171c <insert.1>
		insert("TPRERB", "fresh");
 800515a:	46a4      	mov	ip, r4
 800515c:	49ab      	ldr	r1, [pc, #684]	@ (800540c <hashInit.0+0x3b94>)
 800515e:	48ac      	ldr	r0, [pc, #688]	@ (8005410 <hashInit.0+0x3b98>)
 8005160:	f7fc fadc 	bl	800171c <insert.1>
		insert("TKAOUBG", "duke");
 8005164:	46a4      	mov	ip, r4
 8005166:	49ab      	ldr	r1, [pc, #684]	@ (8005414 <hashInit.0+0x3b9c>)
 8005168:	48ab      	ldr	r0, [pc, #684]	@ (8005418 <hashInit.0+0x3ba0>)
 800516a:	f7fc fad7 	bl	800171c <insert.1>
		insert("KOFRD", "covered");
 800516e:	46a4      	mov	ip, r4
 8005170:	49aa      	ldr	r1, [pc, #680]	@ (800541c <hashInit.0+0x3ba4>)
 8005172:	48ab      	ldr	r0, [pc, #684]	@ (8005420 <hashInit.0+0x3ba8>)
 8005174:	f7fc fad2 	bl	800171c <insert.1>
		insert("PWOUPBD", "bound");
 8005178:	46a4      	mov	ip, r4
 800517a:	49aa      	ldr	r1, [pc, #680]	@ (8005424 <hashInit.0+0x3bac>)
 800517c:	48aa      	ldr	r0, [pc, #680]	@ (8005428 <hashInit.0+0x3bb0>)
 800517e:	f7fc facd 	bl	800171c <insert.1>
		insert("AOEFT", "east");
 8005182:	46a4      	mov	ip, r4
 8005184:	49a9      	ldr	r1, [pc, #676]	@ (800542c <hashInit.0+0x3bb4>)
 8005186:	48aa      	ldr	r0, [pc, #680]	@ (8005430 <hashInit.0+0x3bb8>)
 8005188:	f7fc fac8 	bl	800171c <insert.1>
		insert("WAOD", "wood");
 800518c:	46a4      	mov	ip, r4
 800518e:	49a9      	ldr	r1, [pc, #676]	@ (8005434 <hashInit.0+0x3bbc>)
 8005190:	48a9      	ldr	r0, [pc, #676]	@ (8005438 <hashInit.0+0x3bc0>)
 8005192:	f7fc fac3 	bl	800171c <insert.1>
		insert("STOEPB", "stone");
 8005196:	46a4      	mov	ip, r4
 8005198:	49a8      	ldr	r1, [pc, #672]	@ (800543c <hashInit.0+0x3bc4>)
 800519a:	48a9      	ldr	r0, [pc, #676]	@ (8005440 <hashInit.0+0x3bc8>)
 800519c:	f7fc fabe 	bl	800171c <insert.1>
		insert("KWEULG", "quickly");
 80051a0:	46a4      	mov	ip, r4
 80051a2:	49a8      	ldr	r1, [pc, #672]	@ (8005444 <hashInit.0+0x3bcc>)
 80051a4:	48a8      	ldr	r0, [pc, #672]	@ (8005448 <hashInit.0+0x3bd0>)
 80051a6:	f7fc fab9 	bl	800171c <insert.1>
		insert("TPH-TS", "notice");
 80051aa:	46a4      	mov	ip, r4
 80051ac:	49a7      	ldr	r1, [pc, #668]	@ (800544c <hashInit.0+0x3bd4>)
 80051ae:	48a8      	ldr	r0, [pc, #672]	@ (8005450 <hashInit.0+0x3bd8>)
 80051b0:	f7fc fab4 	bl	800171c <insert.1>
		insert("PWRAOEUT", "bright");
 80051b4:	46a4      	mov	ip, r4
 80051b6:	49a7      	ldr	r1, [pc, #668]	@ (8005454 <hashInit.0+0x3bdc>)
 80051b8:	48a7      	ldr	r0, [pc, #668]	@ (8005458 <hashInit.0+0x3be0>)
 80051ba:	f7fc faaf 	bl	800171c <insert.1>
		insert("KRAOEUFT", "Christ");
 80051be:	46a4      	mov	ip, r4
 80051c0:	49a6      	ldr	r1, [pc, #664]	@ (800545c <hashInit.0+0x3be4>)
 80051c2:	48a7      	ldr	r0, [pc, #668]	@ (8005460 <hashInit.0+0x3be8>)
 80051c4:	f7fc faaa 	bl	800171c <insert.1>
		insert("PWOET", "boat");
 80051c8:	46a4      	mov	ip, r4
 80051ca:	49a6      	ldr	r1, [pc, #664]	@ (8005464 <hashInit.0+0x3bec>)
 80051cc:	48a6      	ldr	r0, [pc, #664]	@ (8005468 <hashInit.0+0x3bf0>)
 80051ce:	f7fc faa5 	bl	800171c <insert.1>
		insert("TPHOEBL", "noble");
 80051d2:	46a4      	mov	ip, r4
 80051d4:	49a5      	ldr	r1, [pc, #660]	@ (800546c <hashInit.0+0x3bf4>)
 80051d6:	48a6      	ldr	r0, [pc, #664]	@ (8005470 <hashInit.0+0x3bf8>)
 80051d8:	f7fc faa0 	bl	800171c <insert.1>
		insert("PHEPBT", "meant");
 80051dc:	46a4      	mov	ip, r4
 80051de:	49a5      	ldr	r1, [pc, #660]	@ (8005474 <hashInit.0+0x3bfc>)
 80051e0:	48a5      	ldr	r0, [pc, #660]	@ (8005478 <hashInit.0+0x3c00>)
 80051e2:	f7fc fa9b 	bl	800171c <insert.1>
		insert("SWHA", "somewhat");
 80051e6:	46a4      	mov	ip, r4
 80051e8:	49a4      	ldr	r1, [pc, #656]	@ (800547c <hashInit.0+0x3c04>)
 80051ea:	48a5      	ldr	r0, [pc, #660]	@ (8005480 <hashInit.0+0x3c08>)
 80051ec:	f7fc fa96 	bl	800171c <insert.1>
		insert("SUD", "sudden");
 80051f0:	46a4      	mov	ip, r4
 80051f2:	49a4      	ldr	r1, [pc, #656]	@ (8005484 <hashInit.0+0x3c0c>)
 80051f4:	48a4      	ldr	r0, [pc, #656]	@ (8005488 <hashInit.0+0x3c10>)
 80051f6:	f7fc fa91 	bl	800171c <insert.1>
		insert("SRAOUL", "value");
 80051fa:	46a4      	mov	ip, r4
 80051fc:	49a3      	ldr	r1, [pc, #652]	@ (800548c <hashInit.0+0x3c14>)
 80051fe:	48a4      	ldr	r0, [pc, #656]	@ (8005490 <hashInit.0+0x3c18>)
 8005200:	f7fc fa8c 	bl	800171c <insert.1>
		insert("KR*/TP-PL", "c.");
 8005204:	46a4      	mov	ip, r4
 8005206:	49a3      	ldr	r1, [pc, #652]	@ (8005494 <hashInit.0+0x3c1c>)
 8005208:	48a3      	ldr	r0, [pc, #652]	@ (8005498 <hashInit.0+0x3c20>)
 800520a:	f7fc fa87 	bl	800171c <insert.1>
		insert("TKREBGS", "direction");
 800520e:	46a4      	mov	ip, r4
 8005210:	49a2      	ldr	r1, [pc, #648]	@ (800549c <hashInit.0+0x3c24>)
 8005212:	48a3      	ldr	r0, [pc, #652]	@ (80054a0 <hashInit.0+0x3c28>)
 8005214:	f7fc fa82 	bl	800171c <insert.1>
		insert("KHAEUR", "chair");
 8005218:	46a4      	mov	ip, r4
 800521a:	49a2      	ldr	r1, [pc, #648]	@ (80054a4 <hashInit.0+0x3c2c>)
 800521c:	48a2      	ldr	r0, [pc, #648]	@ (80054a8 <hashInit.0+0x3c30>)
 800521e:	f7fc fa7d 	bl	800171c <insert.1>
		insert("TKAOU", "due");
 8005222:	46a4      	mov	ip, r4
 8005224:	49a1      	ldr	r1, [pc, #644]	@ (80054ac <hashInit.0+0x3c34>)
 8005226:	48a2      	ldr	r0, [pc, #648]	@ (80054b0 <hashInit.0+0x3c38>)
 8005228:	f7fc fa78 	bl	800171c <insert.1>
		insert("SPOR", "support");
 800522c:	46a4      	mov	ip, r4
 800522e:	49a1      	ldr	r1, [pc, #644]	@ (80054b4 <hashInit.0+0x3c3c>)
 8005230:	48a1      	ldr	r0, [pc, #644]	@ (80054b8 <hashInit.0+0x3c40>)
 8005232:	f7fc fa73 	bl	800171c <insert.1>
		insert("TOPL", "Tom");
 8005236:	46a4      	mov	ip, r4
 8005238:	49a0      	ldr	r1, [pc, #640]	@ (80054bc <hashInit.0+0x3c44>)
 800523a:	48a1      	ldr	r0, [pc, #644]	@ (80054c0 <hashInit.0+0x3c48>)
 800523c:	f7fc fa6e 	bl	800171c <insert.1>
		insert("TKAEUT", "date");
 8005240:	46a4      	mov	ip, r4
 8005242:	49a0      	ldr	r1, [pc, #640]	@ (80054c4 <hashInit.0+0x3c4c>)
 8005244:	48a0      	ldr	r0, [pc, #640]	@ (80054c8 <hashInit.0+0x3c50>)
 8005246:	f7fc fa69 	bl	800171c <insert.1>
		insert("WAEUGT", "waiting");
 800524a:	46a4      	mov	ip, r4
 800524c:	499f      	ldr	r1, [pc, #636]	@ (80054cc <hashInit.0+0x3c54>)
 800524e:	48a0      	ldr	r0, [pc, #640]	@ (80054d0 <hashInit.0+0x3c58>)
 8005250:	f7fc fa64 	bl	800171c <insert.1>
		insert("KREUGS", "Christian");
 8005254:	46a4      	mov	ip, r4
 8005256:	499f      	ldr	r1, [pc, #636]	@ (80054d4 <hashInit.0+0x3c5c>)
 8005258:	489f      	ldr	r0, [pc, #636]	@ (80054d8 <hashInit.0+0x3c60>)
 800525a:	f7fc fa5f 	bl	800171c <insert.1>
		insert("SREULG", "village");
 800525e:	46a4      	mov	ip, r4
 8005260:	499e      	ldr	r1, [pc, #632]	@ (80054dc <hashInit.0+0x3c64>)
 8005262:	489f      	ldr	r0, [pc, #636]	@ (80054e0 <hashInit.0+0x3c68>)
 8005264:	f7fc fa5a 	bl	800171c <insert.1>
		insert("HREUFS", "lives");
 8005268:	46a4      	mov	ip, r4
 800526a:	499e      	ldr	r1, [pc, #632]	@ (80054e4 <hashInit.0+0x3c6c>)
 800526c:	489e      	ldr	r0, [pc, #632]	@ (80054e8 <hashInit.0+0x3c70>)
 800526e:	f7fc fa55 	bl	800171c <insert.1>
		insert("RAEGD", "reading");
 8005272:	46a4      	mov	ip, r4
 8005274:	499d      	ldr	r1, [pc, #628]	@ (80054ec <hashInit.0+0x3c74>)
 8005276:	489e      	ldr	r0, [pc, #632]	@ (80054f0 <hashInit.0+0x3c78>)
 8005278:	f7fc fa50 	bl	800171c <insert.1>
		insert("TKPWRAE", "agree");
 800527c:	46a4      	mov	ip, r4
 800527e:	499d      	ldr	r1, [pc, #628]	@ (80054f4 <hashInit.0+0x3c7c>)
 8005280:	489d      	ldr	r0, [pc, #628]	@ (80054f8 <hashInit.0+0x3c80>)
 8005282:	f7fc fa4b 	bl	800171c <insert.1>
		insert("HRAOEUPBS", "lines");
 8005286:	46a4      	mov	ip, r4
 8005288:	499c      	ldr	r1, [pc, #624]	@ (80054fc <hashInit.0+0x3c84>)
 800528a:	489d      	ldr	r0, [pc, #628]	@ (8005500 <hashInit.0+0x3c88>)
 800528c:	f7fc fa46 	bl	800171c <insert.1>
		insert("KR-D", "considered");
 8005290:	46a4      	mov	ip, r4
 8005292:	499c      	ldr	r1, [pc, #624]	@ (8005504 <hashInit.0+0x3c8c>)
 8005294:	489c      	ldr	r0, [pc, #624]	@ (8005508 <hashInit.0+0x3c90>)
 8005296:	f7fc fa41 	bl	800171c <insert.1>
		insert("TPAOELD", "field");
 800529a:	46a4      	mov	ip, r4
 800529c:	499b      	ldr	r1, [pc, #620]	@ (800550c <hashInit.0+0x3c94>)
 800529e:	489c      	ldr	r0, [pc, #624]	@ (8005510 <hashInit.0+0x3c98>)
 80052a0:	f7fc fa3c 	bl	800171c <insert.1>
		insert("OEBD", "observed");
 80052a4:	46a4      	mov	ip, r4
 80052a6:	499b      	ldr	r1, [pc, #620]	@ (8005514 <hashInit.0+0x3c9c>)
 80052a8:	489b      	ldr	r0, [pc, #620]	@ (8005518 <hashInit.0+0x3ca0>)
 80052aa:	f7fc fa37 	bl	800171c <insert.1>
		insert("SKAEURS/HREU", "scarcely");
 80052ae:	46a4      	mov	ip, r4
 80052b0:	499a      	ldr	r1, [pc, #616]	@ (800551c <hashInit.0+0x3ca4>)
 80052b2:	489b      	ldr	r0, [pc, #620]	@ (8005520 <hashInit.0+0x3ca8>)
 80052b4:	f7fc fa32 	bl	800171c <insert.1>
		insert("WEURBD", "wished");
 80052b8:	46a4      	mov	ip, r4
 80052ba:	499a      	ldr	r1, [pc, #616]	@ (8005524 <hashInit.0+0x3cac>)
 80052bc:	489a      	ldr	r0, [pc, #616]	@ (8005528 <hashInit.0+0x3cb0>)
 80052be:	f7fc fa2d 	bl	800171c <insert.1>
		insert("WAEUT", "wait");
 80052c2:	46a4      	mov	ip, r4
 80052c4:	4999      	ldr	r1, [pc, #612]	@ (800552c <hashInit.0+0x3cb4>)
 80052c6:	489a      	ldr	r0, [pc, #616]	@ (8005530 <hashInit.0+0x3cb8>)
 80052c8:	f7fc fa28 	bl	800171c <insert.1>
		insert("TKPWRAET/EFT", "greatest");
 80052cc:	46a4      	mov	ip, r4
 80052ce:	4999      	ldr	r1, [pc, #612]	@ (8005534 <hashInit.0+0x3cbc>)
 80052d0:	4899      	ldr	r0, [pc, #612]	@ (8005538 <hashInit.0+0x3cc0>)
 80052d2:	f7fc fa23 	bl	800171c <insert.1>
		insert("PERPLGS", "permission");
 80052d6:	46a4      	mov	ip, r4
 80052d8:	4998      	ldr	r1, [pc, #608]	@ (800553c <hashInit.0+0x3cc4>)
 80052da:	4899      	ldr	r0, [pc, #612]	@ (8005540 <hashInit.0+0x3cc8>)
 80052dc:	f7fc fa1e 	bl	800171c <insert.1>
		insert("SKES", "success");
 80052e0:	46a4      	mov	ip, r4
 80052e2:	4998      	ldr	r1, [pc, #608]	@ (8005544 <hashInit.0+0x3ccc>)
 80052e4:	4898      	ldr	r0, [pc, #608]	@ (8005548 <hashInit.0+0x3cd0>)
 80052e6:	f7fc fa19 	bl	800171c <insert.1>
		insert("PAOES", "piece");
 80052ea:	46a4      	mov	ip, r4
 80052ec:	4997      	ldr	r1, [pc, #604]	@ (800554c <hashInit.0+0x3cd4>)
 80052ee:	4898      	ldr	r0, [pc, #608]	@ (8005550 <hashInit.0+0x3cd8>)
 80052f0:	f7fc fa14 	bl	800171c <insert.1>
		insert("PWREURB", "British");
 80052f4:	46a4      	mov	ip, r4
 80052f6:	4997      	ldr	r1, [pc, #604]	@ (8005554 <hashInit.0+0x3cdc>)
 80052f8:	4897      	ldr	r0, [pc, #604]	@ (8005558 <hashInit.0+0x3ce0>)
 80052fa:	f7fc fa0f 	bl	800171c <insert.1>
		insert("EBGS", "ex");
 80052fe:	46a4      	mov	ip, r4
 8005300:	4996      	ldr	r1, [pc, #600]	@ (800555c <hashInit.0+0x3ce4>)
 8005302:	4897      	ldr	r0, [pc, #604]	@ (8005560 <hashInit.0+0x3ce8>)
 8005304:	f7fc fa0a 	bl	800171c <insert.1>
		insert("KHARLS", "Charles");
 8005308:	46a4      	mov	ip, r4
 800530a:	4996      	ldr	r1, [pc, #600]	@ (8005564 <hashInit.0+0x3cec>)
 800530c:	4896      	ldr	r0, [pc, #600]	@ (8005568 <hashInit.0+0x3cf0>)
 800530e:	f7fc fa05 	bl	800171c <insert.1>
		insert("TPORPLD", "formed");
 8005312:	46a4      	mov	ip, r4
 8005314:	4995      	ldr	r1, [pc, #596]	@ (800556c <hashInit.0+0x3cf4>)
 8005316:	4896      	ldr	r0, [pc, #600]	@ (8005570 <hashInit.0+0x3cf8>)
 8005318:	f7fc fa00 	bl	800171c <insert.1>
		insert("SPAOEG", "speaking");
 800531c:	46a4      	mov	ip, r4
 800531e:	4995      	ldr	r1, [pc, #596]	@ (8005574 <hashInit.0+0x3cfc>)
 8005320:	4895      	ldr	r0, [pc, #596]	@ (8005578 <hashInit.0+0x3d00>)
 8005322:	f7fc f9fb 	bl	800171c <insert.1>
		insert("TRAOEUG", "trying");
 8005326:	46a4      	mov	ip, r4
 8005328:	4994      	ldr	r1, [pc, #592]	@ (800557c <hashInit.0+0x3d04>)
 800532a:	4895      	ldr	r0, [pc, #596]	@ (8005580 <hashInit.0+0x3d08>)
 800532c:	f7fc f9f6 	bl	800171c <insert.1>
		insert("K-FRGS", "conversation");
 8005330:	46a4      	mov	ip, r4
 8005332:	4994      	ldr	r1, [pc, #592]	@ (8005584 <hashInit.0+0x3d0c>)
 8005334:	4894      	ldr	r0, [pc, #592]	@ (8005588 <hashInit.0+0x3d10>)
 8005336:	f7fc f9f1 	bl	800171c <insert.1>
		insert("PROR", "proper");
 800533a:	46a4      	mov	ip, r4
 800533c:	4993      	ldr	r1, [pc, #588]	@ (800558c <hashInit.0+0x3d14>)
 800533e:	4894      	ldr	r0, [pc, #592]	@ (8005590 <hashInit.0+0x3d18>)
 8005340:	f7fc f9ec 	bl	800171c <insert.1>
		insert("HEUL", "hill");
 8005344:	46a4      	mov	ip, r4
 8005346:	4993      	ldr	r1, [pc, #588]	@ (8005594 <hashInit.0+0x3d1c>)
 8005348:	4893      	ldr	r0, [pc, #588]	@ (8005598 <hashInit.0+0x3d20>)
 800534a:	f7fc f9e7 	bl	800171c <insert.1>
		insert("PHAOUFBG", "music");
 800534e:	46a4      	mov	ip, r4
 8005350:	4992      	ldr	r1, [pc, #584]	@ (800559c <hashInit.0+0x3d24>)
 8005352:	4893      	ldr	r0, [pc, #588]	@ (80055a0 <hashInit.0+0x3d28>)
 8005354:	f7fc f9e2 	bl	800171c <insert.1>
		insert("TAOUPBT", "opportunity");
 8005358:	46a4      	mov	ip, r4
 800535a:	4992      	ldr	r1, [pc, #584]	@ (80055a4 <hashInit.0+0x3d2c>)
 800535c:	4892      	ldr	r0, [pc, #584]	@ (80055a8 <hashInit.0+0x3d30>)
 800535e:	f7fc f9dd 	bl	800171c <insert.1>
		insert("TH-TS", "that's");
 8005362:	46a4      	mov	ip, r4
 8005364:	4991      	ldr	r1, [pc, #580]	@ (80055ac <hashInit.0+0x3d34>)
 8005366:	4892      	ldr	r0, [pc, #584]	@ (80055b0 <hashInit.0+0x3d38>)
 8005368:	f7fc f9d8 	bl	800171c <insert.1>
		insert("SKWR*ERPB", "German");
 800536c:	46a4      	mov	ip, r4
 800536e:	4991      	ldr	r1, [pc, #580]	@ (80055b4 <hashInit.0+0x3d3c>)
 8005370:	4891      	ldr	r0, [pc, #580]	@ (80055b8 <hashInit.0+0x3d40>)
 8005372:	f7fc f9d3 	bl	800171c <insert.1>
 8005376:	e121      	b.n	80055bc <hashInit.0+0x3d44>
 8005378:	080104ec 	.word	0x080104ec
 800537c:	080104f4 	.word	0x080104f4
 8005380:	080104fc 	.word	0x080104fc
 8005384:	08010504 	.word	0x08010504
 8005388:	0801050c 	.word	0x0801050c
 800538c:	08010514 	.word	0x08010514
 8005390:	0801051c 	.word	0x0801051c
 8005394:	08010524 	.word	0x08010524
 8005398:	0801052c 	.word	0x0801052c
 800539c:	08010534 	.word	0x08010534
 80053a0:	0801053c 	.word	0x0801053c
 80053a4:	08010544 	.word	0x08010544
 80053a8:	0801054c 	.word	0x0801054c
 80053ac:	08010554 	.word	0x08010554
 80053b0:	08010560 	.word	0x08010560
 80053b4:	08010568 	.word	0x08010568
 80053b8:	08010570 	.word	0x08010570
 80053bc:	08010578 	.word	0x08010578
 80053c0:	08010580 	.word	0x08010580
 80053c4:	08010588 	.word	0x08010588
 80053c8:	08010590 	.word	0x08010590
 80053cc:	0801059c 	.word	0x0801059c
 80053d0:	080105a4 	.word	0x080105a4
 80053d4:	080105ac 	.word	0x080105ac
 80053d8:	080105b4 	.word	0x080105b4
 80053dc:	080105b8 	.word	0x080105b8
 80053e0:	080105c4 	.word	0x080105c4
 80053e4:	080105d0 	.word	0x080105d0
 80053e8:	080105d8 	.word	0x080105d8
 80053ec:	080105e0 	.word	0x080105e0
 80053f0:	080105e8 	.word	0x080105e8
 80053f4:	080105f0 	.word	0x080105f0
 80053f8:	080105f8 	.word	0x080105f8
 80053fc:	08010600 	.word	0x08010600
 8005400:	08010610 	.word	0x08010610
 8005404:	08010618 	.word	0x08010618
 8005408:	08010624 	.word	0x08010624
 800540c:	08010630 	.word	0x08010630
 8005410:	08010638 	.word	0x08010638
 8005414:	08010640 	.word	0x08010640
 8005418:	08010648 	.word	0x08010648
 800541c:	08010650 	.word	0x08010650
 8005420:	08010658 	.word	0x08010658
 8005424:	08010660 	.word	0x08010660
 8005428:	08010668 	.word	0x08010668
 800542c:	08010670 	.word	0x08010670
 8005430:	08010678 	.word	0x08010678
 8005434:	08010680 	.word	0x08010680
 8005438:	08010688 	.word	0x08010688
 800543c:	08010690 	.word	0x08010690
 8005440:	08010698 	.word	0x08010698
 8005444:	080106a0 	.word	0x080106a0
 8005448:	080106a8 	.word	0x080106a8
 800544c:	080106b0 	.word	0x080106b0
 8005450:	080106b8 	.word	0x080106b8
 8005454:	080106c0 	.word	0x080106c0
 8005458:	080106c8 	.word	0x080106c8
 800545c:	080106d4 	.word	0x080106d4
 8005460:	080106dc 	.word	0x080106dc
 8005464:	080106e8 	.word	0x080106e8
 8005468:	080106f0 	.word	0x080106f0
 800546c:	080106f8 	.word	0x080106f8
 8005470:	08010700 	.word	0x08010700
 8005474:	08010708 	.word	0x08010708
 8005478:	08010710 	.word	0x08010710
 800547c:	08010718 	.word	0x08010718
 8005480:	08010724 	.word	0x08010724
 8005484:	0801072c 	.word	0x0801072c
 8005488:	08010734 	.word	0x08010734
 800548c:	08010738 	.word	0x08010738
 8005490:	08010740 	.word	0x08010740
 8005494:	08010748 	.word	0x08010748
 8005498:	0801074c 	.word	0x0801074c
 800549c:	08010758 	.word	0x08010758
 80054a0:	08010764 	.word	0x08010764
 80054a4:	0801076c 	.word	0x0801076c
 80054a8:	08010774 	.word	0x08010774
 80054ac:	0800d618 	.word	0x0800d618
 80054b0:	0800d61c 	.word	0x0800d61c
 80054b4:	0801077c 	.word	0x0801077c
 80054b8:	08010784 	.word	0x08010784
 80054bc:	0801078c 	.word	0x0801078c
 80054c0:	08010790 	.word	0x08010790
 80054c4:	08010798 	.word	0x08010798
 80054c8:	080107a0 	.word	0x080107a0
 80054cc:	080107a8 	.word	0x080107a8
 80054d0:	080107b0 	.word	0x080107b0
 80054d4:	080107b8 	.word	0x080107b8
 80054d8:	080107c4 	.word	0x080107c4
 80054dc:	080107cc 	.word	0x080107cc
 80054e0:	080107d4 	.word	0x080107d4
 80054e4:	080107dc 	.word	0x080107dc
 80054e8:	080107e4 	.word	0x080107e4
 80054ec:	080107ec 	.word	0x080107ec
 80054f0:	080107f4 	.word	0x080107f4
 80054f4:	080107fc 	.word	0x080107fc
 80054f8:	08010804 	.word	0x08010804
 80054fc:	0801080c 	.word	0x0801080c
 8005500:	08010814 	.word	0x08010814
 8005504:	08010820 	.word	0x08010820
 8005508:	0801082c 	.word	0x0801082c
 800550c:	08010834 	.word	0x08010834
 8005510:	0801083c 	.word	0x0801083c
 8005514:	08010844 	.word	0x08010844
 8005518:	08010850 	.word	0x08010850
 800551c:	08010858 	.word	0x08010858
 8005520:	08010864 	.word	0x08010864
 8005524:	08010874 	.word	0x08010874
 8005528:	0801087c 	.word	0x0801087c
 800552c:	08010884 	.word	0x08010884
 8005530:	0801088c 	.word	0x0801088c
 8005534:	08010894 	.word	0x08010894
 8005538:	080108a0 	.word	0x080108a0
 800553c:	080108b0 	.word	0x080108b0
 8005540:	080108bc 	.word	0x080108bc
 8005544:	080108c4 	.word	0x080108c4
 8005548:	080108cc 	.word	0x080108cc
 800554c:	080108d4 	.word	0x080108d4
 8005550:	080108dc 	.word	0x080108dc
 8005554:	080108e4 	.word	0x080108e4
 8005558:	080108ec 	.word	0x080108ec
 800555c:	080108f4 	.word	0x080108f4
 8005560:	080108f8 	.word	0x080108f8
 8005564:	08010900 	.word	0x08010900
 8005568:	08010908 	.word	0x08010908
 800556c:	08010910 	.word	0x08010910
 8005570:	08010918 	.word	0x08010918
 8005574:	08010920 	.word	0x08010920
 8005578:	0801092c 	.word	0x0801092c
 800557c:	08010934 	.word	0x08010934
 8005580:	0801093c 	.word	0x0801093c
 8005584:	08010944 	.word	0x08010944
 8005588:	08010954 	.word	0x08010954
 800558c:	0801095c 	.word	0x0801095c
 8005590:	08010964 	.word	0x08010964
 8005594:	0801096c 	.word	0x0801096c
 8005598:	08010974 	.word	0x08010974
 800559c:	0801097c 	.word	0x0801097c
 80055a0:	08010984 	.word	0x08010984
 80055a4:	08010990 	.word	0x08010990
 80055a8:	0801099c 	.word	0x0801099c
 80055ac:	080109a4 	.word	0x080109a4
 80055b0:	080109ac 	.word	0x080109ac
 80055b4:	080109b4 	.word	0x080109b4
 80055b8:	080109bc 	.word	0x080109bc
		insert("AFPB", "afternoon");
 80055bc:	46a4      	mov	ip, r4
 80055be:	49b5      	ldr	r1, [pc, #724]	@ (8005894 <hashInit.0+0x401c>)
 80055c0:	48b5      	ldr	r0, [pc, #724]	@ (8005898 <hashInit.0+0x4020>)
 80055c2:	f7fc f8ab 	bl	800171c <insert.1>
		insert("KRAOEU", "cry");
 80055c6:	46a4      	mov	ip, r4
 80055c8:	49b4      	ldr	r1, [pc, #720]	@ (800589c <hashInit.0+0x4024>)
 80055ca:	48b5      	ldr	r0, [pc, #724]	@ (80058a0 <hashInit.0+0x4028>)
 80055cc:	f7fc f8a6 	bl	800171c <insert.1>
		insert("KOFT", "cost");
 80055d0:	46a4      	mov	ip, r4
 80055d2:	49b4      	ldr	r1, [pc, #720]	@ (80058a4 <hashInit.0+0x402c>)
 80055d4:	48b4      	ldr	r0, [pc, #720]	@ (80058a8 <hashInit.0+0x4030>)
 80055d6:	f7fc f8a1 	bl	800171c <insert.1>
		insert("HRO*UD", "allowed");
 80055da:	46a4      	mov	ip, r4
 80055dc:	49b3      	ldr	r1, [pc, #716]	@ (80058ac <hashInit.0+0x4034>)
 80055de:	48b4      	ldr	r0, [pc, #720]	@ (80058b0 <hashInit.0+0x4038>)
 80055e0:	f7fc f89c 	bl	800171c <insert.1>
		insert("TKPWEURLS", "girls");
 80055e4:	46a4      	mov	ip, r4
 80055e6:	49b3      	ldr	r1, [pc, #716]	@ (80058b4 <hashInit.0+0x403c>)
 80055e8:	48b3      	ldr	r0, [pc, #716]	@ (80058b8 <hashInit.0+0x4040>)
 80055ea:	f7fc f897 	bl	800171c <insert.1>
		insert("KR-BL", "considerable");
 80055ee:	46a4      	mov	ip, r4
 80055f0:	49b2      	ldr	r1, [pc, #712]	@ (80058bc <hashInit.0+0x4044>)
 80055f2:	48b3      	ldr	r0, [pc, #716]	@ (80058c0 <hashInit.0+0x4048>)
 80055f4:	f7fc f892 	bl	800171c <insert.1>
		insert("KR*", "c");
 80055f8:	46a4      	mov	ip, r4
 80055fa:	49b2      	ldr	r1, [pc, #712]	@ (80058c4 <hashInit.0+0x404c>)
 80055fc:	48b2      	ldr	r0, [pc, #712]	@ (80058c8 <hashInit.0+0x4050>)
 80055fe:	f7fc f88d 	bl	800171c <insert.1>
		insert("PWROEBG", "broke");
 8005602:	46a4      	mov	ip, r4
 8005604:	49b1      	ldr	r1, [pc, #708]	@ (80058cc <hashInit.0+0x4054>)
 8005606:	48b2      	ldr	r0, [pc, #712]	@ (80058d0 <hashInit.0+0x4058>)
 8005608:	f7fc f888 	bl	800171c <insert.1>
		insert("HO*RPB/A*U", "honour");
 800560c:	46a4      	mov	ip, r4
 800560e:	49b1      	ldr	r1, [pc, #708]	@ (80058d4 <hashInit.0+0x405c>)
 8005610:	48b1      	ldr	r0, [pc, #708]	@ (80058d8 <hashInit.0+0x4060>)
 8005612:	f7fc f883 	bl	800171c <insert.1>
		insert("SEFPB", "seven");
 8005616:	46a4      	mov	ip, r4
 8005618:	49b0      	ldr	r1, [pc, #704]	@ (80058dc <hashInit.0+0x4064>)
 800561a:	48b1      	ldr	r0, [pc, #708]	@ (80058e0 <hashInit.0+0x4068>)
 800561c:	f7fc f87e 	bl	800171c <insert.1>
		insert("PRAOEUFT", "private");
 8005620:	46a4      	mov	ip, r4
 8005622:	49b0      	ldr	r1, [pc, #704]	@ (80058e4 <hashInit.0+0x406c>)
 8005624:	48b0      	ldr	r0, [pc, #704]	@ (80058e8 <hashInit.0+0x4070>)
 8005626:	f7fc f879 	bl	800171c <insert.1>
		insert("SEUT", "sit");
 800562a:	46a4      	mov	ip, r4
 800562c:	49af      	ldr	r1, [pc, #700]	@ (80058ec <hashInit.0+0x4074>)
 800562e:	48b0      	ldr	r0, [pc, #704]	@ (80058f0 <hashInit.0+0x4078>)
 8005630:	f7fc f874 	bl	800171c <insert.1>
		insert("TPHUS", "news");
 8005634:	46a4      	mov	ip, r4
 8005636:	49af      	ldr	r1, [pc, #700]	@ (80058f4 <hashInit.0+0x407c>)
 8005638:	48af      	ldr	r0, [pc, #700]	@ (80058f8 <hashInit.0+0x4080>)
 800563a:	f7fc f86f 	bl	800171c <insert.1>
		insert("TOP", "top");
 800563e:	46a4      	mov	ip, r4
 8005640:	49ae      	ldr	r1, [pc, #696]	@ (80058fc <hashInit.0+0x4084>)
 8005642:	48af      	ldr	r0, [pc, #700]	@ (8005900 <hashInit.0+0x4088>)
 8005644:	f7fc f86a 	bl	800171c <insert.1>
		insert("SAEPB", "scene");
 8005648:	46a4      	mov	ip, r4
 800564a:	49ae      	ldr	r1, [pc, #696]	@ (8005904 <hashInit.0+0x408c>)
 800564c:	48ae      	ldr	r0, [pc, #696]	@ (8005908 <hashInit.0+0x4090>)
 800564e:	f7fc f865 	bl	800171c <insert.1>
		insert("SKOFD", "discovered");
 8005652:	46a4      	mov	ip, r4
 8005654:	49ad      	ldr	r1, [pc, #692]	@ (800590c <hashInit.0+0x4094>)
 8005656:	48ae      	ldr	r0, [pc, #696]	@ (8005910 <hashInit.0+0x4098>)
 8005658:	f7fc f860 	bl	800171c <insert.1>
		insert("PHAERPBLG", "marriage");
 800565c:	46a4      	mov	ip, r4
 800565e:	49ad      	ldr	r1, [pc, #692]	@ (8005914 <hashInit.0+0x409c>)
 8005660:	48ad      	ldr	r0, [pc, #692]	@ (8005918 <hashInit.0+0x40a0>)
 8005662:	f7fc f85b 	bl	800171c <insert.1>
		insert("STEP", "step");
 8005666:	46a4      	mov	ip, r4
 8005668:	49ac      	ldr	r1, [pc, #688]	@ (800591c <hashInit.0+0x40a4>)
 800566a:	48ad      	ldr	r0, [pc, #692]	@ (8005920 <hashInit.0+0x40a8>)
 800566c:	f7fc f856 	bl	800171c <insert.1>
		insert("TKPWA*RPB", "garden");
 8005670:	46a4      	mov	ip, r4
 8005672:	49ac      	ldr	r1, [pc, #688]	@ (8005924 <hashInit.0+0x40ac>)
 8005674:	48ac      	ldr	r0, [pc, #688]	@ (8005928 <hashInit.0+0x40b0>)
 8005676:	f7fc f851 	bl	800171c <insert.1>
		insert("RAEUS", "race");
 800567a:	46a4      	mov	ip, r4
 800567c:	49ab      	ldr	r1, [pc, #684]	@ (800592c <hashInit.0+0x40b4>)
 800567e:	48ac      	ldr	r0, [pc, #688]	@ (8005930 <hashInit.0+0x40b8>)
 8005680:	f7fc f84c 	bl	800171c <insert.1>
		insert("TKPWEUPB", "begin");
 8005684:	46a4      	mov	ip, r4
 8005686:	49ab      	ldr	r1, [pc, #684]	@ (8005934 <hashInit.0+0x40bc>)
 8005688:	48ab      	ldr	r0, [pc, #684]	@ (8005938 <hashInit.0+0x40c0>)
 800568a:	f7fc f847 	bl	800171c <insert.1>
		insert("PER", "per");
 800568e:	46a4      	mov	ip, r4
 8005690:	49aa      	ldr	r1, [pc, #680]	@ (800593c <hashInit.0+0x40c4>)
 8005692:	48ab      	ldr	r0, [pc, #684]	@ (8005940 <hashInit.0+0x40c8>)
 8005694:	f7fc f842 	bl	800171c <insert.1>
		insert("SREUD", "individual");
 8005698:	46a4      	mov	ip, r4
 800569a:	49aa      	ldr	r1, [pc, #680]	@ (8005944 <hashInit.0+0x40cc>)
 800569c:	48aa      	ldr	r0, [pc, #680]	@ (8005948 <hashInit.0+0x40d0>)
 800569e:	f7fc f83d 	bl	800171c <insert.1>
		insert("SEUGT", "sitting");
 80056a2:	46a4      	mov	ip, r4
 80056a4:	49a9      	ldr	r1, [pc, #676]	@ (800594c <hashInit.0+0x40d4>)
 80056a6:	48aa      	ldr	r0, [pc, #680]	@ (8005950 <hashInit.0+0x40d8>)
 80056a8:	f7fc f838 	bl	800171c <insert.1>
		insert("HRERPB", "learn");
 80056ac:	46a4      	mov	ip, r4
 80056ae:	49a9      	ldr	r1, [pc, #676]	@ (8005954 <hashInit.0+0x40dc>)
 80056b0:	48a9      	ldr	r0, [pc, #676]	@ (8005958 <hashInit.0+0x40e0>)
 80056b2:	f7fc f833 	bl	800171c <insert.1>
		insert("PHREU/K-L", "political");
 80056b6:	46a4      	mov	ip, r4
 80056b8:	49a8      	ldr	r1, [pc, #672]	@ (800595c <hashInit.0+0x40e4>)
 80056ba:	48a9      	ldr	r0, [pc, #676]	@ (8005960 <hashInit.0+0x40e8>)
 80056bc:	f7fc f82e 	bl	800171c <insert.1>
		insert("TKEUFL", "difficult");
 80056c0:	46a4      	mov	ip, r4
 80056c2:	49a8      	ldr	r1, [pc, #672]	@ (8005964 <hashInit.0+0x40ec>)
 80056c4:	48a8      	ldr	r0, [pc, #672]	@ (8005968 <hashInit.0+0x40f0>)
 80056c6:	f7fc f829 	bl	800171c <insert.1>
		insert("PWEUT", "bit");
 80056ca:	46a4      	mov	ip, r4
 80056cc:	49a7      	ldr	r1, [pc, #668]	@ (800596c <hashInit.0+0x40f4>)
 80056ce:	48a8      	ldr	r0, [pc, #672]	@ (8005970 <hashInit.0+0x40f8>)
 80056d0:	f7fc f824 	bl	800171c <insert.1>
		insert("SPAOEFP", "speech");
 80056d4:	46a4      	mov	ip, r4
 80056d6:	49a7      	ldr	r1, [pc, #668]	@ (8005974 <hashInit.0+0x40fc>)
 80056d8:	48a7      	ldr	r0, [pc, #668]	@ (8005978 <hashInit.0+0x4100>)
 80056da:	f7fc f81f 	bl	800171c <insert.1>
		insert("HEPB/REU", "Henry");
 80056de:	46a4      	mov	ip, r4
 80056e0:	49a6      	ldr	r1, [pc, #664]	@ (800597c <hashInit.0+0x4104>)
 80056e2:	48a7      	ldr	r0, [pc, #668]	@ (8005980 <hashInit.0+0x4108>)
 80056e4:	f7fc f81a 	bl	800171c <insert.1>
		insert("HRAOEU", "lie");
 80056e8:	46a4      	mov	ip, r4
 80056ea:	49a6      	ldr	r1, [pc, #664]	@ (8005984 <hashInit.0+0x410c>)
 80056ec:	48a6      	ldr	r0, [pc, #664]	@ (8005988 <hashInit.0+0x4110>)
 80056ee:	f7fc f815 	bl	800171c <insert.1>
		insert("KAFT", "cast");
 80056f2:	46a4      	mov	ip, r4
 80056f4:	49a5      	ldr	r1, [pc, #660]	@ (800598c <hashInit.0+0x4114>)
 80056f6:	48a6      	ldr	r0, [pc, #664]	@ (8005990 <hashInit.0+0x4118>)
 80056f8:	f7fc f810 	bl	800171c <insert.1>
		insert("AOET", "eat");
 80056fc:	46a4      	mov	ip, r4
 80056fe:	49a5      	ldr	r1, [pc, #660]	@ (8005994 <hashInit.0+0x411c>)
 8005700:	48a5      	ldr	r0, [pc, #660]	@ (8005998 <hashInit.0+0x4120>)
 8005702:	f7fc f80b 	bl	800171c <insert.1>
		insert("THORT", "authority");
 8005706:	46a4      	mov	ip, r4
 8005708:	49a4      	ldr	r1, [pc, #656]	@ (800599c <hashInit.0+0x4124>)
 800570a:	48a5      	ldr	r0, [pc, #660]	@ (80059a0 <hashInit.0+0x4128>)
 800570c:	f7fc f806 	bl	800171c <insert.1>
		insert("*ETS", "etc.");
 8005710:	46a4      	mov	ip, r4
 8005712:	49a4      	ldr	r1, [pc, #656]	@ (80059a4 <hashInit.0+0x412c>)
 8005714:	48a4      	ldr	r0, [pc, #656]	@ (80059a8 <hashInit.0+0x4130>)
 8005716:	f7fc f801 	bl	800171c <insert.1>
		insert("TPHRAOR", "floor");
 800571a:	46a4      	mov	ip, r4
 800571c:	49a3      	ldr	r1, [pc, #652]	@ (80059ac <hashInit.0+0x4134>)
 800571e:	48a4      	ldr	r0, [pc, #656]	@ (80059b0 <hashInit.0+0x4138>)
 8005720:	f7fb fffc 	bl	800171c <insert.1>
		insert("EUL", "ill");
 8005724:	46a4      	mov	ip, r4
 8005726:	49a3      	ldr	r1, [pc, #652]	@ (80059b4 <hashInit.0+0x413c>)
 8005728:	48a3      	ldr	r0, [pc, #652]	@ (80059b8 <hashInit.0+0x4140>)
 800572a:	f7fb fff7 	bl	800171c <insert.1>
		insert("WAEUS", "ways");
 800572e:	46a4      	mov	ip, r4
 8005730:	49a2      	ldr	r1, [pc, #648]	@ (80059bc <hashInit.0+0x4144>)
 8005732:	48a3      	ldr	r0, [pc, #652]	@ (80059c0 <hashInit.0+0x4148>)
 8005734:	f7fb fff2 	bl	800171c <insert.1>
		insert("OEUFRS", "officers");
 8005738:	46a4      	mov	ip, r4
 800573a:	49a2      	ldr	r1, [pc, #648]	@ (80059c4 <hashInit.0+0x414c>)
 800573c:	48a2      	ldr	r0, [pc, #648]	@ (80059c8 <hashInit.0+0x4150>)
 800573e:	f7fb ffed 	bl	800171c <insert.1>
		insert("OFRD", "offered");
 8005742:	46a4      	mov	ip, r4
 8005744:	49a1      	ldr	r1, [pc, #644]	@ (80059cc <hashInit.0+0x4154>)
 8005746:	48a2      	ldr	r0, [pc, #648]	@ (80059d0 <hashInit.0+0x4158>)
 8005748:	f7fb ffe8 	bl	800171c <insert.1>
		insert("ORPBLG", "original");
 800574c:	46a4      	mov	ip, r4
 800574e:	49a1      	ldr	r1, [pc, #644]	@ (80059d4 <hashInit.0+0x415c>)
 8005750:	48a1      	ldr	r0, [pc, #644]	@ (80059d8 <hashInit.0+0x4160>)
 8005752:	f7fb ffe3 	bl	800171c <insert.1>
		insert("HAEP/-PBS", "happiness");
 8005756:	46a4      	mov	ip, r4
 8005758:	49a0      	ldr	r1, [pc, #640]	@ (80059dc <hashInit.0+0x4164>)
 800575a:	48a1      	ldr	r0, [pc, #644]	@ (80059e0 <hashInit.0+0x4168>)
 800575c:	f7fb ffde 	bl	800171c <insert.1>
		insert("TPHRO*URS", "flowers");
 8005760:	46a4      	mov	ip, r4
 8005762:	49a0      	ldr	r1, [pc, #640]	@ (80059e4 <hashInit.0+0x416c>)
 8005764:	48a0      	ldr	r0, [pc, #640]	@ (80059e8 <hashInit.0+0x4170>)
 8005766:	f7fb ffd9 	bl	800171c <insert.1>
		insert("PRO*UD", "produced");
 800576a:	46a4      	mov	ip, r4
 800576c:	499f      	ldr	r1, [pc, #636]	@ (80059ec <hashInit.0+0x4174>)
 800576e:	48a0      	ldr	r0, [pc, #640]	@ (80059f0 <hashInit.0+0x4178>)
 8005770:	f7fb ffd4 	bl	800171c <insert.1>
		insert("SAOURPL", "summer");
 8005774:	46a4      	mov	ip, r4
 8005776:	499f      	ldr	r1, [pc, #636]	@ (80059f4 <hashInit.0+0x417c>)
 8005778:	489f      	ldr	r0, [pc, #636]	@ (80059f8 <hashInit.0+0x4180>)
 800577a:	f7fb ffcf 	bl	800171c <insert.1>
		insert("PROEFD", "provide");
 800577e:	46a4      	mov	ip, r4
 8005780:	499e      	ldr	r1, [pc, #632]	@ (80059fc <hashInit.0+0x4184>)
 8005782:	489f      	ldr	r0, [pc, #636]	@ (8005a00 <hashInit.0+0x4188>)
 8005784:	f7fb ffca 	bl	800171c <insert.1>
		insert("STOEU", "study");
 8005788:	46a4      	mov	ip, r4
 800578a:	499e      	ldr	r1, [pc, #632]	@ (8005a04 <hashInit.0+0x418c>)
 800578c:	489e      	ldr	r0, [pc, #632]	@ (8005a08 <hashInit.0+0x4190>)
 800578e:	f7fb ffc5 	bl	800171c <insert.1>
		insert("RE/HREUGS", "religion");
 8005792:	46a4      	mov	ip, r4
 8005794:	499d      	ldr	r1, [pc, #628]	@ (8005a0c <hashInit.0+0x4194>)
 8005796:	489e      	ldr	r0, [pc, #632]	@ (8005a10 <hashInit.0+0x4198>)
 8005798:	f7fb ffc0 	bl	800171c <insert.1>
		insert("P*EUFP", "picture");
 800579c:	46a4      	mov	ip, r4
 800579e:	499d      	ldr	r1, [pc, #628]	@ (8005a14 <hashInit.0+0x419c>)
 80057a0:	489d      	ldr	r0, [pc, #628]	@ (8005a18 <hashInit.0+0x41a0>)
 80057a2:	f7fb ffbb 	bl	800171c <insert.1>
		insert("WAULS", "walls");
 80057a6:	46a4      	mov	ip, r4
 80057a8:	499c      	ldr	r1, [pc, #624]	@ (8005a1c <hashInit.0+0x41a4>)
 80057aa:	489d      	ldr	r0, [pc, #628]	@ (8005a20 <hashInit.0+0x41a8>)
 80057ac:	f7fb ffb6 	bl	800171c <insert.1>
		insert("PERPBL", "personal");
 80057b0:	46a4      	mov	ip, r4
 80057b2:	499c      	ldr	r1, [pc, #624]	@ (8005a24 <hashInit.0+0x41ac>)
 80057b4:	489c      	ldr	r0, [pc, #624]	@ (8005a28 <hashInit.0+0x41b0>)
 80057b6:	f7fb ffb1 	bl	800171c <insert.1>
		insert("PHERBG", "America");
 80057ba:	46a4      	mov	ip, r4
 80057bc:	499b      	ldr	r1, [pc, #620]	@ (8005a2c <hashInit.0+0x41b4>)
 80057be:	489c      	ldr	r0, [pc, #624]	@ (8005a30 <hashInit.0+0x41b8>)
 80057c0:	f7fb ffac 	bl	800171c <insert.1>
		insert("WAFP", "watch");
 80057c4:	46a4      	mov	ip, r4
 80057c6:	499b      	ldr	r1, [pc, #620]	@ (8005a34 <hashInit.0+0x41bc>)
 80057c8:	489b      	ldr	r0, [pc, #620]	@ (8005a38 <hashInit.0+0x41c0>)
 80057ca:	f7fb ffa7 	bl	800171c <insert.1>
		insert("PHREFD", "pleased");
 80057ce:	46a4      	mov	ip, r4
 80057d0:	499a      	ldr	r1, [pc, #616]	@ (8005a3c <hashInit.0+0x41c4>)
 80057d2:	489b      	ldr	r0, [pc, #620]	@ (8005a40 <hashInit.0+0x41c8>)
 80057d4:	f7fb ffa2 	bl	800171c <insert.1>
		insert("HREFS", "leaves");
 80057d8:	46a4      	mov	ip, r4
 80057da:	499a      	ldr	r1, [pc, #616]	@ (8005a44 <hashInit.0+0x41cc>)
 80057dc:	489a      	ldr	r0, [pc, #616]	@ (8005a48 <hashInit.0+0x41d0>)
 80057de:	f7fb ff9d 	bl	800171c <insert.1>
		insert("TKE/KHRAEURD", "declared");
 80057e2:	46a4      	mov	ip, r4
 80057e4:	4999      	ldr	r1, [pc, #612]	@ (8005a4c <hashInit.0+0x41d4>)
 80057e6:	489a      	ldr	r0, [pc, #616]	@ (8005a50 <hashInit.0+0x41d8>)
 80057e8:	f7fb ff98 	bl	800171c <insert.1>
		insert("HOT", "hot");
 80057ec:	46a4      	mov	ip, r4
 80057ee:	4999      	ldr	r1, [pc, #612]	@ (8005a54 <hashInit.0+0x41dc>)
 80057f0:	4899      	ldr	r0, [pc, #612]	@ (8005a58 <hashInit.0+0x41e0>)
 80057f2:	f7fb ff93 	bl	800171c <insert.1>
		insert("*URPBD", "understood");
 80057f6:	46a4      	mov	ip, r4
 80057f8:	4998      	ldr	r1, [pc, #608]	@ (8005a5c <hashInit.0+0x41e4>)
 80057fa:	4899      	ldr	r0, [pc, #612]	@ (8005a60 <hashInit.0+0x41e8>)
 80057fc:	f7fb ff8e 	bl	800171c <insert.1>
		insert("EFRT", "effort");
 8005800:	46a4      	mov	ip, r4
 8005802:	4998      	ldr	r1, [pc, #608]	@ (8005a64 <hashInit.0+0x41ec>)
 8005804:	4898      	ldr	r0, [pc, #608]	@ (8005a68 <hashInit.0+0x41f0>)
 8005806:	f7fb ff89 	bl	800171c <insert.1>
		insert("PRAOEPD", "prepared");
 800580a:	46a4      	mov	ip, r4
 800580c:	4997      	ldr	r1, [pc, #604]	@ (8005a6c <hashInit.0+0x41f4>)
 800580e:	4898      	ldr	r0, [pc, #608]	@ (8005a70 <hashInit.0+0x41f8>)
 8005810:	f7fb ff84 	bl	800171c <insert.1>
		insert("SKA*EUP", "escape");
 8005814:	46a4      	mov	ip, r4
 8005816:	4997      	ldr	r1, [pc, #604]	@ (8005a74 <hashInit.0+0x41fc>)
 8005818:	4897      	ldr	r0, [pc, #604]	@ (8005a78 <hashInit.0+0x4200>)
 800581a:	f7fb ff7f 	bl	800171c <insert.1>
		insert("A/TEPLT", "attempt");
 800581e:	46a4      	mov	ip, r4
 8005820:	4996      	ldr	r1, [pc, #600]	@ (8005a7c <hashInit.0+0x4204>)
 8005822:	4897      	ldr	r0, [pc, #604]	@ (8005a80 <hashInit.0+0x4208>)
 8005824:	f7fb ff7a 	bl	800171c <insert.1>
		insert("SPOED", "supposed");
 8005828:	46a4      	mov	ip, r4
 800582a:	4996      	ldr	r1, [pc, #600]	@ (8005a84 <hashInit.0+0x420c>)
 800582c:	4896      	ldr	r0, [pc, #600]	@ (8005a88 <hashInit.0+0x4210>)
 800582e:	f7fb ff75 	bl	800171c <insert.1>
		insert("KEULD", "killed");
 8005832:	46a4      	mov	ip, r4
 8005834:	4995      	ldr	r1, [pc, #596]	@ (8005a8c <hashInit.0+0x4214>)
 8005836:	4896      	ldr	r0, [pc, #600]	@ (8005a90 <hashInit.0+0x4218>)
 8005838:	f7fb ff70 	bl	800171c <insert.1>
		insert("TPAFT", "fast");
 800583c:	46a4      	mov	ip, r4
 800583e:	4995      	ldr	r1, [pc, #596]	@ (8005a94 <hashInit.0+0x421c>)
 8005840:	4895      	ldr	r0, [pc, #596]	@ (8005a98 <hashInit.0+0x4220>)
 8005842:	f7fb ff6b 	bl	800171c <insert.1>
		insert("THOER", "author");
 8005846:	46a4      	mov	ip, r4
 8005848:	4994      	ldr	r1, [pc, #592]	@ (8005a9c <hashInit.0+0x4224>)
 800584a:	4895      	ldr	r0, [pc, #596]	@ (8005aa0 <hashInit.0+0x4228>)
 800584c:	f7fb ff66 	bl	800171c <insert.1>
		insert("EUPBD/KWRAPB", "Indian");
 8005850:	46a4      	mov	ip, r4
 8005852:	4994      	ldr	r1, [pc, #592]	@ (8005aa4 <hashInit.0+0x422c>)
 8005854:	4894      	ldr	r0, [pc, #592]	@ (8005aa8 <hashInit.0+0x4230>)
 8005856:	f7fb ff61 	bl	800171c <insert.1>
		insert("PWROUPB", "brown");
 800585a:	46a4      	mov	ip, r4
 800585c:	4993      	ldr	r1, [pc, #588]	@ (8005aac <hashInit.0+0x4234>)
 800585e:	4894      	ldr	r0, [pc, #592]	@ (8005ab0 <hashInit.0+0x4238>)
 8005860:	f7fb ff5c 	bl	800171c <insert.1>
		insert("TKERPLD", "determined");
 8005864:	46a4      	mov	ip, r4
 8005866:	4993      	ldr	r1, [pc, #588]	@ (8005ab4 <hashInit.0+0x423c>)
 8005868:	4893      	ldr	r0, [pc, #588]	@ (8005ab8 <hashInit.0+0x4240>)
 800586a:	f7fb ff57 	bl	800171c <insert.1>
		insert("PAEUPB", "pain");
 800586e:	46a4      	mov	ip, r4
 8005870:	4992      	ldr	r1, [pc, #584]	@ (8005abc <hashInit.0+0x4244>)
 8005872:	4893      	ldr	r0, [pc, #588]	@ (8005ac0 <hashInit.0+0x4248>)
 8005874:	f7fb ff52 	bl	800171c <insert.1>
		insert("SPREUPBG", "spring");
 8005878:	46a4      	mov	ip, r4
 800587a:	4992      	ldr	r1, [pc, #584]	@ (8005ac4 <hashInit.0+0x424c>)
 800587c:	4892      	ldr	r0, [pc, #584]	@ (8005ac8 <hashInit.0+0x4250>)
 800587e:	f7fb ff4d 	bl	800171c <insert.1>
		insert("TAEUBGS", "takes");
 8005882:	46a4      	mov	ip, r4
 8005884:	4991      	ldr	r1, [pc, #580]	@ (8005acc <hashInit.0+0x4254>)
 8005886:	4892      	ldr	r0, [pc, #584]	@ (8005ad0 <hashInit.0+0x4258>)
 8005888:	f7fb ff48 	bl	800171c <insert.1>
		insert("TKRAUPB", "drawn");
 800588c:	46a4      	mov	ip, r4
 800588e:	4991      	ldr	r1, [pc, #580]	@ (8005ad4 <hashInit.0+0x425c>)
 8005890:	e122      	b.n	8005ad8 <hashInit.0+0x4260>
 8005892:	bf00      	nop
 8005894:	080109c8 	.word	0x080109c8
 8005898:	080109d4 	.word	0x080109d4
 800589c:	080109dc 	.word	0x080109dc
 80058a0:	080109e0 	.word	0x080109e0
 80058a4:	080109e8 	.word	0x080109e8
 80058a8:	080109f0 	.word	0x080109f0
 80058ac:	080109f8 	.word	0x080109f8
 80058b0:	08010a00 	.word	0x08010a00
 80058b4:	08010a08 	.word	0x08010a08
 80058b8:	08010a10 	.word	0x08010a10
 80058bc:	08010a1c 	.word	0x08010a1c
 80058c0:	08010a2c 	.word	0x08010a2c
 80058c4:	08010a34 	.word	0x08010a34
 80058c8:	08010a38 	.word	0x08010a38
 80058cc:	08010a3c 	.word	0x08010a3c
 80058d0:	08010a44 	.word	0x08010a44
 80058d4:	08010a4c 	.word	0x08010a4c
 80058d8:	08010a54 	.word	0x08010a54
 80058dc:	08010a60 	.word	0x08010a60
 80058e0:	08010a68 	.word	0x08010a68
 80058e4:	08010a70 	.word	0x08010a70
 80058e8:	08010a78 	.word	0x08010a78
 80058ec:	08010a84 	.word	0x08010a84
 80058f0:	08010a88 	.word	0x08010a88
 80058f4:	08010a90 	.word	0x08010a90
 80058f8:	08010a98 	.word	0x08010a98
 80058fc:	08010aa0 	.word	0x08010aa0
 8005900:	08010aa4 	.word	0x08010aa4
 8005904:	08010aa8 	.word	0x08010aa8
 8005908:	08010ab0 	.word	0x08010ab0
 800590c:	08010ab8 	.word	0x08010ab8
 8005910:	08010ac4 	.word	0x08010ac4
 8005914:	08010acc 	.word	0x08010acc
 8005918:	08010ad8 	.word	0x08010ad8
 800591c:	08010ae4 	.word	0x08010ae4
 8005920:	08010aec 	.word	0x08010aec
 8005924:	08010af4 	.word	0x08010af4
 8005928:	08010afc 	.word	0x08010afc
 800592c:	08010b08 	.word	0x08010b08
 8005930:	08010b10 	.word	0x08010b10
 8005934:	08010b18 	.word	0x08010b18
 8005938:	08010b20 	.word	0x08010b20
 800593c:	08010b2c 	.word	0x08010b2c
 8005940:	08010b30 	.word	0x08010b30
 8005944:	08010b34 	.word	0x08010b34
 8005948:	08010b40 	.word	0x08010b40
 800594c:	08010b48 	.word	0x08010b48
 8005950:	08010b50 	.word	0x08010b50
 8005954:	08010b58 	.word	0x08010b58
 8005958:	08010b60 	.word	0x08010b60
 800595c:	08010b68 	.word	0x08010b68
 8005960:	08010b74 	.word	0x08010b74
 8005964:	08010b80 	.word	0x08010b80
 8005968:	08010b8c 	.word	0x08010b8c
 800596c:	08010b94 	.word	0x08010b94
 8005970:	08010b98 	.word	0x08010b98
 8005974:	08010ba0 	.word	0x08010ba0
 8005978:	08010ba8 	.word	0x08010ba8
 800597c:	08010bb0 	.word	0x08010bb0
 8005980:	08010bb8 	.word	0x08010bb8
 8005984:	08010bc4 	.word	0x08010bc4
 8005988:	08010bc8 	.word	0x08010bc8
 800598c:	08010bd0 	.word	0x08010bd0
 8005990:	08010bd8 	.word	0x08010bd8
 8005994:	08010be0 	.word	0x08010be0
 8005998:	08010be4 	.word	0x08010be4
 800599c:	08010bec 	.word	0x08010bec
 80059a0:	08010bf8 	.word	0x08010bf8
 80059a4:	08010c00 	.word	0x08010c00
 80059a8:	08010c08 	.word	0x08010c08
 80059ac:	08010c10 	.word	0x08010c10
 80059b0:	08010c18 	.word	0x08010c18
 80059b4:	08010c20 	.word	0x08010c20
 80059b8:	08010c24 	.word	0x08010c24
 80059bc:	08010c28 	.word	0x08010c28
 80059c0:	08010c30 	.word	0x08010c30
 80059c4:	08010c38 	.word	0x08010c38
 80059c8:	08010c44 	.word	0x08010c44
 80059cc:	08010c4c 	.word	0x08010c4c
 80059d0:	08010c54 	.word	0x08010c54
 80059d4:	08010c5c 	.word	0x08010c5c
 80059d8:	08010c68 	.word	0x08010c68
 80059dc:	08010c70 	.word	0x08010c70
 80059e0:	08010c7c 	.word	0x08010c7c
 80059e4:	08010c88 	.word	0x08010c88
 80059e8:	08010c90 	.word	0x08010c90
 80059ec:	08010c9c 	.word	0x08010c9c
 80059f0:	08010ca8 	.word	0x08010ca8
 80059f4:	08010cb0 	.word	0x08010cb0
 80059f8:	08010cb8 	.word	0x08010cb8
 80059fc:	08010cc0 	.word	0x08010cc0
 8005a00:	08010cc8 	.word	0x08010cc8
 8005a04:	08010cd0 	.word	0x08010cd0
 8005a08:	08010cd8 	.word	0x08010cd8
 8005a0c:	08010ce0 	.word	0x08010ce0
 8005a10:	08010cec 	.word	0x08010cec
 8005a14:	08010cf8 	.word	0x08010cf8
 8005a18:	08010d00 	.word	0x08010d00
 8005a1c:	08010d08 	.word	0x08010d08
 8005a20:	08010d10 	.word	0x08010d10
 8005a24:	08010d18 	.word	0x08010d18
 8005a28:	08010d24 	.word	0x08010d24
 8005a2c:	08010d2c 	.word	0x08010d2c
 8005a30:	08010d34 	.word	0x08010d34
 8005a34:	08010d3c 	.word	0x08010d3c
 8005a38:	08010d44 	.word	0x08010d44
 8005a3c:	08010d4c 	.word	0x08010d4c
 8005a40:	08010d54 	.word	0x08010d54
 8005a44:	08010d5c 	.word	0x08010d5c
 8005a48:	08010d64 	.word	0x08010d64
 8005a4c:	08010d6c 	.word	0x08010d6c
 8005a50:	08010d78 	.word	0x08010d78
 8005a54:	08010d88 	.word	0x08010d88
 8005a58:	08010d8c 	.word	0x08010d8c
 8005a5c:	08010d90 	.word	0x08010d90
 8005a60:	08010d9c 	.word	0x08010d9c
 8005a64:	08010da4 	.word	0x08010da4
 8005a68:	08010dac 	.word	0x08010dac
 8005a6c:	08010db4 	.word	0x08010db4
 8005a70:	08010dc0 	.word	0x08010dc0
 8005a74:	08010dc8 	.word	0x08010dc8
 8005a78:	08010dd0 	.word	0x08010dd0
 8005a7c:	08010dd8 	.word	0x08010dd8
 8005a80:	08010de0 	.word	0x08010de0
 8005a84:	08010de8 	.word	0x08010de8
 8005a88:	08010df4 	.word	0x08010df4
 8005a8c:	08010dfc 	.word	0x08010dfc
 8005a90:	08010e04 	.word	0x08010e04
 8005a94:	08010e0c 	.word	0x08010e0c
 8005a98:	08010e14 	.word	0x08010e14
 8005a9c:	08010e1c 	.word	0x08010e1c
 8005aa0:	08010e24 	.word	0x08010e24
 8005aa4:	08010e2c 	.word	0x08010e2c
 8005aa8:	08010e34 	.word	0x08010e34
 8005aac:	08010e44 	.word	0x08010e44
 8005ab0:	08010e4c 	.word	0x08010e4c
 8005ab4:	08010e54 	.word	0x08010e54
 8005ab8:	08010e60 	.word	0x08010e60
 8005abc:	08010e68 	.word	0x08010e68
 8005ac0:	08010e70 	.word	0x08010e70
 8005ac4:	08010e78 	.word	0x08010e78
 8005ac8:	08010e80 	.word	0x08010e80
 8005acc:	08010e8c 	.word	0x08010e8c
 8005ad0:	08010e94 	.word	0x08010e94
 8005ad4:	08010e9c 	.word	0x08010e9c
 8005ad8:	48b5      	ldr	r0, [pc, #724]	@ (8005db0 <hashInit.0+0x4538>)
 8005ada:	f7fb fe1f 	bl	800171c <insert.1>
		insert("SHRERPBLGS", "soldiers");
 8005ade:	46a4      	mov	ip, r4
 8005ae0:	49b4      	ldr	r1, [pc, #720]	@ (8005db4 <hashInit.0+0x453c>)
 8005ae2:	48b5      	ldr	r0, [pc, #724]	@ (8005db8 <hashInit.0+0x4540>)
 8005ae4:	f7fb fe1a 	bl	800171c <insert.1>
		insert("HO*UFS", "houses");
 8005ae8:	46a4      	mov	ip, r4
 8005aea:	49b4      	ldr	r1, [pc, #720]	@ (8005dbc <hashInit.0+0x4544>)
 8005aec:	48b4      	ldr	r0, [pc, #720]	@ (8005dc0 <hashInit.0+0x4548>)
 8005aee:	f7fb fe15 	bl	800171c <insert.1>
		insert("TPHAO*ET", "beneath");
 8005af2:	46a4      	mov	ip, r4
 8005af4:	49b3      	ldr	r1, [pc, #716]	@ (8005dc4 <hashInit.0+0x454c>)
 8005af6:	48b4      	ldr	r0, [pc, #720]	@ (8005dc8 <hashInit.0+0x4550>)
 8005af8:	f7fb fe10 	bl	800171c <insert.1>
		insert("TAUG", "talking");
 8005afc:	46a4      	mov	ip, r4
 8005afe:	49b3      	ldr	r1, [pc, #716]	@ (8005dcc <hashInit.0+0x4554>)
 8005b00:	48b3      	ldr	r0, [pc, #716]	@ (8005dd0 <hashInit.0+0x4558>)
 8005b02:	f7fb fe0b 	bl	800171c <insert.1>
		insert("TURPBG", "turning");
 8005b06:	46a4      	mov	ip, r4
 8005b08:	49b2      	ldr	r1, [pc, #712]	@ (8005dd4 <hashInit.0+0x455c>)
 8005b0a:	48b3      	ldr	r0, [pc, #716]	@ (8005dd8 <hashInit.0+0x4560>)
 8005b0c:	f7fb fe06 	bl	800171c <insert.1>
		insert("KROEURPBT", "century");
 8005b10:	46a4      	mov	ip, r4
 8005b12:	49b2      	ldr	r1, [pc, #712]	@ (8005ddc <hashInit.0+0x4564>)
 8005b14:	48b2      	ldr	r0, [pc, #712]	@ (8005de0 <hashInit.0+0x4568>)
 8005b16:	f7fb fe01 	bl	800171c <insert.1>
		insert("STEPS", "steps");
 8005b1a:	46a4      	mov	ip, r4
 8005b1c:	49b1      	ldr	r1, [pc, #708]	@ (8005de4 <hashInit.0+0x456c>)
 8005b1e:	48b2      	ldr	r0, [pc, #712]	@ (8005de8 <hashInit.0+0x4570>)
 8005b20:	f7fb fdfc 	bl	800171c <insert.1>
		insert("SPWEPBD/-D", "intended");
 8005b24:	46a4      	mov	ip, r4
 8005b26:	49b1      	ldr	r1, [pc, #708]	@ (8005dec <hashInit.0+0x4574>)
 8005b28:	48b1      	ldr	r0, [pc, #708]	@ (8005df0 <hashInit.0+0x4578>)
 8005b2a:	f7fb fdf7 	bl	800171c <insert.1>
		insert("SOFT", "soft");
 8005b2e:	46a4      	mov	ip, r4
 8005b30:	49b0      	ldr	r1, [pc, #704]	@ (8005df4 <hashInit.0+0x457c>)
 8005b32:	48b1      	ldr	r0, [pc, #708]	@ (8005df8 <hashInit.0+0x4580>)
 8005b34:	f7fb fdf2 	bl	800171c <insert.1>
		insert("STRAEUT", "straight");
 8005b38:	46a4      	mov	ip, r4
 8005b3a:	49b0      	ldr	r1, [pc, #704]	@ (8005dfc <hashInit.0+0x4584>)
 8005b3c:	48b0      	ldr	r0, [pc, #704]	@ (8005e00 <hashInit.0+0x4588>)
 8005b3e:	f7fb fded 	bl	800171c <insert.1>
		insert("PHAERTS", "matters");
 8005b42:	46a4      	mov	ip, r4
 8005b44:	49af      	ldr	r1, [pc, #700]	@ (8005e04 <hashInit.0+0x458c>)
 8005b46:	48b0      	ldr	r0, [pc, #704]	@ (8005e08 <hashInit.0+0x4590>)
 8005b48:	f7fb fde8 	bl	800171c <insert.1>
		insert("HRAOEULG", "likely");
 8005b4c:	46a4      	mov	ip, r4
 8005b4e:	49af      	ldr	r1, [pc, #700]	@ (8005e0c <hashInit.0+0x4594>)
 8005b50:	48af      	ldr	r0, [pc, #700]	@ (8005e10 <hashInit.0+0x4598>)
 8005b52:	f7fb fde3 	bl	800171c <insert.1>
		insert("KRORPB", "corner");
 8005b56:	46a4      	mov	ip, r4
 8005b58:	49ae      	ldr	r1, [pc, #696]	@ (8005e14 <hashInit.0+0x459c>)
 8005b5a:	48af      	ldr	r0, [pc, #700]	@ (8005e18 <hashInit.0+0x45a0>)
 8005b5c:	f7fb fdde 	bl	800171c <insert.1>
		insert("TRAEUD/PHARBG", "trademark");
 8005b60:	46a4      	mov	ip, r4
 8005b62:	49ae      	ldr	r1, [pc, #696]	@ (8005e1c <hashInit.0+0x45a4>)
 8005b64:	48ae      	ldr	r0, [pc, #696]	@ (8005e20 <hashInit.0+0x45a8>)
 8005b66:	f7fb fdd9 	bl	800171c <insert.1>
		insert("SKWRUFS", "justice");
 8005b6a:	46a4      	mov	ip, r4
 8005b6c:	49ad      	ldr	r1, [pc, #692]	@ (8005e24 <hashInit.0+0x45ac>)
 8005b6e:	48ae      	ldr	r0, [pc, #696]	@ (8005e28 <hashInit.0+0x45b0>)
 8005b70:	f7fb fdd4 	bl	800171c <insert.1>
		insert("SAO*EPL", "simply");
 8005b74:	46a4      	mov	ip, r4
 8005b76:	49ad      	ldr	r1, [pc, #692]	@ (8005e2c <hashInit.0+0x45b4>)
 8005b78:	48ad      	ldr	r0, [pc, #692]	@ (8005e30 <hashInit.0+0x45b8>)
 8005b7a:	f7fb fdcf 	bl	800171c <insert.1>
		insert("PROU", "produce");
 8005b7e:	46a4      	mov	ip, r4
 8005b80:	49ac      	ldr	r1, [pc, #688]	@ (8005e34 <hashInit.0+0x45bc>)
 8005b82:	48ad      	ldr	r0, [pc, #692]	@ (8005e38 <hashInit.0+0x45c0>)
 8005b84:	f7fb fdca 	bl	800171c <insert.1>
		insert("TRUFT", "trust");
 8005b88:	46a4      	mov	ip, r4
 8005b8a:	49ac      	ldr	r1, [pc, #688]	@ (8005e3c <hashInit.0+0x45c4>)
 8005b8c:	48ac      	ldr	r0, [pc, #688]	@ (8005e40 <hashInit.0+0x45c8>)
 8005b8e:	f7fb fdc5 	bl	800171c <insert.1>
		insert("A/PAOERS", "appears");
 8005b92:	46a4      	mov	ip, r4
 8005b94:	49ab      	ldr	r1, [pc, #684]	@ (8005e44 <hashInit.0+0x45cc>)
 8005b96:	48ac      	ldr	r0, [pc, #688]	@ (8005e48 <hashInit.0+0x45d0>)
 8005b98:	f7fb fdc0 	bl	800171c <insert.1>
		insert("RO*EPL", "Rome");
 8005b9c:	46a4      	mov	ip, r4
 8005b9e:	49ab      	ldr	r1, [pc, #684]	@ (8005e4c <hashInit.0+0x45d4>)
 8005ba0:	48ab      	ldr	r0, [pc, #684]	@ (8005e50 <hashInit.0+0x45d8>)
 8005ba2:	f7fb fdbb 	bl	800171c <insert.1>
		insert("HRAF", "laugh");
 8005ba6:	46a4      	mov	ip, r4
 8005ba8:	49aa      	ldr	r1, [pc, #680]	@ (8005e54 <hashInit.0+0x45dc>)
 8005baa:	48ab      	ldr	r0, [pc, #684]	@ (8005e58 <hashInit.0+0x45e0>)
 8005bac:	f7fb fdb6 	bl	800171c <insert.1>
		insert("TPORGT", "forget");
 8005bb0:	46a4      	mov	ip, r4
 8005bb2:	49aa      	ldr	r1, [pc, #680]	@ (8005e5c <hashInit.0+0x45e4>)
 8005bb4:	48aa      	ldr	r0, [pc, #680]	@ (8005e60 <hashInit.0+0x45e8>)
 8005bb6:	f7fb fdb1 	bl	800171c <insert.1>
		insert("AO*URP", "Europe");
 8005bba:	46a4      	mov	ip, r4
 8005bbc:	49a9      	ldr	r1, [pc, #676]	@ (8005e64 <hashInit.0+0x45ec>)
 8005bbe:	48aa      	ldr	r0, [pc, #680]	@ (8005e68 <hashInit.0+0x45f0>)
 8005bc0:	f7fb fdac 	bl	800171c <insert.1>
		insert("PAFPBLG", "passage");
 8005bc4:	46a4      	mov	ip, r4
 8005bc6:	49a9      	ldr	r1, [pc, #676]	@ (8005e6c <hashInit.0+0x45f4>)
 8005bc8:	48a9      	ldr	r0, [pc, #676]	@ (8005e70 <hashInit.0+0x45f8>)
 8005bca:	f7fb fda7 	bl	800171c <insert.1>
		insert("AET", "eight");
 8005bce:	46a4      	mov	ip, r4
 8005bd0:	49a8      	ldr	r1, [pc, #672]	@ (8005e74 <hashInit.0+0x45fc>)
 8005bd2:	48a9      	ldr	r0, [pc, #676]	@ (8005e78 <hashInit.0+0x4600>)
 8005bd4:	f7fb fda2 	bl	800171c <insert.1>
		insert("KHROEFD", "closed");
 8005bd8:	46a4      	mov	ip, r4
 8005bda:	49a8      	ldr	r1, [pc, #672]	@ (8005e7c <hashInit.0+0x4604>)
 8005bdc:	48a8      	ldr	r0, [pc, #672]	@ (8005e80 <hashInit.0+0x4608>)
 8005bde:	f7fb fd9d 	bl	800171c <insert.1>
		insert("OUR/SEFS", "ourselves");
 8005be2:	46a4      	mov	ip, r4
 8005be4:	49a7      	ldr	r1, [pc, #668]	@ (8005e84 <hashInit.0+0x460c>)
 8005be6:	48a8      	ldr	r0, [pc, #672]	@ (8005e88 <hashInit.0+0x4610>)
 8005be8:	f7fb fd98 	bl	800171c <insert.1>
		insert("TKPWEUFS", "gives");
 8005bec:	46a4      	mov	ip, r4
 8005bee:	49a7      	ldr	r1, [pc, #668]	@ (8005e8c <hashInit.0+0x4614>)
 8005bf0:	48a7      	ldr	r0, [pc, #668]	@ (8005e90 <hashInit.0+0x4618>)
 8005bf2:	f7fb fd93 	bl	800171c <insert.1>
		insert("TKRES", "dress");
 8005bf6:	46a4      	mov	ip, r4
 8005bf8:	49a6      	ldr	r1, [pc, #664]	@ (8005e94 <hashInit.0+0x461c>)
 8005bfa:	48a7      	ldr	r0, [pc, #668]	@ (8005e98 <hashInit.0+0x4620>)
 8005bfc:	f7fb fd8e 	bl	800171c <insert.1>
		insert("PAFG", "passing");
 8005c00:	46a4      	mov	ip, r4
 8005c02:	49a6      	ldr	r1, [pc, #664]	@ (8005e9c <hashInit.0+0x4624>)
 8005c04:	48a6      	ldr	r0, [pc, #664]	@ (8005ea0 <hashInit.0+0x4628>)
 8005c06:	f7fb fd89 	bl	800171c <insert.1>
		insert("TERBL", "terrible");
 8005c0a:	46a4      	mov	ip, r4
 8005c0c:	49a5      	ldr	r1, [pc, #660]	@ (8005ea4 <hashInit.0+0x462c>)
 8005c0e:	48a6      	ldr	r0, [pc, #664]	@ (8005ea8 <hashInit.0+0x4630>)
 8005c10:	f7fb fd84 	bl	800171c <insert.1>
		insert("RAOEURD", "required");
 8005c14:	46a4      	mov	ip, r4
 8005c16:	49a5      	ldr	r1, [pc, #660]	@ (8005eac <hashInit.0+0x4634>)
 8005c18:	48a5      	ldr	r0, [pc, #660]	@ (8005eb0 <hashInit.0+0x4638>)
 8005c1a:	f7fb fd7f 	bl	800171c <insert.1>
		insert("PHAOEPLD", "medium");
 8005c1e:	46a4      	mov	ip, r4
 8005c20:	49a4      	ldr	r1, [pc, #656]	@ (8005eb4 <hashInit.0+0x463c>)
 8005c22:	48a5      	ldr	r0, [pc, #660]	@ (8005eb8 <hashInit.0+0x4640>)
 8005c24:	f7fb fd7a 	bl	800171c <insert.1>
		insert("EFRTS", "efforts");
 8005c28:	46a4      	mov	ip, r4
 8005c2a:	49a4      	ldr	r1, [pc, #656]	@ (8005ebc <hashInit.0+0x4644>)
 8005c2c:	48a4      	ldr	r0, [pc, #656]	@ (8005ec0 <hashInit.0+0x4648>)
 8005c2e:	f7fb fd75 	bl	800171c <insert.1>
		insert("SAEUBG", "sake");
 8005c32:	46a4      	mov	ip, r4
 8005c34:	49a3      	ldr	r1, [pc, #652]	@ (8005ec4 <hashInit.0+0x464c>)
 8005c36:	48a4      	ldr	r0, [pc, #656]	@ (8005ec8 <hashInit.0+0x4650>)
 8005c38:	f7fb fd70 	bl	800171c <insert.1>
		insert("PWR*ET", "breath");
 8005c3c:	46a4      	mov	ip, r4
 8005c3e:	49a3      	ldr	r1, [pc, #652]	@ (8005ecc <hashInit.0+0x4654>)
 8005c40:	48a3      	ldr	r0, [pc, #652]	@ (8005ed0 <hashInit.0+0x4658>)
 8005c42:	f7fb fd6b 	bl	800171c <insert.1>
		insert("WAOEUS", "wise");
 8005c46:	46a4      	mov	ip, r4
 8005c48:	49a2      	ldr	r1, [pc, #648]	@ (8005ed4 <hashInit.0+0x465c>)
 8005c4a:	48a3      	ldr	r0, [pc, #652]	@ (8005ed8 <hashInit.0+0x4660>)
 8005c4c:	f7fb fd66 	bl	800171c <insert.1>
		insert("HRAEUDZ", "ladies");
 8005c50:	46a4      	mov	ip, r4
 8005c52:	49a2      	ldr	r1, [pc, #648]	@ (8005edc <hashInit.0+0x4664>)
 8005c54:	48a2      	ldr	r0, [pc, #648]	@ (8005ee0 <hashInit.0+0x4668>)
 8005c56:	f7fb fd61 	bl	800171c <insert.1>
		insert("PEFGS", "possession");
 8005c5a:	46a4      	mov	ip, r4
 8005c5c:	49a1      	ldr	r1, [pc, #644]	@ (8005ee4 <hashInit.0+0x466c>)
 8005c5e:	48a2      	ldr	r0, [pc, #648]	@ (8005ee8 <hashInit.0+0x4670>)
 8005c60:	f7fb fd5c 	bl	800171c <insert.1>
		insert("PHREFPBT", "pleasant");
 8005c64:	46a4      	mov	ip, r4
 8005c66:	49a1      	ldr	r1, [pc, #644]	@ (8005eec <hashInit.0+0x4674>)
 8005c68:	48a1      	ldr	r0, [pc, #644]	@ (8005ef0 <hashInit.0+0x4678>)
 8005c6a:	f7fb fd57 	bl	800171c <insert.1>
		insert("P-FRL", "perfectly");
 8005c6e:	46a4      	mov	ip, r4
 8005c70:	49a0      	ldr	r1, [pc, #640]	@ (8005ef4 <hashInit.0+0x467c>)
 8005c72:	48a1      	ldr	r0, [pc, #644]	@ (8005ef8 <hashInit.0+0x4680>)
 8005c74:	f7fb fd52 	bl	800171c <insert.1>
		insert("O*/TK-LS/AE", "o'");
 8005c78:	46a4      	mov	ip, r4
 8005c7a:	49a0      	ldr	r1, [pc, #640]	@ (8005efc <hashInit.0+0x4684>)
 8005c7c:	48a0      	ldr	r0, [pc, #640]	@ (8005f00 <hashInit.0+0x4688>)
 8005c7e:	f7fb fd4d 	bl	800171c <insert.1>
		insert("PHOEURPL", "memory");
 8005c82:	46a4      	mov	ip, r4
 8005c84:	499f      	ldr	r1, [pc, #636]	@ (8005f04 <hashInit.0+0x468c>)
 8005c86:	48a0      	ldr	r0, [pc, #640]	@ (8005f08 <hashInit.0+0x4690>)
 8005c88:	f7fb fd48 	bl	800171c <insert.1>
		insert("AOURBL", "usually");
 8005c8c:	46a4      	mov	ip, r4
 8005c8e:	499f      	ldr	r1, [pc, #636]	@ (8005f0c <hashInit.0+0x4694>)
 8005c90:	489f      	ldr	r0, [pc, #636]	@ (8005f10 <hashInit.0+0x4698>)
 8005c92:	f7fb fd43 	bl	800171c <insert.1>
		insert("TKPWRAEUF", "grave");
 8005c96:	46a4      	mov	ip, r4
 8005c98:	499e      	ldr	r1, [pc, #632]	@ (8005f14 <hashInit.0+0x469c>)
 8005c9a:	489f      	ldr	r0, [pc, #636]	@ (8005f18 <hashInit.0+0x46a0>)
 8005c9c:	f7fb fd3e 	bl	800171c <insert.1>
		insert("TPEUFD", "fixed");
 8005ca0:	46a4      	mov	ip, r4
 8005ca2:	499e      	ldr	r1, [pc, #632]	@ (8005f1c <hashInit.0+0x46a4>)
 8005ca4:	489e      	ldr	r0, [pc, #632]	@ (8005f20 <hashInit.0+0x46a8>)
 8005ca6:	f7fb fd39 	bl	800171c <insert.1>
		insert("PHOERPB", "modern");
 8005caa:	46a4      	mov	ip, r4
 8005cac:	499d      	ldr	r1, [pc, #628]	@ (8005f24 <hashInit.0+0x46ac>)
 8005cae:	489e      	ldr	r0, [pc, #632]	@ (8005f28 <hashInit.0+0x46b0>)
 8005cb0:	f7fb fd34 	bl	800171c <insert.1>
		insert("SPOT", "spot");
 8005cb4:	46a4      	mov	ip, r4
 8005cb6:	499d      	ldr	r1, [pc, #628]	@ (8005f2c <hashInit.0+0x46b4>)
 8005cb8:	489d      	ldr	r0, [pc, #628]	@ (8005f30 <hashInit.0+0x46b8>)
 8005cba:	f7fb fd2f 	bl	800171c <insert.1>
		insert("TRAOPS", "troops");
 8005cbe:	46a4      	mov	ip, r4
 8005cc0:	499c      	ldr	r1, [pc, #624]	@ (8005f34 <hashInit.0+0x46bc>)
 8005cc2:	489d      	ldr	r0, [pc, #628]	@ (8005f38 <hashInit.0+0x46c0>)
 8005cc4:	f7fb fd2a 	bl	800171c <insert.1>
		insert("RAOEUZ", "rise");
 8005cc8:	46a4      	mov	ip, r4
 8005cca:	499c      	ldr	r1, [pc, #624]	@ (8005f3c <hashInit.0+0x46c4>)
 8005ccc:	489c      	ldr	r0, [pc, #624]	@ (8005f40 <hashInit.0+0x46c8>)
 8005cce:	f7fb fd25 	bl	800171c <insert.1>
		insert("PWRAEBG", "break");
 8005cd2:	46a4      	mov	ip, r4
 8005cd4:	499b      	ldr	r1, [pc, #620]	@ (8005f44 <hashInit.0+0x46cc>)
 8005cd6:	489c      	ldr	r0, [pc, #624]	@ (8005f48 <hashInit.0+0x46d0>)
 8005cd8:	f7fb fd20 	bl	800171c <insert.1>
		insert("TPAEFT", "fifty");
 8005cdc:	46a4      	mov	ip, r4
 8005cde:	499b      	ldr	r1, [pc, #620]	@ (8005f4c <hashInit.0+0x46d4>)
 8005ce0:	489b      	ldr	r0, [pc, #620]	@ (8005f50 <hashInit.0+0x46d8>)
 8005ce2:	f7fb fd1b 	bl	800171c <insert.1>
		insert("AOEULD", "island");
 8005ce6:	46a4      	mov	ip, r4
 8005ce8:	499a      	ldr	r1, [pc, #616]	@ (8005f54 <hashInit.0+0x46dc>)
 8005cea:	489b      	ldr	r0, [pc, #620]	@ (8005f58 <hashInit.0+0x46e0>)
 8005cec:	f7fb fd16 	bl	800171c <insert.1>
		insert("PHAOEGT", "meeting");
 8005cf0:	46a4      	mov	ip, r4
 8005cf2:	499a      	ldr	r1, [pc, #616]	@ (8005f5c <hashInit.0+0x46e4>)
 8005cf4:	489a      	ldr	r0, [pc, #616]	@ (8005f60 <hashInit.0+0x46e8>)
 8005cf6:	f7fb fd11 	bl	800171c <insert.1>
		insert("KAFRP", "camp");
 8005cfa:	46a4      	mov	ip, r4
 8005cfc:	4999      	ldr	r1, [pc, #612]	@ (8005f64 <hashInit.0+0x46ec>)
 8005cfe:	489a      	ldr	r0, [pc, #616]	@ (8005f68 <hashInit.0+0x46f0>)
 8005d00:	f7fb fd0c 	bl	800171c <insert.1>
		insert("TPH-GS", "nation");
 8005d04:	46a4      	mov	ip, r4
 8005d06:	4999      	ldr	r1, [pc, #612]	@ (8005f6c <hashInit.0+0x46f4>)
 8005d08:	4899      	ldr	r0, [pc, #612]	@ (8005f70 <hashInit.0+0x46f8>)
 8005d0a:	f7fb fd07 	bl	800171c <insert.1>
		insert("KPEUFS", "existence");
 8005d0e:	46a4      	mov	ip, r4
 8005d10:	4998      	ldr	r1, [pc, #608]	@ (8005f74 <hashInit.0+0x46fc>)
 8005d12:	4899      	ldr	r0, [pc, #612]	@ (8005f78 <hashInit.0+0x4700>)
 8005d14:	f7fb fd02 	bl	800171c <insert.1>
		insert("RE/PHRAOEU", "reply");
 8005d18:	46a4      	mov	ip, r4
 8005d1a:	4998      	ldr	r1, [pc, #608]	@ (8005f7c <hashInit.0+0x4704>)
 8005d1c:	4898      	ldr	r0, [pc, #608]	@ (8005f80 <hashInit.0+0x4708>)
 8005d1e:	f7fb fcfd 	bl	800171c <insert.1>
		insert("AOEUD", "I'd");
 8005d22:	46a4      	mov	ip, r4
 8005d24:	4997      	ldr	r1, [pc, #604]	@ (8005f84 <hashInit.0+0x470c>)
 8005d26:	4898      	ldr	r0, [pc, #608]	@ (8005f88 <hashInit.0+0x4710>)
 8005d28:	f7fb fcf8 	bl	800171c <insert.1>
		insert("KO*EPS", "copies");
 8005d2c:	46a4      	mov	ip, r4
 8005d2e:	4997      	ldr	r1, [pc, #604]	@ (8005f8c <hashInit.0+0x4714>)
 8005d30:	4897      	ldr	r0, [pc, #604]	@ (8005f90 <hashInit.0+0x4718>)
 8005d32:	f7fb fcf3 	bl	800171c <insert.1>
		insert("SKAOEU", "sky");
 8005d36:	46a4      	mov	ip, r4
 8005d38:	4996      	ldr	r1, [pc, #600]	@ (8005f94 <hashInit.0+0x471c>)
 8005d3a:	4897      	ldr	r0, [pc, #604]	@ (8005f98 <hashInit.0+0x4720>)
 8005d3c:	f7fb fcee 	bl	800171c <insert.1>
		insert("TUFP", "touch");
 8005d40:	46a4      	mov	ip, r4
 8005d42:	4996      	ldr	r1, [pc, #600]	@ (8005f9c <hashInit.0+0x4724>)
 8005d44:	4896      	ldr	r0, [pc, #600]	@ (8005fa0 <hashInit.0+0x4728>)
 8005d46:	f7fb fce9 	bl	800171c <insert.1>
		insert("KWAL", "equal");
 8005d4a:	46a4      	mov	ip, r4
 8005d4c:	4995      	ldr	r1, [pc, #596]	@ (8005fa4 <hashInit.0+0x472c>)
 8005d4e:	4896      	ldr	r0, [pc, #600]	@ (8005fa8 <hashInit.0+0x4730>)
 8005d50:	f7fb fce4 	bl	800171c <insert.1>
		insert("TP-RPB", "fortune");
 8005d54:	46a4      	mov	ip, r4
 8005d56:	4995      	ldr	r1, [pc, #596]	@ (8005fac <hashInit.0+0x4734>)
 8005d58:	4895      	ldr	r0, [pc, #596]	@ (8005fb0 <hashInit.0+0x4738>)
 8005d5a:	f7fb fcdf 	bl	800171c <insert.1>
		insert("SR*/TP-PL", "v.");
 8005d5e:	46a4      	mov	ip, r4
 8005d60:	4994      	ldr	r1, [pc, #592]	@ (8005fb4 <hashInit.0+0x473c>)
 8005d62:	4895      	ldr	r0, [pc, #596]	@ (8005fb8 <hashInit.0+0x4740>)
 8005d64:	f7fb fcda 	bl	800171c <insert.1>
		insert("SHOR", "shore");
 8005d68:	46a4      	mov	ip, r4
 8005d6a:	4994      	ldr	r1, [pc, #592]	@ (8005fbc <hashInit.0+0x4744>)
 8005d6c:	4894      	ldr	r0, [pc, #592]	@ (8005fc0 <hashInit.0+0x4748>)
 8005d6e:	f7fb fcd5 	bl	800171c <insert.1>
		insert("TKPHAEUPB", "domain");
 8005d72:	46a4      	mov	ip, r4
 8005d74:	4993      	ldr	r1, [pc, #588]	@ (8005fc4 <hashInit.0+0x474c>)
 8005d76:	4894      	ldr	r0, [pc, #592]	@ (8005fc8 <hashInit.0+0x4750>)
 8005d78:	f7fb fcd0 	bl	800171c <insert.1>
		insert("TPHAEUPLD", "named");
 8005d7c:	46a4      	mov	ip, r4
 8005d7e:	4993      	ldr	r1, [pc, #588]	@ (8005fcc <hashInit.0+0x4754>)
 8005d80:	4893      	ldr	r0, [pc, #588]	@ (8005fd0 <hashInit.0+0x4758>)
 8005d82:	f7fb fccb 	bl	800171c <insert.1>
		insert("SEUFP", "situation");
 8005d86:	46a4      	mov	ip, r4
 8005d88:	4992      	ldr	r1, [pc, #584]	@ (8005fd4 <hashInit.0+0x475c>)
 8005d8a:	4893      	ldr	r0, [pc, #588]	@ (8005fd8 <hashInit.0+0x4760>)
 8005d8c:	f7fb fcc6 	bl	800171c <insert.1>
		insert("HRAOBGS", "looks");
 8005d90:	46a4      	mov	ip, r4
 8005d92:	4992      	ldr	r1, [pc, #584]	@ (8005fdc <hashInit.0+0x4764>)
 8005d94:	4892      	ldr	r0, [pc, #584]	@ (8005fe0 <hashInit.0+0x4768>)
 8005d96:	f7fb fcc1 	bl	800171c <insert.1>
		insert("PROPLS", "promise");
 8005d9a:	46a4      	mov	ip, r4
 8005d9c:	4991      	ldr	r1, [pc, #580]	@ (8005fe4 <hashInit.0+0x476c>)
 8005d9e:	4892      	ldr	r0, [pc, #584]	@ (8005fe8 <hashInit.0+0x4770>)
 8005da0:	f7fb fcbc 	bl	800171c <insert.1>
		insert("ORDZ", "orders");
 8005da4:	46a4      	mov	ip, r4
 8005da6:	4991      	ldr	r1, [pc, #580]	@ (8005fec <hashInit.0+0x4774>)
 8005da8:	4891      	ldr	r0, [pc, #580]	@ (8005ff0 <hashInit.0+0x4778>)
 8005daa:	f7fb fcb7 	bl	800171c <insert.1>
 8005dae:	e121      	b.n	8005ff4 <hashInit.0+0x477c>
 8005db0:	08010ea4 	.word	0x08010ea4
 8005db4:	08010eac 	.word	0x08010eac
 8005db8:	08010eb8 	.word	0x08010eb8
 8005dbc:	08010ec4 	.word	0x08010ec4
 8005dc0:	08010ecc 	.word	0x08010ecc
 8005dc4:	08010ed4 	.word	0x08010ed4
 8005dc8:	08010edc 	.word	0x08010edc
 8005dcc:	08010ee8 	.word	0x08010ee8
 8005dd0:	08010ef0 	.word	0x08010ef0
 8005dd4:	08010ef8 	.word	0x08010ef8
 8005dd8:	08010f00 	.word	0x08010f00
 8005ddc:	08010f08 	.word	0x08010f08
 8005de0:	08010f10 	.word	0x08010f10
 8005de4:	08010f1c 	.word	0x08010f1c
 8005de8:	08010f24 	.word	0x08010f24
 8005dec:	08010f2c 	.word	0x08010f2c
 8005df0:	08010f38 	.word	0x08010f38
 8005df4:	08010f44 	.word	0x08010f44
 8005df8:	08010f4c 	.word	0x08010f4c
 8005dfc:	08010f54 	.word	0x08010f54
 8005e00:	08010f60 	.word	0x08010f60
 8005e04:	08010f68 	.word	0x08010f68
 8005e08:	08010f70 	.word	0x08010f70
 8005e0c:	08010f78 	.word	0x08010f78
 8005e10:	08010f80 	.word	0x08010f80
 8005e14:	08010f8c 	.word	0x08010f8c
 8005e18:	08010f94 	.word	0x08010f94
 8005e1c:	08010f9c 	.word	0x08010f9c
 8005e20:	08010fa8 	.word	0x08010fa8
 8005e24:	08010fb8 	.word	0x08010fb8
 8005e28:	08010fc0 	.word	0x08010fc0
 8005e2c:	08010fc8 	.word	0x08010fc8
 8005e30:	08010fd0 	.word	0x08010fd0
 8005e34:	08010fd8 	.word	0x08010fd8
 8005e38:	08010fe0 	.word	0x08010fe0
 8005e3c:	08010fe8 	.word	0x08010fe8
 8005e40:	08010ff0 	.word	0x08010ff0
 8005e44:	08010ff8 	.word	0x08010ff8
 8005e48:	08011000 	.word	0x08011000
 8005e4c:	0801100c 	.word	0x0801100c
 8005e50:	08011014 	.word	0x08011014
 8005e54:	0801101c 	.word	0x0801101c
 8005e58:	08011024 	.word	0x08011024
 8005e5c:	0801102c 	.word	0x0801102c
 8005e60:	08011034 	.word	0x08011034
 8005e64:	0801103c 	.word	0x0801103c
 8005e68:	08011044 	.word	0x08011044
 8005e6c:	0801104c 	.word	0x0801104c
 8005e70:	08011054 	.word	0x08011054
 8005e74:	0801105c 	.word	0x0801105c
 8005e78:	08011064 	.word	0x08011064
 8005e7c:	08011068 	.word	0x08011068
 8005e80:	08011070 	.word	0x08011070
 8005e84:	08011078 	.word	0x08011078
 8005e88:	08011084 	.word	0x08011084
 8005e8c:	08011090 	.word	0x08011090
 8005e90:	08011098 	.word	0x08011098
 8005e94:	080110a4 	.word	0x080110a4
 8005e98:	080110ac 	.word	0x080110ac
 8005e9c:	080110b4 	.word	0x080110b4
 8005ea0:	080110bc 	.word	0x080110bc
 8005ea4:	080110c4 	.word	0x080110c4
 8005ea8:	080110d0 	.word	0x080110d0
 8005eac:	080110d8 	.word	0x080110d8
 8005eb0:	080110e4 	.word	0x080110e4
 8005eb4:	080110ec 	.word	0x080110ec
 8005eb8:	080110f4 	.word	0x080110f4
 8005ebc:	08011100 	.word	0x08011100
 8005ec0:	08011108 	.word	0x08011108
 8005ec4:	08011110 	.word	0x08011110
 8005ec8:	08011118 	.word	0x08011118
 8005ecc:	08011120 	.word	0x08011120
 8005ed0:	08011128 	.word	0x08011128
 8005ed4:	08011130 	.word	0x08011130
 8005ed8:	08011138 	.word	0x08011138
 8005edc:	08011140 	.word	0x08011140
 8005ee0:	08011148 	.word	0x08011148
 8005ee4:	08011150 	.word	0x08011150
 8005ee8:	0801115c 	.word	0x0801115c
 8005eec:	08011164 	.word	0x08011164
 8005ef0:	08011170 	.word	0x08011170
 8005ef4:	0801117c 	.word	0x0801117c
 8005ef8:	08011188 	.word	0x08011188
 8005efc:	08011190 	.word	0x08011190
 8005f00:	08011194 	.word	0x08011194
 8005f04:	080111a0 	.word	0x080111a0
 8005f08:	080111a8 	.word	0x080111a8
 8005f0c:	080111b4 	.word	0x080111b4
 8005f10:	080111bc 	.word	0x080111bc
 8005f14:	080111c4 	.word	0x080111c4
 8005f18:	080111cc 	.word	0x080111cc
 8005f1c:	080111d8 	.word	0x080111d8
 8005f20:	080111e0 	.word	0x080111e0
 8005f24:	080111e8 	.word	0x080111e8
 8005f28:	080111f0 	.word	0x080111f0
 8005f2c:	080111f8 	.word	0x080111f8
 8005f30:	08011200 	.word	0x08011200
 8005f34:	08011208 	.word	0x08011208
 8005f38:	08011210 	.word	0x08011210
 8005f3c:	08011218 	.word	0x08011218
 8005f40:	08011220 	.word	0x08011220
 8005f44:	08011228 	.word	0x08011228
 8005f48:	08011230 	.word	0x08011230
 8005f4c:	08011238 	.word	0x08011238
 8005f50:	08011240 	.word	0x08011240
 8005f54:	08011248 	.word	0x08011248
 8005f58:	08011250 	.word	0x08011250
 8005f5c:	08011258 	.word	0x08011258
 8005f60:	08011260 	.word	0x08011260
 8005f64:	08011268 	.word	0x08011268
 8005f68:	08011270 	.word	0x08011270
 8005f6c:	08011278 	.word	0x08011278
 8005f70:	08011280 	.word	0x08011280
 8005f74:	08011288 	.word	0x08011288
 8005f78:	08011294 	.word	0x08011294
 8005f7c:	0801129c 	.word	0x0801129c
 8005f80:	080112a4 	.word	0x080112a4
 8005f84:	080112b0 	.word	0x080112b0
 8005f88:	080112b4 	.word	0x080112b4
 8005f8c:	080112bc 	.word	0x080112bc
 8005f90:	080112c4 	.word	0x080112c4
 8005f94:	080112cc 	.word	0x080112cc
 8005f98:	080112d0 	.word	0x080112d0
 8005f9c:	080112d8 	.word	0x080112d8
 8005fa0:	080112e0 	.word	0x080112e0
 8005fa4:	080112e8 	.word	0x080112e8
 8005fa8:	080112f0 	.word	0x080112f0
 8005fac:	080112f8 	.word	0x080112f8
 8005fb0:	08011300 	.word	0x08011300
 8005fb4:	08011308 	.word	0x08011308
 8005fb8:	0801130c 	.word	0x0801130c
 8005fbc:	08011318 	.word	0x08011318
 8005fc0:	08011320 	.word	0x08011320
 8005fc4:	08011328 	.word	0x08011328
 8005fc8:	08011330 	.word	0x08011330
 8005fcc:	0801133c 	.word	0x0801133c
 8005fd0:	08011344 	.word	0x08011344
 8005fd4:	08011350 	.word	0x08011350
 8005fd8:	0801135c 	.word	0x0801135c
 8005fdc:	08011364 	.word	0x08011364
 8005fe0:	0801136c 	.word	0x0801136c
 8005fe4:	08011374 	.word	0x08011374
 8005fe8:	0801137c 	.word	0x0801137c
 8005fec:	08011384 	.word	0x08011384
 8005ff0:	0801138c 	.word	0x0801138c
		insert("TKEG", "degree");
 8005ff4:	46a4      	mov	ip, r4
 8005ff6:	4931      	ldr	r1, [pc, #196]	@ (80060bc <hashInit.0+0x4844>)
 8005ff8:	4831      	ldr	r0, [pc, #196]	@ (80060c0 <hashInit.0+0x4848>)
 8005ffa:	f7fb fb8f 	bl	800171c <insert.1>
		insert("PH*EULD", "middle");
 8005ffe:	46a4      	mov	ip, r4
 8006000:	4930      	ldr	r1, [pc, #192]	@ (80060c4 <hashInit.0+0x484c>)
 8006002:	4831      	ldr	r0, [pc, #196]	@ (80060c8 <hashInit.0+0x4850>)
 8006004:	f7fb fb8a 	bl	800171c <insert.1>
		insert("WEURPBT", "winter");
 8006008:	46a4      	mov	ip, r4
 800600a:	4930      	ldr	r1, [pc, #192]	@ (80060cc <hashInit.0+0x4854>)
 800600c:	4830      	ldr	r0, [pc, #192]	@ (80060d0 <hashInit.0+0x4858>)
 800600e:	f7fb fb85 	bl	800171c <insert.1>
		insert("PHRAPB", "plan");
 8006012:	46a4      	mov	ip, r4
 8006014:	492f      	ldr	r1, [pc, #188]	@ (80060d4 <hashInit.0+0x485c>)
 8006016:	4830      	ldr	r0, [pc, #192]	@ (80060d8 <hashInit.0+0x4860>)
 8006018:	f7fb fb80 	bl	800171c <insert.1>
		insert("SPEPBT", "spent");
 800601c:	46a4      	mov	ip, r4
 800601e:	492f      	ldr	r1, [pc, #188]	@ (80060dc <hashInit.0+0x4864>)
 8006020:	482f      	ldr	r0, [pc, #188]	@ (80060e0 <hashInit.0+0x4868>)
 8006022:	f7fb fb7b 	bl	800171c <insert.1>
		insert("HROU", "allow");
 8006026:	46a4      	mov	ip, r4
 8006028:	492e      	ldr	r1, [pc, #184]	@ (80060e4 <hashInit.0+0x486c>)
 800602a:	482f      	ldr	r0, [pc, #188]	@ (80060e8 <hashInit.0+0x4870>)
 800602c:	f7fb fb76 	bl	800171c <insert.1>
		insert("PAEL", "pale");
 8006030:	46a4      	mov	ip, r4
 8006032:	492e      	ldr	r1, [pc, #184]	@ (80060ec <hashInit.0+0x4874>)
 8006034:	482e      	ldr	r0, [pc, #184]	@ (80060f0 <hashInit.0+0x4878>)
 8006036:	f7fb fb71 	bl	800171c <insert.1>
		insert("KUBGT", "conduct");
 800603a:	46a4      	mov	ip, r4
 800603c:	492d      	ldr	r1, [pc, #180]	@ (80060f4 <hashInit.0+0x487c>)
 800603e:	482e      	ldr	r0, [pc, #184]	@ (80060f8 <hashInit.0+0x4880>)
 8006040:	f7fb fb6c 	bl	800171c <insert.1>
		insert("R*UPBG", "running");
 8006044:	46a4      	mov	ip, r4
 8006046:	492d      	ldr	r1, [pc, #180]	@ (80060fc <hashInit.0+0x4884>)
 8006048:	482d      	ldr	r0, [pc, #180]	@ (8006100 <hashInit.0+0x4888>)
 800604a:	f7fb fb67 	bl	800171c <insert.1>
		insert("RE/HREURBS", "religious");
 800604e:	46a4      	mov	ip, r4
 8006050:	492c      	ldr	r1, [pc, #176]	@ (8006104 <hashInit.0+0x488c>)
 8006052:	482d      	ldr	r0, [pc, #180]	@ (8006108 <hashInit.0+0x4890>)
 8006054:	f7fb fb62 	bl	800171c <insert.1>
		insert("SPRAOEUS", "surprise");
 8006058:	46a4      	mov	ip, r4
 800605a:	492c      	ldr	r1, [pc, #176]	@ (800610c <hashInit.0+0x4894>)
 800605c:	482c      	ldr	r0, [pc, #176]	@ (8006110 <hashInit.0+0x4898>)
 800605e:	f7fb fb5d 	bl	800171c <insert.1>
		insert("PHEUPB", "minute");
 8006062:	46a4      	mov	ip, r4
 8006064:	492b      	ldr	r1, [pc, #172]	@ (8006114 <hashInit.0+0x489c>)
 8006066:	482c      	ldr	r0, [pc, #176]	@ (8006118 <hashInit.0+0x48a0>)
 8006068:	f7fb fb58 	bl	800171c <insert.1>
		insert("RO*EPB", "Roman");
 800606c:	46a4      	mov	ip, r4
 800606e:	492b      	ldr	r1, [pc, #172]	@ (800611c <hashInit.0+0x48a4>)
 8006070:	482b      	ldr	r0, [pc, #172]	@ (8006120 <hashInit.0+0x48a8>)
 8006072:	f7fb fb53 	bl	800171c <insert.1>
		insert("KAEUSZ", "cases");
 8006076:	46a4      	mov	ip, r4
 8006078:	492a      	ldr	r1, [pc, #168]	@ (8006124 <hashInit.0+0x48ac>)
 800607a:	482b      	ldr	r0, [pc, #172]	@ (8006128 <hashInit.0+0x48b0>)
 800607c:	f7fb fb4e 	bl	800171c <insert.1>
		insert("SHOT", "shot");
 8006080:	46a4      	mov	ip, r4
 8006082:	492a      	ldr	r1, [pc, #168]	@ (800612c <hashInit.0+0x48b4>)
 8006084:	482a      	ldr	r0, [pc, #168]	@ (8006130 <hashInit.0+0x48b8>)
 8006086:	f7fb fb49 	bl	800171c <insert.1>
		insert("HRAED", "lead");
 800608a:	46a4      	mov	ip, r4
 800608c:	4929      	ldr	r1, [pc, #164]	@ (8006134 <hashInit.0+0x48bc>)
 800608e:	482a      	ldr	r0, [pc, #168]	@ (8006138 <hashInit.0+0x48c0>)
 8006090:	f7fb fb44 	bl	800171c <insert.1>
		insert("PHOF", "move");
 8006094:	46a4      	mov	ip, r4
 8006096:	4929      	ldr	r1, [pc, #164]	@ (800613c <hashInit.0+0x48c4>)
 8006098:	4829      	ldr	r0, [pc, #164]	@ (8006140 <hashInit.0+0x48c8>)
 800609a:	f7fb fb3f 	bl	800171c <insert.1>
		insert("TPHAEUPLS", "names");
 800609e:	46a4      	mov	ip, r4
 80060a0:	4928      	ldr	r1, [pc, #160]	@ (8006144 <hashInit.0+0x48cc>)
 80060a2:	4829      	ldr	r0, [pc, #164]	@ (8006148 <hashInit.0+0x48d0>)
 80060a4:	f7fb fb3a 	bl	800171c <insert.1>
		insert("Z", "^");
 80060a8:	46a4      	mov	ip, r4
 80060aa:	4928      	ldr	r1, [pc, #160]	@ (800614c <hashInit.0+0x48d4>)
 80060ac:	4828      	ldr	r0, [pc, #160]	@ (8006150 <hashInit.0+0x48d8>)
 80060ae:	f7fb fb35 	bl	800171c <insert.1>
  }
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd90      	pop	{r4, r7, pc}
 80060ba:	bf00      	nop
 80060bc:	08011394 	.word	0x08011394
 80060c0:	0801139c 	.word	0x0801139c
 80060c4:	080113a4 	.word	0x080113a4
 80060c8:	080113ac 	.word	0x080113ac
 80060cc:	080113b4 	.word	0x080113b4
 80060d0:	080113bc 	.word	0x080113bc
 80060d4:	080113c4 	.word	0x080113c4
 80060d8:	080113cc 	.word	0x080113cc
 80060dc:	080113d4 	.word	0x080113d4
 80060e0:	080113dc 	.word	0x080113dc
 80060e4:	080113e4 	.word	0x080113e4
 80060e8:	080113ec 	.word	0x080113ec
 80060ec:	080113f4 	.word	0x080113f4
 80060f0:	080113fc 	.word	0x080113fc
 80060f4:	08011404 	.word	0x08011404
 80060f8:	0801140c 	.word	0x0801140c
 80060fc:	08011414 	.word	0x08011414
 8006100:	0801141c 	.word	0x0801141c
 8006104:	08011424 	.word	0x08011424
 8006108:	08011430 	.word	0x08011430
 800610c:	0801143c 	.word	0x0801143c
 8006110:	08011448 	.word	0x08011448
 8006114:	08011454 	.word	0x08011454
 8006118:	0801145c 	.word	0x0801145c
 800611c:	08011464 	.word	0x08011464
 8006120:	0801146c 	.word	0x0801146c
 8006124:	08011474 	.word	0x08011474
 8006128:	0801147c 	.word	0x0801147c
 800612c:	08011484 	.word	0x08011484
 8006130:	0801148c 	.word	0x0801148c
 8006134:	08011494 	.word	0x08011494
 8006138:	0801149c 	.word	0x0801149c
 800613c:	080114a4 	.word	0x080114a4
 8006140:	080114ac 	.word	0x080114ac
 8006144:	080114b4 	.word	0x080114b4
 8006148:	080114bc 	.word	0x080114bc
 800614c:	080114c8 	.word	0x080114c8
 8006150:	080114cc 	.word	0x080114cc

08006154 <sendBuffer.9>:
  void sendBuffer(){
 8006154:	b5b0      	push	{r4, r5, r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	4664      	mov	r4, ip
 800615c:	f8c7 c004 	str.w	ip, [r7, #4]
	  for(int n = 0; n < bufferItemsNumber; n++){
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e00f      	b.n	8006186 <sendBuffer.9+0x32>
			strcpy(result, (search(charbuffer)));
 8006166:	f104 0514 	add.w	r5, r4, #20
 800616a:	f104 032a 	add.w	r3, r4, #42	@ 0x2a
 800616e:	46a4      	mov	ip, r4
 8006170:	4618      	mov	r0, r3
 8006172:	f7fb fb47 	bl	8001804 <search.10>
 8006176:	4603      	mov	r3, r0
 8006178:	4619      	mov	r1, r3
 800617a:	4628      	mov	r0, r5
 800617c:	f007 f80f 	bl	800d19e <strcpy>
	  for(int n = 0; n < bufferItemsNumber; n++){
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	429a      	cmp	r2, r3
 800618c:	dbeb      	blt.n	8006166 <sendBuffer.9+0x12>
		  for(int n = 0; n < strlen(result); n++){
 800618e:	2300      	movs	r3, #0
 8006190:	60bb      	str	r3, [r7, #8]
 8006192:	e00d      	b.n	80061b0 <sendBuffer.9+0x5c>
		  Set_Character(result[n]);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4423      	add	r3, r4
 8006198:	3314      	adds	r3, #20
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	46a4      	mov	ip, r4
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fb f850 	bl	8001244 <Set_Character.5>
		  Send_Character();
 80061a4:	46a4      	mov	ip, r4
 80061a6:	f7fb f829 	bl	80011fc <Send_Character.6>
		  for(int n = 0; n < strlen(result); n++){
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	3301      	adds	r3, #1
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	f104 0314 	add.w	r3, r4, #20
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fa f819 	bl	80001ec <strlen>
 80061ba:	4602      	mov	r2, r0
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d8e8      	bhi.n	8006194 <sendBuffer.9+0x40>
		  Set_Character(' ');
 80061c2:	46a4      	mov	ip, r4
 80061c4:	2020      	movs	r0, #32
 80061c6:	f7fb f83d 	bl	8001244 <Set_Character.5>
		  Send_Character();
 80061ca:	46a4      	mov	ip, r4
 80061cc:	f7fb f816 	bl	80011fc <Send_Character.6>
		  bufferItemsNumber = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	6123      	str	r3, [r4, #16]
		  Clear_Buffer();
 80061d4:	46a4      	mov	ip, r4
 80061d6:	f7fa fff5 	bl	80011c4 <Clear_Buffer.11>
  }
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bdb0      	pop	{r4, r5, r7, pc}

080061e2 <translation.8>:
  void translation(int n, char c){
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	460b      	mov	r3, r1
 80061ec:	72fb      	strb	r3, [r7, #11]
 80061ee:	4663      	mov	r3, ip
 80061f0:	f8c7 c004 	str.w	ip, [r7, #4]
  	  if(n == 1){
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	2a01      	cmp	r2, #1
 80061f8:	d103      	bne.n	8006202 <translation.8+0x20>
  		  sendBuffer();
 80061fa:	469c      	mov	ip, r3
 80061fc:	f7ff ffaa 	bl	8006154 <sendBuffer.9>
    }
 8006200:	e007      	b.n	8006212 <translation.8+0x30>
  		  charbuffer[bufferItemsNumber] = c;
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	441a      	add	r2, r3
 8006206:	7af9      	ldrb	r1, [r7, #11]
 8006208:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
  		  bufferItemsNumber += 1;
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	3201      	adds	r2, #1
 8006210:	611a      	str	r2, [r3, #16]
    }
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <CounterRestart.12>:
  void CounterRestart(){
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_TIM_Base_Stop_IT(&htim10);
 8006226:	4808      	ldr	r0, [pc, #32]	@ (8006248 <CounterRestart.12+0x2c>)
 8006228:	f002 fdc0 	bl	8008dac <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(&htim10, 0);
 800622c:	4b06      	ldr	r3, [pc, #24]	@ (8006248 <CounterRestart.12+0x2c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2200      	movs	r2, #0
 8006232:	625a      	str	r2, [r3, #36]	@ 0x24
	  elapsedTime = 0;
 8006234:	4b05      	ldr	r3, [pc, #20]	@ (800624c <CounterRestart.12+0x30>)
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT(&htim10);
 800623a:	4803      	ldr	r0, [pc, #12]	@ (8006248 <CounterRestart.12+0x2c>)
 800623c:	f002 fd54 	bl	8008ce8 <HAL_TIM_Base_Start_IT>
  }
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000188 	.word	0x20000188
 800624c:	2000137c 	.word	0x2000137c

08006250 <Send_Gate.7>:
  void Send_Gate(int n, char c) {
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	460b      	mov	r3, r1
 800625a:	72fb      	strb	r3, [r7, #11]
 800625c:	4664      	mov	r4, ip
 800625e:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(previousChar == 0 && n == 24){
 8006262:	68e3      	ldr	r3, [r4, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <Send_Gate.7+0x1e>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b18      	cmp	r3, #24
 800626c:	d02b      	beq.n	80062c6 <Send_Gate.7+0x76>
  	  if(previousChar < n || n == 1 || n == 24){
 800626e:	68e2      	ldr	r2, [r4, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	429a      	cmp	r2, r3
 8006274:	db05      	blt.n	8006282 <Send_Gate.7+0x32>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d002      	beq.n	8006282 <Send_Gate.7+0x32>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b18      	cmp	r3, #24
 8006280:	d122      	bne.n	80062c8 <Send_Gate.7+0x78>
  		  if(n != lastPress){
 8006282:	68a3      	ldr	r3, [r4, #8]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	429a      	cmp	r2, r3
 8006288:	d002      	beq.n	8006290 <Send_Gate.7+0x40>
  			  timeout = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	6063      	str	r3, [r4, #4]
 800628e:	e002      	b.n	8006296 <Send_Gate.7+0x46>
  			  timeout +=1;
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	3301      	adds	r3, #1
 8006294:	6063      	str	r3, [r4, #4]
  		  if(timeout >= 1200 || timeout == 0){
 8006296:	6863      	ldr	r3, [r4, #4]
 8006298:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800629c:	da02      	bge.n	80062a4 <Send_Gate.7+0x54>
 800629e:	6863      	ldr	r3, [r4, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d108      	bne.n	80062b6 <Send_Gate.7+0x66>
  			  translation(n, c);
 80062a4:	7afb      	ldrb	r3, [r7, #11]
 80062a6:	46a4      	mov	ip, r4
 80062a8:	4619      	mov	r1, r3
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f7ff ff99 	bl	80061e2 <translation.8>
  			  CounterRestart();
 80062b0:	46a4      	mov	ip, r4
 80062b2:	f7ff ffb3 	bl	800621c <CounterRestart.12>
  		  previousChar = n;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	60e3      	str	r3, [r4, #12]
  		  if(n == 24){
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b18      	cmp	r3, #24
 80062be:	d103      	bne.n	80062c8 <Send_Gate.7+0x78>
			  previousChar = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60e3      	str	r3, [r4, #12]
 80062c4:	e000      	b.n	80062c8 <Send_Gate.7+0x78>
		  return;
 80062c6:	bf00      	nop
    }
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd90      	pop	{r4, r7, pc}

080062ce <BackSpace.4>:
  void BackSpace(){
 80062ce:	b590      	push	{r4, r7, lr}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	4664      	mov	r4, ip
 80062d6:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(lastPress != 1){
 80062da:	68a3      	ldr	r3, [r4, #8]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d002      	beq.n	80062e6 <BackSpace.4+0x18>
		  timeoutB = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	e002      	b.n	80062ec <BackSpace.4+0x1e>
		  timeoutB +=1;
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	6023      	str	r3, [r4, #0]
	  if(timeoutB == 0 || timeoutB >= 1500){
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d004      	beq.n	80062fc <BackSpace.4+0x2e>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	f240 52db 	movw	r2, #1499	@ 0x5db
 80062f8:	4293      	cmp	r3, r2
 80062fa:	dd08      	ble.n	800630e <BackSpace.4+0x40>
		  Set_Character('#');
 80062fc:	46a4      	mov	ip, r4
 80062fe:	2023      	movs	r0, #35	@ 0x23
 8006300:	f7fa ffa0 	bl	8001244 <Set_Character.5>
		  Send_Character();
 8006304:	46a4      	mov	ip, r4
 8006306:	f7fa ff79 	bl	80011fc <Send_Character.6>
		  timeoutB = 1;
 800630a:	2301      	movs	r3, #1
 800630c:	6023      	str	r3, [r4, #0]
  }
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}
	...

08006318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b094      	sub	sp, #80	@ 0x50
 800631c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800631e:	f107 0320 	add.w	r3, r7, #32
 8006322:	2230      	movs	r2, #48	@ 0x30
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f006 fe9a 	bl	800d060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800632c:	f107 030c 	add.w	r3, r7, #12
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	609a      	str	r2, [r3, #8]
 8006338:	60da      	str	r2, [r3, #12]
 800633a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800633c:	2300      	movs	r3, #0
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	4b27      	ldr	r3, [pc, #156]	@ (80063e0 <SystemClock_Config+0xc8>)
 8006342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006344:	4a26      	ldr	r2, [pc, #152]	@ (80063e0 <SystemClock_Config+0xc8>)
 8006346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800634a:	6413      	str	r3, [r2, #64]	@ 0x40
 800634c:	4b24      	ldr	r3, [pc, #144]	@ (80063e0 <SystemClock_Config+0xc8>)
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006358:	2300      	movs	r3, #0
 800635a:	607b      	str	r3, [r7, #4]
 800635c:	4b21      	ldr	r3, [pc, #132]	@ (80063e4 <SystemClock_Config+0xcc>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a20      	ldr	r2, [pc, #128]	@ (80063e4 <SystemClock_Config+0xcc>)
 8006362:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	4b1e      	ldr	r3, [pc, #120]	@ (80063e4 <SystemClock_Config+0xcc>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006370:	607b      	str	r3, [r7, #4]
 8006372:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006374:	2301      	movs	r3, #1
 8006376:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006378:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800637e:	2302      	movs	r3, #2
 8006380:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006382:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006388:	2319      	movs	r3, #25
 800638a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800638c:	23c0      	movs	r3, #192	@ 0xc0
 800638e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006390:	2302      	movs	r3, #2
 8006392:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006394:	2304      	movs	r3, #4
 8006396:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006398:	f107 0320 	add.w	r3, r7, #32
 800639c:	4618      	mov	r0, r3
 800639e:	f002 f823 	bl	80083e8 <HAL_RCC_OscConfig>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80063a8:	f000 f8f2 	bl	8006590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063ac:	230f      	movs	r3, #15
 80063ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063b0:	2302      	movs	r3, #2
 80063b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80063b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80063bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80063be:	2300      	movs	r3, #0
 80063c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80063c2:	f107 030c 	add.w	r3, r7, #12
 80063c6:	2103      	movs	r1, #3
 80063c8:	4618      	mov	r0, r3
 80063ca:	f002 fa85 	bl	80088d8 <HAL_RCC_ClockConfig>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80063d4:	f000 f8dc 	bl	8006590 <Error_Handler>
  }
}
 80063d8:	bf00      	nop
 80063da:	3750      	adds	r7, #80	@ 0x50
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40007000 	.word	0x40007000

080063e8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80063ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006428 <MX_TIM10_Init+0x40>)
 80063ee:	4a0f      	ldr	r2, [pc, #60]	@ (800642c <MX_TIM10_Init+0x44>)
 80063f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000 - 1;
 80063f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006428 <MX_TIM10_Init+0x40>)
 80063f4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80063f8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006428 <MX_TIM10_Init+0x40>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000 - 1;
 8006400:	4b09      	ldr	r3, [pc, #36]	@ (8006428 <MX_TIM10_Init+0x40>)
 8006402:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006406:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006408:	4b07      	ldr	r3, [pc, #28]	@ (8006428 <MX_TIM10_Init+0x40>)
 800640a:	2200      	movs	r2, #0
 800640c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800640e:	4b06      	ldr	r3, [pc, #24]	@ (8006428 <MX_TIM10_Init+0x40>)
 8006410:	2200      	movs	r2, #0
 8006412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006414:	4804      	ldr	r0, [pc, #16]	@ (8006428 <MX_TIM10_Init+0x40>)
 8006416:	f002 fc17 	bl	8008c48 <HAL_TIM_Base_Init>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8006420:	f000 f8b6 	bl	8006590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006424:	bf00      	nop
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000188 	.word	0x20000188
 800642c:	40014400 	.word	0x40014400

08006430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	@ 0x28
 8006434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006436:	f107 0314 	add.w	r3, r7, #20
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	605a      	str	r2, [r3, #4]
 8006440:	609a      	str	r2, [r3, #8]
 8006442:	60da      	str	r2, [r3, #12]
 8006444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006446:	2300      	movs	r3, #0
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	4b41      	ldr	r3, [pc, #260]	@ (8006550 <MX_GPIO_Init+0x120>)
 800644c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644e:	4a40      	ldr	r2, [pc, #256]	@ (8006550 <MX_GPIO_Init+0x120>)
 8006450:	f043 0304 	orr.w	r3, r3, #4
 8006454:	6313      	str	r3, [r2, #48]	@ 0x30
 8006456:	4b3e      	ldr	r3, [pc, #248]	@ (8006550 <MX_GPIO_Init+0x120>)
 8006458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	4b3a      	ldr	r3, [pc, #232]	@ (8006550 <MX_GPIO_Init+0x120>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646a:	4a39      	ldr	r2, [pc, #228]	@ (8006550 <MX_GPIO_Init+0x120>)
 800646c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006470:	6313      	str	r3, [r2, #48]	@ 0x30
 8006472:	4b37      	ldr	r3, [pc, #220]	@ (8006550 <MX_GPIO_Init+0x120>)
 8006474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	4b33      	ldr	r3, [pc, #204]	@ (8006550 <MX_GPIO_Init+0x120>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006486:	4a32      	ldr	r2, [pc, #200]	@ (8006550 <MX_GPIO_Init+0x120>)
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	6313      	str	r3, [r2, #48]	@ 0x30
 800648e:	4b30      	ldr	r3, [pc, #192]	@ (8006550 <MX_GPIO_Init+0x120>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800649a:	2300      	movs	r3, #0
 800649c:	607b      	str	r3, [r7, #4]
 800649e:	4b2c      	ldr	r3, [pc, #176]	@ (8006550 <MX_GPIO_Init+0x120>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006550 <MX_GPIO_Init+0x120>)
 80064a4:	f043 0302 	orr.w	r3, r3, #2
 80064a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80064aa:	4b29      	ldr	r3, [pc, #164]	@ (8006550 <MX_GPIO_Init+0x120>)
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	607b      	str	r3, [r7, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80064b6:	2200      	movs	r2, #0
 80064b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80064bc:	4825      	ldr	r0, [pc, #148]	@ (8006554 <MX_GPIO_Init+0x124>)
 80064be:	f000 fd3f 	bl	8006f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 80064c2:	2200      	movs	r2, #0
 80064c4:	21f0      	movs	r1, #240	@ 0xf0
 80064c6:	4824      	ldr	r0, [pc, #144]	@ (8006558 <MX_GPIO_Init+0x128>)
 80064c8:	f000 fd3a 	bl	8006f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Column5_Pin|Column6_Pin|Column7_Pin|Column8_Pin
 80064cc:	2200      	movs	r2, #0
 80064ce:	f247 4107 	movw	r1, #29703	@ 0x7407
 80064d2:	4822      	ldr	r0, [pc, #136]	@ (800655c <MX_GPIO_Init+0x12c>)
 80064d4:	f000 fd34 	bl	8006f40 <HAL_GPIO_WritePin>
                          |Column11_Pin|Column10_Pin|Column9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80064d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80064dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064de:	2301      	movs	r3, #1
 80064e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064e6:	2300      	movs	r3, #0
 80064e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80064ea:	f107 0314 	add.w	r3, r7, #20
 80064ee:	4619      	mov	r1, r3
 80064f0:	4818      	ldr	r0, [pc, #96]	@ (8006554 <MX_GPIO_Init+0x124>)
 80064f2:	f000 fb89 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row1_Pin Row2_Pin Row3_Pin Row4_Pin */
  GPIO_InitStruct.Pin = Row1_Pin|Row2_Pin|Row3_Pin|Row4_Pin;
 80064f6:	230f      	movs	r3, #15
 80064f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80064fe:	2302      	movs	r3, #2
 8006500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006502:	f107 0314 	add.w	r3, r7, #20
 8006506:	4619      	mov	r1, r3
 8006508:	4813      	ldr	r0, [pc, #76]	@ (8006558 <MX_GPIO_Init+0x128>)
 800650a:	f000 fb7d 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : Column1_Pin Column2_Pin Column3_Pin Column4_Pin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 800650e:	23f0      	movs	r3, #240	@ 0xf0
 8006510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006512:	2301      	movs	r3, #1
 8006514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800651a:	2300      	movs	r3, #0
 800651c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800651e:	f107 0314 	add.w	r3, r7, #20
 8006522:	4619      	mov	r1, r3
 8006524:	480c      	ldr	r0, [pc, #48]	@ (8006558 <MX_GPIO_Init+0x128>)
 8006526:	f000 fb6f 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : Column5_Pin Column6_Pin Column7_Pin Column8_Pin
                           Column11_Pin Column10_Pin Column9_Pin */
  GPIO_InitStruct.Pin = Column5_Pin|Column6_Pin|Column7_Pin|Column8_Pin
 800652a:	f247 4307 	movw	r3, #29703	@ 0x7407
 800652e:	617b      	str	r3, [r7, #20]
                          |Column11_Pin|Column10_Pin|Column9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006530:	2301      	movs	r3, #1
 8006532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006534:	2300      	movs	r3, #0
 8006536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006538:	2300      	movs	r3, #0
 800653a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800653c:	f107 0314 	add.w	r3, r7, #20
 8006540:	4619      	mov	r1, r3
 8006542:	4806      	ldr	r0, [pc, #24]	@ (800655c <MX_GPIO_Init+0x12c>)
 8006544:	f000 fb60 	bl	8006c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006548:	bf00      	nop
 800654a:	3728      	adds	r7, #40	@ 0x28
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40023800 	.word	0x40023800
 8006554:	40020800 	.word	0x40020800
 8006558:	40020000 	.word	0x40020000
 800655c:	40020400 	.word	0x40020400

08006560 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
    		if(htim == &htim10){
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a07      	ldr	r2, [pc, #28]	@ (8006588 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d104      	bne.n	800657a <HAL_TIM_PeriodElapsedCallback+0x1a>
    			elapsedTime++;
 8006570:	4b06      	ldr	r3, [pc, #24]	@ (800658c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a05      	ldr	r2, [pc, #20]	@ (800658c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006578:	6013      	str	r3, [r2, #0]
    		}
    	}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000188 	.word	0x20000188
 800658c:	2000137c 	.word	0x2000137c

08006590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006594:	b672      	cpsid	i
}
 8006596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006598:	bf00      	nop
 800659a:	e7fd      	b.n	8006598 <Error_Handler+0x8>

0800659c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	4b10      	ldr	r3, [pc, #64]	@ (80065e8 <HAL_MspInit+0x4c>)
 80065a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065aa:	4a0f      	ldr	r2, [pc, #60]	@ (80065e8 <HAL_MspInit+0x4c>)
 80065ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80065b2:	4b0d      	ldr	r3, [pc, #52]	@ (80065e8 <HAL_MspInit+0x4c>)
 80065b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065ba:	607b      	str	r3, [r7, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	4b09      	ldr	r3, [pc, #36]	@ (80065e8 <HAL_MspInit+0x4c>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	4a08      	ldr	r2, [pc, #32]	@ (80065e8 <HAL_MspInit+0x4c>)
 80065c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ce:	4b06      	ldr	r3, [pc, #24]	@ (80065e8 <HAL_MspInit+0x4c>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40023800 	.word	0x40023800

080065ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006634 <HAL_TIM_Base_MspInit+0x48>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d115      	bne.n	800662a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	4b0d      	ldr	r3, [pc, #52]	@ (8006638 <HAL_TIM_Base_MspInit+0x4c>)
 8006604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006606:	4a0c      	ldr	r2, [pc, #48]	@ (8006638 <HAL_TIM_Base_MspInit+0x4c>)
 8006608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800660c:	6453      	str	r3, [r2, #68]	@ 0x44
 800660e:	4b0a      	ldr	r3, [pc, #40]	@ (8006638 <HAL_TIM_Base_MspInit+0x4c>)
 8006610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800661a:	2200      	movs	r2, #0
 800661c:	2100      	movs	r1, #0
 800661e:	2019      	movs	r0, #25
 8006620:	f000 fabb 	bl	8006b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006624:	2019      	movs	r0, #25
 8006626:	f000 fad4 	bl	8006bd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 800662a:	bf00      	nop
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40014400 	.word	0x40014400
 8006638:	40023800 	.word	0x40023800

0800663c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006640:	bf00      	nop
 8006642:	e7fd      	b.n	8006640 <NMI_Handler+0x4>

08006644 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <HardFault_Handler+0x4>

0800664c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006650:	bf00      	nop
 8006652:	e7fd      	b.n	8006650 <MemManage_Handler+0x4>

08006654 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006658:	bf00      	nop
 800665a:	e7fd      	b.n	8006658 <BusFault_Handler+0x4>

0800665c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006660:	bf00      	nop
 8006662:	e7fd      	b.n	8006660 <UsageFault_Handler+0x4>

08006664 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006668:	bf00      	nop
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006672:	b480      	push	{r7}
 8006674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006676:	bf00      	nop
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006684:	bf00      	nop
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006692:	f000 f963 	bl	800695c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006696:	bf00      	nop
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80066a0:	4802      	ldr	r0, [pc, #8]	@ (80066ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80066a2:	f002 fbb2 	bl	8008e0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80066a6:	bf00      	nop
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000188 	.word	0x20000188

080066b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80066b4:	4802      	ldr	r0, [pc, #8]	@ (80066c0 <OTG_FS_IRQHandler+0x10>)
 80066b6:	f000 fda0 	bl	80071fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80066ba:	bf00      	nop
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20001868 	.word	0x20001868

080066c4 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80066ce:	f006 fd39 	bl	800d144 <__errno>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2216      	movs	r2, #22
 80066d6:	601a      	str	r2, [r3, #0]
  return -1;
 80066d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <_exit>:

void _exit (int status)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80066ec:	f04f 31ff 	mov.w	r1, #4294967295
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff ffe7 	bl	80066c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <_exit+0x12>

080066fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	e00a      	b.n	8006722 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800670c:	f3af 8000 	nop.w
 8006710:	4601      	mov	r1, r0
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	60ba      	str	r2, [r7, #8]
 8006718:	b2ca      	uxtb	r2, r1
 800671a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	3301      	adds	r3, #1
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	429a      	cmp	r2, r3
 8006728:	dbf0      	blt.n	800670c <_read+0x12>
  }

  return len;
 800672a:	687b      	ldr	r3, [r7, #4]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006740:	2300      	movs	r3, #0
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	e009      	b.n	800675a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	60ba      	str	r2, [r7, #8]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	3301      	adds	r3, #1
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	dbf1      	blt.n	8006746 <_write+0x12>
  }
  return len;
 8006762:	687b      	ldr	r3, [r7, #4]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <_close>:

int _close(int file)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006794:	605a      	str	r2, [r3, #4]
  return 0;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <_isatty>:

int _isatty(int file)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80067ac:	2301      	movs	r3, #1
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80067dc:	4a14      	ldr	r2, [pc, #80]	@ (8006830 <_sbrk+0x5c>)
 80067de:	4b15      	ldr	r3, [pc, #84]	@ (8006834 <_sbrk+0x60>)
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80067e8:	4b13      	ldr	r3, [pc, #76]	@ (8006838 <_sbrk+0x64>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80067f0:	4b11      	ldr	r3, [pc, #68]	@ (8006838 <_sbrk+0x64>)
 80067f2:	4a12      	ldr	r2, [pc, #72]	@ (800683c <_sbrk+0x68>)
 80067f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80067f6:	4b10      	ldr	r3, [pc, #64]	@ (8006838 <_sbrk+0x64>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4413      	add	r3, r2
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	429a      	cmp	r2, r3
 8006802:	d207      	bcs.n	8006814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006804:	f006 fc9e 	bl	800d144 <__errno>
 8006808:	4603      	mov	r3, r0
 800680a:	220c      	movs	r2, #12
 800680c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800680e:	f04f 33ff 	mov.w	r3, #4294967295
 8006812:	e009      	b.n	8006828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006814:	4b08      	ldr	r3, [pc, #32]	@ (8006838 <_sbrk+0x64>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800681a:	4b07      	ldr	r3, [pc, #28]	@ (8006838 <_sbrk+0x64>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4413      	add	r3, r2
 8006822:	4a05      	ldr	r2, [pc, #20]	@ (8006838 <_sbrk+0x64>)
 8006824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006826:	68fb      	ldr	r3, [r7, #12]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20020000 	.word	0x20020000
 8006834:	00000400 	.word	0x00000400
 8006838:	20001380 	.word	0x20001380
 800683c:	20001eb0 	.word	0x20001eb0

08006840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006844:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <SystemInit+0x20>)
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684a:	4a05      	ldr	r2, [pc, #20]	@ (8006860 <SystemInit+0x20>)
 800684c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	e000ed00 	.word	0xe000ed00

08006864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8006864:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800689c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006868:	f7ff ffea 	bl	8006840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800686c:	480c      	ldr	r0, [pc, #48]	@ (80068a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800686e:	490d      	ldr	r1, [pc, #52]	@ (80068a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006870:	4a0d      	ldr	r2, [pc, #52]	@ (80068a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006874:	e002      	b.n	800687c <LoopCopyDataInit>

08006876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800687a:	3304      	adds	r3, #4

0800687c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800687c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800687e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006880:	d3f9      	bcc.n	8006876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006882:	4a0a      	ldr	r2, [pc, #40]	@ (80068ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006884:	4c0a      	ldr	r4, [pc, #40]	@ (80068b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006888:	e001      	b.n	800688e <LoopFillZerobss>

0800688a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800688a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800688c:	3204      	adds	r2, #4

0800688e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800688e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006890:	d3fb      	bcc.n	800688a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006892:	f006 fc5d 	bl	800d150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006896:	f7fa f9b9 	bl	8000c0c <main>
  bx  lr    
 800689a:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 800689c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80068a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068a4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80068a8:	08011538 	.word	0x08011538
  ldr r2, =_sbss
 80068ac:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80068b0:	20001eac 	.word	0x20001eac

080068b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068b4:	e7fe      	b.n	80068b4 <ADC_IRQHandler>
	...

080068b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068bc:	4b0e      	ldr	r3, [pc, #56]	@ (80068f8 <HAL_Init+0x40>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a0d      	ldr	r2, [pc, #52]	@ (80068f8 <HAL_Init+0x40>)
 80068c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80068c8:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <HAL_Init+0x40>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a0a      	ldr	r2, [pc, #40]	@ (80068f8 <HAL_Init+0x40>)
 80068ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068d4:	4b08      	ldr	r3, [pc, #32]	@ (80068f8 <HAL_Init+0x40>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a07      	ldr	r2, [pc, #28]	@ (80068f8 <HAL_Init+0x40>)
 80068da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068e0:	2003      	movs	r0, #3
 80068e2:	f000 f94f 	bl	8006b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068e6:	200f      	movs	r0, #15
 80068e8:	f000 f808 	bl	80068fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068ec:	f7ff fe56 	bl	800659c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40023c00 	.word	0x40023c00

080068fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006904:	4b12      	ldr	r3, [pc, #72]	@ (8006950 <HAL_InitTick+0x54>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	4b12      	ldr	r3, [pc, #72]	@ (8006954 <HAL_InitTick+0x58>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	4619      	mov	r1, r3
 800690e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006912:	fbb3 f3f1 	udiv	r3, r3, r1
 8006916:	fbb2 f3f3 	udiv	r3, r2, r3
 800691a:	4618      	mov	r0, r3
 800691c:	f000 f967 	bl	8006bee <HAL_SYSTICK_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e00e      	b.n	8006948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b0f      	cmp	r3, #15
 800692e:	d80a      	bhi.n	8006946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006930:	2200      	movs	r2, #0
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	f04f 30ff 	mov.w	r0, #4294967295
 8006938:	f000 f92f 	bl	8006b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800693c:	4a06      	ldr	r2, [pc, #24]	@ (8006958 <HAL_InitTick+0x5c>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	e000      	b.n	8006948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20000000 	.word	0x20000000
 8006954:	20000008 	.word	0x20000008
 8006958:	20000004 	.word	0x20000004

0800695c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006960:	4b06      	ldr	r3, [pc, #24]	@ (800697c <HAL_IncTick+0x20>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <HAL_IncTick+0x24>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4413      	add	r3, r2
 800696c:	4a04      	ldr	r2, [pc, #16]	@ (8006980 <HAL_IncTick+0x24>)
 800696e:	6013      	str	r3, [r2, #0]
}
 8006970:	bf00      	nop
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20000008 	.word	0x20000008
 8006980:	20001384 	.word	0x20001384

08006984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  return uwTick;
 8006988:	4b03      	ldr	r3, [pc, #12]	@ (8006998 <HAL_GetTick+0x14>)
 800698a:	681b      	ldr	r3, [r3, #0]
}
 800698c:	4618      	mov	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20001384 	.word	0x20001384

0800699c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069a4:	f7ff ffee 	bl	8006984 <HAL_GetTick>
 80069a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d005      	beq.n	80069c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069b6:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <HAL_Delay+0x44>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80069c2:	bf00      	nop
 80069c4:	f7ff ffde 	bl	8006984 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d8f7      	bhi.n	80069c4 <HAL_Delay+0x28>
  {
  }
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000008 	.word	0x20000008

080069e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006a28 <__NVIC_SetPriorityGrouping+0x44>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a00:	4013      	ands	r3, r2
 8006a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a16:	4a04      	ldr	r2, [pc, #16]	@ (8006a28 <__NVIC_SetPriorityGrouping+0x44>)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	60d3      	str	r3, [r2, #12]
}
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	e000ed00 	.word	0xe000ed00

08006a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a30:	4b04      	ldr	r3, [pc, #16]	@ (8006a44 <__NVIC_GetPriorityGrouping+0x18>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	f003 0307 	and.w	r3, r3, #7
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	e000ed00 	.word	0xe000ed00

08006a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	db0b      	blt.n	8006a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	f003 021f 	and.w	r2, r3, #31
 8006a60:	4907      	ldr	r1, [pc, #28]	@ (8006a80 <__NVIC_EnableIRQ+0x38>)
 8006a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	2001      	movs	r0, #1
 8006a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8006a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	e000e100 	.word	0xe000e100

08006a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	6039      	str	r1, [r7, #0]
 8006a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	db0a      	blt.n	8006aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	490c      	ldr	r1, [pc, #48]	@ (8006ad0 <__NVIC_SetPriority+0x4c>)
 8006a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa2:	0112      	lsls	r2, r2, #4
 8006aa4:	b2d2      	uxtb	r2, r2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006aac:	e00a      	b.n	8006ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	4908      	ldr	r1, [pc, #32]	@ (8006ad4 <__NVIC_SetPriority+0x50>)
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	3b04      	subs	r3, #4
 8006abc:	0112      	lsls	r2, r2, #4
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	761a      	strb	r2, [r3, #24]
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	e000e100 	.word	0xe000e100
 8006ad4:	e000ed00 	.word	0xe000ed00

08006ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b089      	sub	sp, #36	@ 0x24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f1c3 0307 	rsb	r3, r3, #7
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	bf28      	it	cs
 8006af6:	2304      	movcs	r3, #4
 8006af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	3304      	adds	r3, #4
 8006afe:	2b06      	cmp	r3, #6
 8006b00:	d902      	bls.n	8006b08 <NVIC_EncodePriority+0x30>
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	3b03      	subs	r3, #3
 8006b06:	e000      	b.n	8006b0a <NVIC_EncodePriority+0x32>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	43da      	mvns	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b20:	f04f 31ff 	mov.w	r1, #4294967295
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2a:	43d9      	mvns	r1, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b30:	4313      	orrs	r3, r2
         );
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3724      	adds	r7, #36	@ 0x24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b50:	d301      	bcc.n	8006b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b52:	2301      	movs	r3, #1
 8006b54:	e00f      	b.n	8006b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b56:	4a0a      	ldr	r2, [pc, #40]	@ (8006b80 <SysTick_Config+0x40>)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b5e:	210f      	movs	r1, #15
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	f7ff ff8e 	bl	8006a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b68:	4b05      	ldr	r3, [pc, #20]	@ (8006b80 <SysTick_Config+0x40>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b6e:	4b04      	ldr	r3, [pc, #16]	@ (8006b80 <SysTick_Config+0x40>)
 8006b70:	2207      	movs	r2, #7
 8006b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	e000e010 	.word	0xe000e010

08006b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ff29 	bl	80069e4 <__NVIC_SetPriorityGrouping>
}
 8006b92:	bf00      	nop
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
 8006ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006bac:	f7ff ff3e 	bl	8006a2c <__NVIC_GetPriorityGrouping>
 8006bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	6978      	ldr	r0, [r7, #20]
 8006bb8:	f7ff ff8e 	bl	8006ad8 <NVIC_EncodePriority>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff ff5d 	bl	8006a84 <__NVIC_SetPriority>
}
 8006bca:	bf00      	nop
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	4603      	mov	r3, r0
 8006bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff ff31 	bl	8006a48 <__NVIC_EnableIRQ>
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff ffa2 	bl	8006b40 <SysTick_Config>
 8006bfc:	4603      	mov	r3, r0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b089      	sub	sp, #36	@ 0x24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	e159      	b.n	8006ed8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c24:	2201      	movs	r2, #1
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4013      	ands	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	f040 8148 	bne.w	8006ed2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d005      	beq.n	8006c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d130      	bne.n	8006cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	2203      	movs	r2, #3
 8006c66:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c90:	2201      	movs	r2, #1
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f003 0201 	and.w	r2, r3, #1
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d017      	beq.n	8006cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d123      	bne.n	8006d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	08da      	lsrs	r2, r3, #3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3208      	adds	r2, #8
 8006d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	220f      	movs	r2, #15
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	4013      	ands	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	08da      	lsrs	r2, r3, #3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3208      	adds	r2, #8
 8006d46:	69b9      	ldr	r1, [r7, #24]
 8006d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	2203      	movs	r2, #3
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	4013      	ands	r3, r2
 8006d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 0203 	and.w	r2, r3, #3
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80a2 	beq.w	8006ed2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	4b57      	ldr	r3, [pc, #348]	@ (8006ef0 <HAL_GPIO_Init+0x2e8>)
 8006d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d96:	4a56      	ldr	r2, [pc, #344]	@ (8006ef0 <HAL_GPIO_Init+0x2e8>)
 8006d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d9e:	4b54      	ldr	r3, [pc, #336]	@ (8006ef0 <HAL_GPIO_Init+0x2e8>)
 8006da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006daa:	4a52      	ldr	r2, [pc, #328]	@ (8006ef4 <HAL_GPIO_Init+0x2ec>)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	089b      	lsrs	r3, r3, #2
 8006db0:	3302      	adds	r3, #2
 8006db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a49      	ldr	r2, [pc, #292]	@ (8006ef8 <HAL_GPIO_Init+0x2f0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d019      	beq.n	8006e0a <HAL_GPIO_Init+0x202>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a48      	ldr	r2, [pc, #288]	@ (8006efc <HAL_GPIO_Init+0x2f4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_GPIO_Init+0x1fe>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a47      	ldr	r2, [pc, #284]	@ (8006f00 <HAL_GPIO_Init+0x2f8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00d      	beq.n	8006e02 <HAL_GPIO_Init+0x1fa>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a46      	ldr	r2, [pc, #280]	@ (8006f04 <HAL_GPIO_Init+0x2fc>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d007      	beq.n	8006dfe <HAL_GPIO_Init+0x1f6>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a45      	ldr	r2, [pc, #276]	@ (8006f08 <HAL_GPIO_Init+0x300>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d101      	bne.n	8006dfa <HAL_GPIO_Init+0x1f2>
 8006df6:	2304      	movs	r3, #4
 8006df8:	e008      	b.n	8006e0c <HAL_GPIO_Init+0x204>
 8006dfa:	2307      	movs	r3, #7
 8006dfc:	e006      	b.n	8006e0c <HAL_GPIO_Init+0x204>
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e004      	b.n	8006e0c <HAL_GPIO_Init+0x204>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e002      	b.n	8006e0c <HAL_GPIO_Init+0x204>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <HAL_GPIO_Init+0x204>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	f002 0203 	and.w	r2, r2, #3
 8006e12:	0092      	lsls	r2, r2, #2
 8006e14:	4093      	lsls	r3, r2
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e1c:	4935      	ldr	r1, [pc, #212]	@ (8006ef4 <HAL_GPIO_Init+0x2ec>)
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	089b      	lsrs	r3, r3, #2
 8006e22:	3302      	adds	r3, #2
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e2a:	4b38      	ldr	r3, [pc, #224]	@ (8006f0c <HAL_GPIO_Init+0x304>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	43db      	mvns	r3, r3
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	4013      	ands	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8006f0c <HAL_GPIO_Init+0x304>)
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e54:	4b2d      	ldr	r3, [pc, #180]	@ (8006f0c <HAL_GPIO_Init+0x304>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	4013      	ands	r3, r2
 8006e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e78:	4a24      	ldr	r2, [pc, #144]	@ (8006f0c <HAL_GPIO_Init+0x304>)
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006e7e:	4b23      	ldr	r3, [pc, #140]	@ (8006f0c <HAL_GPIO_Init+0x304>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	43db      	mvns	r3, r3
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8006f0c <HAL_GPIO_Init+0x304>)
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ea8:	4b18      	ldr	r3, [pc, #96]	@ (8006f0c <HAL_GPIO_Init+0x304>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ecc:	4a0f      	ldr	r2, [pc, #60]	@ (8006f0c <HAL_GPIO_Init+0x304>)
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2b0f      	cmp	r3, #15
 8006edc:	f67f aea2 	bls.w	8006c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	3724      	adds	r7, #36	@ 0x24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	40013800 	.word	0x40013800
 8006ef8:	40020000 	.word	0x40020000
 8006efc:	40020400 	.word	0x40020400
 8006f00:	40020800 	.word	0x40020800
 8006f04:	40020c00 	.word	0x40020c00
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	40013c00 	.word	0x40013c00

08006f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	4013      	ands	r3, r2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
 8006f2c:	e001      	b.n	8006f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	807b      	strh	r3, [r7, #2]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f50:	787b      	ldrb	r3, [r7, #1]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f56:	887a      	ldrh	r2, [r7, #2]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f5c:	e003      	b.n	8006f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f5e:	887b      	ldrh	r3, [r7, #2]
 8006f60:	041a      	lsls	r2, r3, #16
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	619a      	str	r2, [r3, #24]
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af02      	add	r7, sp, #8
 8006f78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e101      	b.n	8007188 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f005 faaa 	bl	800c4f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2203      	movs	r2, #3
 8006fa8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fb2:	d102      	bne.n	8006fba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 f9f3 	bl	80093aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6818      	ldr	r0, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	7c1a      	ldrb	r2, [r3, #16]
 8006fcc:	f88d 2000 	strb.w	r2, [sp]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fd4:	f002 f8d2 	bl	800917c <USB_CoreInit>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e0ce      	b.n	8007188 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f002 f9eb 	bl	80093cc <USB_SetCurrentMode>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0bf      	b.n	8007188 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
 800700c:	e04a      	b.n	80070a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800700e:	7bfa      	ldrb	r2, [r7, #15]
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	3315      	adds	r3, #21
 800701e:	2201      	movs	r2, #1
 8007020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007022:	7bfa      	ldrb	r2, [r7, #15]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	3314      	adds	r3, #20
 8007032:	7bfa      	ldrb	r2, [r7, #15]
 8007034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007036:	7bfa      	ldrb	r2, [r7, #15]
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	b298      	uxth	r0, r3
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	332e      	adds	r3, #46	@ 0x2e
 800704a:	4602      	mov	r2, r0
 800704c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800704e:	7bfa      	ldrb	r2, [r7, #15]
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4613      	mov	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	3318      	adds	r3, #24
 800705e:	2200      	movs	r2, #0
 8007060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007062:	7bfa      	ldrb	r2, [r7, #15]
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	440b      	add	r3, r1
 8007070:	331c      	adds	r3, #28
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007076:	7bfa      	ldrb	r2, [r7, #15]
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	3320      	adds	r3, #32
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800708a:	7bfa      	ldrb	r2, [r7, #15]
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	3324      	adds	r3, #36	@ 0x24
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	3301      	adds	r3, #1
 80070a2:	73fb      	strb	r3, [r7, #15]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	791b      	ldrb	r3, [r3, #4]
 80070a8:	7bfa      	ldrb	r2, [r7, #15]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d3af      	bcc.n	800700e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
 80070b2:	e044      	b.n	800713e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070b4:	7bfa      	ldrb	r2, [r7, #15]
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	4613      	mov	r3, r2
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	440b      	add	r3, r1
 80070c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80070ca:	7bfa      	ldrb	r2, [r7, #15]
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80070dc:	7bfa      	ldrb	r2, [r7, #15]
 80070de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070e0:	7bfa      	ldrb	r2, [r7, #15]
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80070f6:	7bfa      	ldrb	r2, [r7, #15]
 80070f8:	6879      	ldr	r1, [r7, #4]
 80070fa:	4613      	mov	r3, r2
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	440b      	add	r3, r1
 8007104:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800710c:	7bfa      	ldrb	r2, [r7, #15]
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	4613      	mov	r3, r2
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007122:	7bfa      	ldrb	r2, [r7, #15]
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	440b      	add	r3, r1
 8007130:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	3301      	adds	r3, #1
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	791b      	ldrb	r3, [r3, #4]
 8007142:	7bfa      	ldrb	r2, [r7, #15]
 8007144:	429a      	cmp	r2, r3
 8007146:	d3b5      	bcc.n	80070b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6818      	ldr	r0, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	7c1a      	ldrb	r2, [r3, #16]
 8007150:	f88d 2000 	strb.w	r2, [sp]
 8007154:	3304      	adds	r3, #4
 8007156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007158:	f002 f984 	bl	8009464 <USB_DevInit>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2202      	movs	r2, #2
 8007166:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e00c      	b.n	8007188 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f003 f9ce 	bl	800a522 <USB_DevDisconnect>

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_PCD_Start+0x1c>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e022      	b.n	80071f2 <HAL_PCD_Start+0x62>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d009      	beq.n	80071d4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d105      	bne.n	80071d4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f002 f8d5 	bl	8009388 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f003 f97c 	bl	800a4e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80071fa:	b590      	push	{r4, r7, lr}
 80071fc:	b08d      	sub	sp, #52	@ 0x34
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f003 fa3a 	bl	800a68a <USB_GetMode>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 848c 	bne.w	8007b36 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f003 f99e 	bl	800a564 <USB_ReadInterrupts>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 8482 	beq.w	8007b34 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	0a1b      	lsrs	r3, r3, #8
 800723a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f003 f98b 	bl	800a564 <USB_ReadInterrupts>
 800724e:	4603      	mov	r3, r0
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d107      	bne.n	8007268 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695a      	ldr	r2, [r3, #20]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f002 0202 	and.w	r2, r2, #2
 8007266:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f003 f979 	bl	800a564 <USB_ReadInterrupts>
 8007272:	4603      	mov	r3, r0
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b10      	cmp	r3, #16
 800727a:	d161      	bne.n	8007340 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0210 	bic.w	r2, r2, #16
 800728a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	f003 020f 	and.w	r2, r3, #15
 8007298:	4613      	mov	r3, r2
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	4413      	add	r3, r2
 80072a8:	3304      	adds	r3, #4
 80072aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	0c5b      	lsrs	r3, r3, #17
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d124      	bne.n	8007302 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d035      	beq.n	8007330 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	091b      	lsrs	r3, r3, #4
 80072cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	6a38      	ldr	r0, [r7, #32]
 80072d8:	f002 ffb0 	bl	800a23c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	091b      	lsrs	r3, r3, #4
 80072e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072e8:	441a      	add	r2, r3
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	091b      	lsrs	r3, r3, #4
 80072f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072fa:	441a      	add	r2, r3
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	615a      	str	r2, [r3, #20]
 8007300:	e016      	b.n	8007330 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	0c5b      	lsrs	r3, r3, #17
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	2b06      	cmp	r3, #6
 800730c:	d110      	bne.n	8007330 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007314:	2208      	movs	r2, #8
 8007316:	4619      	mov	r1, r3
 8007318:	6a38      	ldr	r0, [r7, #32]
 800731a:	f002 ff8f 	bl	800a23c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	695a      	ldr	r2, [r3, #20]
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	091b      	lsrs	r3, r3, #4
 8007326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800732a:	441a      	add	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0210 	orr.w	r2, r2, #16
 800733e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	f003 f90d 	bl	800a564 <USB_ReadInterrupts>
 800734a:	4603      	mov	r3, r0
 800734c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007350:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007354:	f040 80a7 	bne.w	80074a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4618      	mov	r0, r3
 8007362:	f003 f912 	bl	800a58a <USB_ReadDevAllOutEpInterrupt>
 8007366:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007368:	e099      	b.n	800749e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 808e 	beq.w	8007492 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	4611      	mov	r1, r2
 8007380:	4618      	mov	r0, r3
 8007382:	f003 f936 	bl	800a5f2 <USB_ReadDevOutEPInterrupt>
 8007386:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00c      	beq.n	80073ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739e:	461a      	mov	r2, r3
 80073a0:	2301      	movs	r3, #1
 80073a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80073a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fe8c 	bl	80080c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00c      	beq.n	80073d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073c2:	461a      	mov	r2, r3
 80073c4:	2308      	movs	r3, #8
 80073c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80073c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 ff62 	bl	8008294 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e6:	461a      	mov	r2, r3
 80073e8:	2310      	movs	r3, #16
 80073ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d030      	beq.n	8007458 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073fe:	2b80      	cmp	r3, #128	@ 0x80
 8007400:	d109      	bne.n	8007416 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007410:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007414:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007418:	4613      	mov	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	4413      	add	r3, r2
 8007428:	3304      	adds	r3, #4
 800742a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	78db      	ldrb	r3, [r3, #3]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d108      	bne.n	8007446 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2200      	movs	r2, #0
 8007438:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	b2db      	uxtb	r3, r3
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f005 f955 	bl	800c6f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007452:	461a      	mov	r2, r3
 8007454:	2302      	movs	r3, #2
 8007456:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d008      	beq.n	8007474 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746e:	461a      	mov	r2, r3
 8007470:	2320      	movs	r3, #32
 8007472:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d009      	beq.n	8007492 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748a:	461a      	mov	r2, r3
 800748c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007490:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	3301      	adds	r3, #1
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f47f af62 	bne.w	800736a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f003 f85a 	bl	800a564 <USB_ReadInterrupts>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074ba:	f040 80db 	bne.w	8007674 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f003 f87b 	bl	800a5be <USB_ReadDevAllInEpInterrupt>
 80074c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80074ce:	e0cd      	b.n	800766c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 80c2 	beq.w	8007660 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f003 f8a1 	bl	800a62e <USB_ReadDevInEPInterrupt>
 80074ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d057      	beq.n	80075a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	f003 030f 	and.w	r3, r3, #15
 80074fe:	2201      	movs	r2, #1
 8007500:	fa02 f303 	lsl.w	r3, r2, r3
 8007504:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800750c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	43db      	mvns	r3, r3
 8007512:	69f9      	ldr	r1, [r7, #28]
 8007514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007518:	4013      	ands	r3, r2
 800751a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007528:	461a      	mov	r2, r3
 800752a:	2301      	movs	r3, #1
 800752c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	799b      	ldrb	r3, [r3, #6]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d132      	bne.n	800759c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800753a:	4613      	mov	r3, r2
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	3320      	adds	r3, #32
 8007546:	6819      	ldr	r1, [r3, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800754c:	4613      	mov	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4403      	add	r3, r0
 8007556:	331c      	adds	r3, #28
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4419      	add	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007560:	4613      	mov	r3, r2
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4403      	add	r3, r0
 800756a:	3320      	adds	r3, #32
 800756c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	d113      	bne.n	800759c <HAL_PCD_IRQHandler+0x3a2>
 8007574:	6879      	ldr	r1, [r7, #4]
 8007576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007578:	4613      	mov	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	3324      	adds	r3, #36	@ 0x24
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d108      	bne.n	800759c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007594:	461a      	mov	r2, r3
 8007596:	2101      	movs	r1, #1
 8007598:	f003 f8a8 	bl	800a6ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f005 f829 	bl	800c5fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f003 0308 	and.w	r3, r3, #8
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d008      	beq.n	80075c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075be:	461a      	mov	r2, r3
 80075c0:	2308      	movs	r3, #8
 80075c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f003 0310 	and.w	r3, r3, #16
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d008      	beq.n	80075e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075da:	461a      	mov	r2, r3
 80075dc:	2310      	movs	r3, #16
 80075de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f6:	461a      	mov	r2, r3
 80075f8:	2340      	movs	r3, #64	@ 0x40
 80075fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d023      	beq.n	800764e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007606:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007608:	6a38      	ldr	r0, [r7, #32]
 800760a:	f002 f88f 	bl	800972c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800760e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007610:	4613      	mov	r3, r2
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	3310      	adds	r3, #16
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	4413      	add	r3, r2
 800761e:	3304      	adds	r3, #4
 8007620:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	78db      	ldrb	r3, [r3, #3]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d108      	bne.n	800763c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2200      	movs	r2, #0
 800762e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	b2db      	uxtb	r3, r3
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f005 f86c 	bl	800c714 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007648:	461a      	mov	r2, r3
 800764a:	2302      	movs	r3, #2
 800764c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007658:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fca5 	bl	8007faa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	3301      	adds	r3, #1
 8007664:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007668:	085b      	lsrs	r3, r3, #1
 800766a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800766c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766e:	2b00      	cmp	r3, #0
 8007670:	f47f af2e 	bne.w	80074d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f002 ff73 	bl	800a564 <USB_ReadInterrupts>
 800767e:	4603      	mov	r3, r0
 8007680:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007684:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007688:	d122      	bne.n	80076d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007698:	f023 0301 	bic.w	r3, r3, #1
 800769c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d108      	bne.n	80076ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80076b0:	2100      	movs	r1, #0
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fe8c 	bl	80083d0 <HAL_PCDEx_LPM_Callback>
 80076b8:	e002      	b.n	80076c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f005 f80a 	bl	800c6d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	695a      	ldr	r2, [r3, #20]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80076ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f002 ff45 	bl	800a564 <USB_ReadInterrupts>
 80076da:	4603      	mov	r3, r0
 80076dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076e4:	d112      	bne.n	800770c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d102      	bne.n	80076fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f004 ffc6 	bl	800c688 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695a      	ldr	r2, [r3, #20]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800770a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	f002 ff27 	bl	800a564 <USB_ReadInterrupts>
 8007716:	4603      	mov	r3, r0
 8007718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800771c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007720:	f040 80b7 	bne.w	8007892 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007732:	f023 0301 	bic.w	r3, r3, #1
 8007736:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2110      	movs	r1, #16
 800773e:	4618      	mov	r0, r3
 8007740:	f001 fff4 	bl	800972c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007744:	2300      	movs	r3, #0
 8007746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007748:	e046      	b.n	80077d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800774a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007756:	461a      	mov	r2, r3
 8007758:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800775c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800776e:	0151      	lsls	r1, r2, #5
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	440a      	add	r2, r1
 8007774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007778:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800777c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800777e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800778a:	461a      	mov	r2, r3
 800778c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007790:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077a2:	0151      	lsls	r1, r2, #5
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	440a      	add	r2, r1
 80077a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077c2:	0151      	lsls	r1, r2, #5
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	440a      	add	r2, r1
 80077c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d4:	3301      	adds	r3, #1
 80077d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	791b      	ldrb	r3, [r3, #4]
 80077dc:	461a      	mov	r2, r3
 80077de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d3b2      	bcc.n	800774a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077f2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80077f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	7bdb      	ldrb	r3, [r3, #15]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d016      	beq.n	800782e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007810:	f043 030b 	orr.w	r3, r3, #11
 8007814:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800781e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007826:	f043 030b 	orr.w	r3, r3, #11
 800782a:	6453      	str	r3, [r2, #68]	@ 0x44
 800782c:	e015      	b.n	800785a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800783c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007840:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007844:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007854:	f043 030b 	orr.w	r3, r3, #11
 8007858:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007868:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800786c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800787c:	461a      	mov	r2, r3
 800787e:	f002 ff35 	bl	800a6ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695a      	ldr	r2, [r3, #20]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f002 fe64 	bl	800a564 <USB_ReadInterrupts>
 800789c:	4603      	mov	r3, r0
 800789e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078a6:	d123      	bne.n	80078f0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f002 fefa 	bl	800a6a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 ffb1 	bl	800981e <USB_GetDevSpeed>
 80078bc:	4603      	mov	r3, r0
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681c      	ldr	r4, [r3, #0]
 80078c8:	f001 f9b2 	bl	8008c30 <HAL_RCC_GetHCLKFreq>
 80078cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80078d2:	461a      	mov	r2, r3
 80078d4:	4620      	mov	r0, r4
 80078d6:	f001 fcb5 	bl	8009244 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f004 feb5 	bl	800c64a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695a      	ldr	r2, [r3, #20]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80078ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f002 fe35 	bl	800a564 <USB_ReadInterrupts>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b08      	cmp	r3, #8
 8007902:	d10a      	bne.n	800791a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f004 fe92 	bl	800c62e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695a      	ldr	r2, [r3, #20]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f002 0208 	and.w	r2, r2, #8
 8007918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f002 fe20 	bl	800a564 <USB_ReadInterrupts>
 8007924:	4603      	mov	r3, r0
 8007926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800792a:	2b80      	cmp	r3, #128	@ 0x80
 800792c:	d123      	bne.n	8007976 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800793a:	2301      	movs	r3, #1
 800793c:	627b      	str	r3, [r7, #36]	@ 0x24
 800793e:	e014      	b.n	800796a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007944:	4613      	mov	r3, r2
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d105      	bne.n	8007964 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	b2db      	uxtb	r3, r3
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 faf2 	bl	8007f48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	3301      	adds	r3, #1
 8007968:	627b      	str	r3, [r7, #36]	@ 0x24
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	791b      	ldrb	r3, [r3, #4]
 800796e:	461a      	mov	r2, r3
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	4293      	cmp	r3, r2
 8007974:	d3e4      	bcc.n	8007940 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f002 fdf2 	bl	800a564 <USB_ReadInterrupts>
 8007980:	4603      	mov	r3, r0
 8007982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800798a:	d13c      	bne.n	8007a06 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800798c:	2301      	movs	r3, #1
 800798e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007990:	e02b      	b.n	80079ea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079a6:	4613      	mov	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	440b      	add	r3, r1
 80079b0:	3318      	adds	r3, #24
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d115      	bne.n	80079e4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80079b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	da12      	bge.n	80079e4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079c2:	4613      	mov	r3, r2
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	440b      	add	r3, r1
 80079cc:	3317      	adds	r3, #23
 80079ce:	2201      	movs	r2, #1
 80079d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fab2 	bl	8007f48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	3301      	adds	r3, #1
 80079e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	791b      	ldrb	r3, [r3, #4]
 80079ee:	461a      	mov	r2, r3
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d3cd      	bcc.n	8007992 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695a      	ldr	r2, [r3, #20]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f002 fdaa 	bl	800a564 <USB_ReadInterrupts>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a1a:	d156      	bne.n	8007aca <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a20:	e045      	b.n	8007aae <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a36:	4613      	mov	r3, r2
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	440b      	add	r3, r1
 8007a40:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d12e      	bne.n	8007aa8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	da2b      	bge.n	8007aa8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007a5c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d121      	bne.n	8007aa8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a68:	4613      	mov	r3, r2
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007a76:	2201      	movs	r2, #1
 8007a78:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	69fa      	ldr	r2, [r7, #28]
 8007a9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007aa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007aa4:	6053      	str	r3, [r2, #4]
            break;
 8007aa6:	e008      	b.n	8007aba <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aaa:	3301      	adds	r3, #1
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	791b      	ldrb	r3, [r3, #4]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d3b3      	bcc.n	8007a22 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	695a      	ldr	r2, [r3, #20]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f002 fd48 	bl	800a564 <USB_ReadInterrupts>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ade:	d10a      	bne.n	8007af6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f004 fe29 	bl	800c738 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695a      	ldr	r2, [r3, #20]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f002 fd32 	bl	800a564 <USB_ReadInterrupts>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f003 0304 	and.w	r3, r3, #4
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d115      	bne.n	8007b36 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f004 fe19 	bl	800c754 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6859      	ldr	r1, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	605a      	str	r2, [r3, #4]
 8007b32:	e000      	b.n	8007b36 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007b34:	bf00      	nop
    }
  }
}
 8007b36:	3734      	adds	r7, #52	@ 0x34
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd90      	pop	{r4, r7, pc}

08007b3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d101      	bne.n	8007b56 <HAL_PCD_SetAddress+0x1a>
 8007b52:	2302      	movs	r3, #2
 8007b54:	e012      	b.n	8007b7c <HAL_PCD_SetAddress+0x40>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	78fa      	ldrb	r2, [r7, #3]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f002 fc91 	bl	800a494 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	461a      	mov	r2, r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	70fb      	strb	r3, [r7, #3]
 8007b96:	460b      	mov	r3, r1
 8007b98:	803b      	strh	r3, [r7, #0]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da0f      	bge.n	8007bca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	f003 020f 	and.w	r2, r3, #15
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	3310      	adds	r3, #16
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	705a      	strb	r2, [r3, #1]
 8007bc8:	e00f      	b.n	8007bea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	f003 020f 	and.w	r2, r3, #15
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	4413      	add	r3, r2
 8007be0:	3304      	adds	r3, #4
 8007be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	f003 030f 	and.w	r3, r3, #15
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007bf6:	883b      	ldrh	r3, [r7, #0]
 8007bf8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	78ba      	ldrb	r2, [r7, #2]
 8007c04:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c18:	78bb      	ldrb	r3, [r7, #2]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d102      	bne.n	8007c24 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d101      	bne.n	8007c32 <HAL_PCD_EP_Open+0xae>
 8007c2e:	2302      	movs	r3, #2
 8007c30:	e00e      	b.n	8007c50 <HAL_PCD_EP_Open+0xcc>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68f9      	ldr	r1, [r7, #12]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f001 fe11 	bl	8009868 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da0f      	bge.n	8007c8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	f003 020f 	and.w	r2, r3, #15
 8007c72:	4613      	mov	r3, r2
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	3310      	adds	r3, #16
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	4413      	add	r3, r2
 8007c80:	3304      	adds	r3, #4
 8007c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2201      	movs	r2, #1
 8007c88:	705a      	strb	r2, [r3, #1]
 8007c8a:	e00f      	b.n	8007cac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	f003 020f 	and.w	r2, r3, #15
 8007c92:	4613      	mov	r3, r2
 8007c94:	00db      	lsls	r3, r3, #3
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	f003 030f 	and.w	r3, r3, #15
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <HAL_PCD_EP_Close+0x6e>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e00e      	b.n	8007ce4 <HAL_PCD_EP_Close+0x8c>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68f9      	ldr	r1, [r7, #12]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f001 fe4f 	bl	8009978 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	603b      	str	r3, [r7, #0]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cfc:	7afb      	ldrb	r3, [r7, #11]
 8007cfe:	f003 020f 	and.w	r2, r3, #15
 8007d02:	4613      	mov	r3, r2
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	3304      	adds	r3, #4
 8007d14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2200      	movs	r2, #0
 8007d26:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d2e:	7afb      	ldrb	r3, [r7, #11]
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	799b      	ldrb	r3, [r3, #6]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d102      	bne.n	8007d48 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	799b      	ldrb	r3, [r3, #6]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6979      	ldr	r1, [r7, #20]
 8007d54:	f001 feec 	bl	8009b30 <USB_EPStartXfer>

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b086      	sub	sp, #24
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	f003 020f 	and.w	r2, r3, #15
 8007d78:	4613      	mov	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	3310      	adds	r3, #16
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4413      	add	r3, r2
 8007d86:	3304      	adds	r3, #4
 8007d88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007da2:	7afb      	ldrb	r3, [r7, #11]
 8007da4:	f003 030f 	and.w	r3, r3, #15
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	799b      	ldrb	r3, [r3, #6]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d102      	bne.n	8007dbc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	799b      	ldrb	r3, [r3, #6]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6979      	ldr	r1, [r7, #20]
 8007dc8:	f001 feb2 	bl	8009b30 <USB_EPStartXfer>

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007de2:	78fb      	ldrb	r3, [r7, #3]
 8007de4:	f003 030f 	and.w	r3, r3, #15
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7912      	ldrb	r2, [r2, #4]
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d901      	bls.n	8007df4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e04f      	b.n	8007e94 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	da0f      	bge.n	8007e1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	f003 020f 	and.w	r2, r3, #15
 8007e02:	4613      	mov	r3, r2
 8007e04:	00db      	lsls	r3, r3, #3
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	3310      	adds	r3, #16
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	4413      	add	r3, r2
 8007e10:	3304      	adds	r3, #4
 8007e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	705a      	strb	r2, [r3, #1]
 8007e1a:	e00d      	b.n	8007e38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e1c:	78fa      	ldrb	r2, [r7, #3]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	3304      	adds	r3, #4
 8007e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e3e:	78fb      	ldrb	r3, [r7, #3]
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_PCD_EP_SetStall+0x82>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e01d      	b.n	8007e94 <HAL_PCD_EP_SetStall+0xbe>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68f9      	ldr	r1, [r7, #12]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f002 fa40 	bl	800a2ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d109      	bne.n	8007e8a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7999      	ldrb	r1, [r3, #6]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e84:	461a      	mov	r2, r3
 8007e86:	f002 fc31 	bl	800a6ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	f003 030f 	and.w	r3, r3, #15
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	7912      	ldrb	r2, [r2, #4]
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d901      	bls.n	8007eba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e042      	b.n	8007f40 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da0f      	bge.n	8007ee2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	f003 020f 	and.w	r2, r3, #15
 8007ec8:	4613      	mov	r3, r2
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	3310      	adds	r3, #16
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	705a      	strb	r2, [r3, #1]
 8007ee0:	e00f      	b.n	8007f02 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	f003 020f 	and.w	r2, r3, #15
 8007ee8:	4613      	mov	r3, r2
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	4413      	add	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	3304      	adds	r3, #4
 8007efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_PCD_EP_ClrStall+0x86>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e00e      	b.n	8007f40 <HAL_PCD_EP_ClrStall+0xa4>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68f9      	ldr	r1, [r7, #12]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f002 fa49 	bl	800a3c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	da0c      	bge.n	8007f76 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	f003 020f 	and.w	r2, r3, #15
 8007f62:	4613      	mov	r3, r2
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	3310      	adds	r3, #16
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	4413      	add	r3, r2
 8007f70:	3304      	adds	r3, #4
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e00c      	b.n	8007f90 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	f003 020f 	and.w	r2, r3, #15
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	4413      	add	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68f9      	ldr	r1, [r7, #12]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f002 f868 	bl	800a06c <USB_EPStopXfer>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007fa0:	7afb      	ldrb	r3, [r7, #11]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b08a      	sub	sp, #40	@ 0x28
 8007fae:	af02      	add	r7, sp, #8
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	3310      	adds	r3, #16
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	3304      	adds	r3, #4
 8007fd0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	695a      	ldr	r2, [r3, #20]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d901      	bls.n	8007fe2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e06b      	b.n	80080ba <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	691a      	ldr	r2, [r3, #16]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d902      	bls.n	8007ffe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	3303      	adds	r3, #3
 8008002:	089b      	lsrs	r3, r3, #2
 8008004:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008006:	e02a      	b.n	800805e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	429a      	cmp	r2, r3
 800801c:	d902      	bls.n	8008024 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	3303      	adds	r3, #3
 8008028:	089b      	lsrs	r3, r3, #2
 800802a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	68d9      	ldr	r1, [r3, #12]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	b2da      	uxtb	r2, r3
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	4603      	mov	r3, r0
 8008040:	6978      	ldr	r0, [r7, #20]
 8008042:	f002 f8bd 	bl	800a1c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	441a      	add	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	695a      	ldr	r2, [r3, #20]
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	441a      	add	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	429a      	cmp	r2, r3
 8008072:	d809      	bhi.n	8008088 <PCD_WriteEmptyTxFifo+0xde>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	695a      	ldr	r2, [r3, #20]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800807c:	429a      	cmp	r2, r3
 800807e:	d203      	bcs.n	8008088 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1bf      	bne.n	8008008 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	691a      	ldr	r2, [r3, #16]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	429a      	cmp	r2, r3
 8008092:	d811      	bhi.n	80080b8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	f003 030f 	and.w	r3, r3, #15
 800809a:	2201      	movs	r2, #1
 800809c:	fa02 f303 	lsl.w	r3, r2, r3
 80080a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	43db      	mvns	r3, r3
 80080ae:	6939      	ldr	r1, [r7, #16]
 80080b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080b4:	4013      	ands	r3, r2
 80080b6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3720      	adds	r7, #32
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	333c      	adds	r3, #60	@ 0x3c
 80080dc:	3304      	adds	r3, #4
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	799b      	ldrb	r3, [r3, #6]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d17b      	bne.n	80081f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f003 0308 	and.w	r3, r3, #8
 8008100:	2b00      	cmp	r3, #0
 8008102:	d015      	beq.n	8008130 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	4a61      	ldr	r2, [pc, #388]	@ (800828c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	f240 80b9 	bls.w	8008280 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 80b3 	beq.w	8008280 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008126:	461a      	mov	r2, r3
 8008128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800812c:	6093      	str	r3, [r2, #8]
 800812e:	e0a7      	b.n	8008280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008146:	461a      	mov	r2, r3
 8008148:	2320      	movs	r3, #32
 800814a:	6093      	str	r3, [r2, #8]
 800814c:	e098      	b.n	8008280 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008154:	2b00      	cmp	r3, #0
 8008156:	f040 8093 	bne.w	8008280 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	4a4b      	ldr	r2, [pc, #300]	@ (800828c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d90f      	bls.n	8008182 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00a      	beq.n	8008182 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008178:	461a      	mov	r2, r3
 800817a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800817e:	6093      	str	r3, [r2, #8]
 8008180:	e07e      	b.n	8008280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	4413      	add	r3, r2
 8008194:	3304      	adds	r3, #4
 8008196:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a1a      	ldr	r2, [r3, #32]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	0159      	lsls	r1, r3, #5
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	440b      	add	r3, r1
 80081a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d114      	bne.n	80081e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d109      	bne.n	80081d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081cc:	461a      	mov	r2, r3
 80081ce:	2101      	movs	r1, #1
 80081d0:	f002 fa8c 	bl	800a6ec <USB_EP0_OutStart>
 80081d4:	e006      	b.n	80081e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	441a      	add	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f004 f9ea 	bl	800c5c4 <HAL_PCD_DataOutStageCallback>
 80081f0:	e046      	b.n	8008280 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	4a26      	ldr	r2, [pc, #152]	@ (8008290 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d124      	bne.n	8008244 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00a      	beq.n	800821a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008210:	461a      	mov	r2, r3
 8008212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008216:	6093      	str	r3, [r2, #8]
 8008218:	e032      	b.n	8008280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d008      	beq.n	8008236 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008230:	461a      	mov	r2, r3
 8008232:	2320      	movs	r3, #32
 8008234:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	b2db      	uxtb	r3, r3
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f004 f9c1 	bl	800c5c4 <HAL_PCD_DataOutStageCallback>
 8008242:	e01d      	b.n	8008280 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d114      	bne.n	8008274 <PCD_EP_OutXfrComplete_int+0x1b0>
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	4613      	mov	r3, r2
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	4413      	add	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	440b      	add	r3, r1
 8008258:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d108      	bne.n	8008274 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800826c:	461a      	mov	r2, r3
 800826e:	2100      	movs	r1, #0
 8008270:	f002 fa3c 	bl	800a6ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	b2db      	uxtb	r3, r3
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f004 f9a2 	bl	800c5c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3720      	adds	r7, #32
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	4f54300a 	.word	0x4f54300a
 8008290:	4f54310a 	.word	0x4f54310a

08008294 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	333c      	adds	r3, #60	@ 0x3c
 80082ac:	3304      	adds	r3, #4
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4a15      	ldr	r2, [pc, #84]	@ (800831c <PCD_EP_OutSetupPacket_int+0x88>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d90e      	bls.n	80082e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d009      	beq.n	80082e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082e0:	461a      	mov	r2, r3
 80082e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f004 f959 	bl	800c5a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4a0a      	ldr	r2, [pc, #40]	@ (800831c <PCD_EP_OutSetupPacket_int+0x88>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d90c      	bls.n	8008310 <PCD_EP_OutSetupPacket_int+0x7c>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	799b      	ldrb	r3, [r3, #6]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d108      	bne.n	8008310 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008308:	461a      	mov	r2, r3
 800830a:	2101      	movs	r1, #1
 800830c:	f002 f9ee 	bl	800a6ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	4f54300a 	.word	0x4f54300a

08008320 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
 800832c:	4613      	mov	r3, r2
 800832e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008336:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d107      	bne.n	800834e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800833e:	883b      	ldrh	r3, [r7, #0]
 8008340:	0419      	lsls	r1, r3, #16
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	430a      	orrs	r2, r1
 800834a:	629a      	str	r2, [r3, #40]	@ 0x28
 800834c:	e028      	b.n	80083a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008354:	0c1b      	lsrs	r3, r3, #16
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	4413      	add	r3, r2
 800835a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800835c:	2300      	movs	r3, #0
 800835e:	73fb      	strb	r3, [r7, #15]
 8008360:	e00d      	b.n	800837e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	7bfb      	ldrb	r3, [r7, #15]
 8008368:	3340      	adds	r3, #64	@ 0x40
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	0c1b      	lsrs	r3, r3, #16
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	4413      	add	r3, r2
 8008376:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	3301      	adds	r3, #1
 800837c:	73fb      	strb	r3, [r7, #15]
 800837e:	7bfa      	ldrb	r2, [r7, #15]
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	3b01      	subs	r3, #1
 8008384:	429a      	cmp	r2, r3
 8008386:	d3ec      	bcc.n	8008362 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008388:	883b      	ldrh	r3, [r7, #0]
 800838a:	0418      	lsls	r0, r3, #16
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6819      	ldr	r1, [r3, #0]
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	3b01      	subs	r3, #1
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	4302      	orrs	r2, r0
 8008398:	3340      	adds	r3, #64	@ 0x40
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	887a      	ldrh	r2, [r7, #2]
 80083c0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e267      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d075      	beq.n	80084f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008406:	4b88      	ldr	r3, [pc, #544]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 030c 	and.w	r3, r3, #12
 800840e:	2b04      	cmp	r3, #4
 8008410:	d00c      	beq.n	800842c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008412:	4b85      	ldr	r3, [pc, #532]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800841a:	2b08      	cmp	r3, #8
 800841c:	d112      	bne.n	8008444 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800841e:	4b82      	ldr	r3, [pc, #520]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800842a:	d10b      	bne.n	8008444 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800842c:	4b7e      	ldr	r3, [pc, #504]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d05b      	beq.n	80084f0 <HAL_RCC_OscConfig+0x108>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d157      	bne.n	80084f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e242      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800844c:	d106      	bne.n	800845c <HAL_RCC_OscConfig+0x74>
 800844e:	4b76      	ldr	r3, [pc, #472]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a75      	ldr	r2, [pc, #468]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	e01d      	b.n	8008498 <HAL_RCC_OscConfig+0xb0>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008464:	d10c      	bne.n	8008480 <HAL_RCC_OscConfig+0x98>
 8008466:	4b70      	ldr	r3, [pc, #448]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a6f      	ldr	r2, [pc, #444]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 800846c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	4b6d      	ldr	r3, [pc, #436]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a6c      	ldr	r2, [pc, #432]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	e00b      	b.n	8008498 <HAL_RCC_OscConfig+0xb0>
 8008480:	4b69      	ldr	r3, [pc, #420]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a68      	ldr	r2, [pc, #416]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	4b66      	ldr	r3, [pc, #408]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a65      	ldr	r2, [pc, #404]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d013      	beq.n	80084c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084a0:	f7fe fa70 	bl	8006984 <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084a8:	f7fe fa6c 	bl	8006984 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b64      	cmp	r3, #100	@ 0x64
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e207      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0f0      	beq.n	80084a8 <HAL_RCC_OscConfig+0xc0>
 80084c6:	e014      	b.n	80084f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c8:	f7fe fa5c 	bl	8006984 <HAL_GetTick>
 80084cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084d0:	f7fe fa58 	bl	8006984 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b64      	cmp	r3, #100	@ 0x64
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e1f3      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084e2:	4b51      	ldr	r3, [pc, #324]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1f0      	bne.n	80084d0 <HAL_RCC_OscConfig+0xe8>
 80084ee:	e000      	b.n	80084f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d063      	beq.n	80085c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80084fe:	4b4a      	ldr	r3, [pc, #296]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 030c 	and.w	r3, r3, #12
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00b      	beq.n	8008522 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800850a:	4b47      	ldr	r3, [pc, #284]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008512:	2b08      	cmp	r3, #8
 8008514:	d11c      	bne.n	8008550 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008516:	4b44      	ldr	r3, [pc, #272]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d116      	bne.n	8008550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008522:	4b41      	ldr	r3, [pc, #260]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <HAL_RCC_OscConfig+0x152>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d001      	beq.n	800853a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e1c7      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800853a:	4b3b      	ldr	r3, [pc, #236]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	4937      	ldr	r1, [pc, #220]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 800854a:	4313      	orrs	r3, r2
 800854c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800854e:	e03a      	b.n	80085c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d020      	beq.n	800859a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008558:	4b34      	ldr	r3, [pc, #208]	@ (800862c <HAL_RCC_OscConfig+0x244>)
 800855a:	2201      	movs	r2, #1
 800855c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855e:	f7fe fa11 	bl	8006984 <HAL_GetTick>
 8008562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008564:	e008      	b.n	8008578 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008566:	f7fe fa0d 	bl	8006984 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d901      	bls.n	8008578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e1a8      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008578:	4b2b      	ldr	r3, [pc, #172]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0f0      	beq.n	8008566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008584:	4b28      	ldr	r3, [pc, #160]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	00db      	lsls	r3, r3, #3
 8008592:	4925      	ldr	r1, [pc, #148]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 8008594:	4313      	orrs	r3, r2
 8008596:	600b      	str	r3, [r1, #0]
 8008598:	e015      	b.n	80085c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800859a:	4b24      	ldr	r3, [pc, #144]	@ (800862c <HAL_RCC_OscConfig+0x244>)
 800859c:	2200      	movs	r2, #0
 800859e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a0:	f7fe f9f0 	bl	8006984 <HAL_GetTick>
 80085a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085a6:	e008      	b.n	80085ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085a8:	f7fe f9ec 	bl	8006984 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d901      	bls.n	80085ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e187      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1f0      	bne.n	80085a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d036      	beq.n	8008640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d016      	beq.n	8008608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085da:	4b15      	ldr	r3, [pc, #84]	@ (8008630 <HAL_RCC_OscConfig+0x248>)
 80085dc:	2201      	movs	r2, #1
 80085de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085e0:	f7fe f9d0 	bl	8006984 <HAL_GetTick>
 80085e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085e6:	e008      	b.n	80085fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085e8:	f7fe f9cc 	bl	8006984 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e167      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008628 <HAL_RCC_OscConfig+0x240>)
 80085fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0f0      	beq.n	80085e8 <HAL_RCC_OscConfig+0x200>
 8008606:	e01b      	b.n	8008640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008608:	4b09      	ldr	r3, [pc, #36]	@ (8008630 <HAL_RCC_OscConfig+0x248>)
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800860e:	f7fe f9b9 	bl	8006984 <HAL_GetTick>
 8008612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008614:	e00e      	b.n	8008634 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008616:	f7fe f9b5 	bl	8006984 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d907      	bls.n	8008634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e150      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
 8008628:	40023800 	.word	0x40023800
 800862c:	42470000 	.word	0x42470000
 8008630:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008634:	4b88      	ldr	r3, [pc, #544]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1ea      	bne.n	8008616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 8097 	beq.w	800877c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800864e:	2300      	movs	r3, #0
 8008650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008652:	4b81      	ldr	r3, [pc, #516]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10f      	bne.n	800867e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800865e:	2300      	movs	r3, #0
 8008660:	60bb      	str	r3, [r7, #8]
 8008662:	4b7d      	ldr	r3, [pc, #500]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008666:	4a7c      	ldr	r2, [pc, #496]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800866c:	6413      	str	r3, [r2, #64]	@ 0x40
 800866e:	4b7a      	ldr	r3, [pc, #488]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008676:	60bb      	str	r3, [r7, #8]
 8008678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800867a:	2301      	movs	r3, #1
 800867c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800867e:	4b77      	ldr	r3, [pc, #476]	@ (800885c <HAL_RCC_OscConfig+0x474>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008686:	2b00      	cmp	r3, #0
 8008688:	d118      	bne.n	80086bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800868a:	4b74      	ldr	r3, [pc, #464]	@ (800885c <HAL_RCC_OscConfig+0x474>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a73      	ldr	r2, [pc, #460]	@ (800885c <HAL_RCC_OscConfig+0x474>)
 8008690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008696:	f7fe f975 	bl	8006984 <HAL_GetTick>
 800869a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800869c:	e008      	b.n	80086b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800869e:	f7fe f971 	bl	8006984 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d901      	bls.n	80086b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e10c      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086b0:	4b6a      	ldr	r3, [pc, #424]	@ (800885c <HAL_RCC_OscConfig+0x474>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0f0      	beq.n	800869e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d106      	bne.n	80086d2 <HAL_RCC_OscConfig+0x2ea>
 80086c4:	4b64      	ldr	r3, [pc, #400]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 80086c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c8:	4a63      	ldr	r2, [pc, #396]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 80086ca:	f043 0301 	orr.w	r3, r3, #1
 80086ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80086d0:	e01c      	b.n	800870c <HAL_RCC_OscConfig+0x324>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d10c      	bne.n	80086f4 <HAL_RCC_OscConfig+0x30c>
 80086da:	4b5f      	ldr	r3, [pc, #380]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 80086dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086de:	4a5e      	ldr	r2, [pc, #376]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 80086e0:	f043 0304 	orr.w	r3, r3, #4
 80086e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80086e6:	4b5c      	ldr	r3, [pc, #368]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 80086e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ea:	4a5b      	ldr	r2, [pc, #364]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80086f2:	e00b      	b.n	800870c <HAL_RCC_OscConfig+0x324>
 80086f4:	4b58      	ldr	r3, [pc, #352]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 80086f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f8:	4a57      	ldr	r2, [pc, #348]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 80086fa:	f023 0301 	bic.w	r3, r3, #1
 80086fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008700:	4b55      	ldr	r3, [pc, #340]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008704:	4a54      	ldr	r2, [pc, #336]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008706:	f023 0304 	bic.w	r3, r3, #4
 800870a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d015      	beq.n	8008740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008714:	f7fe f936 	bl	8006984 <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800871a:	e00a      	b.n	8008732 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800871c:	f7fe f932 	bl	8006984 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800872a:	4293      	cmp	r3, r2
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e0cb      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008732:	4b49      	ldr	r3, [pc, #292]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0ee      	beq.n	800871c <HAL_RCC_OscConfig+0x334>
 800873e:	e014      	b.n	800876a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008740:	f7fe f920 	bl	8006984 <HAL_GetTick>
 8008744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008746:	e00a      	b.n	800875e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008748:	f7fe f91c 	bl	8006984 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008756:	4293      	cmp	r3, r2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e0b5      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800875e:	4b3e      	ldr	r3, [pc, #248]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1ee      	bne.n	8008748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d105      	bne.n	800877c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008770:	4b39      	ldr	r3, [pc, #228]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008774:	4a38      	ldr	r2, [pc, #224]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800877a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f000 80a1 	beq.w	80088c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008786:	4b34      	ldr	r3, [pc, #208]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f003 030c 	and.w	r3, r3, #12
 800878e:	2b08      	cmp	r3, #8
 8008790:	d05c      	beq.n	800884c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	2b02      	cmp	r3, #2
 8008798:	d141      	bne.n	800881e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800879a:	4b31      	ldr	r3, [pc, #196]	@ (8008860 <HAL_RCC_OscConfig+0x478>)
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087a0:	f7fe f8f0 	bl	8006984 <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a8:	f7fe f8ec 	bl	8006984 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e087      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ba:	4b27      	ldr	r3, [pc, #156]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1f0      	bne.n	80087a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69da      	ldr	r2, [r3, #28]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d4:	019b      	lsls	r3, r3, #6
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	3b01      	subs	r3, #1
 80087e0:	041b      	lsls	r3, r3, #16
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	061b      	lsls	r3, r3, #24
 80087ea:	491b      	ldr	r1, [pc, #108]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008860 <HAL_RCC_OscConfig+0x478>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087f6:	f7fe f8c5 	bl	8006984 <HAL_GetTick>
 80087fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087fc:	e008      	b.n	8008810 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087fe:	f7fe f8c1 	bl	8006984 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	d901      	bls.n	8008810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e05c      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008810:	4b11      	ldr	r3, [pc, #68]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0f0      	beq.n	80087fe <HAL_RCC_OscConfig+0x416>
 800881c:	e054      	b.n	80088c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800881e:	4b10      	ldr	r3, [pc, #64]	@ (8008860 <HAL_RCC_OscConfig+0x478>)
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008824:	f7fe f8ae 	bl	8006984 <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800882a:	e008      	b.n	800883e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800882c:	f7fe f8aa 	bl	8006984 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d901      	bls.n	800883e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e045      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800883e:	4b06      	ldr	r3, [pc, #24]	@ (8008858 <HAL_RCC_OscConfig+0x470>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1f0      	bne.n	800882c <HAL_RCC_OscConfig+0x444>
 800884a:	e03d      	b.n	80088c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d107      	bne.n	8008864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e038      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
 8008858:	40023800 	.word	0x40023800
 800885c:	40007000 	.word	0x40007000
 8008860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008864:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <HAL_RCC_OscConfig+0x4ec>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d028      	beq.n	80088c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800887c:	429a      	cmp	r2, r3
 800887e:	d121      	bne.n	80088c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800888a:	429a      	cmp	r2, r3
 800888c:	d11a      	bne.n	80088c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008894:	4013      	ands	r3, r2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800889a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800889c:	4293      	cmp	r3, r2
 800889e:	d111      	bne.n	80088c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	3b01      	subs	r3, #1
 80088ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d107      	bne.n	80088c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d001      	beq.n	80088c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e000      	b.n	80088ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	40023800 	.word	0x40023800

080088d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e0cc      	b.n	8008a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088ec:	4b68      	ldr	r3, [pc, #416]	@ (8008a90 <HAL_RCC_ClockConfig+0x1b8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0307 	and.w	r3, r3, #7
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d90c      	bls.n	8008914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088fa:	4b65      	ldr	r3, [pc, #404]	@ (8008a90 <HAL_RCC_ClockConfig+0x1b8>)
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008902:	4b63      	ldr	r3, [pc, #396]	@ (8008a90 <HAL_RCC_ClockConfig+0x1b8>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d001      	beq.n	8008914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e0b8      	b.n	8008a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d020      	beq.n	8008962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	d005      	beq.n	8008938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800892c:	4b59      	ldr	r3, [pc, #356]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	4a58      	ldr	r2, [pc, #352]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 8008932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0308 	and.w	r3, r3, #8
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008944:	4b53      	ldr	r3, [pc, #332]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	4a52      	ldr	r2, [pc, #328]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 800894a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800894e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008950:	4b50      	ldr	r3, [pc, #320]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	494d      	ldr	r1, [pc, #308]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 800895e:	4313      	orrs	r3, r2
 8008960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d044      	beq.n	80089f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d107      	bne.n	8008986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008976:	4b47      	ldr	r3, [pc, #284]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d119      	bne.n	80089b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e07f      	b.n	8008a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d003      	beq.n	8008996 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008992:	2b03      	cmp	r3, #3
 8008994:	d107      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008996:	4b3f      	ldr	r3, [pc, #252]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e06f      	b.n	8008a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089a6:	4b3b      	ldr	r3, [pc, #236]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e067      	b.n	8008a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089b6:	4b37      	ldr	r3, [pc, #220]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f023 0203 	bic.w	r2, r3, #3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	4934      	ldr	r1, [pc, #208]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089c8:	f7fd ffdc 	bl	8006984 <HAL_GetTick>
 80089cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ce:	e00a      	b.n	80089e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089d0:	f7fd ffd8 	bl	8006984 <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089de:	4293      	cmp	r3, r2
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e04f      	b.n	8008a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089e6:	4b2b      	ldr	r3, [pc, #172]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f003 020c 	and.w	r2, r3, #12
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d1eb      	bne.n	80089d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089f8:	4b25      	ldr	r3, [pc, #148]	@ (8008a90 <HAL_RCC_ClockConfig+0x1b8>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d20c      	bcs.n	8008a20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a06:	4b22      	ldr	r3, [pc, #136]	@ (8008a90 <HAL_RCC_ClockConfig+0x1b8>)
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a0e:	4b20      	ldr	r3, [pc, #128]	@ (8008a90 <HAL_RCC_ClockConfig+0x1b8>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d001      	beq.n	8008a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e032      	b.n	8008a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d008      	beq.n	8008a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a2c:	4b19      	ldr	r3, [pc, #100]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	4916      	ldr	r1, [pc, #88]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0308 	and.w	r3, r3, #8
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d009      	beq.n	8008a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a4a:	4b12      	ldr	r3, [pc, #72]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	00db      	lsls	r3, r3, #3
 8008a58:	490e      	ldr	r1, [pc, #56]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a5e:	f000 f821 	bl	8008aa4 <HAL_RCC_GetSysClockFreq>
 8008a62:	4602      	mov	r2, r0
 8008a64:	4b0b      	ldr	r3, [pc, #44]	@ (8008a94 <HAL_RCC_ClockConfig+0x1bc>)
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	091b      	lsrs	r3, r3, #4
 8008a6a:	f003 030f 	and.w	r3, r3, #15
 8008a6e:	490a      	ldr	r1, [pc, #40]	@ (8008a98 <HAL_RCC_ClockConfig+0x1c0>)
 8008a70:	5ccb      	ldrb	r3, [r1, r3]
 8008a72:	fa22 f303 	lsr.w	r3, r2, r3
 8008a76:	4a09      	ldr	r2, [pc, #36]	@ (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008a7a:	4b09      	ldr	r3, [pc, #36]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fd ff3c 	bl	80068fc <HAL_InitTick>

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	40023c00 	.word	0x40023c00
 8008a94:	40023800 	.word	0x40023800
 8008a98:	08011518 	.word	0x08011518
 8008a9c:	20000000 	.word	0x20000000
 8008aa0:	20000004 	.word	0x20000004

08008aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aa8:	b090      	sub	sp, #64	@ 0x40
 8008aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008abc:	4b59      	ldr	r3, [pc, #356]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f003 030c 	and.w	r3, r3, #12
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d00d      	beq.n	8008ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	f200 80a1 	bhi.w	8008c10 <HAL_RCC_GetSysClockFreq+0x16c>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d003      	beq.n	8008ade <HAL_RCC_GetSysClockFreq+0x3a>
 8008ad6:	e09b      	b.n	8008c10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ad8:	4b53      	ldr	r3, [pc, #332]	@ (8008c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ada:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008adc:	e09b      	b.n	8008c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ade:	4b53      	ldr	r3, [pc, #332]	@ (8008c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8008ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ae2:	e098      	b.n	8008c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008aec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008aee:	4b4d      	ldr	r3, [pc, #308]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d028      	beq.n	8008b4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008afa:	4b4a      	ldr	r3, [pc, #296]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	099b      	lsrs	r3, r3, #6
 8008b00:	2200      	movs	r2, #0
 8008b02:	623b      	str	r3, [r7, #32]
 8008b04:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4b47      	ldr	r3, [pc, #284]	@ (8008c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8008b10:	fb03 f201 	mul.w	r2, r3, r1
 8008b14:	2300      	movs	r3, #0
 8008b16:	fb00 f303 	mul.w	r3, r0, r3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	4a43      	ldr	r2, [pc, #268]	@ (8008c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8008b1e:	fba0 1202 	umull	r1, r2, r0, r2
 8008b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b24:	460a      	mov	r2, r1
 8008b26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b2a:	4413      	add	r3, r2
 8008b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b30:	2200      	movs	r2, #0
 8008b32:	61bb      	str	r3, [r7, #24]
 8008b34:	61fa      	str	r2, [r7, #28]
 8008b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008b3e:	f7f7 fb5d 	bl	80001fc <__aeabi_uldivmod>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4613      	mov	r3, r2
 8008b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b4a:	e053      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b4c:	4b35      	ldr	r3, [pc, #212]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	099b      	lsrs	r3, r3, #6
 8008b52:	2200      	movs	r2, #0
 8008b54:	613b      	str	r3, [r7, #16]
 8008b56:	617a      	str	r2, [r7, #20]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008b5e:	f04f 0b00 	mov.w	fp, #0
 8008b62:	4652      	mov	r2, sl
 8008b64:	465b      	mov	r3, fp
 8008b66:	f04f 0000 	mov.w	r0, #0
 8008b6a:	f04f 0100 	mov.w	r1, #0
 8008b6e:	0159      	lsls	r1, r3, #5
 8008b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b74:	0150      	lsls	r0, r2, #5
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	ebb2 080a 	subs.w	r8, r2, sl
 8008b7e:	eb63 090b 	sbc.w	r9, r3, fp
 8008b82:	f04f 0200 	mov.w	r2, #0
 8008b86:	f04f 0300 	mov.w	r3, #0
 8008b8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008b8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008b92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008b96:	ebb2 0408 	subs.w	r4, r2, r8
 8008b9a:	eb63 0509 	sbc.w	r5, r3, r9
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	00eb      	lsls	r3, r5, #3
 8008ba8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008bac:	00e2      	lsls	r2, r4, #3
 8008bae:	4614      	mov	r4, r2
 8008bb0:	461d      	mov	r5, r3
 8008bb2:	eb14 030a 	adds.w	r3, r4, sl
 8008bb6:	603b      	str	r3, [r7, #0]
 8008bb8:	eb45 030b 	adc.w	r3, r5, fp
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	f04f 0200 	mov.w	r2, #0
 8008bc2:	f04f 0300 	mov.w	r3, #0
 8008bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008bca:	4629      	mov	r1, r5
 8008bcc:	028b      	lsls	r3, r1, #10
 8008bce:	4621      	mov	r1, r4
 8008bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	028a      	lsls	r2, r1, #10
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bde:	2200      	movs	r2, #0
 8008be0:	60bb      	str	r3, [r7, #8]
 8008be2:	60fa      	str	r2, [r7, #12]
 8008be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008be8:	f7f7 fb08 	bl	80001fc <__aeabi_uldivmod>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	0c1b      	lsrs	r3, r3, #16
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	3301      	adds	r3, #1
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008c04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c0e:	e002      	b.n	8008c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c10:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3740      	adds	r7, #64	@ 0x40
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c22:	bf00      	nop
 8008c24:	40023800 	.word	0x40023800
 8008c28:	00f42400 	.word	0x00f42400
 8008c2c:	017d7840 	.word	0x017d7840

08008c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c30:	b480      	push	{r7}
 8008c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c34:	4b03      	ldr	r3, [pc, #12]	@ (8008c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c36:	681b      	ldr	r3, [r3, #0]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	20000000 	.word	0x20000000

08008c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e041      	b.n	8008cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d106      	bne.n	8008c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7fd fcbc 	bl	80065ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3304      	adds	r3, #4
 8008c84:	4619      	mov	r1, r3
 8008c86:	4610      	mov	r0, r2
 8008c88:	f000 f9d8 	bl	800903c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d001      	beq.n	8008d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e044      	b.n	8008d8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f042 0201 	orr.w	r2, r2, #1
 8008d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8008d98 <HAL_TIM_Base_Start_IT+0xb0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d018      	beq.n	8008d54 <HAL_TIM_Base_Start_IT+0x6c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d2a:	d013      	beq.n	8008d54 <HAL_TIM_Base_Start_IT+0x6c>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a1a      	ldr	r2, [pc, #104]	@ (8008d9c <HAL_TIM_Base_Start_IT+0xb4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00e      	beq.n	8008d54 <HAL_TIM_Base_Start_IT+0x6c>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a19      	ldr	r2, [pc, #100]	@ (8008da0 <HAL_TIM_Base_Start_IT+0xb8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d009      	beq.n	8008d54 <HAL_TIM_Base_Start_IT+0x6c>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a17      	ldr	r2, [pc, #92]	@ (8008da4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d004      	beq.n	8008d54 <HAL_TIM_Base_Start_IT+0x6c>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a16      	ldr	r2, [pc, #88]	@ (8008da8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d111      	bne.n	8008d78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b06      	cmp	r3, #6
 8008d64:	d010      	beq.n	8008d88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0201 	orr.w	r2, r2, #1
 8008d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d76:	e007      	b.n	8008d88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0201 	orr.w	r2, r2, #1
 8008d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40010000 	.word	0x40010000
 8008d9c:	40000400 	.word	0x40000400
 8008da0:	40000800 	.word	0x40000800
 8008da4:	40000c00 	.word	0x40000c00
 8008da8:	40014000 	.word	0x40014000

08008dac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f022 0201 	bic.w	r2, r2, #1
 8008dc2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6a1a      	ldr	r2, [r3, #32]
 8008dca:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008dce:	4013      	ands	r3, r2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10f      	bne.n	8008df4 <HAL_TIM_Base_Stop_IT+0x48>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6a1a      	ldr	r2, [r3, #32]
 8008dda:	f240 4344 	movw	r3, #1092	@ 0x444
 8008dde:	4013      	ands	r3, r2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d107      	bne.n	8008df4 <HAL_TIM_Base_Stop_IT+0x48>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 0201 	bic.w	r2, r2, #1
 8008df2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d020      	beq.n	8008e6e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d01b      	beq.n	8008e6e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f06f 0202 	mvn.w	r2, #2
 8008e3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f003 0303 	and.w	r3, r3, #3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f8d2 	bl	8008ffe <HAL_TIM_IC_CaptureCallback>
 8008e5a:	e005      	b.n	8008e68 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f8c4 	bl	8008fea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f8d5 	bl	8009012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d020      	beq.n	8008eba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f003 0304 	and.w	r3, r3, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01b      	beq.n	8008eba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f06f 0204 	mvn.w	r2, #4
 8008e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f8ac 	bl	8008ffe <HAL_TIM_IC_CaptureCallback>
 8008ea6:	e005      	b.n	8008eb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f89e 	bl	8008fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f8af 	bl	8009012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f003 0308 	and.w	r3, r3, #8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d020      	beq.n	8008f06 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f003 0308 	and.w	r3, r3, #8
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d01b      	beq.n	8008f06 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f06f 0208 	mvn.w	r2, #8
 8008ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2204      	movs	r2, #4
 8008edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f886 	bl	8008ffe <HAL_TIM_IC_CaptureCallback>
 8008ef2:	e005      	b.n	8008f00 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f878 	bl	8008fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f889 	bl	8009012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d020      	beq.n	8008f52 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f003 0310 	and.w	r3, r3, #16
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d01b      	beq.n	8008f52 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f06f 0210 	mvn.w	r2, #16
 8008f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2208      	movs	r2, #8
 8008f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f860 	bl	8008ffe <HAL_TIM_IC_CaptureCallback>
 8008f3e:	e005      	b.n	8008f4c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f852 	bl	8008fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f863 	bl	8009012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00c      	beq.n	8008f76 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d007      	beq.n	8008f76 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f06f 0201 	mvn.w	r2, #1
 8008f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7fd faf5 	bl	8006560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00c      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d007      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f8e7 	bl	8009168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00c      	beq.n	8008fbe <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d007      	beq.n	8008fbe <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f834 	bl	8009026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00c      	beq.n	8008fe2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d007      	beq.n	8008fe2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f06f 0220 	mvn.w	r2, #32
 8008fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f8b9 	bl	8009154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800902e:	bf00      	nop
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
	...

0800903c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a3a      	ldr	r2, [pc, #232]	@ (8009138 <TIM_Base_SetConfig+0xfc>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d00f      	beq.n	8009074 <TIM_Base_SetConfig+0x38>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800905a:	d00b      	beq.n	8009074 <TIM_Base_SetConfig+0x38>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a37      	ldr	r2, [pc, #220]	@ (800913c <TIM_Base_SetConfig+0x100>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d007      	beq.n	8009074 <TIM_Base_SetConfig+0x38>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a36      	ldr	r2, [pc, #216]	@ (8009140 <TIM_Base_SetConfig+0x104>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d003      	beq.n	8009074 <TIM_Base_SetConfig+0x38>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a35      	ldr	r2, [pc, #212]	@ (8009144 <TIM_Base_SetConfig+0x108>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d108      	bne.n	8009086 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4313      	orrs	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a2b      	ldr	r2, [pc, #172]	@ (8009138 <TIM_Base_SetConfig+0xfc>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d01b      	beq.n	80090c6 <TIM_Base_SetConfig+0x8a>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009094:	d017      	beq.n	80090c6 <TIM_Base_SetConfig+0x8a>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a28      	ldr	r2, [pc, #160]	@ (800913c <TIM_Base_SetConfig+0x100>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d013      	beq.n	80090c6 <TIM_Base_SetConfig+0x8a>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a27      	ldr	r2, [pc, #156]	@ (8009140 <TIM_Base_SetConfig+0x104>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00f      	beq.n	80090c6 <TIM_Base_SetConfig+0x8a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a26      	ldr	r2, [pc, #152]	@ (8009144 <TIM_Base_SetConfig+0x108>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d00b      	beq.n	80090c6 <TIM_Base_SetConfig+0x8a>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a25      	ldr	r2, [pc, #148]	@ (8009148 <TIM_Base_SetConfig+0x10c>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d007      	beq.n	80090c6 <TIM_Base_SetConfig+0x8a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a24      	ldr	r2, [pc, #144]	@ (800914c <TIM_Base_SetConfig+0x110>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d003      	beq.n	80090c6 <TIM_Base_SetConfig+0x8a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a23      	ldr	r2, [pc, #140]	@ (8009150 <TIM_Base_SetConfig+0x114>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d108      	bne.n	80090d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	689a      	ldr	r2, [r3, #8]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a0e      	ldr	r2, [pc, #56]	@ (8009138 <TIM_Base_SetConfig+0xfc>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d103      	bne.n	800910c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	691a      	ldr	r2, [r3, #16]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b01      	cmp	r3, #1
 800911c:	d105      	bne.n	800912a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	f023 0201 	bic.w	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	611a      	str	r2, [r3, #16]
  }
}
 800912a:	bf00      	nop
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	40010000 	.word	0x40010000
 800913c:	40000400 	.word	0x40000400
 8009140:	40000800 	.word	0x40000800
 8009144:	40000c00 	.word	0x40000c00
 8009148:	40014000 	.word	0x40014000
 800914c:	40014400 	.word	0x40014400
 8009150:	40014800 	.word	0x40014800

08009154 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800917c:	b084      	sub	sp, #16
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	f107 001c 	add.w	r0, r7, #28
 800918a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800918e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009192:	2b01      	cmp	r3, #1
 8009194:	d123      	bne.n	80091de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80091aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d105      	bne.n	80091d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 fae8 	bl	800a7a8 <USB_CoreReset>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
 80091dc:	e01b      	b.n	8009216 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 fadc 	bl	800a7a8 <USB_CoreReset>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80091f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d106      	bne.n	800920a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009200:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	639a      	str	r2, [r3, #56]	@ 0x38
 8009208:	e005      	b.n	8009216 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009216:	7fbb      	ldrb	r3, [r7, #30]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d10b      	bne.n	8009234 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f043 0206 	orr.w	r2, r3, #6
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f043 0220 	orr.w	r2, r3, #32
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009234:	7bfb      	ldrb	r3, [r7, #15]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009240:	b004      	add	sp, #16
 8009242:	4770      	bx	lr

08009244 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	4613      	mov	r3, r2
 8009250:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	2b02      	cmp	r3, #2
 8009256:	d165      	bne.n	8009324 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4a41      	ldr	r2, [pc, #260]	@ (8009360 <USB_SetTurnaroundTime+0x11c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d906      	bls.n	800926e <USB_SetTurnaroundTime+0x2a>
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4a40      	ldr	r2, [pc, #256]	@ (8009364 <USB_SetTurnaroundTime+0x120>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d202      	bcs.n	800926e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009268:	230f      	movs	r3, #15
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	e062      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	4a3c      	ldr	r2, [pc, #240]	@ (8009364 <USB_SetTurnaroundTime+0x120>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d306      	bcc.n	8009284 <USB_SetTurnaroundTime+0x40>
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	4a3b      	ldr	r2, [pc, #236]	@ (8009368 <USB_SetTurnaroundTime+0x124>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d202      	bcs.n	8009284 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800927e:	230e      	movs	r3, #14
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	e057      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4a38      	ldr	r2, [pc, #224]	@ (8009368 <USB_SetTurnaroundTime+0x124>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d306      	bcc.n	800929a <USB_SetTurnaroundTime+0x56>
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	4a37      	ldr	r2, [pc, #220]	@ (800936c <USB_SetTurnaroundTime+0x128>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d202      	bcs.n	800929a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009294:	230d      	movs	r3, #13
 8009296:	617b      	str	r3, [r7, #20]
 8009298:	e04c      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	4a33      	ldr	r2, [pc, #204]	@ (800936c <USB_SetTurnaroundTime+0x128>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d306      	bcc.n	80092b0 <USB_SetTurnaroundTime+0x6c>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	4a32      	ldr	r2, [pc, #200]	@ (8009370 <USB_SetTurnaroundTime+0x12c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d802      	bhi.n	80092b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80092aa:	230c      	movs	r3, #12
 80092ac:	617b      	str	r3, [r7, #20]
 80092ae:	e041      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4a2f      	ldr	r2, [pc, #188]	@ (8009370 <USB_SetTurnaroundTime+0x12c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d906      	bls.n	80092c6 <USB_SetTurnaroundTime+0x82>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	4a2e      	ldr	r2, [pc, #184]	@ (8009374 <USB_SetTurnaroundTime+0x130>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d802      	bhi.n	80092c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80092c0:	230b      	movs	r3, #11
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e036      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	4a2a      	ldr	r2, [pc, #168]	@ (8009374 <USB_SetTurnaroundTime+0x130>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d906      	bls.n	80092dc <USB_SetTurnaroundTime+0x98>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	4a29      	ldr	r2, [pc, #164]	@ (8009378 <USB_SetTurnaroundTime+0x134>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d802      	bhi.n	80092dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80092d6:	230a      	movs	r3, #10
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	e02b      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4a26      	ldr	r2, [pc, #152]	@ (8009378 <USB_SetTurnaroundTime+0x134>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d906      	bls.n	80092f2 <USB_SetTurnaroundTime+0xae>
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4a25      	ldr	r2, [pc, #148]	@ (800937c <USB_SetTurnaroundTime+0x138>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d202      	bcs.n	80092f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80092ec:	2309      	movs	r3, #9
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	e020      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	4a21      	ldr	r2, [pc, #132]	@ (800937c <USB_SetTurnaroundTime+0x138>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d306      	bcc.n	8009308 <USB_SetTurnaroundTime+0xc4>
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	4a20      	ldr	r2, [pc, #128]	@ (8009380 <USB_SetTurnaroundTime+0x13c>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d802      	bhi.n	8009308 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009302:	2308      	movs	r3, #8
 8009304:	617b      	str	r3, [r7, #20]
 8009306:	e015      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	4a1d      	ldr	r2, [pc, #116]	@ (8009380 <USB_SetTurnaroundTime+0x13c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d906      	bls.n	800931e <USB_SetTurnaroundTime+0xda>
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	4a1c      	ldr	r2, [pc, #112]	@ (8009384 <USB_SetTurnaroundTime+0x140>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d202      	bcs.n	800931e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009318:	2307      	movs	r3, #7
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	e00a      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800931e:	2306      	movs	r3, #6
 8009320:	617b      	str	r3, [r7, #20]
 8009322:	e007      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d102      	bne.n	8009330 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800932a:	2309      	movs	r3, #9
 800932c:	617b      	str	r3, [r7, #20]
 800932e:	e001      	b.n	8009334 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009330:	2309      	movs	r3, #9
 8009332:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	029b      	lsls	r3, r3, #10
 8009348:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800934c:	431a      	orrs	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	371c      	adds	r7, #28
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	00d8acbf 	.word	0x00d8acbf
 8009364:	00e4e1c0 	.word	0x00e4e1c0
 8009368:	00f42400 	.word	0x00f42400
 800936c:	01067380 	.word	0x01067380
 8009370:	011a499f 	.word	0x011a499f
 8009374:	01312cff 	.word	0x01312cff
 8009378:	014ca43f 	.word	0x014ca43f
 800937c:	016e3600 	.word	0x016e3600
 8009380:	01a6ab1f 	.word	0x01a6ab1f
 8009384:	01e84800 	.word	0x01e84800

08009388 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f043 0201 	orr.w	r2, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f023 0201 	bic.w	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d115      	bne.n	800941a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093fa:	200a      	movs	r0, #10
 80093fc:	f7fd face 	bl	800699c <HAL_Delay>
      ms += 10U;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	330a      	adds	r3, #10
 8009404:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 f93f 	bl	800a68a <USB_GetMode>
 800940c:	4603      	mov	r3, r0
 800940e:	2b01      	cmp	r3, #1
 8009410:	d01e      	beq.n	8009450 <USB_SetCurrentMode+0x84>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2bc7      	cmp	r3, #199	@ 0xc7
 8009416:	d9f0      	bls.n	80093fa <USB_SetCurrentMode+0x2e>
 8009418:	e01a      	b.n	8009450 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d115      	bne.n	800944c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800942c:	200a      	movs	r0, #10
 800942e:	f7fd fab5 	bl	800699c <HAL_Delay>
      ms += 10U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	330a      	adds	r3, #10
 8009436:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 f926 	bl	800a68a <USB_GetMode>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d005      	beq.n	8009450 <USB_SetCurrentMode+0x84>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2bc7      	cmp	r3, #199	@ 0xc7
 8009448:	d9f0      	bls.n	800942c <USB_SetCurrentMode+0x60>
 800944a:	e001      	b.n	8009450 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e005      	b.n	800945c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2bc8      	cmp	r3, #200	@ 0xc8
 8009454:	d101      	bne.n	800945a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e000      	b.n	800945c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009464:	b084      	sub	sp, #16
 8009466:	b580      	push	{r7, lr}
 8009468:	b086      	sub	sp, #24
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800947e:	2300      	movs	r3, #0
 8009480:	613b      	str	r3, [r7, #16]
 8009482:	e009      	b.n	8009498 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	3340      	adds	r3, #64	@ 0x40
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	2200      	movs	r2, #0
 8009490:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	3301      	adds	r3, #1
 8009496:	613b      	str	r3, [r7, #16]
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	2b0e      	cmp	r3, #14
 800949c:	d9f2      	bls.n	8009484 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800949e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d11c      	bne.n	80094e0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094b4:	f043 0302 	orr.w	r3, r3, #2
 80094b8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80094de:	e00b      	b.n	80094f8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094fe:	461a      	mov	r2, r3
 8009500:	2300      	movs	r3, #0
 8009502:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009504:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009508:	2b01      	cmp	r3, #1
 800950a:	d10d      	bne.n	8009528 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800950c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009510:	2b00      	cmp	r3, #0
 8009512:	d104      	bne.n	800951e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009514:	2100      	movs	r1, #0
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f968 	bl	80097ec <USB_SetDevSpeed>
 800951c:	e008      	b.n	8009530 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800951e:	2101      	movs	r1, #1
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f963 	bl	80097ec <USB_SetDevSpeed>
 8009526:	e003      	b.n	8009530 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009528:	2103      	movs	r1, #3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f95e 	bl	80097ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009530:	2110      	movs	r1, #16
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f8fa 	bl	800972c <USB_FlushTxFifo>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f924 	bl	8009790 <USB_FlushRxFifo>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009558:	461a      	mov	r2, r3
 800955a:	2300      	movs	r3, #0
 800955c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009564:	461a      	mov	r2, r3
 8009566:	2300      	movs	r3, #0
 8009568:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009570:	461a      	mov	r2, r3
 8009572:	2300      	movs	r3, #0
 8009574:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009576:	2300      	movs	r3, #0
 8009578:	613b      	str	r3, [r7, #16]
 800957a:	e043      	b.n	8009604 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800958e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009592:	d118      	bne.n	80095c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10a      	bne.n	80095b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a6:	461a      	mov	r2, r3
 80095a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	e013      	b.n	80095d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095bc:	461a      	mov	r2, r3
 80095be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	e008      	b.n	80095d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d2:	461a      	mov	r2, r3
 80095d4:	2300      	movs	r3, #0
 80095d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	015a      	lsls	r2, r3, #5
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	4413      	add	r3, r2
 80095e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095e4:	461a      	mov	r2, r3
 80095e6:	2300      	movs	r3, #0
 80095e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095f6:	461a      	mov	r2, r3
 80095f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80095fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	3301      	adds	r3, #1
 8009602:	613b      	str	r3, [r7, #16]
 8009604:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009608:	461a      	mov	r2, r3
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	4293      	cmp	r3, r2
 800960e:	d3b5      	bcc.n	800957c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009610:	2300      	movs	r3, #0
 8009612:	613b      	str	r3, [r7, #16]
 8009614:	e043      	b.n	800969e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800962c:	d118      	bne.n	8009660 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10a      	bne.n	800964a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009640:	461a      	mov	r2, r3
 8009642:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	e013      	b.n	8009672 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009656:	461a      	mov	r2, r3
 8009658:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	e008      	b.n	8009672 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4413      	add	r3, r2
 8009668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800966c:	461a      	mov	r2, r3
 800966e:	2300      	movs	r3, #0
 8009670:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800967e:	461a      	mov	r2, r3
 8009680:	2300      	movs	r3, #0
 8009682:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009690:	461a      	mov	r2, r3
 8009692:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009696:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	3301      	adds	r3, #1
 800969c:	613b      	str	r3, [r7, #16]
 800969e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096a2:	461a      	mov	r2, r3
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d3b5      	bcc.n	8009616 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80096ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80096cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d105      	bne.n	80096e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	f043 0210 	orr.w	r2, r3, #16
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	699a      	ldr	r2, [r3, #24]
 80096e4:	4b10      	ldr	r3, [pc, #64]	@ (8009728 <USB_DevInit+0x2c4>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d005      	beq.n	8009700 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	f043 0208 	orr.w	r2, r3, #8
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009700:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009704:	2b01      	cmp	r3, #1
 8009706:	d107      	bne.n	8009718 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009710:	f043 0304 	orr.w	r3, r3, #4
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009724:	b004      	add	sp, #16
 8009726:	4770      	bx	lr
 8009728:	803c3800 	.word	0x803c3800

0800972c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3301      	adds	r3, #1
 800973e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009746:	d901      	bls.n	800974c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e01b      	b.n	8009784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	daf2      	bge.n	800973a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009754:	2300      	movs	r3, #0
 8009756:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	019b      	lsls	r3, r3, #6
 800975c:	f043 0220 	orr.w	r2, r3, #32
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	3301      	adds	r3, #1
 8009768:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009770:	d901      	bls.n	8009776 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e006      	b.n	8009784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	2b20      	cmp	r3, #32
 8009780:	d0f0      	beq.n	8009764 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3301      	adds	r3, #1
 80097a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097a8:	d901      	bls.n	80097ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e018      	b.n	80097e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	daf2      	bge.n	800979c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2210      	movs	r2, #16
 80097be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097cc:	d901      	bls.n	80097d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e006      	b.n	80097e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b10      	cmp	r3, #16
 80097dc:	d0f0      	beq.n	80097c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	78fb      	ldrb	r3, [r7, #3]
 8009806:	68f9      	ldr	r1, [r7, #12]
 8009808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800980c:	4313      	orrs	r3, r2
 800980e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800981e:	b480      	push	{r7}
 8009820:	b087      	sub	sp, #28
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f003 0306 	and.w	r3, r3, #6
 8009836:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800983e:	2300      	movs	r3, #0
 8009840:	75fb      	strb	r3, [r7, #23]
 8009842:	e00a      	b.n	800985a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d002      	beq.n	8009850 <USB_GetDevSpeed+0x32>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b06      	cmp	r3, #6
 800984e:	d102      	bne.n	8009856 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009850:	2302      	movs	r3, #2
 8009852:	75fb      	strb	r3, [r7, #23]
 8009854:	e001      	b.n	800985a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009856:	230f      	movs	r3, #15
 8009858:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
}
 800985c:	4618      	mov	r0, r3
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	785b      	ldrb	r3, [r3, #1]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d13a      	bne.n	80098fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800988a:	69da      	ldr	r2, [r3, #28]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	2101      	movs	r1, #1
 8009896:	fa01 f303 	lsl.w	r3, r1, r3
 800989a:	b29b      	uxth	r3, r3
 800989c:	68f9      	ldr	r1, [r7, #12]
 800989e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098a2:	4313      	orrs	r3, r2
 80098a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d155      	bne.n	8009968 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	015a      	lsls	r2, r3, #5
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	791b      	ldrb	r3, [r3, #4]
 80098d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	059b      	lsls	r3, r3, #22
 80098de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098e0:	4313      	orrs	r3, r2
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	e036      	b.n	8009968 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009900:	69da      	ldr	r2, [r3, #28]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	f003 030f 	and.w	r3, r3, #15
 800990a:	2101      	movs	r1, #1
 800990c:	fa01 f303 	lsl.w	r3, r1, r3
 8009910:	041b      	lsls	r3, r3, #16
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009918:	4313      	orrs	r3, r2
 800991a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d11a      	bne.n	8009968 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	791b      	ldrb	r3, [r3, #4]
 800994c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800994e:	430b      	orrs	r3, r1
 8009950:	4313      	orrs	r3, r2
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	0151      	lsls	r1, r2, #5
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	440a      	add	r2, r1
 800995a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800995e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009966:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
	...

08009978 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	785b      	ldrb	r3, [r3, #1]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d161      	bne.n	8009a58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099aa:	d11f      	bne.n	80099ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	0151      	lsls	r1, r2, #5
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	440a      	add	r2, r1
 80099c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	0151      	lsls	r1, r2, #5
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	440a      	add	r2, r1
 80099e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	f003 030f 	and.w	r3, r3, #15
 80099fc:	2101      	movs	r1, #1
 80099fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	43db      	mvns	r3, r3
 8009a06:	68f9      	ldr	r1, [r7, #12]
 8009a08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a16:	69da      	ldr	r2, [r3, #28]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	f003 030f 	and.w	r3, r3, #15
 8009a20:	2101      	movs	r1, #1
 8009a22:	fa01 f303 	lsl.w	r3, r1, r3
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	43db      	mvns	r3, r3
 8009a2a:	68f9      	ldr	r1, [r7, #12]
 8009a2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a30:	4013      	ands	r3, r2
 8009a32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	015a      	lsls	r2, r3, #5
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	0159      	lsls	r1, r3, #5
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	440b      	add	r3, r1
 8009a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4b35      	ldr	r3, [pc, #212]	@ (8009b28 <USB_DeactivateEndpoint+0x1b0>)
 8009a52:	4013      	ands	r3, r2
 8009a54:	600b      	str	r3, [r1, #0]
 8009a56:	e060      	b.n	8009b1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a6e:	d11f      	bne.n	8009ab0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	0151      	lsls	r1, r2, #5
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	440a      	add	r2, r1
 8009a86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	0151      	lsls	r1, r2, #5
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	440a      	add	r2, r1
 8009aa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009aaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009aae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	f003 030f 	and.w	r3, r3, #15
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac6:	041b      	lsls	r3, r3, #16
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	68f9      	ldr	r1, [r7, #12]
 8009acc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ada:	69da      	ldr	r2, [r3, #28]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	f003 030f 	and.w	r3, r3, #15
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aea:	041b      	lsls	r3, r3, #16
 8009aec:	43db      	mvns	r3, r3
 8009aee:	68f9      	ldr	r1, [r7, #12]
 8009af0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009af4:	4013      	ands	r3, r2
 8009af6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	0159      	lsls	r1, r3, #5
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	440b      	add	r3, r1
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b12:	4619      	mov	r1, r3
 8009b14:	4b05      	ldr	r3, [pc, #20]	@ (8009b2c <USB_DeactivateEndpoint+0x1b4>)
 8009b16:	4013      	ands	r3, r2
 8009b18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	ec337800 	.word	0xec337800
 8009b2c:	eff37800 	.word	0xeff37800

08009b30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b08a      	sub	sp, #40	@ 0x28
 8009b34:	af02      	add	r7, sp, #8
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	785b      	ldrb	r3, [r3, #1]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	f040 817f 	bne.w	8009e50 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d132      	bne.n	8009bc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	015a      	lsls	r2, r3, #5
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	0151      	lsls	r1, r2, #5
 8009b6c:	69fa      	ldr	r2, [r7, #28]
 8009b6e:	440a      	add	r2, r1
 8009b70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b74:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009b78:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009b7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	015a      	lsls	r2, r3, #5
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	69ba      	ldr	r2, [r7, #24]
 8009b8e:	0151      	lsls	r1, r2, #5
 8009b90:	69fa      	ldr	r2, [r7, #28]
 8009b92:	440a      	add	r2, r1
 8009b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	0151      	lsls	r1, r2, #5
 8009bb0:	69fa      	ldr	r2, [r7, #28]
 8009bb2:	440a      	add	r2, r1
 8009bb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bb8:	0cdb      	lsrs	r3, r3, #19
 8009bba:	04db      	lsls	r3, r3, #19
 8009bbc:	6113      	str	r3, [r2, #16]
 8009bbe:	e097      	b.n	8009cf0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	69ba      	ldr	r2, [r7, #24]
 8009bd0:	0151      	lsls	r1, r2, #5
 8009bd2:	69fa      	ldr	r2, [r7, #28]
 8009bd4:	440a      	add	r2, r1
 8009bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bda:	0cdb      	lsrs	r3, r3, #19
 8009bdc:	04db      	lsls	r3, r3, #19
 8009bde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	0151      	lsls	r1, r2, #5
 8009bf2:	69fa      	ldr	r2, [r7, #28]
 8009bf4:	440a      	add	r2, r1
 8009bf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bfa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009bfe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c02:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d11a      	bne.n	8009c40 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	691a      	ldr	r2, [r3, #16]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d903      	bls.n	8009c1e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	689a      	ldr	r2, [r3, #8]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	69fa      	ldr	r2, [r7, #28]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c3c:	6113      	str	r3, [r2, #16]
 8009c3e:	e044      	b.n	8009cca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	691a      	ldr	r2, [r3, #16]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	4413      	add	r3, r2
 8009c4a:	1e5a      	subs	r2, r3, #1
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c54:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c62:	691a      	ldr	r2, [r3, #16]
 8009c64:	8afb      	ldrh	r3, [r7, #22]
 8009c66:	04d9      	lsls	r1, r3, #19
 8009c68:	4ba4      	ldr	r3, [pc, #656]	@ (8009efc <USB_EPStartXfer+0x3cc>)
 8009c6a:	400b      	ands	r3, r1
 8009c6c:	69b9      	ldr	r1, [r7, #24]
 8009c6e:	0148      	lsls	r0, r1, #5
 8009c70:	69f9      	ldr	r1, [r7, #28]
 8009c72:	4401      	add	r1, r0
 8009c74:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	791b      	ldrb	r3, [r3, #4]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d122      	bne.n	8009cca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	0151      	lsls	r1, r2, #5
 8009c96:	69fa      	ldr	r2, [r7, #28]
 8009c98:	440a      	add	r2, r1
 8009c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c9e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009ca2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb0:	691a      	ldr	r2, [r3, #16]
 8009cb2:	8afb      	ldrh	r3, [r7, #22]
 8009cb4:	075b      	lsls	r3, r3, #29
 8009cb6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009cba:	69b9      	ldr	r1, [r7, #24]
 8009cbc:	0148      	lsls	r0, r1, #5
 8009cbe:	69f9      	ldr	r1, [r7, #28]
 8009cc0:	4401      	add	r1, r0
 8009cc2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cd6:	691a      	ldr	r2, [r3, #16]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ce0:	69b9      	ldr	r1, [r7, #24]
 8009ce2:	0148      	lsls	r0, r1, #5
 8009ce4:	69f9      	ldr	r1, [r7, #28]
 8009ce6:	4401      	add	r1, r0
 8009ce8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009cec:	4313      	orrs	r3, r2
 8009cee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cf0:	79fb      	ldrb	r3, [r7, #7]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d14b      	bne.n	8009d8e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d009      	beq.n	8009d12 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	69db      	ldr	r3, [r3, #28]
 8009d10:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	791b      	ldrb	r3, [r3, #4]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d128      	bne.n	8009d6c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d110      	bne.n	8009d4c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	69ba      	ldr	r2, [r7, #24]
 8009d3a:	0151      	lsls	r1, r2, #5
 8009d3c:	69fa      	ldr	r2, [r7, #28]
 8009d3e:	440a      	add	r2, r1
 8009d40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d48:	6013      	str	r3, [r2, #0]
 8009d4a:	e00f      	b.n	8009d6c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	0151      	lsls	r1, r2, #5
 8009d5e:	69fa      	ldr	r2, [r7, #28]
 8009d60:	440a      	add	r2, r1
 8009d62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d6a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	0151      	lsls	r1, r2, #5
 8009d7e:	69fa      	ldr	r2, [r7, #28]
 8009d80:	440a      	add	r2, r1
 8009d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d86:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d8a:	6013      	str	r3, [r2, #0]
 8009d8c:	e166      	b.n	800a05c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	0151      	lsls	r1, r2, #5
 8009da0:	69fa      	ldr	r2, [r7, #28]
 8009da2:	440a      	add	r2, r1
 8009da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009da8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009dac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	791b      	ldrb	r3, [r3, #4]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d015      	beq.n	8009de2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 814e 	beq.w	800a05c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f003 030f 	and.w	r3, r3, #15
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd6:	69f9      	ldr	r1, [r7, #28]
 8009dd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	634b      	str	r3, [r1, #52]	@ 0x34
 8009de0:	e13c      	b.n	800a05c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d110      	bne.n	8009e14 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	69ba      	ldr	r2, [r7, #24]
 8009e02:	0151      	lsls	r1, r2, #5
 8009e04:	69fa      	ldr	r2, [r7, #28]
 8009e06:	440a      	add	r2, r1
 8009e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	e00f      	b.n	8009e34 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	69ba      	ldr	r2, [r7, #24]
 8009e24:	0151      	lsls	r1, r2, #5
 8009e26:	69fa      	ldr	r2, [r7, #28]
 8009e28:	440a      	add	r2, r1
 8009e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e32:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	68d9      	ldr	r1, [r3, #12]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	781a      	ldrb	r2, [r3, #0]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	b298      	uxth	r0, r3
 8009e42:	79fb      	ldrb	r3, [r7, #7]
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	4603      	mov	r3, r0
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 f9b9 	bl	800a1c0 <USB_WritePacket>
 8009e4e:	e105      	b.n	800a05c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	69ba      	ldr	r2, [r7, #24]
 8009e60:	0151      	lsls	r1, r2, #5
 8009e62:	69fa      	ldr	r2, [r7, #28]
 8009e64:	440a      	add	r2, r1
 8009e66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e6a:	0cdb      	lsrs	r3, r3, #19
 8009e6c:	04db      	lsls	r3, r3, #19
 8009e6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	0151      	lsls	r1, r2, #5
 8009e82:	69fa      	ldr	r2, [r7, #28]
 8009e84:	440a      	add	r2, r1
 8009e86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e8a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e8e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e92:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d132      	bne.n	8009f00 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	689a      	ldr	r2, [r3, #8]
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	689a      	ldr	r2, [r3, #8]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ec8:	69b9      	ldr	r1, [r7, #24]
 8009eca:	0148      	lsls	r0, r1, #5
 8009ecc:	69f9      	ldr	r1, [r7, #28]
 8009ece:	4401      	add	r1, r0
 8009ed0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	0151      	lsls	r1, r2, #5
 8009eea:	69fa      	ldr	r2, [r7, #28]
 8009eec:	440a      	add	r2, r1
 8009eee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ef2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ef6:	6113      	str	r3, [r2, #16]
 8009ef8:	e062      	b.n	8009fc0 <USB_EPStartXfer+0x490>
 8009efa:	bf00      	nop
 8009efc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d123      	bne.n	8009f50 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f14:	691a      	ldr	r2, [r3, #16]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f1e:	69b9      	ldr	r1, [r7, #24]
 8009f20:	0148      	lsls	r0, r1, #5
 8009f22:	69f9      	ldr	r1, [r7, #28]
 8009f24:	4401      	add	r1, r0
 8009f26:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	0151      	lsls	r1, r2, #5
 8009f40:	69fa      	ldr	r2, [r7, #28]
 8009f42:	440a      	add	r2, r1
 8009f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f4c:	6113      	str	r3, [r2, #16]
 8009f4e:	e037      	b.n	8009fc0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	691a      	ldr	r2, [r3, #16]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	4413      	add	r3, r2
 8009f5a:	1e5a      	subs	r2, r3, #1
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f64:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	8afa      	ldrh	r2, [r7, #22]
 8009f6c:	fb03 f202 	mul.w	r2, r3, r2
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f80:	691a      	ldr	r2, [r3, #16]
 8009f82:	8afb      	ldrh	r3, [r7, #22]
 8009f84:	04d9      	lsls	r1, r3, #19
 8009f86:	4b38      	ldr	r3, [pc, #224]	@ (800a068 <USB_EPStartXfer+0x538>)
 8009f88:	400b      	ands	r3, r1
 8009f8a:	69b9      	ldr	r1, [r7, #24]
 8009f8c:	0148      	lsls	r0, r1, #5
 8009f8e:	69f9      	ldr	r1, [r7, #28]
 8009f90:	4401      	add	r1, r0
 8009f92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f96:	4313      	orrs	r3, r2
 8009f98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	015a      	lsls	r2, r3, #5
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa6:	691a      	ldr	r2, [r3, #16]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fb0:	69b9      	ldr	r1, [r7, #24]
 8009fb2:	0148      	lsls	r0, r1, #5
 8009fb4:	69f9      	ldr	r1, [r7, #28]
 8009fb6:	4401      	add	r1, r0
 8009fb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d10d      	bne.n	8009fe2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d009      	beq.n	8009fe2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	68d9      	ldr	r1, [r3, #12]
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fde:	460a      	mov	r2, r1
 8009fe0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	791b      	ldrb	r3, [r3, #4]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d128      	bne.n	800a03c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d110      	bne.n	800a01c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	69ba      	ldr	r2, [r7, #24]
 800a00a:	0151      	lsls	r1, r2, #5
 800a00c:	69fa      	ldr	r2, [r7, #28]
 800a00e:	440a      	add	r2, r1
 800a010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a014:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a018:	6013      	str	r3, [r2, #0]
 800a01a:	e00f      	b.n	800a03c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	4413      	add	r3, r2
 800a024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	0151      	lsls	r1, r2, #5
 800a02e:	69fa      	ldr	r2, [r7, #28]
 800a030:	440a      	add	r2, r1
 800a032:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a03a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	0151      	lsls	r1, r2, #5
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	440a      	add	r2, r1
 800a052:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a056:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a05a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3720      	adds	r7, #32
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	1ff80000 	.word	0x1ff80000

0800a06c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a076:	2300      	movs	r3, #0
 800a078:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	785b      	ldrb	r3, [r3, #1]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d14a      	bne.n	800a120 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	4413      	add	r3, r2
 800a094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a09e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0a2:	f040 8086 	bne.w	800a1b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	7812      	ldrb	r2, [r2, #0]
 800a0ba:	0151      	lsls	r1, r2, #5
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	440a      	add	r2, r1
 800a0c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	7812      	ldrb	r2, [r2, #0]
 800a0de:	0151      	lsls	r1, r2, #5
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	440a      	add	r2, r1
 800a0e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d902      	bls.n	800a104 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	75fb      	strb	r3, [r7, #23]
          break;
 800a102:	e056      	b.n	800a1b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	015a      	lsls	r2, r3, #5
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	4413      	add	r3, r2
 800a10e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a11c:	d0e7      	beq.n	800a0ee <USB_EPStopXfer+0x82>
 800a11e:	e048      	b.n	800a1b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	015a      	lsls	r2, r3, #5
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	4413      	add	r3, r2
 800a12a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a138:	d13b      	bne.n	800a1b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	4413      	add	r3, r2
 800a144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	7812      	ldrb	r2, [r2, #0]
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	440a      	add	r2, r1
 800a154:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a158:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a15c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	7812      	ldrb	r2, [r2, #0]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	440a      	add	r2, r1
 800a178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a17c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a180:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	3301      	adds	r3, #1
 800a186:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a18e:	4293      	cmp	r3, r2
 800a190:	d902      	bls.n	800a198 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	75fb      	strb	r3, [r7, #23]
          break;
 800a196:	e00c      	b.n	800a1b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	015a      	lsls	r2, r3, #5
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1b0:	d0e7      	beq.n	800a182 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	371c      	adds	r7, #28
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b089      	sub	sp, #36	@ 0x24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	71fb      	strb	r3, [r7, #7]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d123      	bne.n	800a22e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1e6:	88bb      	ldrh	r3, [r7, #4]
 800a1e8:	3303      	adds	r3, #3
 800a1ea:	089b      	lsrs	r3, r3, #2
 800a1ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	61bb      	str	r3, [r7, #24]
 800a1f2:	e018      	b.n	800a226 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	031a      	lsls	r2, r3, #12
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a200:	461a      	mov	r2, r3
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	3301      	adds	r3, #1
 800a20c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	3301      	adds	r3, #1
 800a212:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	3301      	adds	r3, #1
 800a218:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	3301      	adds	r3, #1
 800a21e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	3301      	adds	r3, #1
 800a224:	61bb      	str	r3, [r7, #24]
 800a226:	69ba      	ldr	r2, [r7, #24]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d3e2      	bcc.n	800a1f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3724      	adds	r7, #36	@ 0x24
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b08b      	sub	sp, #44	@ 0x2c
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	4613      	mov	r3, r2
 800a248:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a252:	88fb      	ldrh	r3, [r7, #6]
 800a254:	089b      	lsrs	r3, r3, #2
 800a256:	b29b      	uxth	r3, r3
 800a258:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a25a:	88fb      	ldrh	r3, [r7, #6]
 800a25c:	f003 0303 	and.w	r3, r3, #3
 800a260:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a262:	2300      	movs	r3, #0
 800a264:	623b      	str	r3, [r7, #32]
 800a266:	e014      	b.n	800a292 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	601a      	str	r2, [r3, #0]
    pDest++;
 800a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a276:	3301      	adds	r3, #1
 800a278:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27c:	3301      	adds	r3, #1
 800a27e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a282:	3301      	adds	r3, #1
 800a284:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	3301      	adds	r3, #1
 800a28a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	3301      	adds	r3, #1
 800a290:	623b      	str	r3, [r7, #32]
 800a292:	6a3a      	ldr	r2, [r7, #32]
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	429a      	cmp	r2, r3
 800a298:	d3e6      	bcc.n	800a268 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a29a:	8bfb      	ldrh	r3, [r7, #30]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d01e      	beq.n	800a2de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f107 0310 	add.w	r3, r7, #16
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	00db      	lsls	r3, r3, #3
 800a2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c4:	701a      	strb	r2, [r3, #0]
      i++;
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a2d2:	8bfb      	ldrh	r3, [r7, #30]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2d8:	8bfb      	ldrh	r3, [r7, #30]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1ea      	bne.n	800a2b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	372c      	adds	r7, #44	@ 0x2c
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	785b      	ldrb	r3, [r3, #1]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d12c      	bne.n	800a362 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	db12      	blt.n	800a340 <USB_EPSetStall+0x54>
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00f      	beq.n	800a340 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	015a      	lsls	r2, r3, #5
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	4413      	add	r3, r2
 800a328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	0151      	lsls	r1, r2, #5
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	440a      	add	r2, r1
 800a336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a33a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a33e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	0151      	lsls	r1, r2, #5
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	440a      	add	r2, r1
 800a356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a35a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	e02b      	b.n	800a3ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	db12      	blt.n	800a39a <USB_EPSetStall+0xae>
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00f      	beq.n	800a39a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	4413      	add	r3, r2
 800a382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	0151      	lsls	r1, r2, #5
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	440a      	add	r2, r1
 800a390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a394:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a398:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a3b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	785b      	ldrb	r3, [r3, #1]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d128      	bne.n	800a436 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	0151      	lsls	r1, r2, #5
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	440a      	add	r2, r1
 800a3fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a402:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	791b      	ldrb	r3, [r3, #4]
 800a408:	2b03      	cmp	r3, #3
 800a40a:	d003      	beq.n	800a414 <USB_EPClearStall+0x4c>
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	791b      	ldrb	r3, [r3, #4]
 800a410:	2b02      	cmp	r3, #2
 800a412:	d138      	bne.n	800a486 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	015a      	lsls	r2, r3, #5
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	4413      	add	r3, r2
 800a41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	0151      	lsls	r1, r2, #5
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	440a      	add	r2, r1
 800a42a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a42e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a432:	6013      	str	r3, [r2, #0]
 800a434:	e027      	b.n	800a486 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	0151      	lsls	r1, r2, #5
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	440a      	add	r2, r1
 800a44c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a450:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a454:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	791b      	ldrb	r3, [r3, #4]
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d003      	beq.n	800a466 <USB_EPClearStall+0x9e>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	791b      	ldrb	r3, [r3, #4]
 800a462:	2b02      	cmp	r3, #2
 800a464:	d10f      	bne.n	800a486 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	0151      	lsls	r1, r2, #5
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	440a      	add	r2, r1
 800a47c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a484:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a4b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	011b      	lsls	r3, r3, #4
 800a4c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a4c8:	68f9      	ldr	r1, [r7, #12]
 800a4ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4fa:	f023 0303 	bic.w	r3, r3, #3
 800a4fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a50e:	f023 0302 	bic.w	r3, r3, #2
 800a512:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a522:	b480      	push	{r7}
 800a524:	b085      	sub	sp, #20
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a53c:	f023 0303 	bic.w	r3, r3, #3
 800a540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a550:	f043 0302 	orr.w	r3, r3, #2
 800a554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	4013      	ands	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a57c:	68fb      	ldr	r3, [r7, #12]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b085      	sub	sp, #20
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	0c1b      	lsrs	r3, r3, #16
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5da:	69db      	ldr	r3, [r3, #28]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	b29b      	uxth	r3, r3
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b085      	sub	sp, #20
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a602:	78fb      	ldrb	r3, [r7, #3]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	4013      	ands	r3, r2
 800a61e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a620:	68bb      	ldr	r3, [r7, #8]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a62e:	b480      	push	{r7}
 800a630:	b087      	sub	sp, #28
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	460b      	mov	r3, r1
 800a638:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a64e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a650:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a652:	78fb      	ldrb	r3, [r7, #3]
 800a654:	f003 030f 	and.w	r3, r3, #15
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	fa22 f303 	lsr.w	r3, r2, r3
 800a65e:	01db      	lsls	r3, r3, #7
 800a660:	b2db      	uxtb	r3, r3
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	4313      	orrs	r3, r2
 800a666:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a668:	78fb      	ldrb	r3, [r7, #3]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	4013      	ands	r3, r2
 800a67a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a67c:	68bb      	ldr	r3, [r7, #8]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	371c      	adds	r7, #28
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	695b      	ldr	r3, [r3, #20]
 800a696:	f003 0301 	and.w	r3, r3, #1
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b085      	sub	sp, #20
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a6c4:	f023 0307 	bic.w	r3, r3, #7
 800a6c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b087      	sub	sp, #28
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	333c      	adds	r3, #60	@ 0x3c
 800a702:	3304      	adds	r3, #4
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	4a26      	ldr	r2, [pc, #152]	@ (800a7a4 <USB_EP0_OutStart+0xb8>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d90a      	bls.n	800a726 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a71c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a720:	d101      	bne.n	800a726 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	e037      	b.n	800a796 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a72c:	461a      	mov	r2, r3
 800a72e:	2300      	movs	r3, #0
 800a730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a740:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a754:	f043 0318 	orr.w	r3, r3, #24
 800a758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a768:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a76c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a76e:	7afb      	ldrb	r3, [r7, #11]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d10f      	bne.n	800a794 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a77a:	461a      	mov	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a78e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	371c      	adds	r7, #28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	4f54300a 	.word	0x4f54300a

0800a7a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7c0:	d901      	bls.n	800a7c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e01b      	b.n	800a7fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	daf2      	bge.n	800a7b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	f043 0201 	orr.w	r2, r3, #1
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7ea:	d901      	bls.n	800a7f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e006      	b.n	800a7fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	f003 0301 	and.w	r3, r3, #1
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d0f0      	beq.n	800a7de <USB_CoreReset+0x36>

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
	...

0800a80c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a818:	2010      	movs	r0, #16
 800a81a:	f002 f921 	bl	800ca60 <USBD_static_malloc>
 800a81e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d109      	bne.n	800a83a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	32b0      	adds	r2, #176	@ 0xb0
 800a830:	2100      	movs	r1, #0
 800a832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a836:	2302      	movs	r3, #2
 800a838:	e048      	b.n	800a8cc <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	32b0      	adds	r2, #176	@ 0xb0
 800a844:	68f9      	ldr	r1, [r7, #12]
 800a846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	32b0      	adds	r2, #176	@ 0xb0
 800a854:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	7c1b      	ldrb	r3, [r3, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10d      	bne.n	800a882 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800a866:	4b1b      	ldr	r3, [pc, #108]	@ (800a8d4 <USBD_HID_Init+0xc8>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	f003 020f 	and.w	r2, r3, #15
 800a86e:	6879      	ldr	r1, [r7, #4]
 800a870:	4613      	mov	r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	440b      	add	r3, r1
 800a87a:	3326      	adds	r3, #38	@ 0x26
 800a87c:	2207      	movs	r2, #7
 800a87e:	801a      	strh	r2, [r3, #0]
 800a880:	e00c      	b.n	800a89c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800a882:	4b14      	ldr	r3, [pc, #80]	@ (800a8d4 <USBD_HID_Init+0xc8>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	f003 020f 	and.w	r2, r3, #15
 800a88a:	6879      	ldr	r1, [r7, #4]
 800a88c:	4613      	mov	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4413      	add	r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	440b      	add	r3, r1
 800a896:	3326      	adds	r3, #38	@ 0x26
 800a898:	220a      	movs	r2, #10
 800a89a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a89c:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d4 <USBD_HID_Init+0xc8>)
 800a89e:	7819      	ldrb	r1, [r3, #0]
 800a8a0:	2304      	movs	r3, #4
 800a8a2:	2203      	movs	r2, #3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f001 ffca 	bl	800c83e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800a8aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a8d4 <USBD_HID_Init+0xc8>)
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	f003 020f 	and.w	r2, r3, #15
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	440b      	add	r3, r1
 800a8be:	3324      	adds	r3, #36	@ 0x24
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	200000bf 	.word	0x200000bf

0800a8d8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800a8e4:	4b1f      	ldr	r3, [pc, #124]	@ (800a964 <USBD_HID_DeInit+0x8c>)
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f001 ffcd 	bl	800c88a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800a8f0:	4b1c      	ldr	r3, [pc, #112]	@ (800a964 <USBD_HID_DeInit+0x8c>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	f003 020f 	and.w	r2, r3, #15
 800a8f8:	6879      	ldr	r1, [r7, #4]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	440b      	add	r3, r1
 800a904:	3324      	adds	r3, #36	@ 0x24
 800a906:	2200      	movs	r2, #0
 800a908:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800a90a:	4b16      	ldr	r3, [pc, #88]	@ (800a964 <USBD_HID_DeInit+0x8c>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 020f 	and.w	r2, r3, #15
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	4613      	mov	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	440b      	add	r3, r1
 800a91e:	3326      	adds	r3, #38	@ 0x26
 800a920:	2200      	movs	r2, #0
 800a922:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	32b0      	adds	r2, #176	@ 0xb0
 800a92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d011      	beq.n	800a95a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	32b0      	adds	r2, #176	@ 0xb0
 800a940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a944:	4618      	mov	r0, r3
 800a946:	f002 f899 	bl	800ca7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	32b0      	adds	r2, #176	@ 0xb0
 800a954:	2100      	movs	r1, #0
 800a956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	200000bf 	.word	0x200000bf

0800a968 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	32b0      	adds	r2, #176	@ 0xb0
 800a97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a980:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a990:	2303      	movs	r3, #3
 800a992:	e0e8      	b.n	800ab66 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d046      	beq.n	800aa2e <USBD_HID_Setup+0xc6>
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	f040 80d8 	bne.w	800ab56 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	785b      	ldrb	r3, [r3, #1]
 800a9aa:	3b02      	subs	r3, #2
 800a9ac:	2b09      	cmp	r3, #9
 800a9ae:	d836      	bhi.n	800aa1e <USBD_HID_Setup+0xb6>
 800a9b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b8 <USBD_HID_Setup+0x50>)
 800a9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b6:	bf00      	nop
 800a9b8:	0800aa0f 	.word	0x0800aa0f
 800a9bc:	0800a9ef 	.word	0x0800a9ef
 800a9c0:	0800aa1f 	.word	0x0800aa1f
 800a9c4:	0800aa1f 	.word	0x0800aa1f
 800a9c8:	0800aa1f 	.word	0x0800aa1f
 800a9cc:	0800aa1f 	.word	0x0800aa1f
 800a9d0:	0800aa1f 	.word	0x0800aa1f
 800a9d4:	0800aa1f 	.word	0x0800aa1f
 800a9d8:	0800a9fd 	.word	0x0800a9fd
 800a9dc:	0800a9e1 	.word	0x0800a9e1
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	885b      	ldrh	r3, [r3, #2]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	601a      	str	r2, [r3, #0]
          break;
 800a9ec:	e01e      	b.n	800aa2c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f001 fbe5 	bl	800c1c4 <USBD_CtlSendData>
          break;
 800a9fa:	e017      	b.n	800aa2c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	885b      	ldrh	r3, [r3, #2]
 800aa00:	0a1b      	lsrs	r3, r3, #8
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	461a      	mov	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	605a      	str	r2, [r3, #4]
          break;
 800aa0c:	e00e      	b.n	800aa2c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3304      	adds	r3, #4
 800aa12:	2201      	movs	r2, #1
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 fbd4 	bl	800c1c4 <USBD_CtlSendData>
          break;
 800aa1c:	e006      	b.n	800aa2c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f001 fb52 	bl	800c0ca <USBD_CtlError>
          ret = USBD_FAIL;
 800aa26:	2303      	movs	r3, #3
 800aa28:	75fb      	strb	r3, [r7, #23]
          break;
 800aa2a:	bf00      	nop
      }
      break;
 800aa2c:	e09a      	b.n	800ab64 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	785b      	ldrb	r3, [r3, #1]
 800aa32:	2b0b      	cmp	r3, #11
 800aa34:	f200 8086 	bhi.w	800ab44 <USBD_HID_Setup+0x1dc>
 800aa38:	a201      	add	r2, pc, #4	@ (adr r2, 800aa40 <USBD_HID_Setup+0xd8>)
 800aa3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3e:	bf00      	nop
 800aa40:	0800aa71 	.word	0x0800aa71
 800aa44:	0800ab53 	.word	0x0800ab53
 800aa48:	0800ab45 	.word	0x0800ab45
 800aa4c:	0800ab45 	.word	0x0800ab45
 800aa50:	0800ab45 	.word	0x0800ab45
 800aa54:	0800ab45 	.word	0x0800ab45
 800aa58:	0800aa9b 	.word	0x0800aa9b
 800aa5c:	0800ab45 	.word	0x0800ab45
 800aa60:	0800ab45 	.word	0x0800ab45
 800aa64:	0800ab45 	.word	0x0800ab45
 800aa68:	0800aaf3 	.word	0x0800aaf3
 800aa6c:	0800ab1d 	.word	0x0800ab1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d107      	bne.n	800aa8c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa7c:	f107 030a 	add.w	r3, r7, #10
 800aa80:	2202      	movs	r2, #2
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f001 fb9d 	bl	800c1c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa8a:	e063      	b.n	800ab54 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f001 fb1b 	bl	800c0ca <USBD_CtlError>
            ret = USBD_FAIL;
 800aa94:	2303      	movs	r3, #3
 800aa96:	75fb      	strb	r3, [r7, #23]
          break;
 800aa98:	e05c      	b.n	800ab54 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	885b      	ldrh	r3, [r3, #2]
 800aa9e:	0a1b      	lsrs	r3, r3, #8
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	2b22      	cmp	r3, #34	@ 0x22
 800aaa4:	d108      	bne.n	800aab8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	88db      	ldrh	r3, [r3, #6]
 800aaaa:	2b3f      	cmp	r3, #63	@ 0x3f
 800aaac:	bf28      	it	cs
 800aaae:	233f      	movcs	r3, #63	@ 0x3f
 800aab0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800aab2:	4b2f      	ldr	r3, [pc, #188]	@ (800ab70 <USBD_HID_Setup+0x208>)
 800aab4:	613b      	str	r3, [r7, #16]
 800aab6:	e015      	b.n	800aae4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	885b      	ldrh	r3, [r3, #2]
 800aabc:	0a1b      	lsrs	r3, r3, #8
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	2b21      	cmp	r3, #33	@ 0x21
 800aac2:	d108      	bne.n	800aad6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800aac4:	4b2b      	ldr	r3, [pc, #172]	@ (800ab74 <USBD_HID_Setup+0x20c>)
 800aac6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	88db      	ldrh	r3, [r3, #6]
 800aacc:	2b09      	cmp	r3, #9
 800aace:	bf28      	it	cs
 800aad0:	2309      	movcs	r3, #9
 800aad2:	82bb      	strh	r3, [r7, #20]
 800aad4:	e006      	b.n	800aae4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f001 faf6 	bl	800c0ca <USBD_CtlError>
            ret = USBD_FAIL;
 800aade:	2303      	movs	r3, #3
 800aae0:	75fb      	strb	r3, [r7, #23]
            break;
 800aae2:	e037      	b.n	800ab54 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800aae4:	8abb      	ldrh	r3, [r7, #20]
 800aae6:	461a      	mov	r2, r3
 800aae8:	6939      	ldr	r1, [r7, #16]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f001 fb6a 	bl	800c1c4 <USBD_CtlSendData>
          break;
 800aaf0:	e030      	b.n	800ab54 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d107      	bne.n	800ab0e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3308      	adds	r3, #8
 800ab02:	2201      	movs	r2, #1
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f001 fb5c 	bl	800c1c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab0c:	e022      	b.n	800ab54 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f001 fada 	bl	800c0ca <USBD_CtlError>
            ret = USBD_FAIL;
 800ab16:	2303      	movs	r3, #3
 800ab18:	75fb      	strb	r3, [r7, #23]
          break;
 800ab1a:	e01b      	b.n	800ab54 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d106      	bne.n	800ab36 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	885b      	ldrh	r3, [r3, #2]
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	461a      	mov	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab34:	e00e      	b.n	800ab54 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f001 fac6 	bl	800c0ca <USBD_CtlError>
            ret = USBD_FAIL;
 800ab3e:	2303      	movs	r3, #3
 800ab40:	75fb      	strb	r3, [r7, #23]
          break;
 800ab42:	e007      	b.n	800ab54 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f001 fabf 	bl	800c0ca <USBD_CtlError>
          ret = USBD_FAIL;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	75fb      	strb	r3, [r7, #23]
          break;
 800ab50:	e000      	b.n	800ab54 <USBD_HID_Setup+0x1ec>
          break;
 800ab52:	bf00      	nop
      }
      break;
 800ab54:	e006      	b.n	800ab64 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800ab56:	6839      	ldr	r1, [r7, #0]
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f001 fab6 	bl	800c0ca <USBD_CtlError>
      ret = USBD_FAIL;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	75fb      	strb	r3, [r7, #23]
      break;
 800ab62:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20000080 	.word	0x20000080
 800ab74:	20000068 	.word	0x20000068

0800ab78 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	4613      	mov	r3, r2
 800ab84:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	32b0      	adds	r2, #176	@ 0xb0
 800ab90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab94:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e014      	b.n	800abca <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d10d      	bne.n	800abc8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	7b1b      	ldrb	r3, [r3, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d109      	bne.n	800abc8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2201      	movs	r2, #1
 800abb8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800abba:	4b06      	ldr	r3, [pc, #24]	@ (800abd4 <USBD_HID_SendReport+0x5c>)
 800abbc:	7819      	ldrb	r1, [r3, #0]
 800abbe:	88fb      	ldrh	r3, [r7, #6]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f001 ff09 	bl	800c9da <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3718      	adds	r7, #24
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	200000bf 	.word	0x200000bf

0800abd8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800abe0:	2181      	movs	r1, #129	@ 0x81
 800abe2:	4809      	ldr	r0, [pc, #36]	@ (800ac08 <USBD_HID_GetFSCfgDesc+0x30>)
 800abe4:	f000 fc3b 	bl	800b45e <USBD_GetEpDesc>
 800abe8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	220a      	movs	r2, #10
 800abf4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2222      	movs	r2, #34	@ 0x22
 800abfa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800abfc:	4b02      	ldr	r3, [pc, #8]	@ (800ac08 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20000044 	.word	0x20000044

0800ac0c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800ac14:	2181      	movs	r1, #129	@ 0x81
 800ac16:	4809      	ldr	r0, [pc, #36]	@ (800ac3c <USBD_HID_GetHSCfgDesc+0x30>)
 800ac18:	f000 fc21 	bl	800b45e <USBD_GetEpDesc>
 800ac1c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d002      	beq.n	800ac2a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2207      	movs	r2, #7
 800ac28:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2222      	movs	r2, #34	@ 0x22
 800ac2e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800ac30:	4b02      	ldr	r3, [pc, #8]	@ (800ac3c <USBD_HID_GetHSCfgDesc+0x30>)
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20000044 	.word	0x20000044

0800ac40 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800ac48:	2181      	movs	r1, #129	@ 0x81
 800ac4a:	4809      	ldr	r0, [pc, #36]	@ (800ac70 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800ac4c:	f000 fc07 	bl	800b45e <USBD_GetEpDesc>
 800ac50:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	220a      	movs	r2, #10
 800ac5c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2222      	movs	r2, #34	@ 0x22
 800ac62:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800ac64:	4b02      	ldr	r3, [pc, #8]	@ (800ac70 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	20000044 	.word	0x20000044

0800ac74 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	32b0      	adds	r2, #176	@ 0xb0
 800ac8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	220a      	movs	r2, #10
 800acac:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800acae:	4b03      	ldr	r3, [pc, #12]	@ (800acbc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	20000074 	.word	0x20000074

0800acc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	4613      	mov	r3, r2
 800accc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d101      	bne.n	800acd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e01f      	b.n	800ad18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	79fa      	ldrb	r2, [r7, #7]
 800ad0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f001 fd2f 	bl	800c770 <USBD_LL_Init>
 800ad12:	4603      	mov	r3, r0
 800ad14:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3718      	adds	r7, #24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e025      	b.n	800ad84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	32ae      	adds	r2, #174	@ 0xae
 800ad4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00f      	beq.n	800ad74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	32ae      	adds	r2, #174	@ 0xae
 800ad5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad64:	f107 020e 	add.w	r2, r7, #14
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4798      	blx	r3
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f001 fd37 	bl	800c808 <USBD_LL_Start>
 800ad9a:	4603      	mov	r3, r0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800adae:	4618      	mov	r0, r3
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	460b      	mov	r3, r1
 800adc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800add0:	2b00      	cmp	r3, #0
 800add2:	d009      	beq.n	800ade8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	78fa      	ldrb	r2, [r7, #3]
 800adde:	4611      	mov	r1, r2
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	4798      	blx	r3
 800ade4:	4603      	mov	r3, r0
 800ade6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b084      	sub	sp, #16
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	460b      	mov	r3, r1
 800adfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	78fa      	ldrb	r2, [r7, #3]
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	4798      	blx	r3
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b084      	sub	sp, #16
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f001 f90c 	bl	800c056 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ae5a:	f003 031f 	and.w	r3, r3, #31
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d01a      	beq.n	800ae98 <USBD_LL_SetupStage+0x72>
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d822      	bhi.n	800aeac <USBD_LL_SetupStage+0x86>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <USBD_LL_SetupStage+0x4a>
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d00a      	beq.n	800ae84 <USBD_LL_SetupStage+0x5e>
 800ae6e:	e01d      	b.n	800aeac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fb63 	bl	800b544 <USBD_StdDevReq>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	73fb      	strb	r3, [r7, #15]
      break;
 800ae82:	e020      	b.n	800aec6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fbcb 	bl	800b628 <USBD_StdItfReq>
 800ae92:	4603      	mov	r3, r0
 800ae94:	73fb      	strb	r3, [r7, #15]
      break;
 800ae96:	e016      	b.n	800aec6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae9e:	4619      	mov	r1, r3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fc2d 	bl	800b700 <USBD_StdEPReq>
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeaa:	e00c      	b.n	800aec6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aeb2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 fd04 	bl	800c8c8 <USBD_LL_StallEP>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]
      break;
 800aec4:	bf00      	nop
  }

  return ret;
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	460b      	mov	r3, r1
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800aee2:	7afb      	ldrb	r3, [r7, #11]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d16e      	bne.n	800afc6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800aeee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	f040 8098 	bne.w	800b02c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	689a      	ldr	r2, [r3, #8]
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	429a      	cmp	r2, r3
 800af06:	d913      	bls.n	800af30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	689a      	ldr	r2, [r3, #8]
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	1ad2      	subs	r2, r2, r3
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	68da      	ldr	r2, [r3, #12]
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	4293      	cmp	r3, r2
 800af20:	bf28      	it	cs
 800af22:	4613      	movcs	r3, r2
 800af24:	461a      	mov	r2, r3
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f001 f977 	bl	800c21c <USBD_CtlContinueRx>
 800af2e:	e07d      	b.n	800b02c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af36:	f003 031f 	and.w	r3, r3, #31
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d014      	beq.n	800af68 <USBD_LL_DataOutStage+0x98>
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d81d      	bhi.n	800af7e <USBD_LL_DataOutStage+0xae>
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <USBD_LL_DataOutStage+0x7c>
 800af46:	2b01      	cmp	r3, #1
 800af48:	d003      	beq.n	800af52 <USBD_LL_DataOutStage+0x82>
 800af4a:	e018      	b.n	800af7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800af4c:	2300      	movs	r3, #0
 800af4e:	75bb      	strb	r3, [r7, #22]
            break;
 800af50:	e018      	b.n	800af84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	4619      	mov	r1, r3
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f000 fa64 	bl	800b42a <USBD_CoreFindIF>
 800af62:	4603      	mov	r3, r0
 800af64:	75bb      	strb	r3, [r7, #22]
            break;
 800af66:	e00d      	b.n	800af84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	4619      	mov	r1, r3
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f000 fa66 	bl	800b444 <USBD_CoreFindEP>
 800af78:	4603      	mov	r3, r0
 800af7a:	75bb      	strb	r3, [r7, #22]
            break;
 800af7c:	e002      	b.n	800af84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800af7e:	2300      	movs	r3, #0
 800af80:	75bb      	strb	r3, [r7, #22]
            break;
 800af82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800af84:	7dbb      	ldrb	r3, [r7, #22]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d119      	bne.n	800afbe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b03      	cmp	r3, #3
 800af94:	d113      	bne.n	800afbe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800af96:	7dba      	ldrb	r2, [r7, #22]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	32ae      	adds	r2, #174	@ 0xae
 800af9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00b      	beq.n	800afbe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800afa6:	7dba      	ldrb	r2, [r7, #22]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800afae:	7dba      	ldrb	r2, [r7, #22]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	32ae      	adds	r2, #174	@ 0xae
 800afb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f001 f93d 	bl	800c23e <USBD_CtlSendStatus>
 800afc4:	e032      	b.n	800b02c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	4619      	mov	r1, r3
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 fa37 	bl	800b444 <USBD_CoreFindEP>
 800afd6:	4603      	mov	r3, r0
 800afd8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afda:	7dbb      	ldrb	r3, [r7, #22]
 800afdc:	2bff      	cmp	r3, #255	@ 0xff
 800afde:	d025      	beq.n	800b02c <USBD_LL_DataOutStage+0x15c>
 800afe0:	7dbb      	ldrb	r3, [r7, #22]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d122      	bne.n	800b02c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b03      	cmp	r3, #3
 800aff0:	d117      	bne.n	800b022 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aff2:	7dba      	ldrb	r2, [r7, #22]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	32ae      	adds	r2, #174	@ 0xae
 800aff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00f      	beq.n	800b022 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b002:	7dba      	ldrb	r2, [r7, #22]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b00a:	7dba      	ldrb	r2, [r7, #22]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	32ae      	adds	r2, #174	@ 0xae
 800b010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	7afa      	ldrb	r2, [r7, #11]
 800b018:	4611      	mov	r1, r2
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	4798      	blx	r3
 800b01e:	4603      	mov	r3, r0
 800b020:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b022:	7dfb      	ldrb	r3, [r7, #23]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	e000      	b.n	800b02e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3718      	adds	r7, #24
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b086      	sub	sp, #24
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	60f8      	str	r0, [r7, #12]
 800b03e:	460b      	mov	r3, r1
 800b040:	607a      	str	r2, [r7, #4]
 800b042:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b044:	7afb      	ldrb	r3, [r7, #11]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d16f      	bne.n	800b12a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3314      	adds	r3, #20
 800b04e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b056:	2b02      	cmp	r3, #2
 800b058:	d15a      	bne.n	800b110 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	689a      	ldr	r2, [r3, #8]
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	429a      	cmp	r2, r3
 800b064:	d914      	bls.n	800b090 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	689a      	ldr	r2, [r3, #8]
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	1ad2      	subs	r2, r2, r3
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	461a      	mov	r2, r3
 800b07a:	6879      	ldr	r1, [r7, #4]
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f001 f8bc 	bl	800c1fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b082:	2300      	movs	r3, #0
 800b084:	2200      	movs	r2, #0
 800b086:	2100      	movs	r1, #0
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f001 fcc7 	bl	800ca1c <USBD_LL_PrepareReceive>
 800b08e:	e03f      	b.n	800b110 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	68da      	ldr	r2, [r3, #12]
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d11c      	bne.n	800b0d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d316      	bcc.n	800b0d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d20f      	bcs.n	800b0d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f001 f89d 	bl	800c1fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f001 fca4 	bl	800ca1c <USBD_LL_PrepareReceive>
 800b0d4:	e01c      	b.n	800b110 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d10f      	bne.n	800b102 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d009      	beq.n	800b102 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b102:	2180      	movs	r1, #128	@ 0x80
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f001 fbdf 	bl	800c8c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f001 f8aa 	bl	800c264 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d03a      	beq.n	800b190 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7ff fe42 	bl	800ada4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b128:	e032      	b.n	800b190 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b12a:	7afb      	ldrb	r3, [r7, #11]
 800b12c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b130:	b2db      	uxtb	r3, r3
 800b132:	4619      	mov	r1, r3
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 f985 	bl	800b444 <USBD_CoreFindEP>
 800b13a:	4603      	mov	r3, r0
 800b13c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
 800b140:	2bff      	cmp	r3, #255	@ 0xff
 800b142:	d025      	beq.n	800b190 <USBD_LL_DataInStage+0x15a>
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d122      	bne.n	800b190 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b03      	cmp	r3, #3
 800b154:	d11c      	bne.n	800b190 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b156:	7dfa      	ldrb	r2, [r7, #23]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	32ae      	adds	r2, #174	@ 0xae
 800b15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d014      	beq.n	800b190 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b166:	7dfa      	ldrb	r2, [r7, #23]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b16e:	7dfa      	ldrb	r2, [r7, #23]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	32ae      	adds	r2, #174	@ 0xae
 800b174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	7afa      	ldrb	r2, [r7, #11]
 800b17c:	4611      	mov	r1, r2
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	4798      	blx	r3
 800b182:	4603      	mov	r3, r0
 800b184:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b186:	7dbb      	ldrb	r3, [r7, #22]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d001      	beq.n	800b190 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b18c:	7dbb      	ldrb	r3, [r7, #22]
 800b18e:	e000      	b.n	800b192 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d014      	beq.n	800b200 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00e      	beq.n	800b200 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	6852      	ldr	r2, [r2, #4]
 800b1ee:	b2d2      	uxtb	r2, r2
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	4798      	blx	r3
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b200:	2340      	movs	r3, #64	@ 0x40
 800b202:	2200      	movs	r2, #0
 800b204:	2100      	movs	r1, #0
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f001 fb19 	bl	800c83e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2240      	movs	r2, #64	@ 0x40
 800b218:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b21c:	2340      	movs	r3, #64	@ 0x40
 800b21e:	2200      	movs	r2, #0
 800b220:	2180      	movs	r1, #128	@ 0x80
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f001 fb0b 	bl	800c83e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2240      	movs	r2, #64	@ 0x40
 800b232:	621a      	str	r2, [r3, #32]

  return ret;
 800b234:	7bfb      	ldrb	r3, [r7, #15]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b23e:	b480      	push	{r7}
 800b240:	b083      	sub	sp, #12
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	460b      	mov	r3, r1
 800b248:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	78fa      	ldrb	r2, [r7, #3]
 800b24e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b25e:	b480      	push	{r7}
 800b260:	b083      	sub	sp, #12
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d006      	beq.n	800b280 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2204      	movs	r2, #4
 800b284:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b296:	b480      	push	{r7}
 800b298:	b083      	sub	sp, #12
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	d106      	bne.n	800b2b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	d110      	bne.n	800b2fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00b      	beq.n	800b2fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d005      	beq.n	800b2fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2f6:	69db      	ldr	r3, [r3, #28]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b082      	sub	sp, #8
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	460b      	mov	r3, r1
 800b310:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	32ae      	adds	r2, #174	@ 0xae
 800b31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b324:	2303      	movs	r3, #3
 800b326:	e01c      	b.n	800b362 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b03      	cmp	r3, #3
 800b332:	d115      	bne.n	800b360 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	32ae      	adds	r2, #174	@ 0xae
 800b33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b342:	6a1b      	ldr	r3, [r3, #32]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00b      	beq.n	800b360 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	32ae      	adds	r2, #174	@ 0xae
 800b352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b356:	6a1b      	ldr	r3, [r3, #32]
 800b358:	78fa      	ldrb	r2, [r7, #3]
 800b35a:	4611      	mov	r1, r2
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b082      	sub	sp, #8
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	460b      	mov	r3, r1
 800b374:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	32ae      	adds	r2, #174	@ 0xae
 800b380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b388:	2303      	movs	r3, #3
 800b38a:	e01c      	b.n	800b3c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b03      	cmp	r3, #3
 800b396:	d115      	bne.n	800b3c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	32ae      	adds	r2, #174	@ 0xae
 800b3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	32ae      	adds	r2, #174	@ 0xae
 800b3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	4611      	mov	r1, r2
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b083      	sub	sp, #12
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00e      	beq.n	800b420 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	6852      	ldr	r2, [r2, #4]
 800b40e:	b2d2      	uxtb	r2, r2
 800b410:	4611      	mov	r1, r2
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	4798      	blx	r3
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b41c:	2303      	movs	r3, #3
 800b41e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b420:	7bfb      	ldrb	r3, [r7, #15]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b083      	sub	sp, #12
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	460b      	mov	r3, r1
 800b434:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b436:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	460b      	mov	r3, r1
 800b44e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b450:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b452:	4618      	mov	r0, r3
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b086      	sub	sp, #24
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	460b      	mov	r3, r1
 800b468:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b472:	2300      	movs	r3, #0
 800b474:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	885b      	ldrh	r3, [r3, #2]
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	7812      	ldrb	r2, [r2, #0]
 800b480:	4293      	cmp	r3, r2
 800b482:	d91f      	bls.n	800b4c4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b48a:	e013      	b.n	800b4b4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b48c:	f107 030a 	add.w	r3, r7, #10
 800b490:	4619      	mov	r1, r3
 800b492:	6978      	ldr	r0, [r7, #20]
 800b494:	f000 f81b 	bl	800b4ce <USBD_GetNextDesc>
 800b498:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	785b      	ldrb	r3, [r3, #1]
 800b49e:	2b05      	cmp	r3, #5
 800b4a0:	d108      	bne.n	800b4b4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	789b      	ldrb	r3, [r3, #2]
 800b4aa:	78fa      	ldrb	r2, [r7, #3]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d008      	beq.n	800b4c2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	885b      	ldrh	r3, [r3, #2]
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	897b      	ldrh	r3, [r7, #10]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d8e5      	bhi.n	800b48c <USBD_GetEpDesc+0x2e>
 800b4c0:	e000      	b.n	800b4c4 <USBD_GetEpDesc+0x66>
          break;
 800b4c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b4c4:	693b      	ldr	r3, [r7, #16]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b085      	sub	sp, #20
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	7812      	ldrb	r2, [r2, #0]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b506:	b480      	push	{r7}
 800b508:	b087      	sub	sp, #28
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	3301      	adds	r3, #1
 800b51c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b524:	8a3b      	ldrh	r3, [r7, #16]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	b21a      	sxth	r2, r3
 800b52a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b52e:	4313      	orrs	r3, r2
 800b530:	b21b      	sxth	r3, r3
 800b532:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b534:	89fb      	ldrh	r3, [r7, #14]
}
 800b536:	4618      	mov	r0, r3
 800b538:	371c      	adds	r7, #28
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
	...

0800b544 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b55a:	2b40      	cmp	r3, #64	@ 0x40
 800b55c:	d005      	beq.n	800b56a <USBD_StdDevReq+0x26>
 800b55e:	2b40      	cmp	r3, #64	@ 0x40
 800b560:	d857      	bhi.n	800b612 <USBD_StdDevReq+0xce>
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00f      	beq.n	800b586 <USBD_StdDevReq+0x42>
 800b566:	2b20      	cmp	r3, #32
 800b568:	d153      	bne.n	800b612 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	32ae      	adds	r2, #174	@ 0xae
 800b574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	4798      	blx	r3
 800b580:	4603      	mov	r3, r0
 800b582:	73fb      	strb	r3, [r7, #15]
      break;
 800b584:	e04a      	b.n	800b61c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	785b      	ldrb	r3, [r3, #1]
 800b58a:	2b09      	cmp	r3, #9
 800b58c:	d83b      	bhi.n	800b606 <USBD_StdDevReq+0xc2>
 800b58e:	a201      	add	r2, pc, #4	@ (adr r2, 800b594 <USBD_StdDevReq+0x50>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5e9 	.word	0x0800b5e9
 800b598:	0800b5fd 	.word	0x0800b5fd
 800b59c:	0800b607 	.word	0x0800b607
 800b5a0:	0800b5f3 	.word	0x0800b5f3
 800b5a4:	0800b607 	.word	0x0800b607
 800b5a8:	0800b5c7 	.word	0x0800b5c7
 800b5ac:	0800b5bd 	.word	0x0800b5bd
 800b5b0:	0800b607 	.word	0x0800b607
 800b5b4:	0800b5df 	.word	0x0800b5df
 800b5b8:	0800b5d1 	.word	0x0800b5d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fa3c 	bl	800ba3c <USBD_GetDescriptor>
          break;
 800b5c4:	e024      	b.n	800b610 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fba1 	bl	800bd10 <USBD_SetAddress>
          break;
 800b5ce:	e01f      	b.n	800b610 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fbe0 	bl	800bd98 <USBD_SetConfig>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	73fb      	strb	r3, [r7, #15]
          break;
 800b5dc:	e018      	b.n	800b610 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fc83 	bl	800beec <USBD_GetConfig>
          break;
 800b5e6:	e013      	b.n	800b610 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fcb4 	bl	800bf58 <USBD_GetStatus>
          break;
 800b5f0:	e00e      	b.n	800b610 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b5f2:	6839      	ldr	r1, [r7, #0]
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 fce3 	bl	800bfc0 <USBD_SetFeature>
          break;
 800b5fa:	e009      	b.n	800b610 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fd07 	bl	800c012 <USBD_ClrFeature>
          break;
 800b604:	e004      	b.n	800b610 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b606:	6839      	ldr	r1, [r7, #0]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fd5e 	bl	800c0ca <USBD_CtlError>
          break;
 800b60e:	bf00      	nop
      }
      break;
 800b610:	e004      	b.n	800b61c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fd58 	bl	800c0ca <USBD_CtlError>
      break;
 800b61a:	bf00      	nop
  }

  return ret;
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop

0800b628 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b63e:	2b40      	cmp	r3, #64	@ 0x40
 800b640:	d005      	beq.n	800b64e <USBD_StdItfReq+0x26>
 800b642:	2b40      	cmp	r3, #64	@ 0x40
 800b644:	d852      	bhi.n	800b6ec <USBD_StdItfReq+0xc4>
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <USBD_StdItfReq+0x26>
 800b64a:	2b20      	cmp	r3, #32
 800b64c:	d14e      	bne.n	800b6ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b654:	b2db      	uxtb	r3, r3
 800b656:	3b01      	subs	r3, #1
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d840      	bhi.n	800b6de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	889b      	ldrh	r3, [r3, #4]
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b01      	cmp	r3, #1
 800b664:	d836      	bhi.n	800b6d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	889b      	ldrh	r3, [r3, #4]
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff fedb 	bl	800b42a <USBD_CoreFindIF>
 800b674:	4603      	mov	r3, r0
 800b676:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b678:	7bbb      	ldrb	r3, [r7, #14]
 800b67a:	2bff      	cmp	r3, #255	@ 0xff
 800b67c:	d01d      	beq.n	800b6ba <USBD_StdItfReq+0x92>
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d11a      	bne.n	800b6ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b684:	7bba      	ldrb	r2, [r7, #14]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	32ae      	adds	r2, #174	@ 0xae
 800b68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00f      	beq.n	800b6b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b694:	7bba      	ldrb	r2, [r7, #14]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b69c:	7bba      	ldrb	r2, [r7, #14]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	32ae      	adds	r2, #174	@ 0xae
 800b6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	4798      	blx	r3
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b6b2:	e004      	b.n	800b6be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b6b8:	e001      	b.n	800b6be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	88db      	ldrh	r3, [r3, #6]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d110      	bne.n	800b6e8 <USBD_StdItfReq+0xc0>
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10d      	bne.n	800b6e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fdb6 	bl	800c23e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b6d2:	e009      	b.n	800b6e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b6d4:	6839      	ldr	r1, [r7, #0]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fcf7 	bl	800c0ca <USBD_CtlError>
          break;
 800b6dc:	e004      	b.n	800b6e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fcf2 	bl	800c0ca <USBD_CtlError>
          break;
 800b6e6:	e000      	b.n	800b6ea <USBD_StdItfReq+0xc2>
          break;
 800b6e8:	bf00      	nop
      }
      break;
 800b6ea:	e004      	b.n	800b6f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fceb 	bl	800c0ca <USBD_CtlError>
      break;
 800b6f4:	bf00      	nop
  }

  return ret;
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	889b      	ldrh	r3, [r3, #4]
 800b712:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b71c:	2b40      	cmp	r3, #64	@ 0x40
 800b71e:	d007      	beq.n	800b730 <USBD_StdEPReq+0x30>
 800b720:	2b40      	cmp	r3, #64	@ 0x40
 800b722:	f200 817f 	bhi.w	800ba24 <USBD_StdEPReq+0x324>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d02a      	beq.n	800b780 <USBD_StdEPReq+0x80>
 800b72a:	2b20      	cmp	r3, #32
 800b72c:	f040 817a 	bne.w	800ba24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b730:	7bbb      	ldrb	r3, [r7, #14]
 800b732:	4619      	mov	r1, r3
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f7ff fe85 	bl	800b444 <USBD_CoreFindEP>
 800b73a:	4603      	mov	r3, r0
 800b73c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b73e:	7b7b      	ldrb	r3, [r7, #13]
 800b740:	2bff      	cmp	r3, #255	@ 0xff
 800b742:	f000 8174 	beq.w	800ba2e <USBD_StdEPReq+0x32e>
 800b746:	7b7b      	ldrb	r3, [r7, #13]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f040 8170 	bne.w	800ba2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b74e:	7b7a      	ldrb	r2, [r7, #13]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b756:	7b7a      	ldrb	r2, [r7, #13]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	32ae      	adds	r2, #174	@ 0xae
 800b75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 8163 	beq.w	800ba2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b768:	7b7a      	ldrb	r2, [r7, #13]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	32ae      	adds	r2, #174	@ 0xae
 800b76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	4798      	blx	r3
 800b77a:	4603      	mov	r3, r0
 800b77c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b77e:	e156      	b.n	800ba2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	785b      	ldrb	r3, [r3, #1]
 800b784:	2b03      	cmp	r3, #3
 800b786:	d008      	beq.n	800b79a <USBD_StdEPReq+0x9a>
 800b788:	2b03      	cmp	r3, #3
 800b78a:	f300 8145 	bgt.w	800ba18 <USBD_StdEPReq+0x318>
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 809b 	beq.w	800b8ca <USBD_StdEPReq+0x1ca>
 800b794:	2b01      	cmp	r3, #1
 800b796:	d03c      	beq.n	800b812 <USBD_StdEPReq+0x112>
 800b798:	e13e      	b.n	800ba18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d002      	beq.n	800b7ac <USBD_StdEPReq+0xac>
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	d016      	beq.n	800b7d8 <USBD_StdEPReq+0xd8>
 800b7aa:	e02c      	b.n	800b806 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7ac:	7bbb      	ldrb	r3, [r7, #14]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00d      	beq.n	800b7ce <USBD_StdEPReq+0xce>
 800b7b2:	7bbb      	ldrb	r3, [r7, #14]
 800b7b4:	2b80      	cmp	r3, #128	@ 0x80
 800b7b6:	d00a      	beq.n	800b7ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7b8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f001 f883 	bl	800c8c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7c2:	2180      	movs	r1, #128	@ 0x80
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f001 f87f 	bl	800c8c8 <USBD_LL_StallEP>
 800b7ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b7cc:	e020      	b.n	800b810 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b7ce:	6839      	ldr	r1, [r7, #0]
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fc7a 	bl	800c0ca <USBD_CtlError>
              break;
 800b7d6:	e01b      	b.n	800b810 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	885b      	ldrh	r3, [r3, #2]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10e      	bne.n	800b7fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b7e0:	7bbb      	ldrb	r3, [r7, #14]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00b      	beq.n	800b7fe <USBD_StdEPReq+0xfe>
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
 800b7e8:	2b80      	cmp	r3, #128	@ 0x80
 800b7ea:	d008      	beq.n	800b7fe <USBD_StdEPReq+0xfe>
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	88db      	ldrh	r3, [r3, #6]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d104      	bne.n	800b7fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7f4:	7bbb      	ldrb	r3, [r7, #14]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f001 f865 	bl	800c8c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fd1d 	bl	800c23e <USBD_CtlSendStatus>

              break;
 800b804:	e004      	b.n	800b810 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fc5e 	bl	800c0ca <USBD_CtlError>
              break;
 800b80e:	bf00      	nop
          }
          break;
 800b810:	e107      	b.n	800ba22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d002      	beq.n	800b824 <USBD_StdEPReq+0x124>
 800b81e:	2b03      	cmp	r3, #3
 800b820:	d016      	beq.n	800b850 <USBD_StdEPReq+0x150>
 800b822:	e04b      	b.n	800b8bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b824:	7bbb      	ldrb	r3, [r7, #14]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00d      	beq.n	800b846 <USBD_StdEPReq+0x146>
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
 800b82c:	2b80      	cmp	r3, #128	@ 0x80
 800b82e:	d00a      	beq.n	800b846 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b830:	7bbb      	ldrb	r3, [r7, #14]
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f001 f847 	bl	800c8c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b83a:	2180      	movs	r1, #128	@ 0x80
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f001 f843 	bl	800c8c8 <USBD_LL_StallEP>
 800b842:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b844:	e040      	b.n	800b8c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fc3e 	bl	800c0ca <USBD_CtlError>
              break;
 800b84e:	e03b      	b.n	800b8c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	885b      	ldrh	r3, [r3, #2]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d136      	bne.n	800b8c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d004      	beq.n	800b86c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b862:	7bbb      	ldrb	r3, [r7, #14]
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f001 f84d 	bl	800c906 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fce6 	bl	800c23e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	4619      	mov	r1, r3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7ff fde4 	bl	800b444 <USBD_CoreFindEP>
 800b87c:	4603      	mov	r3, r0
 800b87e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b880:	7b7b      	ldrb	r3, [r7, #13]
 800b882:	2bff      	cmp	r3, #255	@ 0xff
 800b884:	d01f      	beq.n	800b8c6 <USBD_StdEPReq+0x1c6>
 800b886:	7b7b      	ldrb	r3, [r7, #13]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d11c      	bne.n	800b8c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b88c:	7b7a      	ldrb	r2, [r7, #13]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b894:	7b7a      	ldrb	r2, [r7, #13]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	32ae      	adds	r2, #174	@ 0xae
 800b89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d010      	beq.n	800b8c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b8a4:	7b7a      	ldrb	r2, [r7, #13]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	32ae      	adds	r2, #174	@ 0xae
 800b8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	4798      	blx	r3
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b8ba:	e004      	b.n	800b8c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b8bc:	6839      	ldr	r1, [r7, #0]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fc03 	bl	800c0ca <USBD_CtlError>
              break;
 800b8c4:	e000      	b.n	800b8c8 <USBD_StdEPReq+0x1c8>
              break;
 800b8c6:	bf00      	nop
          }
          break;
 800b8c8:	e0ab      	b.n	800ba22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d002      	beq.n	800b8dc <USBD_StdEPReq+0x1dc>
 800b8d6:	2b03      	cmp	r3, #3
 800b8d8:	d032      	beq.n	800b940 <USBD_StdEPReq+0x240>
 800b8da:	e097      	b.n	800ba0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8dc:	7bbb      	ldrb	r3, [r7, #14]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d007      	beq.n	800b8f2 <USBD_StdEPReq+0x1f2>
 800b8e2:	7bbb      	ldrb	r3, [r7, #14]
 800b8e4:	2b80      	cmp	r3, #128	@ 0x80
 800b8e6:	d004      	beq.n	800b8f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fbed 	bl	800c0ca <USBD_CtlError>
                break;
 800b8f0:	e091      	b.n	800ba16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	da0b      	bge.n	800b912 <USBD_StdEPReq+0x212>
 800b8fa:	7bbb      	ldrb	r3, [r7, #14]
 800b8fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b900:	4613      	mov	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	3310      	adds	r3, #16
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	4413      	add	r3, r2
 800b90e:	3304      	adds	r3, #4
 800b910:	e00b      	b.n	800b92a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b912:	7bbb      	ldrb	r3, [r7, #14]
 800b914:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b918:	4613      	mov	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	4413      	add	r3, r2
 800b928:	3304      	adds	r3, #4
 800b92a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2200      	movs	r2, #0
 800b930:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	2202      	movs	r2, #2
 800b936:	4619      	mov	r1, r3
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fc43 	bl	800c1c4 <USBD_CtlSendData>
              break;
 800b93e:	e06a      	b.n	800ba16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b944:	2b00      	cmp	r3, #0
 800b946:	da11      	bge.n	800b96c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b948:	7bbb      	ldrb	r3, [r7, #14]
 800b94a:	f003 020f 	and.w	r2, r3, #15
 800b94e:	6879      	ldr	r1, [r7, #4]
 800b950:	4613      	mov	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4413      	add	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	440b      	add	r3, r1
 800b95a:	3324      	adds	r3, #36	@ 0x24
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d117      	bne.n	800b992 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b962:	6839      	ldr	r1, [r7, #0]
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fbb0 	bl	800c0ca <USBD_CtlError>
                  break;
 800b96a:	e054      	b.n	800ba16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	f003 020f 	and.w	r2, r3, #15
 800b972:	6879      	ldr	r1, [r7, #4]
 800b974:	4613      	mov	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	440b      	add	r3, r1
 800b97e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b982:	881b      	ldrh	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d104      	bne.n	800b992 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fb9d 	bl	800c0ca <USBD_CtlError>
                  break;
 800b990:	e041      	b.n	800ba16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b996:	2b00      	cmp	r3, #0
 800b998:	da0b      	bge.n	800b9b2 <USBD_StdEPReq+0x2b2>
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
 800b99c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	3310      	adds	r3, #16
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	e00b      	b.n	800b9ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
 800b9b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4413      	add	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d002      	beq.n	800b9d8 <USBD_StdEPReq+0x2d8>
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
 800b9d4:	2b80      	cmp	r3, #128	@ 0x80
 800b9d6:	d103      	bne.n	800b9e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]
 800b9de:	e00e      	b.n	800b9fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b9e0:	7bbb      	ldrb	r3, [r7, #14]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 ffad 	bl	800c944 <USBD_LL_IsStallEP>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d003      	beq.n	800b9f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	e002      	b.n	800b9fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2202      	movs	r2, #2
 800ba02:	4619      	mov	r1, r3
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fbdd 	bl	800c1c4 <USBD_CtlSendData>
              break;
 800ba0a:	e004      	b.n	800ba16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ba0c:	6839      	ldr	r1, [r7, #0]
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 fb5b 	bl	800c0ca <USBD_CtlError>
              break;
 800ba14:	bf00      	nop
          }
          break;
 800ba16:	e004      	b.n	800ba22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fb55 	bl	800c0ca <USBD_CtlError>
          break;
 800ba20:	bf00      	nop
      }
      break;
 800ba22:	e005      	b.n	800ba30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ba24:	6839      	ldr	r1, [r7, #0]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fb4f 	bl	800c0ca <USBD_CtlError>
      break;
 800ba2c:	e000      	b.n	800ba30 <USBD_StdEPReq+0x330>
      break;
 800ba2e:	bf00      	nop
  }

  return ret;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
	...

0800ba3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba46:	2300      	movs	r3, #0
 800ba48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	885b      	ldrh	r3, [r3, #2]
 800ba56:	0a1b      	lsrs	r3, r3, #8
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	2b06      	cmp	r3, #6
 800ba5e:	f200 8128 	bhi.w	800bcb2 <USBD_GetDescriptor+0x276>
 800ba62:	a201      	add	r2, pc, #4	@ (adr r2, 800ba68 <USBD_GetDescriptor+0x2c>)
 800ba64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba68:	0800ba85 	.word	0x0800ba85
 800ba6c:	0800ba9d 	.word	0x0800ba9d
 800ba70:	0800badd 	.word	0x0800badd
 800ba74:	0800bcb3 	.word	0x0800bcb3
 800ba78:	0800bcb3 	.word	0x0800bcb3
 800ba7c:	0800bc53 	.word	0x0800bc53
 800ba80:	0800bc7f 	.word	0x0800bc7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	7c12      	ldrb	r2, [r2, #16]
 800ba90:	f107 0108 	add.w	r1, r7, #8
 800ba94:	4610      	mov	r0, r2
 800ba96:	4798      	blx	r3
 800ba98:	60f8      	str	r0, [r7, #12]
      break;
 800ba9a:	e112      	b.n	800bcc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	7c1b      	ldrb	r3, [r3, #16]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10d      	bne.n	800bac0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baac:	f107 0208 	add.w	r2, r7, #8
 800bab0:	4610      	mov	r0, r2
 800bab2:	4798      	blx	r3
 800bab4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3301      	adds	r3, #1
 800baba:	2202      	movs	r2, #2
 800babc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800babe:	e100      	b.n	800bcc2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac8:	f107 0208 	add.w	r2, r7, #8
 800bacc:	4610      	mov	r0, r2
 800bace:	4798      	blx	r3
 800bad0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3301      	adds	r3, #1
 800bad6:	2202      	movs	r2, #2
 800bad8:	701a      	strb	r2, [r3, #0]
      break;
 800bada:	e0f2      	b.n	800bcc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	885b      	ldrh	r3, [r3, #2]
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	f200 80ac 	bhi.w	800bc40 <USBD_GetDescriptor+0x204>
 800bae8:	a201      	add	r2, pc, #4	@ (adr r2, 800baf0 <USBD_GetDescriptor+0xb4>)
 800baea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baee:	bf00      	nop
 800baf0:	0800bb09 	.word	0x0800bb09
 800baf4:	0800bb3d 	.word	0x0800bb3d
 800baf8:	0800bb71 	.word	0x0800bb71
 800bafc:	0800bba5 	.word	0x0800bba5
 800bb00:	0800bbd9 	.word	0x0800bbd9
 800bb04:	0800bc0d 	.word	0x0800bc0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00b      	beq.n	800bb2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	7c12      	ldrb	r2, [r2, #16]
 800bb20:	f107 0108 	add.w	r1, r7, #8
 800bb24:	4610      	mov	r0, r2
 800bb26:	4798      	blx	r3
 800bb28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb2a:	e091      	b.n	800bc50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 facb 	bl	800c0ca <USBD_CtlError>
            err++;
 800bb34:	7afb      	ldrb	r3, [r7, #11]
 800bb36:	3301      	adds	r3, #1
 800bb38:	72fb      	strb	r3, [r7, #11]
          break;
 800bb3a:	e089      	b.n	800bc50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00b      	beq.n	800bb60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	7c12      	ldrb	r2, [r2, #16]
 800bb54:	f107 0108 	add.w	r1, r7, #8
 800bb58:	4610      	mov	r0, r2
 800bb5a:	4798      	blx	r3
 800bb5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb5e:	e077      	b.n	800bc50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fab1 	bl	800c0ca <USBD_CtlError>
            err++;
 800bb68:	7afb      	ldrb	r3, [r7, #11]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb6e:	e06f      	b.n	800bc50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00b      	beq.n	800bb94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	7c12      	ldrb	r2, [r2, #16]
 800bb88:	f107 0108 	add.w	r1, r7, #8
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	4798      	blx	r3
 800bb90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb92:	e05d      	b.n	800bc50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fa97 	bl	800c0ca <USBD_CtlError>
            err++;
 800bb9c:	7afb      	ldrb	r3, [r7, #11]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	72fb      	strb	r3, [r7, #11]
          break;
 800bba2:	e055      	b.n	800bc50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00b      	beq.n	800bbc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	7c12      	ldrb	r2, [r2, #16]
 800bbbc:	f107 0108 	add.w	r1, r7, #8
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	4798      	blx	r3
 800bbc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbc6:	e043      	b.n	800bc50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbc8:	6839      	ldr	r1, [r7, #0]
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fa7d 	bl	800c0ca <USBD_CtlError>
            err++;
 800bbd0:	7afb      	ldrb	r3, [r7, #11]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	72fb      	strb	r3, [r7, #11]
          break;
 800bbd6:	e03b      	b.n	800bc50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbde:	695b      	ldr	r3, [r3, #20]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00b      	beq.n	800bbfc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbea:	695b      	ldr	r3, [r3, #20]
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	7c12      	ldrb	r2, [r2, #16]
 800bbf0:	f107 0108 	add.w	r1, r7, #8
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	4798      	blx	r3
 800bbf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbfa:	e029      	b.n	800bc50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fa63 	bl	800c0ca <USBD_CtlError>
            err++;
 800bc04:	7afb      	ldrb	r3, [r7, #11]
 800bc06:	3301      	adds	r3, #1
 800bc08:	72fb      	strb	r3, [r7, #11]
          break;
 800bc0a:	e021      	b.n	800bc50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00b      	beq.n	800bc30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	7c12      	ldrb	r2, [r2, #16]
 800bc24:	f107 0108 	add.w	r1, r7, #8
 800bc28:	4610      	mov	r0, r2
 800bc2a:	4798      	blx	r3
 800bc2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc2e:	e00f      	b.n	800bc50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fa49 	bl	800c0ca <USBD_CtlError>
            err++;
 800bc38:	7afb      	ldrb	r3, [r7, #11]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc3e:	e007      	b.n	800bc50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fa41 	bl	800c0ca <USBD_CtlError>
          err++;
 800bc48:	7afb      	ldrb	r3, [r7, #11]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bc4e:	bf00      	nop
      }
      break;
 800bc50:	e037      	b.n	800bcc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	7c1b      	ldrb	r3, [r3, #16]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d109      	bne.n	800bc6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc62:	f107 0208 	add.w	r2, r7, #8
 800bc66:	4610      	mov	r0, r2
 800bc68:	4798      	blx	r3
 800bc6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc6c:	e029      	b.n	800bcc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 fa2a 	bl	800c0ca <USBD_CtlError>
        err++;
 800bc76:	7afb      	ldrb	r3, [r7, #11]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	72fb      	strb	r3, [r7, #11]
      break;
 800bc7c:	e021      	b.n	800bcc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	7c1b      	ldrb	r3, [r3, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10d      	bne.n	800bca2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc8e:	f107 0208 	add.w	r2, r7, #8
 800bc92:	4610      	mov	r0, r2
 800bc94:	4798      	blx	r3
 800bc96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	2207      	movs	r2, #7
 800bc9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bca0:	e00f      	b.n	800bcc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bca2:	6839      	ldr	r1, [r7, #0]
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fa10 	bl	800c0ca <USBD_CtlError>
        err++;
 800bcaa:	7afb      	ldrb	r3, [r7, #11]
 800bcac:	3301      	adds	r3, #1
 800bcae:	72fb      	strb	r3, [r7, #11]
      break;
 800bcb0:	e007      	b.n	800bcc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fa08 	bl	800c0ca <USBD_CtlError>
      err++;
 800bcba:	7afb      	ldrb	r3, [r7, #11]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	72fb      	strb	r3, [r7, #11]
      break;
 800bcc0:	bf00      	nop
  }

  if (err != 0U)
 800bcc2:	7afb      	ldrb	r3, [r7, #11]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d11e      	bne.n	800bd06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	88db      	ldrh	r3, [r3, #6]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d016      	beq.n	800bcfe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bcd0:	893b      	ldrh	r3, [r7, #8]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00e      	beq.n	800bcf4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	88da      	ldrh	r2, [r3, #6]
 800bcda:	893b      	ldrh	r3, [r7, #8]
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	bf28      	it	cs
 800bce0:	4613      	movcs	r3, r2
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bce6:	893b      	ldrh	r3, [r7, #8]
 800bce8:	461a      	mov	r2, r3
 800bcea:	68f9      	ldr	r1, [r7, #12]
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 fa69 	bl	800c1c4 <USBD_CtlSendData>
 800bcf2:	e009      	b.n	800bd08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f9e7 	bl	800c0ca <USBD_CtlError>
 800bcfc:	e004      	b.n	800bd08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fa9d 	bl	800c23e <USBD_CtlSendStatus>
 800bd04:	e000      	b.n	800bd08 <USBD_GetDescriptor+0x2cc>
    return;
 800bd06:	bf00      	nop
  }
}
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop

0800bd10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	889b      	ldrh	r3, [r3, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d131      	bne.n	800bd86 <USBD_SetAddress+0x76>
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	88db      	ldrh	r3, [r3, #6]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d12d      	bne.n	800bd86 <USBD_SetAddress+0x76>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	885b      	ldrh	r3, [r3, #2]
 800bd2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd30:	d829      	bhi.n	800bd86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	885b      	ldrh	r3, [r3, #2]
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d104      	bne.n	800bd54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f9bc 	bl	800c0ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd52:	e01d      	b.n	800bd90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7bfa      	ldrb	r2, [r7, #15]
 800bd58:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
 800bd5e:	4619      	mov	r1, r3
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fe1b 	bl	800c99c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fa69 	bl	800c23e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd6c:	7bfb      	ldrb	r3, [r7, #15]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d004      	beq.n	800bd7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2202      	movs	r2, #2
 800bd76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd7a:	e009      	b.n	800bd90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd84:	e004      	b.n	800bd90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 f99e 	bl	800c0ca <USBD_CtlError>
  }
}
 800bd8e:	bf00      	nop
 800bd90:	bf00      	nop
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bda2:	2300      	movs	r3, #0
 800bda4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	885b      	ldrh	r3, [r3, #2]
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	4b4e      	ldr	r3, [pc, #312]	@ (800bee8 <USBD_SetConfig+0x150>)
 800bdae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bdb0:	4b4d      	ldr	r3, [pc, #308]	@ (800bee8 <USBD_SetConfig+0x150>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d905      	bls.n	800bdc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bdb8:	6839      	ldr	r1, [r7, #0]
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f985 	bl	800c0ca <USBD_CtlError>
    return USBD_FAIL;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	e08c      	b.n	800bede <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d002      	beq.n	800bdd6 <USBD_SetConfig+0x3e>
 800bdd0:	2b03      	cmp	r3, #3
 800bdd2:	d029      	beq.n	800be28 <USBD_SetConfig+0x90>
 800bdd4:	e075      	b.n	800bec2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bdd6:	4b44      	ldr	r3, [pc, #272]	@ (800bee8 <USBD_SetConfig+0x150>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d020      	beq.n	800be20 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bdde:	4b42      	ldr	r3, [pc, #264]	@ (800bee8 <USBD_SetConfig+0x150>)
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	461a      	mov	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bde8:	4b3f      	ldr	r3, [pc, #252]	@ (800bee8 <USBD_SetConfig+0x150>)
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7fe ffe3 	bl	800adba <USBD_SetClassConfig>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bdf8:	7bfb      	ldrb	r3, [r7, #15]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d008      	beq.n	800be10 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f962 	bl	800c0ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2202      	movs	r2, #2
 800be0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be0e:	e065      	b.n	800bedc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fa14 	bl	800c23e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2203      	movs	r2, #3
 800be1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800be1e:	e05d      	b.n	800bedc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fa0c 	bl	800c23e <USBD_CtlSendStatus>
      break;
 800be26:	e059      	b.n	800bedc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800be28:	4b2f      	ldr	r3, [pc, #188]	@ (800bee8 <USBD_SetConfig+0x150>)
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d112      	bne.n	800be56 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2202      	movs	r2, #2
 800be34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800be38:	4b2b      	ldr	r3, [pc, #172]	@ (800bee8 <USBD_SetConfig+0x150>)
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	461a      	mov	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be42:	4b29      	ldr	r3, [pc, #164]	@ (800bee8 <USBD_SetConfig+0x150>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	4619      	mov	r1, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7fe ffd2 	bl	800adf2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f9f5 	bl	800c23e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be54:	e042      	b.n	800bedc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800be56:	4b24      	ldr	r3, [pc, #144]	@ (800bee8 <USBD_SetConfig+0x150>)
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	461a      	mov	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	429a      	cmp	r2, r3
 800be62:	d02a      	beq.n	800beba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	4619      	mov	r1, r3
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f7fe ffc0 	bl	800adf2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800be72:	4b1d      	ldr	r3, [pc, #116]	@ (800bee8 <USBD_SetConfig+0x150>)
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	461a      	mov	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be7c:	4b1a      	ldr	r3, [pc, #104]	@ (800bee8 <USBD_SetConfig+0x150>)
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7fe ff99 	bl	800adba <USBD_SetClassConfig>
 800be88:	4603      	mov	r3, r0
 800be8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00f      	beq.n	800beb2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800be92:	6839      	ldr	r1, [r7, #0]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f918 	bl	800c0ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	4619      	mov	r1, r3
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7fe ffa5 	bl	800adf2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2202      	movs	r2, #2
 800beac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800beb0:	e014      	b.n	800bedc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f9c3 	bl	800c23e <USBD_CtlSendStatus>
      break;
 800beb8:	e010      	b.n	800bedc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f9bf 	bl	800c23e <USBD_CtlSendStatus>
      break;
 800bec0:	e00c      	b.n	800bedc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f900 	bl	800c0ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800beca:	4b07      	ldr	r3, [pc, #28]	@ (800bee8 <USBD_SetConfig+0x150>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7fe ff8e 	bl	800adf2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bed6:	2303      	movs	r3, #3
 800bed8:	73fb      	strb	r3, [r7, #15]
      break;
 800beda:	bf00      	nop
  }

  return ret;
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	20001388 	.word	0x20001388

0800beec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	88db      	ldrh	r3, [r3, #6]
 800befa:	2b01      	cmp	r3, #1
 800befc:	d004      	beq.n	800bf08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f8e2 	bl	800c0ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf06:	e023      	b.n	800bf50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	dc02      	bgt.n	800bf1a <USBD_GetConfig+0x2e>
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	dc03      	bgt.n	800bf20 <USBD_GetConfig+0x34>
 800bf18:	e015      	b.n	800bf46 <USBD_GetConfig+0x5a>
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	d00b      	beq.n	800bf36 <USBD_GetConfig+0x4a>
 800bf1e:	e012      	b.n	800bf46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	3308      	adds	r3, #8
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f948 	bl	800c1c4 <USBD_CtlSendData>
        break;
 800bf34:	e00c      	b.n	800bf50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	3304      	adds	r3, #4
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f940 	bl	800c1c4 <USBD_CtlSendData>
        break;
 800bf44:	e004      	b.n	800bf50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 f8be 	bl	800c0ca <USBD_CtlError>
        break;
 800bf4e:	bf00      	nop
}
 800bf50:	bf00      	nop
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d81e      	bhi.n	800bfae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	88db      	ldrh	r3, [r3, #6]
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d004      	beq.n	800bf82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f8a5 	bl	800c0ca <USBD_CtlError>
        break;
 800bf80:	e01a      	b.n	800bfb8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d005      	beq.n	800bf9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	f043 0202 	orr.w	r2, r3, #2
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	330c      	adds	r3, #12
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f90c 	bl	800c1c4 <USBD_CtlSendData>
      break;
 800bfac:	e004      	b.n	800bfb8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 f88a 	bl	800c0ca <USBD_CtlError>
      break;
 800bfb6:	bf00      	nop
  }
}
 800bfb8:	bf00      	nop
 800bfba:	3708      	adds	r7, #8
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	885b      	ldrh	r3, [r3, #2]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d107      	bne.n	800bfe2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f92f 	bl	800c23e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bfe0:	e013      	b.n	800c00a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	885b      	ldrh	r3, [r3, #2]
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d10b      	bne.n	800c002 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	889b      	ldrh	r3, [r3, #4]
 800bfee:	0a1b      	lsrs	r3, r3, #8
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	b2da      	uxtb	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f91f 	bl	800c23e <USBD_CtlSendStatus>
}
 800c000:	e003      	b.n	800c00a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f860 	bl	800c0ca <USBD_CtlError>
}
 800c00a:	bf00      	nop
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b082      	sub	sp, #8
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c022:	b2db      	uxtb	r3, r3
 800c024:	3b01      	subs	r3, #1
 800c026:	2b02      	cmp	r3, #2
 800c028:	d80b      	bhi.n	800c042 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	885b      	ldrh	r3, [r3, #2]
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d10c      	bne.n	800c04c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f8ff 	bl	800c23e <USBD_CtlSendStatus>
      }
      break;
 800c040:	e004      	b.n	800c04c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c042:	6839      	ldr	r1, [r7, #0]
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 f840 	bl	800c0ca <USBD_CtlError>
      break;
 800c04a:	e000      	b.n	800c04e <USBD_ClrFeature+0x3c>
      break;
 800c04c:	bf00      	nop
  }
}
 800c04e:	bf00      	nop
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b084      	sub	sp, #16
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	781a      	ldrb	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	3301      	adds	r3, #1
 800c070:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	781a      	ldrb	r2, [r3, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	3301      	adds	r3, #1
 800c07e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f7ff fa40 	bl	800b506 <SWAPBYTE>
 800c086:	4603      	mov	r3, r0
 800c088:	461a      	mov	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3301      	adds	r3, #1
 800c092:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	3301      	adds	r3, #1
 800c098:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f7ff fa33 	bl	800b506 <SWAPBYTE>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c0b4:	68f8      	ldr	r0, [r7, #12]
 800c0b6:	f7ff fa26 	bl	800b506 <SWAPBYTE>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	461a      	mov	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	80da      	strh	r2, [r3, #6]
}
 800c0c2:	bf00      	nop
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b082      	sub	sp, #8
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
 800c0d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0d4:	2180      	movs	r1, #128	@ 0x80
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fbf6 	bl	800c8c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c0dc:	2100      	movs	r1, #0
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fbf2 	bl	800c8c8 <USBD_LL_StallEP>
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d042      	beq.n	800c188 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c106:	6938      	ldr	r0, [r7, #16]
 800c108:	f000 f842 	bl	800c190 <USBD_GetLen>
 800c10c:	4603      	mov	r3, r0
 800c10e:	3301      	adds	r3, #1
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c116:	d808      	bhi.n	800c12a <USBD_GetString+0x3e>
 800c118:	6938      	ldr	r0, [r7, #16]
 800c11a:	f000 f839 	bl	800c190 <USBD_GetLen>
 800c11e:	4603      	mov	r3, r0
 800c120:	3301      	adds	r3, #1
 800c122:	b29b      	uxth	r3, r3
 800c124:	005b      	lsls	r3, r3, #1
 800c126:	b29a      	uxth	r2, r3
 800c128:	e001      	b.n	800c12e <USBD_GetString+0x42>
 800c12a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c132:	7dfb      	ldrb	r3, [r7, #23]
 800c134:	68ba      	ldr	r2, [r7, #8]
 800c136:	4413      	add	r3, r2
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	7812      	ldrb	r2, [r2, #0]
 800c13c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
 800c140:	3301      	adds	r3, #1
 800c142:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c144:	7dfb      	ldrb	r3, [r7, #23]
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	4413      	add	r3, r2
 800c14a:	2203      	movs	r2, #3
 800c14c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c14e:	7dfb      	ldrb	r3, [r7, #23]
 800c150:	3301      	adds	r3, #1
 800c152:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c154:	e013      	b.n	800c17e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c156:	7dfb      	ldrb	r3, [r7, #23]
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	4413      	add	r3, r2
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	7812      	ldrb	r2, [r2, #0]
 800c160:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	3301      	adds	r3, #1
 800c166:	613b      	str	r3, [r7, #16]
    idx++;
 800c168:	7dfb      	ldrb	r3, [r7, #23]
 800c16a:	3301      	adds	r3, #1
 800c16c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c16e:	7dfb      	ldrb	r3, [r7, #23]
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	4413      	add	r3, r2
 800c174:	2200      	movs	r2, #0
 800c176:	701a      	strb	r2, [r3, #0]
    idx++;
 800c178:	7dfb      	ldrb	r3, [r7, #23]
 800c17a:	3301      	adds	r3, #1
 800c17c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1e7      	bne.n	800c156 <USBD_GetString+0x6a>
 800c186:	e000      	b.n	800c18a <USBD_GetString+0x9e>
    return;
 800c188:	bf00      	nop
  }
}
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c198:	2300      	movs	r3, #0
 800c19a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c1a0:	e005      	b.n	800c1ae <USBD_GetLen+0x1e>
  {
    len++;
 800c1a2:	7bfb      	ldrb	r3, [r7, #15]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1f5      	bne.n	800c1a2 <USBD_GetLen+0x12>
  }

  return len;
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3714      	adds	r7, #20
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f000 fbf5 	bl	800c9da <USBD_LL_Transmit>

  return USBD_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	60f8      	str	r0, [r7, #12]
 800c202:	60b9      	str	r1, [r7, #8]
 800c204:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	2100      	movs	r1, #0
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f000 fbe4 	bl	800c9da <USBD_LL_Transmit>

  return USBD_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	2100      	movs	r1, #0
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f000 fbf4 	bl	800ca1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b082      	sub	sp, #8
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2204      	movs	r2, #4
 800c24a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c24e:	2300      	movs	r3, #0
 800c250:	2200      	movs	r2, #0
 800c252:	2100      	movs	r1, #0
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fbc0 	bl	800c9da <USBD_LL_Transmit>

  return USBD_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2205      	movs	r2, #5
 800c270:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c274:	2300      	movs	r3, #0
 800c276:	2200      	movs	r2, #0
 800c278:	2100      	movs	r1, #0
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fbce 	bl	800ca1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c290:	2200      	movs	r2, #0
 800c292:	490e      	ldr	r1, [pc, #56]	@ (800c2cc <MX_USB_DEVICE_Init+0x40>)
 800c294:	480e      	ldr	r0, [pc, #56]	@ (800c2d0 <MX_USB_DEVICE_Init+0x44>)
 800c296:	f7fe fd13 	bl	800acc0 <USBD_Init>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c2a0:	f7fa f976 	bl	8006590 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800c2a4:	490b      	ldr	r1, [pc, #44]	@ (800c2d4 <MX_USB_DEVICE_Init+0x48>)
 800c2a6:	480a      	ldr	r0, [pc, #40]	@ (800c2d0 <MX_USB_DEVICE_Init+0x44>)
 800c2a8:	f7fe fd3a 	bl	800ad20 <USBD_RegisterClass>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c2b2:	f7fa f96d 	bl	8006590 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c2b6:	4806      	ldr	r0, [pc, #24]	@ (800c2d0 <MX_USB_DEVICE_Init+0x44>)
 800c2b8:	f7fe fd68 	bl	800ad8c <USBD_Start>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d001      	beq.n	800c2c6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800c2c2:	f7fa f965 	bl	8006590 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c2c6:	bf00      	nop
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	200000c0 	.word	0x200000c0
 800c2d0:	2000138c 	.word	0x2000138c
 800c2d4:	2000000c 	.word	0x2000000c

0800c2d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	4603      	mov	r3, r0
 800c2e0:	6039      	str	r1, [r7, #0]
 800c2e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	2212      	movs	r2, #18
 800c2e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c2ea:	4b03      	ldr	r3, [pc, #12]	@ (800c2f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	200000dc 	.word	0x200000dc

0800c2fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	4603      	mov	r3, r0
 800c304:	6039      	str	r1, [r7, #0]
 800c306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	2204      	movs	r2, #4
 800c30c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c30e:	4b03      	ldr	r3, [pc, #12]	@ (800c31c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c310:	4618      	mov	r0, r3
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	200000f0 	.word	0x200000f0

0800c320 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	4603      	mov	r3, r0
 800c328:	6039      	str	r1, [r7, #0]
 800c32a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c32c:	79fb      	ldrb	r3, [r7, #7]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d105      	bne.n	800c33e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	4907      	ldr	r1, [pc, #28]	@ (800c354 <USBD_FS_ProductStrDescriptor+0x34>)
 800c336:	4808      	ldr	r0, [pc, #32]	@ (800c358 <USBD_FS_ProductStrDescriptor+0x38>)
 800c338:	f7ff fed8 	bl	800c0ec <USBD_GetString>
 800c33c:	e004      	b.n	800c348 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	4904      	ldr	r1, [pc, #16]	@ (800c354 <USBD_FS_ProductStrDescriptor+0x34>)
 800c342:	4805      	ldr	r0, [pc, #20]	@ (800c358 <USBD_FS_ProductStrDescriptor+0x38>)
 800c344:	f7ff fed2 	bl	800c0ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c348:	4b02      	ldr	r3, [pc, #8]	@ (800c354 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	20001668 	.word	0x20001668
 800c358:	080114d0 	.word	0x080114d0

0800c35c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	4603      	mov	r3, r0
 800c364:	6039      	str	r1, [r7, #0]
 800c366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	4904      	ldr	r1, [pc, #16]	@ (800c37c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c36c:	4804      	ldr	r0, [pc, #16]	@ (800c380 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c36e:	f7ff febd 	bl	800c0ec <USBD_GetString>
  return USBD_StrDesc;
 800c372:	4b02      	ldr	r3, [pc, #8]	@ (800c37c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c374:	4618      	mov	r0, r3
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20001668 	.word	0x20001668
 800c380:	080114e8 	.word	0x080114e8

0800c384 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	4603      	mov	r3, r0
 800c38c:	6039      	str	r1, [r7, #0]
 800c38e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	221a      	movs	r2, #26
 800c394:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c396:	f000 f843 	bl	800c420 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c39a:	4b02      	ldr	r3, [pc, #8]	@ (800c3a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	200000f4 	.word	0x200000f4

0800c3a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	6039      	str	r1, [r7, #0]
 800c3b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c3b4:	79fb      	ldrb	r3, [r7, #7]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	4907      	ldr	r1, [pc, #28]	@ (800c3dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c3be:	4808      	ldr	r0, [pc, #32]	@ (800c3e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3c0:	f7ff fe94 	bl	800c0ec <USBD_GetString>
 800c3c4:	e004      	b.n	800c3d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	4904      	ldr	r1, [pc, #16]	@ (800c3dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c3ca:	4805      	ldr	r0, [pc, #20]	@ (800c3e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3cc:	f7ff fe8e 	bl	800c0ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3d0:	4b02      	ldr	r3, [pc, #8]	@ (800c3dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20001668 	.word	0x20001668
 800c3e0:	080114fc 	.word	0x080114fc

0800c3e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	6039      	str	r1, [r7, #0]
 800c3ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d105      	bne.n	800c402 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	4907      	ldr	r1, [pc, #28]	@ (800c418 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c3fa:	4808      	ldr	r0, [pc, #32]	@ (800c41c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c3fc:	f7ff fe76 	bl	800c0ec <USBD_GetString>
 800c400:	e004      	b.n	800c40c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	4904      	ldr	r1, [pc, #16]	@ (800c418 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c406:	4805      	ldr	r0, [pc, #20]	@ (800c41c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c408:	f7ff fe70 	bl	800c0ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c40c:	4b02      	ldr	r3, [pc, #8]	@ (800c418 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	20001668 	.word	0x20001668
 800c41c:	08011508 	.word	0x08011508

0800c420 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c426:	4b0f      	ldr	r3, [pc, #60]	@ (800c464 <Get_SerialNum+0x44>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c42c:	4b0e      	ldr	r3, [pc, #56]	@ (800c468 <Get_SerialNum+0x48>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c432:	4b0e      	ldr	r3, [pc, #56]	@ (800c46c <Get_SerialNum+0x4c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4413      	add	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d009      	beq.n	800c45a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c446:	2208      	movs	r2, #8
 800c448:	4909      	ldr	r1, [pc, #36]	@ (800c470 <Get_SerialNum+0x50>)
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f000 f814 	bl	800c478 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c450:	2204      	movs	r2, #4
 800c452:	4908      	ldr	r1, [pc, #32]	@ (800c474 <Get_SerialNum+0x54>)
 800c454:	68b8      	ldr	r0, [r7, #8]
 800c456:	f000 f80f 	bl	800c478 <IntToUnicode>
  }
}
 800c45a:	bf00      	nop
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	1fff7a10 	.word	0x1fff7a10
 800c468:	1fff7a14 	.word	0x1fff7a14
 800c46c:	1fff7a18 	.word	0x1fff7a18
 800c470:	200000f6 	.word	0x200000f6
 800c474:	20000106 	.word	0x20000106

0800c478 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c478:	b480      	push	{r7}
 800c47a:	b087      	sub	sp, #28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	4613      	mov	r3, r2
 800c484:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c48a:	2300      	movs	r3, #0
 800c48c:	75fb      	strb	r3, [r7, #23]
 800c48e:	e027      	b.n	800c4e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	0f1b      	lsrs	r3, r3, #28
 800c494:	2b09      	cmp	r3, #9
 800c496:	d80b      	bhi.n	800c4b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	0f1b      	lsrs	r3, r3, #28
 800c49c:	b2da      	uxtb	r2, r3
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	005b      	lsls	r3, r3, #1
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	440b      	add	r3, r1
 800c4a8:	3230      	adds	r2, #48	@ 0x30
 800c4aa:	b2d2      	uxtb	r2, r2
 800c4ac:	701a      	strb	r2, [r3, #0]
 800c4ae:	e00a      	b.n	800c4c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	0f1b      	lsrs	r3, r3, #28
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	440b      	add	r3, r1
 800c4c0:	3237      	adds	r2, #55	@ 0x37
 800c4c2:	b2d2      	uxtb	r2, r2
 800c4c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	011b      	lsls	r3, r3, #4
 800c4ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c4cc:	7dfb      	ldrb	r3, [r7, #23]
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c4da:	7dfb      	ldrb	r3, [r7, #23]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	75fb      	strb	r3, [r7, #23]
 800c4e0:	7dfa      	ldrb	r2, [r7, #23]
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d3d3      	bcc.n	800c490 <IntToUnicode+0x18>
  }
}
 800c4e8:	bf00      	nop
 800c4ea:	bf00      	nop
 800c4ec:	371c      	adds	r7, #28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
	...

0800c4f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b08a      	sub	sp, #40	@ 0x28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c500:	f107 0314 	add.w	r3, r7, #20
 800c504:	2200      	movs	r2, #0
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	605a      	str	r2, [r3, #4]
 800c50a:	609a      	str	r2, [r3, #8]
 800c50c:	60da      	str	r2, [r3, #12]
 800c50e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c518:	d13a      	bne.n	800c590 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c51a:	2300      	movs	r3, #0
 800c51c:	613b      	str	r3, [r7, #16]
 800c51e:	4b1e      	ldr	r3, [pc, #120]	@ (800c598 <HAL_PCD_MspInit+0xa0>)
 800c520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c522:	4a1d      	ldr	r2, [pc, #116]	@ (800c598 <HAL_PCD_MspInit+0xa0>)
 800c524:	f043 0301 	orr.w	r3, r3, #1
 800c528:	6313      	str	r3, [r2, #48]	@ 0x30
 800c52a:	4b1b      	ldr	r3, [pc, #108]	@ (800c598 <HAL_PCD_MspInit+0xa0>)
 800c52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	613b      	str	r3, [r7, #16]
 800c534:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c536:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c53a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c53c:	2302      	movs	r3, #2
 800c53e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c540:	2300      	movs	r3, #0
 800c542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c544:	2303      	movs	r3, #3
 800c546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c548:	230a      	movs	r3, #10
 800c54a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c54c:	f107 0314 	add.w	r3, r7, #20
 800c550:	4619      	mov	r1, r3
 800c552:	4812      	ldr	r0, [pc, #72]	@ (800c59c <HAL_PCD_MspInit+0xa4>)
 800c554:	f7fa fb58 	bl	8006c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c558:	4b0f      	ldr	r3, [pc, #60]	@ (800c598 <HAL_PCD_MspInit+0xa0>)
 800c55a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c55c:	4a0e      	ldr	r2, [pc, #56]	@ (800c598 <HAL_PCD_MspInit+0xa0>)
 800c55e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c562:	6353      	str	r3, [r2, #52]	@ 0x34
 800c564:	2300      	movs	r3, #0
 800c566:	60fb      	str	r3, [r7, #12]
 800c568:	4b0b      	ldr	r3, [pc, #44]	@ (800c598 <HAL_PCD_MspInit+0xa0>)
 800c56a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c56c:	4a0a      	ldr	r2, [pc, #40]	@ (800c598 <HAL_PCD_MspInit+0xa0>)
 800c56e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c572:	6453      	str	r3, [r2, #68]	@ 0x44
 800c574:	4b08      	ldr	r3, [pc, #32]	@ (800c598 <HAL_PCD_MspInit+0xa0>)
 800c576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c57c:	60fb      	str	r3, [r7, #12]
 800c57e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c580:	2200      	movs	r2, #0
 800c582:	2100      	movs	r1, #0
 800c584:	2043      	movs	r0, #67	@ 0x43
 800c586:	f7fa fb08 	bl	8006b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c58a:	2043      	movs	r0, #67	@ 0x43
 800c58c:	f7fa fb21 	bl	8006bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c590:	bf00      	nop
 800c592:	3728      	adds	r7, #40	@ 0x28
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	40023800 	.word	0x40023800
 800c59c:	40020000 	.word	0x40020000

0800c5a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	f7fe fc35 	bl	800ae26 <USBD_LL_SetupStage>
}
 800c5bc:	bf00      	nop
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c5d6:	78fa      	ldrb	r2, [r7, #3]
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	00db      	lsls	r3, r3, #3
 800c5de:	4413      	add	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	440b      	add	r3, r1
 800c5e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	78fb      	ldrb	r3, [r7, #3]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	f7fe fc6f 	bl	800aed0 <USBD_LL_DataOutStage>
}
 800c5f2:	bf00      	nop
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
 800c602:	460b      	mov	r3, r1
 800c604:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c60c:	78fa      	ldrb	r2, [r7, #3]
 800c60e:	6879      	ldr	r1, [r7, #4]
 800c610:	4613      	mov	r3, r2
 800c612:	00db      	lsls	r3, r3, #3
 800c614:	4413      	add	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	440b      	add	r3, r1
 800c61a:	3320      	adds	r3, #32
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	78fb      	ldrb	r3, [r7, #3]
 800c620:	4619      	mov	r1, r3
 800c622:	f7fe fd08 	bl	800b036 <USBD_LL_DataInStage>
}
 800c626:	bf00      	nop
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b082      	sub	sp, #8
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fe fe42 	bl	800b2c6 <USBD_LL_SOF>
}
 800c642:	bf00      	nop
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b084      	sub	sp, #16
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c652:	2301      	movs	r3, #1
 800c654:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	79db      	ldrb	r3, [r3, #7]
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d001      	beq.n	800c662 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c65e:	f7f9 ff97 	bl	8006590 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c668:	7bfa      	ldrb	r2, [r7, #15]
 800c66a:	4611      	mov	r1, r2
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7fe fde6 	bl	800b23e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c678:	4618      	mov	r0, r3
 800c67a:	f7fe fd8e 	bl	800b19a <USBD_LL_Reset>
}
 800c67e:	bf00      	nop
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
	...

0800c688 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe fde1 	bl	800b25e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	6812      	ldr	r2, [r2, #0]
 800c6aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c6ae:	f043 0301 	orr.w	r3, r3, #1
 800c6b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	7adb      	ldrb	r3, [r3, #11]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d005      	beq.n	800c6c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c6bc:	4b04      	ldr	r3, [pc, #16]	@ (800c6d0 <HAL_PCD_SuspendCallback+0x48>)
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	4a03      	ldr	r2, [pc, #12]	@ (800c6d0 <HAL_PCD_SuspendCallback+0x48>)
 800c6c2:	f043 0306 	orr.w	r3, r3, #6
 800c6c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	e000ed00 	.word	0xe000ed00

0800c6d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fe fdd7 	bl	800b296 <USBD_LL_Resume>
}
 800c6e8:	bf00      	nop
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c702:	78fa      	ldrb	r2, [r7, #3]
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe fe2f 	bl	800b36a <USBD_LL_IsoOUTIncomplete>
}
 800c70c:	bf00      	nop
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	460b      	mov	r3, r1
 800c71e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c726:	78fa      	ldrb	r2, [r7, #3]
 800c728:	4611      	mov	r1, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fe fdeb 	bl	800b306 <USBD_LL_IsoINIncomplete>
}
 800c730:	bf00      	nop
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c746:	4618      	mov	r0, r3
 800c748:	f7fe fe41 	bl	800b3ce <USBD_LL_DevConnected>
}
 800c74c:	bf00      	nop
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c762:	4618      	mov	r0, r3
 800c764:	f7fe fe3e 	bl	800b3e4 <USBD_LL_DevDisconnected>
}
 800c768:	bf00      	nop
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d13c      	bne.n	800c7fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c780:	4a20      	ldr	r2, [pc, #128]	@ (800c804 <USBD_LL_Init+0x94>)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a1e      	ldr	r2, [pc, #120]	@ (800c804 <USBD_LL_Init+0x94>)
 800c78c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c790:	4b1c      	ldr	r3, [pc, #112]	@ (800c804 <USBD_LL_Init+0x94>)
 800c792:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c796:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c798:	4b1a      	ldr	r3, [pc, #104]	@ (800c804 <USBD_LL_Init+0x94>)
 800c79a:	2204      	movs	r2, #4
 800c79c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c79e:	4b19      	ldr	r3, [pc, #100]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c7a4:	4b17      	ldr	r3, [pc, #92]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c7aa:	4b16      	ldr	r3, [pc, #88]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c7b0:	4b14      	ldr	r3, [pc, #80]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c7b6:	4b13      	ldr	r3, [pc, #76]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c7bc:	4b11      	ldr	r3, [pc, #68]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7be:	2200      	movs	r2, #0
 800c7c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c7c2:	4b10      	ldr	r3, [pc, #64]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c7c8:	4b0e      	ldr	r3, [pc, #56]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c7ce:	480d      	ldr	r0, [pc, #52]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7d0:	f7fa fbcf 	bl	8006f72 <HAL_PCD_Init>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c7da:	f7f9 fed9 	bl	8006590 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c7de:	2180      	movs	r1, #128	@ 0x80
 800c7e0:	4808      	ldr	r0, [pc, #32]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7e2:	f7fb fde4 	bl	80083ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c7e6:	2240      	movs	r2, #64	@ 0x40
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	4806      	ldr	r0, [pc, #24]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7ec:	f7fb fd98 	bl	8008320 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c7f0:	2280      	movs	r2, #128	@ 0x80
 800c7f2:	2101      	movs	r1, #1
 800c7f4:	4803      	ldr	r0, [pc, #12]	@ (800c804 <USBD_LL_Init+0x94>)
 800c7f6:	f7fb fd93 	bl	8008320 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	20001868 	.word	0x20001868

0800c808 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c810:	2300      	movs	r3, #0
 800c812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c814:	2300      	movs	r3, #0
 800c816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fa fcb6 	bl	8007190 <HAL_PCD_Start>
 800c824:	4603      	mov	r3, r0
 800c826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c828:	7bfb      	ldrb	r3, [r7, #15]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f000 f930 	bl	800ca90 <USBD_Get_USB_Status>
 800c830:	4603      	mov	r3, r0
 800c832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c834:	7bbb      	ldrb	r3, [r7, #14]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b084      	sub	sp, #16
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	4608      	mov	r0, r1
 800c848:	4611      	mov	r1, r2
 800c84a:	461a      	mov	r2, r3
 800c84c:	4603      	mov	r3, r0
 800c84e:	70fb      	strb	r3, [r7, #3]
 800c850:	460b      	mov	r3, r1
 800c852:	70bb      	strb	r3, [r7, #2]
 800c854:	4613      	mov	r3, r2
 800c856:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c858:	2300      	movs	r3, #0
 800c85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c85c:	2300      	movs	r3, #0
 800c85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c866:	78bb      	ldrb	r3, [r7, #2]
 800c868:	883a      	ldrh	r2, [r7, #0]
 800c86a:	78f9      	ldrb	r1, [r7, #3]
 800c86c:	f7fb f98a 	bl	8007b84 <HAL_PCD_EP_Open>
 800c870:	4603      	mov	r3, r0
 800c872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c874:	7bfb      	ldrb	r3, [r7, #15]
 800c876:	4618      	mov	r0, r3
 800c878:	f000 f90a 	bl	800ca90 <USBD_Get_USB_Status>
 800c87c:	4603      	mov	r3, r0
 800c87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c880:	7bbb      	ldrb	r3, [r7, #14]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	460b      	mov	r3, r1
 800c894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8a4:	78fa      	ldrb	r2, [r7, #3]
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fb f9d5 	bl	8007c58 <HAL_PCD_EP_Close>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f8eb 	bl	800ca90 <USBD_Get_USB_Status>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8e2:	78fa      	ldrb	r2, [r7, #3]
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fb fa75 	bl	8007dd6 <HAL_PCD_EP_SetStall>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 f8cc 	bl	800ca90 <USBD_Get_USB_Status>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b084      	sub	sp, #16
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	460b      	mov	r3, r1
 800c910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c916:	2300      	movs	r3, #0
 800c918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c920:	78fa      	ldrb	r2, [r7, #3]
 800c922:	4611      	mov	r1, r2
 800c924:	4618      	mov	r0, r3
 800c926:	f7fb fab9 	bl	8007e9c <HAL_PCD_EP_ClrStall>
 800c92a:	4603      	mov	r3, r0
 800c92c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	4618      	mov	r0, r3
 800c932:	f000 f8ad 	bl	800ca90 <USBD_Get_USB_Status>
 800c936:	4603      	mov	r3, r0
 800c938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c93a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	460b      	mov	r3, r1
 800c94e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c956:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	da0b      	bge.n	800c978 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c960:	78fb      	ldrb	r3, [r7, #3]
 800c962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c966:	68f9      	ldr	r1, [r7, #12]
 800c968:	4613      	mov	r3, r2
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	4413      	add	r3, r2
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	440b      	add	r3, r1
 800c972:	3316      	adds	r3, #22
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	e00b      	b.n	800c990 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c978:	78fb      	ldrb	r3, [r7, #3]
 800c97a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c97e:	68f9      	ldr	r1, [r7, #12]
 800c980:	4613      	mov	r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	4413      	add	r3, r2
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	440b      	add	r3, r1
 800c98a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c98e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c990:	4618      	mov	r0, r3
 800c992:	3714      	adds	r7, #20
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9b6:	78fa      	ldrb	r2, [r7, #3]
 800c9b8:	4611      	mov	r1, r2
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fb f8be 	bl	8007b3c <HAL_PCD_SetAddress>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9c4:	7bfb      	ldrb	r3, [r7, #15]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 f862 	bl	800ca90 <USBD_Get_USB_Status>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b086      	sub	sp, #24
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	60f8      	str	r0, [r7, #12]
 800c9e2:	607a      	str	r2, [r7, #4]
 800c9e4:	603b      	str	r3, [r7, #0]
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c9f8:	7af9      	ldrb	r1, [r7, #11]
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	f7fb f9b0 	bl	8007d62 <HAL_PCD_EP_Transmit>
 800ca02:	4603      	mov	r3, r0
 800ca04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca06:	7dfb      	ldrb	r3, [r7, #23]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 f841 	bl	800ca90 <USBD_Get_USB_Status>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca12:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3718      	adds	r7, #24
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b086      	sub	sp, #24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	607a      	str	r2, [r7, #4]
 800ca26:	603b      	str	r3, [r7, #0]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca30:	2300      	movs	r3, #0
 800ca32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ca3a:	7af9      	ldrb	r1, [r7, #11]
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	f7fb f954 	bl	8007cec <HAL_PCD_EP_Receive>
 800ca44:	4603      	mov	r3, r0
 800ca46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 f820 	bl	800ca90 <USBD_Get_USB_Status>
 800ca50:	4603      	mov	r3, r0
 800ca52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca54:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
	...

0800ca60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca68:	4b03      	ldr	r3, [pc, #12]	@ (800ca78 <USBD_static_malloc+0x18>)
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	370c      	adds	r7, #12
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr
 800ca76:	bf00      	nop
 800ca78:	20001d4c 	.word	0x20001d4c

0800ca7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]

}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	4603      	mov	r3, r0
 800ca98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca9e:	79fb      	ldrb	r3, [r7, #7]
 800caa0:	2b03      	cmp	r3, #3
 800caa2:	d817      	bhi.n	800cad4 <USBD_Get_USB_Status+0x44>
 800caa4:	a201      	add	r2, pc, #4	@ (adr r2, 800caac <USBD_Get_USB_Status+0x1c>)
 800caa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caaa:	bf00      	nop
 800caac:	0800cabd 	.word	0x0800cabd
 800cab0:	0800cac3 	.word	0x0800cac3
 800cab4:	0800cac9 	.word	0x0800cac9
 800cab8:	0800cacf 	.word	0x0800cacf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	73fb      	strb	r3, [r7, #15]
    break;
 800cac0:	e00b      	b.n	800cada <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cac2:	2303      	movs	r3, #3
 800cac4:	73fb      	strb	r3, [r7, #15]
    break;
 800cac6:	e008      	b.n	800cada <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cac8:	2301      	movs	r3, #1
 800caca:	73fb      	strb	r3, [r7, #15]
    break;
 800cacc:	e005      	b.n	800cada <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cace:	2303      	movs	r3, #3
 800cad0:	73fb      	strb	r3, [r7, #15]
    break;
 800cad2:	e002      	b.n	800cada <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cad4:	2303      	movs	r3, #3
 800cad6:	73fb      	strb	r3, [r7, #15]
    break;
 800cad8:	bf00      	nop
  }
  return usb_status;
 800cada:	7bfb      	ldrb	r3, [r7, #15]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <exit>:
 800cae8:	b508      	push	{r3, lr}
 800caea:	4b06      	ldr	r3, [pc, #24]	@ (800cb04 <exit+0x1c>)
 800caec:	4604      	mov	r4, r0
 800caee:	b113      	cbz	r3, 800caf6 <exit+0xe>
 800caf0:	2100      	movs	r1, #0
 800caf2:	f3af 8000 	nop.w
 800caf6:	4b04      	ldr	r3, [pc, #16]	@ (800cb08 <exit+0x20>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	b103      	cbz	r3, 800cafe <exit+0x16>
 800cafc:	4798      	blx	r3
 800cafe:	4620      	mov	r0, r4
 800cb00:	f7f9 fdf0 	bl	80066e4 <_exit>
 800cb04:	00000000 	.word	0x00000000
 800cb08:	20001ea0 	.word	0x20001ea0

0800cb0c <malloc>:
 800cb0c:	4b02      	ldr	r3, [pc, #8]	@ (800cb18 <malloc+0xc>)
 800cb0e:	4601      	mov	r1, r0
 800cb10:	6818      	ldr	r0, [r3, #0]
 800cb12:	f000 b825 	b.w	800cb60 <_malloc_r>
 800cb16:	bf00      	nop
 800cb18:	2000011c 	.word	0x2000011c

0800cb1c <sbrk_aligned>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	4e0f      	ldr	r6, [pc, #60]	@ (800cb5c <sbrk_aligned+0x40>)
 800cb20:	460c      	mov	r4, r1
 800cb22:	6831      	ldr	r1, [r6, #0]
 800cb24:	4605      	mov	r5, r0
 800cb26:	b911      	cbnz	r1, 800cb2e <sbrk_aligned+0x12>
 800cb28:	f000 faea 	bl	800d100 <_sbrk_r>
 800cb2c:	6030      	str	r0, [r6, #0]
 800cb2e:	4621      	mov	r1, r4
 800cb30:	4628      	mov	r0, r5
 800cb32:	f000 fae5 	bl	800d100 <_sbrk_r>
 800cb36:	1c43      	adds	r3, r0, #1
 800cb38:	d103      	bne.n	800cb42 <sbrk_aligned+0x26>
 800cb3a:	f04f 34ff 	mov.w	r4, #4294967295
 800cb3e:	4620      	mov	r0, r4
 800cb40:	bd70      	pop	{r4, r5, r6, pc}
 800cb42:	1cc4      	adds	r4, r0, #3
 800cb44:	f024 0403 	bic.w	r4, r4, #3
 800cb48:	42a0      	cmp	r0, r4
 800cb4a:	d0f8      	beq.n	800cb3e <sbrk_aligned+0x22>
 800cb4c:	1a21      	subs	r1, r4, r0
 800cb4e:	4628      	mov	r0, r5
 800cb50:	f000 fad6 	bl	800d100 <_sbrk_r>
 800cb54:	3001      	adds	r0, #1
 800cb56:	d1f2      	bne.n	800cb3e <sbrk_aligned+0x22>
 800cb58:	e7ef      	b.n	800cb3a <sbrk_aligned+0x1e>
 800cb5a:	bf00      	nop
 800cb5c:	20001d60 	.word	0x20001d60

0800cb60 <_malloc_r>:
 800cb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb64:	1ccd      	adds	r5, r1, #3
 800cb66:	f025 0503 	bic.w	r5, r5, #3
 800cb6a:	3508      	adds	r5, #8
 800cb6c:	2d0c      	cmp	r5, #12
 800cb6e:	bf38      	it	cc
 800cb70:	250c      	movcc	r5, #12
 800cb72:	2d00      	cmp	r5, #0
 800cb74:	4606      	mov	r6, r0
 800cb76:	db01      	blt.n	800cb7c <_malloc_r+0x1c>
 800cb78:	42a9      	cmp	r1, r5
 800cb7a:	d904      	bls.n	800cb86 <_malloc_r+0x26>
 800cb7c:	230c      	movs	r3, #12
 800cb7e:	6033      	str	r3, [r6, #0]
 800cb80:	2000      	movs	r0, #0
 800cb82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc5c <_malloc_r+0xfc>
 800cb8a:	f000 f869 	bl	800cc60 <__malloc_lock>
 800cb8e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb92:	461c      	mov	r4, r3
 800cb94:	bb44      	cbnz	r4, 800cbe8 <_malloc_r+0x88>
 800cb96:	4629      	mov	r1, r5
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7ff ffbf 	bl	800cb1c <sbrk_aligned>
 800cb9e:	1c43      	adds	r3, r0, #1
 800cba0:	4604      	mov	r4, r0
 800cba2:	d158      	bne.n	800cc56 <_malloc_r+0xf6>
 800cba4:	f8d8 4000 	ldr.w	r4, [r8]
 800cba8:	4627      	mov	r7, r4
 800cbaa:	2f00      	cmp	r7, #0
 800cbac:	d143      	bne.n	800cc36 <_malloc_r+0xd6>
 800cbae:	2c00      	cmp	r4, #0
 800cbb0:	d04b      	beq.n	800cc4a <_malloc_r+0xea>
 800cbb2:	6823      	ldr	r3, [r4, #0]
 800cbb4:	4639      	mov	r1, r7
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	eb04 0903 	add.w	r9, r4, r3
 800cbbc:	f000 faa0 	bl	800d100 <_sbrk_r>
 800cbc0:	4581      	cmp	r9, r0
 800cbc2:	d142      	bne.n	800cc4a <_malloc_r+0xea>
 800cbc4:	6821      	ldr	r1, [r4, #0]
 800cbc6:	1a6d      	subs	r5, r5, r1
 800cbc8:	4629      	mov	r1, r5
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f7ff ffa6 	bl	800cb1c <sbrk_aligned>
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	d03a      	beq.n	800cc4a <_malloc_r+0xea>
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	442b      	add	r3, r5
 800cbd8:	6023      	str	r3, [r4, #0]
 800cbda:	f8d8 3000 	ldr.w	r3, [r8]
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	bb62      	cbnz	r2, 800cc3c <_malloc_r+0xdc>
 800cbe2:	f8c8 7000 	str.w	r7, [r8]
 800cbe6:	e00f      	b.n	800cc08 <_malloc_r+0xa8>
 800cbe8:	6822      	ldr	r2, [r4, #0]
 800cbea:	1b52      	subs	r2, r2, r5
 800cbec:	d420      	bmi.n	800cc30 <_malloc_r+0xd0>
 800cbee:	2a0b      	cmp	r2, #11
 800cbf0:	d917      	bls.n	800cc22 <_malloc_r+0xc2>
 800cbf2:	1961      	adds	r1, r4, r5
 800cbf4:	42a3      	cmp	r3, r4
 800cbf6:	6025      	str	r5, [r4, #0]
 800cbf8:	bf18      	it	ne
 800cbfa:	6059      	strne	r1, [r3, #4]
 800cbfc:	6863      	ldr	r3, [r4, #4]
 800cbfe:	bf08      	it	eq
 800cc00:	f8c8 1000 	streq.w	r1, [r8]
 800cc04:	5162      	str	r2, [r4, r5]
 800cc06:	604b      	str	r3, [r1, #4]
 800cc08:	4630      	mov	r0, r6
 800cc0a:	f000 f82f 	bl	800cc6c <__malloc_unlock>
 800cc0e:	f104 000b 	add.w	r0, r4, #11
 800cc12:	1d23      	adds	r3, r4, #4
 800cc14:	f020 0007 	bic.w	r0, r0, #7
 800cc18:	1ac2      	subs	r2, r0, r3
 800cc1a:	bf1c      	itt	ne
 800cc1c:	1a1b      	subne	r3, r3, r0
 800cc1e:	50a3      	strne	r3, [r4, r2]
 800cc20:	e7af      	b.n	800cb82 <_malloc_r+0x22>
 800cc22:	6862      	ldr	r2, [r4, #4]
 800cc24:	42a3      	cmp	r3, r4
 800cc26:	bf0c      	ite	eq
 800cc28:	f8c8 2000 	streq.w	r2, [r8]
 800cc2c:	605a      	strne	r2, [r3, #4]
 800cc2e:	e7eb      	b.n	800cc08 <_malloc_r+0xa8>
 800cc30:	4623      	mov	r3, r4
 800cc32:	6864      	ldr	r4, [r4, #4]
 800cc34:	e7ae      	b.n	800cb94 <_malloc_r+0x34>
 800cc36:	463c      	mov	r4, r7
 800cc38:	687f      	ldr	r7, [r7, #4]
 800cc3a:	e7b6      	b.n	800cbaa <_malloc_r+0x4a>
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	d1fb      	bne.n	800cc3c <_malloc_r+0xdc>
 800cc44:	2300      	movs	r3, #0
 800cc46:	6053      	str	r3, [r2, #4]
 800cc48:	e7de      	b.n	800cc08 <_malloc_r+0xa8>
 800cc4a:	230c      	movs	r3, #12
 800cc4c:	6033      	str	r3, [r6, #0]
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f000 f80c 	bl	800cc6c <__malloc_unlock>
 800cc54:	e794      	b.n	800cb80 <_malloc_r+0x20>
 800cc56:	6005      	str	r5, [r0, #0]
 800cc58:	e7d6      	b.n	800cc08 <_malloc_r+0xa8>
 800cc5a:	bf00      	nop
 800cc5c:	20001d64 	.word	0x20001d64

0800cc60 <__malloc_lock>:
 800cc60:	4801      	ldr	r0, [pc, #4]	@ (800cc68 <__malloc_lock+0x8>)
 800cc62:	f000 ba9a 	b.w	800d19a <__retarget_lock_acquire_recursive>
 800cc66:	bf00      	nop
 800cc68:	20001ea8 	.word	0x20001ea8

0800cc6c <__malloc_unlock>:
 800cc6c:	4801      	ldr	r0, [pc, #4]	@ (800cc74 <__malloc_unlock+0x8>)
 800cc6e:	f000 ba95 	b.w	800d19c <__retarget_lock_release_recursive>
 800cc72:	bf00      	nop
 800cc74:	20001ea8 	.word	0x20001ea8

0800cc78 <std>:
 800cc78:	2300      	movs	r3, #0
 800cc7a:	b510      	push	{r4, lr}
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc86:	6083      	str	r3, [r0, #8]
 800cc88:	8181      	strh	r1, [r0, #12]
 800cc8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc8c:	81c2      	strh	r2, [r0, #14]
 800cc8e:	6183      	str	r3, [r0, #24]
 800cc90:	4619      	mov	r1, r3
 800cc92:	2208      	movs	r2, #8
 800cc94:	305c      	adds	r0, #92	@ 0x5c
 800cc96:	f000 f9e3 	bl	800d060 <memset>
 800cc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd0 <std+0x58>)
 800cc9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd4 <std+0x5c>)
 800cca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cca2:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd8 <std+0x60>)
 800cca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cca6:	4b0d      	ldr	r3, [pc, #52]	@ (800ccdc <std+0x64>)
 800cca8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ccaa:	4b0d      	ldr	r3, [pc, #52]	@ (800cce0 <std+0x68>)
 800ccac:	6224      	str	r4, [r4, #32]
 800ccae:	429c      	cmp	r4, r3
 800ccb0:	d006      	beq.n	800ccc0 <std+0x48>
 800ccb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ccb6:	4294      	cmp	r4, r2
 800ccb8:	d002      	beq.n	800ccc0 <std+0x48>
 800ccba:	33d0      	adds	r3, #208	@ 0xd0
 800ccbc:	429c      	cmp	r4, r3
 800ccbe:	d105      	bne.n	800cccc <std+0x54>
 800ccc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ccc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc8:	f000 ba66 	b.w	800d198 <__retarget_lock_init_recursive>
 800cccc:	bd10      	pop	{r4, pc}
 800ccce:	bf00      	nop
 800ccd0:	0800ceb1 	.word	0x0800ceb1
 800ccd4:	0800ced3 	.word	0x0800ced3
 800ccd8:	0800cf0b 	.word	0x0800cf0b
 800ccdc:	0800cf2f 	.word	0x0800cf2f
 800cce0:	20001d68 	.word	0x20001d68

0800cce4 <stdio_exit_handler>:
 800cce4:	4a02      	ldr	r2, [pc, #8]	@ (800ccf0 <stdio_exit_handler+0xc>)
 800cce6:	4903      	ldr	r1, [pc, #12]	@ (800ccf4 <stdio_exit_handler+0x10>)
 800cce8:	4803      	ldr	r0, [pc, #12]	@ (800ccf8 <stdio_exit_handler+0x14>)
 800ccea:	f000 b869 	b.w	800cdc0 <_fwalk_sglue>
 800ccee:	bf00      	nop
 800ccf0:	20000110 	.word	0x20000110
 800ccf4:	0800d34d 	.word	0x0800d34d
 800ccf8:	20000120 	.word	0x20000120

0800ccfc <cleanup_stdio>:
 800ccfc:	6841      	ldr	r1, [r0, #4]
 800ccfe:	4b0c      	ldr	r3, [pc, #48]	@ (800cd30 <cleanup_stdio+0x34>)
 800cd00:	4299      	cmp	r1, r3
 800cd02:	b510      	push	{r4, lr}
 800cd04:	4604      	mov	r4, r0
 800cd06:	d001      	beq.n	800cd0c <cleanup_stdio+0x10>
 800cd08:	f000 fb20 	bl	800d34c <_fflush_r>
 800cd0c:	68a1      	ldr	r1, [r4, #8]
 800cd0e:	4b09      	ldr	r3, [pc, #36]	@ (800cd34 <cleanup_stdio+0x38>)
 800cd10:	4299      	cmp	r1, r3
 800cd12:	d002      	beq.n	800cd1a <cleanup_stdio+0x1e>
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 fb19 	bl	800d34c <_fflush_r>
 800cd1a:	68e1      	ldr	r1, [r4, #12]
 800cd1c:	4b06      	ldr	r3, [pc, #24]	@ (800cd38 <cleanup_stdio+0x3c>)
 800cd1e:	4299      	cmp	r1, r3
 800cd20:	d004      	beq.n	800cd2c <cleanup_stdio+0x30>
 800cd22:	4620      	mov	r0, r4
 800cd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd28:	f000 bb10 	b.w	800d34c <_fflush_r>
 800cd2c:	bd10      	pop	{r4, pc}
 800cd2e:	bf00      	nop
 800cd30:	20001d68 	.word	0x20001d68
 800cd34:	20001dd0 	.word	0x20001dd0
 800cd38:	20001e38 	.word	0x20001e38

0800cd3c <global_stdio_init.part.0>:
 800cd3c:	b510      	push	{r4, lr}
 800cd3e:	4b0b      	ldr	r3, [pc, #44]	@ (800cd6c <global_stdio_init.part.0+0x30>)
 800cd40:	4c0b      	ldr	r4, [pc, #44]	@ (800cd70 <global_stdio_init.part.0+0x34>)
 800cd42:	4a0c      	ldr	r2, [pc, #48]	@ (800cd74 <global_stdio_init.part.0+0x38>)
 800cd44:	601a      	str	r2, [r3, #0]
 800cd46:	4620      	mov	r0, r4
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2104      	movs	r1, #4
 800cd4c:	f7ff ff94 	bl	800cc78 <std>
 800cd50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd54:	2201      	movs	r2, #1
 800cd56:	2109      	movs	r1, #9
 800cd58:	f7ff ff8e 	bl	800cc78 <std>
 800cd5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd60:	2202      	movs	r2, #2
 800cd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd66:	2112      	movs	r1, #18
 800cd68:	f7ff bf86 	b.w	800cc78 <std>
 800cd6c:	20001ea0 	.word	0x20001ea0
 800cd70:	20001d68 	.word	0x20001d68
 800cd74:	0800cce5 	.word	0x0800cce5

0800cd78 <__sfp_lock_acquire>:
 800cd78:	4801      	ldr	r0, [pc, #4]	@ (800cd80 <__sfp_lock_acquire+0x8>)
 800cd7a:	f000 ba0e 	b.w	800d19a <__retarget_lock_acquire_recursive>
 800cd7e:	bf00      	nop
 800cd80:	20001ea9 	.word	0x20001ea9

0800cd84 <__sfp_lock_release>:
 800cd84:	4801      	ldr	r0, [pc, #4]	@ (800cd8c <__sfp_lock_release+0x8>)
 800cd86:	f000 ba09 	b.w	800d19c <__retarget_lock_release_recursive>
 800cd8a:	bf00      	nop
 800cd8c:	20001ea9 	.word	0x20001ea9

0800cd90 <__sinit>:
 800cd90:	b510      	push	{r4, lr}
 800cd92:	4604      	mov	r4, r0
 800cd94:	f7ff fff0 	bl	800cd78 <__sfp_lock_acquire>
 800cd98:	6a23      	ldr	r3, [r4, #32]
 800cd9a:	b11b      	cbz	r3, 800cda4 <__sinit+0x14>
 800cd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cda0:	f7ff bff0 	b.w	800cd84 <__sfp_lock_release>
 800cda4:	4b04      	ldr	r3, [pc, #16]	@ (800cdb8 <__sinit+0x28>)
 800cda6:	6223      	str	r3, [r4, #32]
 800cda8:	4b04      	ldr	r3, [pc, #16]	@ (800cdbc <__sinit+0x2c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1f5      	bne.n	800cd9c <__sinit+0xc>
 800cdb0:	f7ff ffc4 	bl	800cd3c <global_stdio_init.part.0>
 800cdb4:	e7f2      	b.n	800cd9c <__sinit+0xc>
 800cdb6:	bf00      	nop
 800cdb8:	0800ccfd 	.word	0x0800ccfd
 800cdbc:	20001ea0 	.word	0x20001ea0

0800cdc0 <_fwalk_sglue>:
 800cdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	4688      	mov	r8, r1
 800cdc8:	4614      	mov	r4, r2
 800cdca:	2600      	movs	r6, #0
 800cdcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdd0:	f1b9 0901 	subs.w	r9, r9, #1
 800cdd4:	d505      	bpl.n	800cde2 <_fwalk_sglue+0x22>
 800cdd6:	6824      	ldr	r4, [r4, #0]
 800cdd8:	2c00      	cmp	r4, #0
 800cdda:	d1f7      	bne.n	800cdcc <_fwalk_sglue+0xc>
 800cddc:	4630      	mov	r0, r6
 800cdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cde2:	89ab      	ldrh	r3, [r5, #12]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d907      	bls.n	800cdf8 <_fwalk_sglue+0x38>
 800cde8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdec:	3301      	adds	r3, #1
 800cdee:	d003      	beq.n	800cdf8 <_fwalk_sglue+0x38>
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	47c0      	blx	r8
 800cdf6:	4306      	orrs	r6, r0
 800cdf8:	3568      	adds	r5, #104	@ 0x68
 800cdfa:	e7e9      	b.n	800cdd0 <_fwalk_sglue+0x10>

0800cdfc <_fwrite_r>:
 800cdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce00:	9c08      	ldr	r4, [sp, #32]
 800ce02:	468a      	mov	sl, r1
 800ce04:	4690      	mov	r8, r2
 800ce06:	fb02 f903 	mul.w	r9, r2, r3
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	b118      	cbz	r0, 800ce16 <_fwrite_r+0x1a>
 800ce0e:	6a03      	ldr	r3, [r0, #32]
 800ce10:	b90b      	cbnz	r3, 800ce16 <_fwrite_r+0x1a>
 800ce12:	f7ff ffbd 	bl	800cd90 <__sinit>
 800ce16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce18:	07dd      	lsls	r5, r3, #31
 800ce1a:	d405      	bmi.n	800ce28 <_fwrite_r+0x2c>
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	0598      	lsls	r0, r3, #22
 800ce20:	d402      	bmi.n	800ce28 <_fwrite_r+0x2c>
 800ce22:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce24:	f000 f9b9 	bl	800d19a <__retarget_lock_acquire_recursive>
 800ce28:	89a3      	ldrh	r3, [r4, #12]
 800ce2a:	0719      	lsls	r1, r3, #28
 800ce2c:	d516      	bpl.n	800ce5c <_fwrite_r+0x60>
 800ce2e:	6923      	ldr	r3, [r4, #16]
 800ce30:	b1a3      	cbz	r3, 800ce5c <_fwrite_r+0x60>
 800ce32:	2500      	movs	r5, #0
 800ce34:	454d      	cmp	r5, r9
 800ce36:	d01f      	beq.n	800ce78 <_fwrite_r+0x7c>
 800ce38:	68a7      	ldr	r7, [r4, #8]
 800ce3a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800ce3e:	3f01      	subs	r7, #1
 800ce40:	2f00      	cmp	r7, #0
 800ce42:	60a7      	str	r7, [r4, #8]
 800ce44:	da04      	bge.n	800ce50 <_fwrite_r+0x54>
 800ce46:	69a3      	ldr	r3, [r4, #24]
 800ce48:	429f      	cmp	r7, r3
 800ce4a:	db0f      	blt.n	800ce6c <_fwrite_r+0x70>
 800ce4c:	290a      	cmp	r1, #10
 800ce4e:	d00d      	beq.n	800ce6c <_fwrite_r+0x70>
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	1c5a      	adds	r2, r3, #1
 800ce54:	6022      	str	r2, [r4, #0]
 800ce56:	7019      	strb	r1, [r3, #0]
 800ce58:	3501      	adds	r5, #1
 800ce5a:	e7eb      	b.n	800ce34 <_fwrite_r+0x38>
 800ce5c:	4621      	mov	r1, r4
 800ce5e:	4630      	mov	r0, r6
 800ce60:	f000 f8a8 	bl	800cfb4 <__swsetup_r>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d0e4      	beq.n	800ce32 <_fwrite_r+0x36>
 800ce68:	2500      	movs	r5, #0
 800ce6a:	e005      	b.n	800ce78 <_fwrite_r+0x7c>
 800ce6c:	4622      	mov	r2, r4
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f000 f861 	bl	800cf36 <__swbuf_r>
 800ce74:	3001      	adds	r0, #1
 800ce76:	d1ef      	bne.n	800ce58 <_fwrite_r+0x5c>
 800ce78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce7a:	07da      	lsls	r2, r3, #31
 800ce7c:	d405      	bmi.n	800ce8a <_fwrite_r+0x8e>
 800ce7e:	89a3      	ldrh	r3, [r4, #12]
 800ce80:	059b      	lsls	r3, r3, #22
 800ce82:	d402      	bmi.n	800ce8a <_fwrite_r+0x8e>
 800ce84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce86:	f000 f989 	bl	800d19c <__retarget_lock_release_recursive>
 800ce8a:	fbb5 f0f8 	udiv	r0, r5, r8
 800ce8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800ce94 <fwrite>:
 800ce94:	b507      	push	{r0, r1, r2, lr}
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	460a      	mov	r2, r1
 800ce9c:	4601      	mov	r1, r0
 800ce9e:	4803      	ldr	r0, [pc, #12]	@ (800ceac <fwrite+0x18>)
 800cea0:	6800      	ldr	r0, [r0, #0]
 800cea2:	f7ff ffab 	bl	800cdfc <_fwrite_r>
 800cea6:	b003      	add	sp, #12
 800cea8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ceac:	2000011c 	.word	0x2000011c

0800ceb0 <__sread>:
 800ceb0:	b510      	push	{r4, lr}
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb8:	f000 f910 	bl	800d0dc <_read_r>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	bfab      	itete	ge
 800cec0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cec2:	89a3      	ldrhlt	r3, [r4, #12]
 800cec4:	181b      	addge	r3, r3, r0
 800cec6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ceca:	bfac      	ite	ge
 800cecc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cece:	81a3      	strhlt	r3, [r4, #12]
 800ced0:	bd10      	pop	{r4, pc}

0800ced2 <__swrite>:
 800ced2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced6:	461f      	mov	r7, r3
 800ced8:	898b      	ldrh	r3, [r1, #12]
 800ceda:	05db      	lsls	r3, r3, #23
 800cedc:	4605      	mov	r5, r0
 800cede:	460c      	mov	r4, r1
 800cee0:	4616      	mov	r6, r2
 800cee2:	d505      	bpl.n	800cef0 <__swrite+0x1e>
 800cee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee8:	2302      	movs	r3, #2
 800ceea:	2200      	movs	r2, #0
 800ceec:	f000 f8e4 	bl	800d0b8 <_lseek_r>
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cef6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cefa:	81a3      	strh	r3, [r4, #12]
 800cefc:	4632      	mov	r2, r6
 800cefe:	463b      	mov	r3, r7
 800cf00:	4628      	mov	r0, r5
 800cf02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf06:	f000 b90b 	b.w	800d120 <_write_r>

0800cf0a <__sseek>:
 800cf0a:	b510      	push	{r4, lr}
 800cf0c:	460c      	mov	r4, r1
 800cf0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf12:	f000 f8d1 	bl	800d0b8 <_lseek_r>
 800cf16:	1c43      	adds	r3, r0, #1
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	bf15      	itete	ne
 800cf1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf26:	81a3      	strheq	r3, [r4, #12]
 800cf28:	bf18      	it	ne
 800cf2a:	81a3      	strhne	r3, [r4, #12]
 800cf2c:	bd10      	pop	{r4, pc}

0800cf2e <__sclose>:
 800cf2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf32:	f000 b8b1 	b.w	800d098 <_close_r>

0800cf36 <__swbuf_r>:
 800cf36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf38:	460e      	mov	r6, r1
 800cf3a:	4614      	mov	r4, r2
 800cf3c:	4605      	mov	r5, r0
 800cf3e:	b118      	cbz	r0, 800cf48 <__swbuf_r+0x12>
 800cf40:	6a03      	ldr	r3, [r0, #32]
 800cf42:	b90b      	cbnz	r3, 800cf48 <__swbuf_r+0x12>
 800cf44:	f7ff ff24 	bl	800cd90 <__sinit>
 800cf48:	69a3      	ldr	r3, [r4, #24]
 800cf4a:	60a3      	str	r3, [r4, #8]
 800cf4c:	89a3      	ldrh	r3, [r4, #12]
 800cf4e:	071a      	lsls	r2, r3, #28
 800cf50:	d501      	bpl.n	800cf56 <__swbuf_r+0x20>
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	b943      	cbnz	r3, 800cf68 <__swbuf_r+0x32>
 800cf56:	4621      	mov	r1, r4
 800cf58:	4628      	mov	r0, r5
 800cf5a:	f000 f82b 	bl	800cfb4 <__swsetup_r>
 800cf5e:	b118      	cbz	r0, 800cf68 <__swbuf_r+0x32>
 800cf60:	f04f 37ff 	mov.w	r7, #4294967295
 800cf64:	4638      	mov	r0, r7
 800cf66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	6922      	ldr	r2, [r4, #16]
 800cf6c:	1a98      	subs	r0, r3, r2
 800cf6e:	6963      	ldr	r3, [r4, #20]
 800cf70:	b2f6      	uxtb	r6, r6
 800cf72:	4283      	cmp	r3, r0
 800cf74:	4637      	mov	r7, r6
 800cf76:	dc05      	bgt.n	800cf84 <__swbuf_r+0x4e>
 800cf78:	4621      	mov	r1, r4
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	f000 f9e6 	bl	800d34c <_fflush_r>
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d1ed      	bne.n	800cf60 <__swbuf_r+0x2a>
 800cf84:	68a3      	ldr	r3, [r4, #8]
 800cf86:	3b01      	subs	r3, #1
 800cf88:	60a3      	str	r3, [r4, #8]
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	1c5a      	adds	r2, r3, #1
 800cf8e:	6022      	str	r2, [r4, #0]
 800cf90:	701e      	strb	r6, [r3, #0]
 800cf92:	6962      	ldr	r2, [r4, #20]
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d004      	beq.n	800cfa4 <__swbuf_r+0x6e>
 800cf9a:	89a3      	ldrh	r3, [r4, #12]
 800cf9c:	07db      	lsls	r3, r3, #31
 800cf9e:	d5e1      	bpl.n	800cf64 <__swbuf_r+0x2e>
 800cfa0:	2e0a      	cmp	r6, #10
 800cfa2:	d1df      	bne.n	800cf64 <__swbuf_r+0x2e>
 800cfa4:	4621      	mov	r1, r4
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	f000 f9d0 	bl	800d34c <_fflush_r>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d0d9      	beq.n	800cf64 <__swbuf_r+0x2e>
 800cfb0:	e7d6      	b.n	800cf60 <__swbuf_r+0x2a>
	...

0800cfb4 <__swsetup_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4b29      	ldr	r3, [pc, #164]	@ (800d05c <__swsetup_r+0xa8>)
 800cfb8:	4605      	mov	r5, r0
 800cfba:	6818      	ldr	r0, [r3, #0]
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	b118      	cbz	r0, 800cfc8 <__swsetup_r+0x14>
 800cfc0:	6a03      	ldr	r3, [r0, #32]
 800cfc2:	b90b      	cbnz	r3, 800cfc8 <__swsetup_r+0x14>
 800cfc4:	f7ff fee4 	bl	800cd90 <__sinit>
 800cfc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfcc:	0719      	lsls	r1, r3, #28
 800cfce:	d422      	bmi.n	800d016 <__swsetup_r+0x62>
 800cfd0:	06da      	lsls	r2, r3, #27
 800cfd2:	d407      	bmi.n	800cfe4 <__swsetup_r+0x30>
 800cfd4:	2209      	movs	r2, #9
 800cfd6:	602a      	str	r2, [r5, #0]
 800cfd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfdc:	81a3      	strh	r3, [r4, #12]
 800cfde:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe2:	e033      	b.n	800d04c <__swsetup_r+0x98>
 800cfe4:	0758      	lsls	r0, r3, #29
 800cfe6:	d512      	bpl.n	800d00e <__swsetup_r+0x5a>
 800cfe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfea:	b141      	cbz	r1, 800cffe <__swsetup_r+0x4a>
 800cfec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cff0:	4299      	cmp	r1, r3
 800cff2:	d002      	beq.n	800cffa <__swsetup_r+0x46>
 800cff4:	4628      	mov	r0, r5
 800cff6:	f000 f8db 	bl	800d1b0 <_free_r>
 800cffa:	2300      	movs	r3, #0
 800cffc:	6363      	str	r3, [r4, #52]	@ 0x34
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d004:	81a3      	strh	r3, [r4, #12]
 800d006:	2300      	movs	r3, #0
 800d008:	6063      	str	r3, [r4, #4]
 800d00a:	6923      	ldr	r3, [r4, #16]
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	f043 0308 	orr.w	r3, r3, #8
 800d014:	81a3      	strh	r3, [r4, #12]
 800d016:	6923      	ldr	r3, [r4, #16]
 800d018:	b94b      	cbnz	r3, 800d02e <__swsetup_r+0x7a>
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d024:	d003      	beq.n	800d02e <__swsetup_r+0x7a>
 800d026:	4621      	mov	r1, r4
 800d028:	4628      	mov	r0, r5
 800d02a:	f000 f9dd 	bl	800d3e8 <__smakebuf_r>
 800d02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d032:	f013 0201 	ands.w	r2, r3, #1
 800d036:	d00a      	beq.n	800d04e <__swsetup_r+0x9a>
 800d038:	2200      	movs	r2, #0
 800d03a:	60a2      	str	r2, [r4, #8]
 800d03c:	6962      	ldr	r2, [r4, #20]
 800d03e:	4252      	negs	r2, r2
 800d040:	61a2      	str	r2, [r4, #24]
 800d042:	6922      	ldr	r2, [r4, #16]
 800d044:	b942      	cbnz	r2, 800d058 <__swsetup_r+0xa4>
 800d046:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d04a:	d1c5      	bne.n	800cfd8 <__swsetup_r+0x24>
 800d04c:	bd38      	pop	{r3, r4, r5, pc}
 800d04e:	0799      	lsls	r1, r3, #30
 800d050:	bf58      	it	pl
 800d052:	6962      	ldrpl	r2, [r4, #20]
 800d054:	60a2      	str	r2, [r4, #8]
 800d056:	e7f4      	b.n	800d042 <__swsetup_r+0x8e>
 800d058:	2000      	movs	r0, #0
 800d05a:	e7f7      	b.n	800d04c <__swsetup_r+0x98>
 800d05c:	2000011c 	.word	0x2000011c

0800d060 <memset>:
 800d060:	4402      	add	r2, r0
 800d062:	4603      	mov	r3, r0
 800d064:	4293      	cmp	r3, r2
 800d066:	d100      	bne.n	800d06a <memset+0xa>
 800d068:	4770      	bx	lr
 800d06a:	f803 1b01 	strb.w	r1, [r3], #1
 800d06e:	e7f9      	b.n	800d064 <memset+0x4>

0800d070 <strncpy>:
 800d070:	b510      	push	{r4, lr}
 800d072:	3901      	subs	r1, #1
 800d074:	4603      	mov	r3, r0
 800d076:	b132      	cbz	r2, 800d086 <strncpy+0x16>
 800d078:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d07c:	f803 4b01 	strb.w	r4, [r3], #1
 800d080:	3a01      	subs	r2, #1
 800d082:	2c00      	cmp	r4, #0
 800d084:	d1f7      	bne.n	800d076 <strncpy+0x6>
 800d086:	441a      	add	r2, r3
 800d088:	2100      	movs	r1, #0
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d100      	bne.n	800d090 <strncpy+0x20>
 800d08e:	bd10      	pop	{r4, pc}
 800d090:	f803 1b01 	strb.w	r1, [r3], #1
 800d094:	e7f9      	b.n	800d08a <strncpy+0x1a>
	...

0800d098 <_close_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4d06      	ldr	r5, [pc, #24]	@ (800d0b4 <_close_r+0x1c>)
 800d09c:	2300      	movs	r3, #0
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4608      	mov	r0, r1
 800d0a2:	602b      	str	r3, [r5, #0]
 800d0a4:	f7f9 fb62 	bl	800676c <_close>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d102      	bne.n	800d0b2 <_close_r+0x1a>
 800d0ac:	682b      	ldr	r3, [r5, #0]
 800d0ae:	b103      	cbz	r3, 800d0b2 <_close_r+0x1a>
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}
 800d0b4:	20001ea4 	.word	0x20001ea4

0800d0b8 <_lseek_r>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	4d07      	ldr	r5, [pc, #28]	@ (800d0d8 <_lseek_r+0x20>)
 800d0bc:	4604      	mov	r4, r0
 800d0be:	4608      	mov	r0, r1
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	602a      	str	r2, [r5, #0]
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	f7f9 fb77 	bl	80067ba <_lseek>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	d102      	bne.n	800d0d6 <_lseek_r+0x1e>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	b103      	cbz	r3, 800d0d6 <_lseek_r+0x1e>
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	20001ea4 	.word	0x20001ea4

0800d0dc <_read_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d07      	ldr	r5, [pc, #28]	@ (800d0fc <_read_r+0x20>)
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	4608      	mov	r0, r1
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	602a      	str	r2, [r5, #0]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f7f9 fb05 	bl	80066fa <_read>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_read_r+0x1e>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_read_r+0x1e>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	20001ea4 	.word	0x20001ea4

0800d100 <_sbrk_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4d06      	ldr	r5, [pc, #24]	@ (800d11c <_sbrk_r+0x1c>)
 800d104:	2300      	movs	r3, #0
 800d106:	4604      	mov	r4, r0
 800d108:	4608      	mov	r0, r1
 800d10a:	602b      	str	r3, [r5, #0]
 800d10c:	f7f9 fb62 	bl	80067d4 <_sbrk>
 800d110:	1c43      	adds	r3, r0, #1
 800d112:	d102      	bne.n	800d11a <_sbrk_r+0x1a>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	b103      	cbz	r3, 800d11a <_sbrk_r+0x1a>
 800d118:	6023      	str	r3, [r4, #0]
 800d11a:	bd38      	pop	{r3, r4, r5, pc}
 800d11c:	20001ea4 	.word	0x20001ea4

0800d120 <_write_r>:
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4d07      	ldr	r5, [pc, #28]	@ (800d140 <_write_r+0x20>)
 800d124:	4604      	mov	r4, r0
 800d126:	4608      	mov	r0, r1
 800d128:	4611      	mov	r1, r2
 800d12a:	2200      	movs	r2, #0
 800d12c:	602a      	str	r2, [r5, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	f7f9 fb00 	bl	8006734 <_write>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_write_r+0x1e>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_write_r+0x1e>
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	20001ea4 	.word	0x20001ea4

0800d144 <__errno>:
 800d144:	4b01      	ldr	r3, [pc, #4]	@ (800d14c <__errno+0x8>)
 800d146:	6818      	ldr	r0, [r3, #0]
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	2000011c 	.word	0x2000011c

0800d150 <__libc_init_array>:
 800d150:	b570      	push	{r4, r5, r6, lr}
 800d152:	4d0d      	ldr	r5, [pc, #52]	@ (800d188 <__libc_init_array+0x38>)
 800d154:	4c0d      	ldr	r4, [pc, #52]	@ (800d18c <__libc_init_array+0x3c>)
 800d156:	1b64      	subs	r4, r4, r5
 800d158:	10a4      	asrs	r4, r4, #2
 800d15a:	2600      	movs	r6, #0
 800d15c:	42a6      	cmp	r6, r4
 800d15e:	d109      	bne.n	800d174 <__libc_init_array+0x24>
 800d160:	4d0b      	ldr	r5, [pc, #44]	@ (800d190 <__libc_init_array+0x40>)
 800d162:	4c0c      	ldr	r4, [pc, #48]	@ (800d194 <__libc_init_array+0x44>)
 800d164:	f000 f99e 	bl	800d4a4 <_init>
 800d168:	1b64      	subs	r4, r4, r5
 800d16a:	10a4      	asrs	r4, r4, #2
 800d16c:	2600      	movs	r6, #0
 800d16e:	42a6      	cmp	r6, r4
 800d170:	d105      	bne.n	800d17e <__libc_init_array+0x2e>
 800d172:	bd70      	pop	{r4, r5, r6, pc}
 800d174:	f855 3b04 	ldr.w	r3, [r5], #4
 800d178:	4798      	blx	r3
 800d17a:	3601      	adds	r6, #1
 800d17c:	e7ee      	b.n	800d15c <__libc_init_array+0xc>
 800d17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d182:	4798      	blx	r3
 800d184:	3601      	adds	r6, #1
 800d186:	e7f2      	b.n	800d16e <__libc_init_array+0x1e>
 800d188:	08011530 	.word	0x08011530
 800d18c:	08011530 	.word	0x08011530
 800d190:	08011530 	.word	0x08011530
 800d194:	08011534 	.word	0x08011534

0800d198 <__retarget_lock_init_recursive>:
 800d198:	4770      	bx	lr

0800d19a <__retarget_lock_acquire_recursive>:
 800d19a:	4770      	bx	lr

0800d19c <__retarget_lock_release_recursive>:
 800d19c:	4770      	bx	lr

0800d19e <strcpy>:
 800d19e:	4603      	mov	r3, r0
 800d1a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1a4:	f803 2b01 	strb.w	r2, [r3], #1
 800d1a8:	2a00      	cmp	r2, #0
 800d1aa:	d1f9      	bne.n	800d1a0 <strcpy+0x2>
 800d1ac:	4770      	bx	lr
	...

0800d1b0 <_free_r>:
 800d1b0:	b538      	push	{r3, r4, r5, lr}
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	2900      	cmp	r1, #0
 800d1b6:	d041      	beq.n	800d23c <_free_r+0x8c>
 800d1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1bc:	1f0c      	subs	r4, r1, #4
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	bfb8      	it	lt
 800d1c2:	18e4      	addlt	r4, r4, r3
 800d1c4:	f7ff fd4c 	bl	800cc60 <__malloc_lock>
 800d1c8:	4a1d      	ldr	r2, [pc, #116]	@ (800d240 <_free_r+0x90>)
 800d1ca:	6813      	ldr	r3, [r2, #0]
 800d1cc:	b933      	cbnz	r3, 800d1dc <_free_r+0x2c>
 800d1ce:	6063      	str	r3, [r4, #4]
 800d1d0:	6014      	str	r4, [r2, #0]
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1d8:	f7ff bd48 	b.w	800cc6c <__malloc_unlock>
 800d1dc:	42a3      	cmp	r3, r4
 800d1de:	d908      	bls.n	800d1f2 <_free_r+0x42>
 800d1e0:	6820      	ldr	r0, [r4, #0]
 800d1e2:	1821      	adds	r1, r4, r0
 800d1e4:	428b      	cmp	r3, r1
 800d1e6:	bf01      	itttt	eq
 800d1e8:	6819      	ldreq	r1, [r3, #0]
 800d1ea:	685b      	ldreq	r3, [r3, #4]
 800d1ec:	1809      	addeq	r1, r1, r0
 800d1ee:	6021      	streq	r1, [r4, #0]
 800d1f0:	e7ed      	b.n	800d1ce <_free_r+0x1e>
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	b10b      	cbz	r3, 800d1fc <_free_r+0x4c>
 800d1f8:	42a3      	cmp	r3, r4
 800d1fa:	d9fa      	bls.n	800d1f2 <_free_r+0x42>
 800d1fc:	6811      	ldr	r1, [r2, #0]
 800d1fe:	1850      	adds	r0, r2, r1
 800d200:	42a0      	cmp	r0, r4
 800d202:	d10b      	bne.n	800d21c <_free_r+0x6c>
 800d204:	6820      	ldr	r0, [r4, #0]
 800d206:	4401      	add	r1, r0
 800d208:	1850      	adds	r0, r2, r1
 800d20a:	4283      	cmp	r3, r0
 800d20c:	6011      	str	r1, [r2, #0]
 800d20e:	d1e0      	bne.n	800d1d2 <_free_r+0x22>
 800d210:	6818      	ldr	r0, [r3, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	6053      	str	r3, [r2, #4]
 800d216:	4408      	add	r0, r1
 800d218:	6010      	str	r0, [r2, #0]
 800d21a:	e7da      	b.n	800d1d2 <_free_r+0x22>
 800d21c:	d902      	bls.n	800d224 <_free_r+0x74>
 800d21e:	230c      	movs	r3, #12
 800d220:	602b      	str	r3, [r5, #0]
 800d222:	e7d6      	b.n	800d1d2 <_free_r+0x22>
 800d224:	6820      	ldr	r0, [r4, #0]
 800d226:	1821      	adds	r1, r4, r0
 800d228:	428b      	cmp	r3, r1
 800d22a:	bf04      	itt	eq
 800d22c:	6819      	ldreq	r1, [r3, #0]
 800d22e:	685b      	ldreq	r3, [r3, #4]
 800d230:	6063      	str	r3, [r4, #4]
 800d232:	bf04      	itt	eq
 800d234:	1809      	addeq	r1, r1, r0
 800d236:	6021      	streq	r1, [r4, #0]
 800d238:	6054      	str	r4, [r2, #4]
 800d23a:	e7ca      	b.n	800d1d2 <_free_r+0x22>
 800d23c:	bd38      	pop	{r3, r4, r5, pc}
 800d23e:	bf00      	nop
 800d240:	20001d64 	.word	0x20001d64

0800d244 <__sflush_r>:
 800d244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24c:	0716      	lsls	r6, r2, #28
 800d24e:	4605      	mov	r5, r0
 800d250:	460c      	mov	r4, r1
 800d252:	d454      	bmi.n	800d2fe <__sflush_r+0xba>
 800d254:	684b      	ldr	r3, [r1, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	dc02      	bgt.n	800d260 <__sflush_r+0x1c>
 800d25a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	dd48      	ble.n	800d2f2 <__sflush_r+0xae>
 800d260:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d262:	2e00      	cmp	r6, #0
 800d264:	d045      	beq.n	800d2f2 <__sflush_r+0xae>
 800d266:	2300      	movs	r3, #0
 800d268:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d26c:	682f      	ldr	r7, [r5, #0]
 800d26e:	6a21      	ldr	r1, [r4, #32]
 800d270:	602b      	str	r3, [r5, #0]
 800d272:	d030      	beq.n	800d2d6 <__sflush_r+0x92>
 800d274:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d276:	89a3      	ldrh	r3, [r4, #12]
 800d278:	0759      	lsls	r1, r3, #29
 800d27a:	d505      	bpl.n	800d288 <__sflush_r+0x44>
 800d27c:	6863      	ldr	r3, [r4, #4]
 800d27e:	1ad2      	subs	r2, r2, r3
 800d280:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d282:	b10b      	cbz	r3, 800d288 <__sflush_r+0x44>
 800d284:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d286:	1ad2      	subs	r2, r2, r3
 800d288:	2300      	movs	r3, #0
 800d28a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d28c:	6a21      	ldr	r1, [r4, #32]
 800d28e:	4628      	mov	r0, r5
 800d290:	47b0      	blx	r6
 800d292:	1c43      	adds	r3, r0, #1
 800d294:	89a3      	ldrh	r3, [r4, #12]
 800d296:	d106      	bne.n	800d2a6 <__sflush_r+0x62>
 800d298:	6829      	ldr	r1, [r5, #0]
 800d29a:	291d      	cmp	r1, #29
 800d29c:	d82b      	bhi.n	800d2f6 <__sflush_r+0xb2>
 800d29e:	4a2a      	ldr	r2, [pc, #168]	@ (800d348 <__sflush_r+0x104>)
 800d2a0:	410a      	asrs	r2, r1
 800d2a2:	07d6      	lsls	r6, r2, #31
 800d2a4:	d427      	bmi.n	800d2f6 <__sflush_r+0xb2>
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	6062      	str	r2, [r4, #4]
 800d2aa:	04d9      	lsls	r1, r3, #19
 800d2ac:	6922      	ldr	r2, [r4, #16]
 800d2ae:	6022      	str	r2, [r4, #0]
 800d2b0:	d504      	bpl.n	800d2bc <__sflush_r+0x78>
 800d2b2:	1c42      	adds	r2, r0, #1
 800d2b4:	d101      	bne.n	800d2ba <__sflush_r+0x76>
 800d2b6:	682b      	ldr	r3, [r5, #0]
 800d2b8:	b903      	cbnz	r3, 800d2bc <__sflush_r+0x78>
 800d2ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800d2bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2be:	602f      	str	r7, [r5, #0]
 800d2c0:	b1b9      	cbz	r1, 800d2f2 <__sflush_r+0xae>
 800d2c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2c6:	4299      	cmp	r1, r3
 800d2c8:	d002      	beq.n	800d2d0 <__sflush_r+0x8c>
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	f7ff ff70 	bl	800d1b0 <_free_r>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2d4:	e00d      	b.n	800d2f2 <__sflush_r+0xae>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	4628      	mov	r0, r5
 800d2da:	47b0      	blx	r6
 800d2dc:	4602      	mov	r2, r0
 800d2de:	1c50      	adds	r0, r2, #1
 800d2e0:	d1c9      	bne.n	800d276 <__sflush_r+0x32>
 800d2e2:	682b      	ldr	r3, [r5, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d0c6      	beq.n	800d276 <__sflush_r+0x32>
 800d2e8:	2b1d      	cmp	r3, #29
 800d2ea:	d001      	beq.n	800d2f0 <__sflush_r+0xac>
 800d2ec:	2b16      	cmp	r3, #22
 800d2ee:	d11e      	bne.n	800d32e <__sflush_r+0xea>
 800d2f0:	602f      	str	r7, [r5, #0]
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	e022      	b.n	800d33c <__sflush_r+0xf8>
 800d2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2fa:	b21b      	sxth	r3, r3
 800d2fc:	e01b      	b.n	800d336 <__sflush_r+0xf2>
 800d2fe:	690f      	ldr	r7, [r1, #16]
 800d300:	2f00      	cmp	r7, #0
 800d302:	d0f6      	beq.n	800d2f2 <__sflush_r+0xae>
 800d304:	0793      	lsls	r3, r2, #30
 800d306:	680e      	ldr	r6, [r1, #0]
 800d308:	bf08      	it	eq
 800d30a:	694b      	ldreq	r3, [r1, #20]
 800d30c:	600f      	str	r7, [r1, #0]
 800d30e:	bf18      	it	ne
 800d310:	2300      	movne	r3, #0
 800d312:	eba6 0807 	sub.w	r8, r6, r7
 800d316:	608b      	str	r3, [r1, #8]
 800d318:	f1b8 0f00 	cmp.w	r8, #0
 800d31c:	dde9      	ble.n	800d2f2 <__sflush_r+0xae>
 800d31e:	6a21      	ldr	r1, [r4, #32]
 800d320:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d322:	4643      	mov	r3, r8
 800d324:	463a      	mov	r2, r7
 800d326:	4628      	mov	r0, r5
 800d328:	47b0      	blx	r6
 800d32a:	2800      	cmp	r0, #0
 800d32c:	dc08      	bgt.n	800d340 <__sflush_r+0xfc>
 800d32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d336:	81a3      	strh	r3, [r4, #12]
 800d338:	f04f 30ff 	mov.w	r0, #4294967295
 800d33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d340:	4407      	add	r7, r0
 800d342:	eba8 0800 	sub.w	r8, r8, r0
 800d346:	e7e7      	b.n	800d318 <__sflush_r+0xd4>
 800d348:	dfbffffe 	.word	0xdfbffffe

0800d34c <_fflush_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	690b      	ldr	r3, [r1, #16]
 800d350:	4605      	mov	r5, r0
 800d352:	460c      	mov	r4, r1
 800d354:	b913      	cbnz	r3, 800d35c <_fflush_r+0x10>
 800d356:	2500      	movs	r5, #0
 800d358:	4628      	mov	r0, r5
 800d35a:	bd38      	pop	{r3, r4, r5, pc}
 800d35c:	b118      	cbz	r0, 800d366 <_fflush_r+0x1a>
 800d35e:	6a03      	ldr	r3, [r0, #32]
 800d360:	b90b      	cbnz	r3, 800d366 <_fflush_r+0x1a>
 800d362:	f7ff fd15 	bl	800cd90 <__sinit>
 800d366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d0f3      	beq.n	800d356 <_fflush_r+0xa>
 800d36e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d370:	07d0      	lsls	r0, r2, #31
 800d372:	d404      	bmi.n	800d37e <_fflush_r+0x32>
 800d374:	0599      	lsls	r1, r3, #22
 800d376:	d402      	bmi.n	800d37e <_fflush_r+0x32>
 800d378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d37a:	f7ff ff0e 	bl	800d19a <__retarget_lock_acquire_recursive>
 800d37e:	4628      	mov	r0, r5
 800d380:	4621      	mov	r1, r4
 800d382:	f7ff ff5f 	bl	800d244 <__sflush_r>
 800d386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d388:	07da      	lsls	r2, r3, #31
 800d38a:	4605      	mov	r5, r0
 800d38c:	d4e4      	bmi.n	800d358 <_fflush_r+0xc>
 800d38e:	89a3      	ldrh	r3, [r4, #12]
 800d390:	059b      	lsls	r3, r3, #22
 800d392:	d4e1      	bmi.n	800d358 <_fflush_r+0xc>
 800d394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d396:	f7ff ff01 	bl	800d19c <__retarget_lock_release_recursive>
 800d39a:	e7dd      	b.n	800d358 <_fflush_r+0xc>

0800d39c <__swhatbuf_r>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	460c      	mov	r4, r1
 800d3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a4:	2900      	cmp	r1, #0
 800d3a6:	b096      	sub	sp, #88	@ 0x58
 800d3a8:	4615      	mov	r5, r2
 800d3aa:	461e      	mov	r6, r3
 800d3ac:	da0d      	bge.n	800d3ca <__swhatbuf_r+0x2e>
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d3b4:	f04f 0100 	mov.w	r1, #0
 800d3b8:	bf14      	ite	ne
 800d3ba:	2340      	movne	r3, #64	@ 0x40
 800d3bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	6031      	str	r1, [r6, #0]
 800d3c4:	602b      	str	r3, [r5, #0]
 800d3c6:	b016      	add	sp, #88	@ 0x58
 800d3c8:	bd70      	pop	{r4, r5, r6, pc}
 800d3ca:	466a      	mov	r2, sp
 800d3cc:	f000 f848 	bl	800d460 <_fstat_r>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	dbec      	blt.n	800d3ae <__swhatbuf_r+0x12>
 800d3d4:	9901      	ldr	r1, [sp, #4]
 800d3d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d3da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d3de:	4259      	negs	r1, r3
 800d3e0:	4159      	adcs	r1, r3
 800d3e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3e6:	e7eb      	b.n	800d3c0 <__swhatbuf_r+0x24>

0800d3e8 <__smakebuf_r>:
 800d3e8:	898b      	ldrh	r3, [r1, #12]
 800d3ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3ec:	079d      	lsls	r5, r3, #30
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	d507      	bpl.n	800d404 <__smakebuf_r+0x1c>
 800d3f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	6123      	str	r3, [r4, #16]
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	6163      	str	r3, [r4, #20]
 800d400:	b003      	add	sp, #12
 800d402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d404:	ab01      	add	r3, sp, #4
 800d406:	466a      	mov	r2, sp
 800d408:	f7ff ffc8 	bl	800d39c <__swhatbuf_r>
 800d40c:	9f00      	ldr	r7, [sp, #0]
 800d40e:	4605      	mov	r5, r0
 800d410:	4639      	mov	r1, r7
 800d412:	4630      	mov	r0, r6
 800d414:	f7ff fba4 	bl	800cb60 <_malloc_r>
 800d418:	b948      	cbnz	r0, 800d42e <__smakebuf_r+0x46>
 800d41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d41e:	059a      	lsls	r2, r3, #22
 800d420:	d4ee      	bmi.n	800d400 <__smakebuf_r+0x18>
 800d422:	f023 0303 	bic.w	r3, r3, #3
 800d426:	f043 0302 	orr.w	r3, r3, #2
 800d42a:	81a3      	strh	r3, [r4, #12]
 800d42c:	e7e2      	b.n	800d3f4 <__smakebuf_r+0xc>
 800d42e:	89a3      	ldrh	r3, [r4, #12]
 800d430:	6020      	str	r0, [r4, #0]
 800d432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d436:	81a3      	strh	r3, [r4, #12]
 800d438:	9b01      	ldr	r3, [sp, #4]
 800d43a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d43e:	b15b      	cbz	r3, 800d458 <__smakebuf_r+0x70>
 800d440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d444:	4630      	mov	r0, r6
 800d446:	f000 f81d 	bl	800d484 <_isatty_r>
 800d44a:	b128      	cbz	r0, 800d458 <__smakebuf_r+0x70>
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	f023 0303 	bic.w	r3, r3, #3
 800d452:	f043 0301 	orr.w	r3, r3, #1
 800d456:	81a3      	strh	r3, [r4, #12]
 800d458:	89a3      	ldrh	r3, [r4, #12]
 800d45a:	431d      	orrs	r5, r3
 800d45c:	81a5      	strh	r5, [r4, #12]
 800d45e:	e7cf      	b.n	800d400 <__smakebuf_r+0x18>

0800d460 <_fstat_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d07      	ldr	r5, [pc, #28]	@ (800d480 <_fstat_r+0x20>)
 800d464:	2300      	movs	r3, #0
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	4611      	mov	r1, r2
 800d46c:	602b      	str	r3, [r5, #0]
 800d46e:	f7f9 f989 	bl	8006784 <_fstat>
 800d472:	1c43      	adds	r3, r0, #1
 800d474:	d102      	bne.n	800d47c <_fstat_r+0x1c>
 800d476:	682b      	ldr	r3, [r5, #0]
 800d478:	b103      	cbz	r3, 800d47c <_fstat_r+0x1c>
 800d47a:	6023      	str	r3, [r4, #0]
 800d47c:	bd38      	pop	{r3, r4, r5, pc}
 800d47e:	bf00      	nop
 800d480:	20001ea4 	.word	0x20001ea4

0800d484 <_isatty_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4d06      	ldr	r5, [pc, #24]	@ (800d4a0 <_isatty_r+0x1c>)
 800d488:	2300      	movs	r3, #0
 800d48a:	4604      	mov	r4, r0
 800d48c:	4608      	mov	r0, r1
 800d48e:	602b      	str	r3, [r5, #0]
 800d490:	f7f9 f988 	bl	80067a4 <_isatty>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d102      	bne.n	800d49e <_isatty_r+0x1a>
 800d498:	682b      	ldr	r3, [r5, #0]
 800d49a:	b103      	cbz	r3, 800d49e <_isatty_r+0x1a>
 800d49c:	6023      	str	r3, [r4, #0]
 800d49e:	bd38      	pop	{r3, r4, r5, pc}
 800d4a0:	20001ea4 	.word	0x20001ea4

0800d4a4 <_init>:
 800d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a6:	bf00      	nop
 800d4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4aa:	bc08      	pop	{r3}
 800d4ac:	469e      	mov	lr, r3
 800d4ae:	4770      	bx	lr

0800d4b0 <_fini>:
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b2:	bf00      	nop
 800d4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4b6:	bc08      	pop	{r3}
 800d4b8:	469e      	mov	lr, r3
 800d4ba:	4770      	bx	lr
